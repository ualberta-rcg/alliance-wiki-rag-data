<languages />
[[Category:Software]]
[https://en.wikipedia.org/wiki/Git Git] est un outil distribué rapide et sécuritaire pour la gestion de code source (voir le site  [http://git-scm.org gitscm.org]). L’application a été créée pour le projet Linux par [http://en.wikipedia.org/wiki/Linus_Torvalds Linus Torvalds] et est maintenue par Junio Hamano.

== Principe de fonctionnement ==
Contrairement aux outils de gestion de code source moins récents, Git fonctionne en mode décentralisé et les développeurs ne sont pas dépendants d'un dépôt central pour valider (<i>to commit</i>) des modifications. Chaque dépôt Git contient l’historique complet du projet. Chaque objet Git (<i>changeset</i>, fichier, répertoire) est une feuille d’un arbre à branches multiples. Le développement d'un projet avec Git est basé sur un modèle où une branche correspond à une fonctionnalité. Plusieurs itérations de la fonctionnalité peuvent être archivées avant que celle-ci ne soit fusionnée avec le tronc commun. Pour les détails sur le modèle de développement par branches, voyez [http://nvie.com/posts/a-successful-git-branching-model/ A successful Git branching model].

Une technique particulièrement intéressante est celle du picorage (<i>cherry picking</i>) qui consiste à prendre une partie d’une branche pour la fusionner avec une autre. 

== Utilisation ==
Règle générale, un développeur va

# configurer un environnement Git global,
# cloner ou créer un dépôt,
# effectuer des modifications,
# valider ces modifications,
# propager les modifications vers un autre dépôt.

Puisque Git est décentralisé, il n'y a pas nécessairement de dépôt de référence.

=== Sommaire des commandes ===
{| class="wikitable" 
|+ Commandes de base
! Commande
! Description
|-
| <tt>git config</tt>
| configurer Git
|-
| <tt>git init</tt>
| créer un nouveau dépôt 
|-
| <tt>git clone</tt>
| cloner un dépôt existant
|-
| <tt>git add</tt>
| ajouter un fichier ou un répertoire au dépôt
|-
| <tt>git rm</tt>
| supprimer un fichier ou un répertoire du dépôt
|-
| <tt>git commit</tt>
| valider (''to commit'') les modifications dans un dépôt 
|-
| <tt>git push</tt>
| propager les modifications validées vers un autre dépôt 
|-
| <tt>git pull</tt>
| récupérer les modifications d'un autre dépôt et les appliquer (''to merge'') à votre dépôt
|-
| <tt>git fetch</tt>
| récupérer les modifications d’un autre dépôt, sans les appliquer au vôtre 
|-
| <tt>git merge</tt>
| fusionner les modifications 
|}


{| class="wikitable" 
|+ Commandes pour voir les changements
! Commande
! Description
|-
| <tt>git blame</tt>
| afficher les derniers auteurs ayant modifié un fichier
|-
| <tt>git log</tt>
| afficher l’historique des validations
|-
| <tt>git diff</tt>
| comparer deux versions
|-
| <tt>git status</tt>
| afficher l'état des fichiers
|-
| <tt>git show</tt>
| afficher divers objets Git
|-
| <tt>git cat-file</tt>
| afficher le contenu, le type ou la taille des objets
|}


{| class="wikitable" 
|+ Commandes relatives aux branches, étiquettes et dépôt distants
! Commande
! Description
|-
| <tt>git branch</tt>
| gérer les branches de développement
|-
| <tt>git tag</tt>
| gérer les étiquettes des versions
|-
| <tt>git remote</tt>
| gérer les dépôts distants
|-
| <tt>git checkout</tt>
| extraire une branche ou un chemin
|-
| <tt>git reset</tt>
| changer la tête d'une branche
|}


{| class="wikitable" 
|+ Commandes relatives aux rustines
! Commande
! Description
|-
| <tt>git format-patch</tt>
| créer une rustine
|-
| <tt>git am</tt>
| appliquer une rustine
|-
| <tt>git send-email</tt>
| envoyer une rustine
|}


{| class="wikitable" 
|+ Autres commandes
! Commande
! Description
|-
| <tt>git bisect</tt>
| faire le diagnostic d'un problème
|-
| <tt>git gc</tt>
| nettoyer le dépôt
|-
| <tt>git rebase</tt>
| linéariser l’historique 
|-
| <tt>git grep</tt>
| chercher du contenu
|}

=== Configuration de l'environnement Git global ===
Le contenu de la présente section est inspiré de [https://swcarpentry.github.io/git-novice/02-setup.html Software Carpentry - ''Version Control with Git'']. Lorsque vous commencez à développer sur un nouveau système, vous devez configurer

* votre nom et votre adresse de courriel, qui seront associés à chaque opération de validation dans un dépôt de données. Si vos révisions sont poussées dans un dépôt public, cette information sera publique.
{{Commands
| git config --global user.name "First-name Last-name"
| git config --global user.email "email@address.ca"
}}
* Limitez-vous à quatre fils, autrement vos commandes <code>git clone</code> peuvent échouer.
{{Command|git config --global pack.threads 4}}
* Si vous ne connaissez pas bien <code>vi</code>, vous pouvez utiliser un autre éditeur de texte pour rédiger vos messages de validation.
{{Command|git config --global core.editor "nano -w"}}
* Vous pouvez aussi redéfinir le nom par défaut de la branche initiale, par exemple, <code>main</code>.
{{Command|git config --global init.defaultBranch main}}

Pour la liste de toutes les options configurées dans l'environnement global, utilisez la commande
{{Command|git config --list --global}}

<span id="Creating_or_cloning_a_repository"></span>
=== Création ou clonage d'un dépôt ===

La première étape est habituellement de créer votre propre dépôt ou de cloner un dépôt existant.

Pour créer un dépôt 
{{Commande|git init my-project}}

Pour cloner un dépôt 
{{Commande|git clone git://github.com/git/git.git}}

=== Validation et enregistrement des modifications ===
Quand le dépôt est prêt, changez de répertoire et éditez le fichier.
{{Commandes
| cd my-project
| nano file.txt
}}

Quand le travail est terminé, ajoutez le fichier 
{{Commande|git add file.txt}}
puis validez la modification.
{{Commande|git commit }}

Si le dépôt a été cloné, il est maintenant possible de pousser vos modifications vers le dépôt original avec
{{Commande|git push origin main}}

Dans cette dernière commande, ''origin'' est le dépôt distant et main est la branche courante qui sera poussée.

Avec les dépôts Git moins récents, vous devrez peut-être utiliser <tt>git push origin master</tt>.

== Hébergement de dépôts Git ==
[http://github.com GitHub] et [http://bitbucket.org Bitbucket] sont deux des principaux services d’hébergement de Git. Ils sont tous les deux disponibles pour les projets commerciaux comme pour les projets libres.


<span id="Troubleshooting"></span>
== Dépannage ==

=== Message d'erreur <i>Unable to create thread</i> ===
Si vous obtenez le message

 fatal: unable to create thread: Resource temporarily unavailable
 fatal: fetch-pack: invalid index-pack output

Cela est dû aux limites de ressources sur les nœuds de connexion des grappes. La solution est de limiter à deux le nombre de fils. Utilisez la commande suivante sur chaque grappe.

{{Command|git config --global pack.threads "2"}}