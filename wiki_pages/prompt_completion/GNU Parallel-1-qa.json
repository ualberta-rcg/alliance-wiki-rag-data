[
  {
    "question": "What is GNU Parallel?",
    "answer": "GNU Parallel is a tool designed for running many sequential tasks simultaneously on one or more nodes."
  },
  {
    "question": "What are the primary use cases for GNU Parallel?",
    "answer": "It is useful for running a large number of sequential tasks, especially if they are short or of variable durations, and for performing parameter sweeps."
  },
  {
    "question": "Where can users find more advanced documentation for GNU Parallel?",
    "answer": "For more advanced usage, users should refer to the official GNU Parallel documentation at http://www.gnu.org/software/parallel/man.html."
  },
  {
    "question": "How does `parallel` determine the number of tasks to run simultaneously by default?",
    "answer": "By default, `parallel` will run as many tasks as the number of cores allocated by the scheduler, maximizing resource usage."
  },
  {
    "question": "How can the default number of simultaneous tasks in GNU Parallel be changed?",
    "answer": "Users can change this behavior using the `--jobs` option, followed by the desired number of simultaneous tasks."
  },
  {
    "question": "What happens when a task finishes while GNU Parallel is running?",
    "answer": "When one task finishes, a new task will automatically be started by `parallel` in its stead, always keeping the maximum number of tasks running."
  },
  {
    "question": "What symbols does Parallel use as parameters for the command to be run?",
    "answer": "Parallel uses curly brackets (`{}`) as parameters for the command to be run."
  },
  {
    "question": "How do you use Parallel to run `gzip` on all text files in a directory?",
    "answer": "You can execute `ls *.txt | parallel gzip {}`."
  },
  {
    "question": "What is an alternative syntax to curly brackets for passing arguments to GNU Parallel?",
    "answer": "An alternative syntax is to use `:::`."
  },
  {
    "question": "What does GNU Parallel refer to the commands it executes as?",
    "answer": "GNU Parallel refers to each of the commands executed as 'jobs'."
  },
  {
    "question": "Why can the term 'jobs' be confusing when used with GNU Parallel?",
    "answer": "The term 'jobs' can be confusing because on many systems, a 'job' is a batch script run by a scheduler, whereas GNU Parallel's 'jobs' are often considered 'subjobs' within that larger system job."
  },
  {
    "question": "How can you use multiple arguments with GNU Parallel?",
    "answer": "You can use multiple arguments by enumerating them, for example, `parallel echo {1} {2} ::: $(seq 1 3) ::: $(seq 2 3)`."
  },
  {
    "question": "What syntax is used to generate an argument list from the content of a file in GNU Parallel?",
    "answer": "The syntax `::::` takes the content of a file to generate the list of values for the arguments."
  },
  {
    "question": "How do you use the content of `mylist.txt` as arguments for an `echo` command with GNU Parallel?",
    "answer": "You can use `parallel echo {1} :::: mylist.txt`."
  },
  {
    "question": "How can GNU Parallel interpret the lines of a file as subjobs to be run in parallel?",
    "answer": "GNU Parallel can interpret the lines of a file as actual subjobs by using redirection, for example, `parallel < my_commands.txt`."
  },
  {
    "question": "When is using file redirection (`parallel < my_commands.txt`) particularly useful?",
    "answer": "This usage mode is particularly useful if the subjobs contain symbols that are special to GNU Parallel, or if the subcommands are to contain a few commands (e.g., `cd dir1 && ./executable`)."
  },
  {
    "question": "What does the example Slurm script `run_gnuparallel_test.sh` do with `my_commands.txt`?",
    "answer": "The script runs the list of commands in `my_commands.txt` sequentially using 4 CPUs, starting a new command as soon as one completes to maintain 4 commands running simultaneously."
  },
  {
    "question": "What option is used in the `run_gnuparallel_test.sh` script to log parallel execution details?",
    "answer": "The `--joblog parallel.log` option is used to create a log file named `parallel.log`."
  },
  {
    "question": "Is GNU Parallel recommended for use across multiple nodes?",
    "answer": "No, GNU Parallel is not recommended for use across multiple nodes, especially for many short jobs, because it can have problems starting SSH sessions."
  },
  {
    "question": "Why is using GNU Parallel across multiple nodes problematic?",
    "answer": "It needs to start an SSH session on remote nodes, which often requires several seconds and may hang."
  },
  {
    "question": "If one chooses to use GNU Parallel on multiple nodes, what option should be added?",
    "answer": "If using GNU Parallel on multiple nodes, a delay between jobs of 30 seconds or more should be added using the option `--sshdelay 30`."
  }
]