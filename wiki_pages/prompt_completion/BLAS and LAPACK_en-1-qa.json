[
  {
    "question": "What are BLAS and LAPACK?",
    "answer": "BLAS (Basic Linear Algebra Subprogram) and LAPACK (Linear Algebra PACK) are two of the most commonly used libraries in advanced research computing."
  },
  {
    "question": "What kind of operations are BLAS and LAPACK used for?",
    "answer": "They are used for vector and matrix operations that are commonly found in a plethora of algorithms."
  },
  {
    "question": "Beyond being libraries, what else do BLAS and LAPACK define?",
    "answer": "They define a standard programming interface."
  },
  {
    "question": "What is a programming interface in this context?",
    "answer": "A programming interface is a set of function definitions that can be called to accomplish specific computation, such as the dot product of two vectors or the matrix product of two hermitian matrices."
  },
  {
    "question": "Are there multiple implementations of BLAS and LAPACK?",
    "answer": "Yes, beside the reference implementation done by Netlib, there exist a large number of implementations of these two standards."
  },
  {
    "question": "Does the performance of BLAS and LAPACK implementations vary?",
    "answer": "Yes, the performance of these implementations can vary widely depending on the hardware that is running them."
  },
  {
    "question": "Which BLAS/LAPACK implementation performs best on Intel processors?",
    "answer": "The implementation provided by the Intel Math Kernel Library (Intel MKL) performs best in most situations on Intel processors."
  },
  {
    "question": "Is Intel MKL proprietary or open source?",
    "answer": "Intel MKL is proprietary."
  },
  {
    "question": "What is an open-source alternative to Intel MKL that is preferred in some situations?",
    "answer": "OpenBLAS is an open source implementation preferred in some situations."
  },
  {
    "question": "Which BLAS/LAPACK implementation performs better on AMD processors?",
    "answer": "BLIS is an open source implementation that performs better on AMD processors."
  },
  {
    "question": "What were some BLAS projects that are no longer maintained?",
    "answer": "Gotoblas and ATLAS BLAS are projects that are no longer maintained."
  },
  {
    "question": "What is the problem with testing different BLAS/LAPACK implementations for performance?",
    "answer": "Testing which implementation performs best for a given code and hardware usually requires recompiling software, which is a problem for portable software environments."
  },
  {
    "question": "How can the issue of recompiling software to test different BLAS/LAPACK implementations be fixed?",
    "answer": "This can be fixed by using FlexiBLAS."
  },
  {
    "question": "What is FlexiBLAS?",
    "answer": "FlexiBLAS is an abstraction layer that allows one to swap which implementation of BLAS and LAPACK is used at runtime, rather than at compile time."
  },
  {
    "question": "What was the recommended BLAS/LAPACK implementation in the past few years and why?",
    "answer": "For the past few years, Intel MKL was recommended as a reference implementation because the clusters only had Intel processors."
  },
  {
    "question": "Why did the recommendation for BLAS/LAPACK implementations change?",
    "answer": "The recommendation changed with the arrival of Narval, which is built with AMD processors."
  },
  {
    "question": "What is the current recommendation when compiling code for BLAS/LAPACK?",
    "answer": "The current recommendation is to use FlexiBLAS when compiling code."
  },
  {
    "question": "How is the FlexiBLAS module configured to offer optimal performance on different processors?",
    "answer": "The FlexiBLAS module is configured such that Intel MKL will be used except when using AMD processors, in which case BLIS will be used."
  },
  {
    "question": "How do you generally compile against FlexiBLAS?",
    "answer": "This can generally be fixed by setting the linking options to use -lflexiblas for BLAS and for LAPACK."
  },
  {
    "question": "Where can linking options for FlexiBLAS typically be found or passed?",
    "answer": "You will typically find these options in your Makefile, or be able to pass them as parameters to configure or cmake."
  },
  {
    "question": "Which versions of CMake can automatically find FlexiBLAS?",
    "answer": "Versions 3.19 and higher of CMake can find FlexiBLAS automatically."
  },
  {
    "question": "What CMake modules must be loaded to use automatic FlexiBLAS detection?",
    "answer": "You must load one of the cmake/3.20.1 or cmake/3.21.4 modules to use such a version."
  },
  {
    "question": "What is the main benefit of using FlexiBLAS regarding runtime?",
    "answer": "The main benefit of using FlexiBLAS is the ability to change the implementation backend at run time."
  },
  {
    "question": "How do you change the BLAS/LAPACK implementation at runtime with FlexiBLAS?",
    "answer": "You change the implementation backend at run time by setting the environment variable FLEXIBLAS."
  },
  {
    "question": "What are some of the available FlexiBLAS implementations at the time of writing?",
    "answer": "At the time of writing, four implementations are available: netlib, blis, imkl and openblas."
  },
  {
    "question": "How can you get the full list of available FlexiBLAS implementations?",
    "answer": "The full list can be obtained by running the command 'flexiblas list'."
  },
  {
    "question": "What is the default FlexiBLAS setting on Narval?",
    "answer": "On Narval, FLEXIBLAS=blis is set to use BLIS by default."
  },
  {
    "question": "What is the default FlexiBLAS setting on other clusters mentioned?",
    "answer": "On other clusters, FLEXIBLAS is left undefined, which defaults to using Intel MKL."
  },
  {
    "question": "Is it still possible to use Intel MKL directly, even if FlexiBLAS is recommended?",
    "answer": "Yes, although FlexiBLAS is recommended, it is still possible to use Intel MKL directly."
  },
  {
    "question": "How do you use Intel MKL directly with Intel compilers?",
    "answer": "If you are using one of the Intel compilers (e.g. ifort, icc, icpc), replace -lblas and -llapack in your compiler and linker options with either -mkl=sequential or -mkl."
  },
  {
    "question": "What is the difference between -mkl=sequential and -mkl when using Intel compilers for MKL?",
    "answer": "-mkl=sequential will not use internal threading, while -mkl will use internal threading."
  },
  {
    "question": "What tool can help find the correct compiler and linker options for Intel MKL when using a non-Intel compiler?",
    "answer": "Intel provides a tool called the MKL Link Advisor to help you find the correct compiler and linker options for non-Intel compilers like the GNU Compiler Collection."
  },
  {
    "question": "When is the MKL Link Advisor tool also useful when using Intel compilers?",
    "answer": "The MKL Link Advisor tool is also useful if you receive 'undefined reference' errors while using Intel compilers and -mkl."
  }
]