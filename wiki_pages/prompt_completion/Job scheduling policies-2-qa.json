[
  {
    "question": "What determines the priority of jobs belonging to a specific research group compared to other groups?",
    "answer": "The priority is determined solely by the group\u2019s fairshare, and not by the users' fairshare within the group."
  },
  {
    "question": "What is an 'association' in Slurm documentation?",
    "answer": "In Slurm documentation, an 'association' refers to either a project by itself or a user within a project."
  },
  {
    "question": "How is the 'Account' identified in Slurm output for a project?",
    "answer": "The 'Account' is the project name with `_cpu` or `_gpu` appended."
  },
  {
    "question": "Does the first line of the `sshare` command output include a user name?",
    "answer": "No, the first line of `sshare` command output, which describes the project's status, does not include a user name."
  },
  {
    "question": "What does `RawShares` represent?",
    "answer": "`RawShares` is proportional to the number of CPU-years granted to the project for use on the cluster in a Resource Allocation Competition."
  },
  {
    "question": "How are `RawShares` handled for inactive accounts?",
    "answer": "For numeric reasons, inactive accounts (those without pending or running jobs) are given only one share."
  },
  {
    "question": "How long might it take for an inactive account to display the expected `RawShares` and `LevelFS` after a job submission?",
    "answer": "If you submit a job with an inactive account, it may take up to 15 minutes before the account shows the expected `RawShares` and `LevelFS`."
  },
  {
    "question": "How is `NormShares` calculated?",
    "answer": "`NormShares` is the number of shares assigned to the user or account divided by the total number of assigned shares within the level."
  },
  {
    "question": "What does `NormShares` signify for a project?",
    "answer": "For a project, `NormShares` represents the fraction of shares held by that project relative to all other projects."
  },
  {
    "question": "What does `NormShares` signify for a user within a project?",
    "answer": "For a user, `NormShares` represents the fraction of shares held by that member relative to other members within the project."
  },
  {
    "question": "How is `RawUsage` calculated?",
    "answer": "`RawUsage` is calculated from the total number of resource-seconds (CPU time, GPU time, and memory) that have been charged to an account."
  },
  {
    "question": "How does past usage affect `RawUsage` and priority?",
    "answer": "Past usage is discounted with a half-life of one week, so usage from more than a few weeks in the past will have only a small effect on priority."
  },
  {
    "question": "What does `EffectvUsage` indicate?",
    "answer": "`EffectvUsage` is an association's usage normalized with its parent, showing the project's usage relative to other projects, or a user's relative to other users in that project."
  },
  {
    "question": "How is `LevelFS` calculated?",
    "answer": "`LevelFS` is calculated as `NormShares / EffectvUsage`."
  },
  {
    "question": "What does a `LevelFS` value between 0 and 1 indicate?",
    "answer": "A `LevelFS` value between 0 and 1 indicates that an association is over-served."
  },
  {
    "question": "What does a `LevelFS` value greater than 1 indicate?",
    "answer": "A `LevelFS` value greater than 1 indicates that an association is under-served."
  },
  {
    "question": "What `LevelFS` value do associations with no usage receive?",
    "answer": "Associations with no usage receive the highest possible `LevelFS` value, which is infinity."
  },
  {
    "question": "What `LevelFS` value do inactive accounts have?",
    "answer": "For inactive accounts, the `LevelFS` value equals a meaningless small number close to 0.0001."
  },
  {
    "question": "What does a `LevelFS` near 1.0 signify for a project?",
    "answer": "A `LevelFS` near 1.0 indicates that a project is consistently using its target amount."
  },
  {
    "question": "How does a project's `LevelFS` affect job priority if it uses more than its target usage?",
    "answer": "If a project uses more than its target, its `LevelFS` will be below 1.0, and the priority of new jobs belonging to that project will be low."
  },
  {
    "question": "How does a project's `LevelFS` affect job priority if it uses less than its target usage?",
    "answer": "If a project uses less than its target usage, its `LevelFS` will be greater than 1.0, and new jobs will enjoy high priority."
  },
  {
    "question": "Which types of parallel calculations benefit from whole-node scheduling?",
    "answer": "Parallel calculations which can efficiently use 32 or more cores may benefit from being scheduled on whole nodes."
  },
  {
    "question": "What actions are considered an abuse of the system related to whole-node scheduling?",
    "answer": "Requesting an inefficient number of processors for a calculation simply to take advantage of whole-node scheduling, or submitting whole-node jobs that underutilize memory, are considered abuses of the system."
  },
  {
    "question": "Can users with large amounts of serial work use whole-node scheduling?",
    "answer": "Yes, if they can efficiently use tools like GNU Parallel or GLOST to pack serial processes onto a single node."
  }
]