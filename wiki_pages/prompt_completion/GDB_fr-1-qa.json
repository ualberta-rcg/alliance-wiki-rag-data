[
  {
    "question": "What is GDB?",
    "answer": "GDB (GNU Project Debugger) is a debugger for investigating problems present in software."
  },
  {
    "question": "What is the primary use of a debugger like GDB?",
    "answer": "With a debugger, it is possible to quickly find the cause of a problem in software, especially segmentation faults."
  },
  {
    "question": "Which tool is recommended for finding memory problems like memory leaks?",
    "answer": "If you want to find a memory problem (for example, a memory leak), it is advised to use Valgrind."
  },
  {
    "question": "What option should be used when compiling a program for debugging with GDB?",
    "answer": "Compile with the option `-g` to allow the debugger to decode symbols and provide more information on the source of the bug."
  },
  {
    "question": "How do you start debugging a program named 'program' directly with GDB?",
    "answer": "Execute `gdb ./program` and then type `run` at the `(gdb)` prompt."
  },
  {
    "question": "What command in GDB displays the call stack?",
    "answer": "The command `bt` (short for `backtrace`) displays the call stack."
  },
  {
    "question": "What is the cause of the segmentation fault in the example 'program.cpp' provided?",
    "answer": "The error is caused by line 15, where the code accesses index 1000000, but the array (vector) only contains 1000 elements."
  },
  {
    "question": "When is it useful to find the cause of a segmentation fault using a core file instead of direct debugging?",
    "answer": "This is useful for a bug that occurs a long time after the program begins execution, without using the debugger directly."
  },
  {
    "question": "How do you enable the generation of core dump files?",
    "answer": "To enable the creation of core files, execute the command `ulimit -c unlimited`."
  },
  {
    "question": "How do you debug a program using a generated core file?",
    "answer": "Use `gdb -q ./program` and then at the GDB prompt, load the core file with `core-file <core_filename>`, for example, `core-file core.18246`."
  },
  {
    "question": "What is required before attaching GDB to an existing process?",
    "answer": "Before attaching GDB to an existing process, you must first find the process number (PID)."
  },
  {
    "question": "How can you find the process ID (PID) of a running Firefox instance?",
    "answer": "You can find the PID using the command `ps aux | grep firefox | grep -v grep`."
  },
  {
    "question": "How do you attach GDB to an existing process with PID 12691?",
    "answer": "You can attach GDB directly using the command `gdb attach 12691`."
  },
  {
    "question": "How do you quit a GDB debugging session when attached to a process?",
    "answer": "Type `quit` at the `(gdb)` prompt, and then confirm with 'y' when asked if you want to quit anyway."
  },
  {
    "question": "What is the GDB command to start program execution?",
    "answer": "The GDB command is `run` (or `r`)."
  },
  {
    "question": "What is the GDB command to stop program execution?",
    "answer": "The GDB command is `kill` (or `k`)."
  },
  {
    "question": "What GDB command is used to create a breakpoint?",
    "answer": "The `break` command (or `b`) is used to create a breakpoint, specifying `src.c:line_number` or a function name."
  },
  {
    "question": "How do you set a watchpoint to stop execution when a variable changes in GDB?",
    "answer": "Use the `watch` command followed by the variable's name."
  },
  {
    "question": "What GDB command continues execution after a breakpoint?",
    "answer": "The `continue` command (or `c`) continues execution after a breakpoint."
  },
  {
    "question": "How do you execute the next operation in GDB?",
    "answer": "Use the `step` command (or `s`) to execute the next operation."
  },
  {
    "question": "How do you display the content of a variable in GDB?",
    "answer": "Use the `print` command (or `p`) followed by the variable's name."
  },
  {
    "question": "What GDB command is used to display a specific line of code?",
    "answer": "The `list` command (or `l`) followed by `src.c:number` displays the specified line of code."
  },
  {
    "question": "Why might GDB not display C++ STL structures well by default?",
    "answer": "By default, GDB doesn't display the content of C++ standard library (STL) structures very well."
  },
  {
    "question": "What is a simple solution to improve GDB's display of STL structures?",
    "answer": "A simple solution is to copy the file `dbinit_stl_views-1.03.txt` into your home directory under the name `~/.gdbinit`."
  }
]