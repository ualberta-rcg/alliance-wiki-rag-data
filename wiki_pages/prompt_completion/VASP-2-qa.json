[
  {
    "question": "What executable files are available for VASP-4.6 and what are their purposes?",
    "answer": "For VASP-4.6, the executable files are:\n- `vasp` for standard NVT calculations with non-gamma k points.\n- `vasp-gamma` for standard NVT calculations with only gamma points.\n- `makeparam` to estimate how much memory is required to run VASP for a particular cluster."
  },
  {
    "question": "Which executable files are available for VASP versions 5.4.1, 5.4.4, and 6.1.0 without CUDA support?",
    "answer": "For VASP versions 5.4.1, 5.4.4, and 6.1.0 without CUDA support, the executable files are:\n- `vasp_std` for standard NVT calculations with non-gamma k points.\n- `vasp_gam` for standard NVT calculations with only gamma points.\n- `vasp_ncl` for NPT calculations with non-gamma k points."
  },
  {
    "question": "What executable files are used for VASP-5.4.4 and 6.1.0 when CUDA support is enabled?",
    "answer": "For VASP-5.4.4 and 6.1.0 with CUDA support, the executable files are:\n- `vasp_gpu` for standard NVT calculations with both gamma and non-gamma k points.\n- `vasp_gpu_ncl` for NPT calculations with both gamma and non-gamma k points."
  },
  {
    "question": "What extensions have been incorporated into VASP?",
    "answer": "Two extensions have been incorporated: Transition State Tools (http://theory.cm.utexas.edu/vtsttools/) and VASPsol (https://github.com/henniggroup/VASPsol)."
  },
  {
    "question": "What should I do if a specific VASP version I need is not available as a pre-built option?",
    "answer": "If you need a version of VASP that is not listed, you can either build it yourself or contact Technical support and ask that it be built and installed."
  },
  {
    "question": "What is the main recommendation for using Vasp-GPU executables?",
    "answer": "Vasp-GPU executables run on both GPUs and CPUs. Since GPU calculations are much more expensive, it is highly recommended to perform a benchmark using one or two GPUs for your specific system to ensure maximum performance and avoid wasting computer resources."
  },
  {
    "question": "What were the findings of the Vasp-GPU benchmark conducted on a Si crystal?",
    "answer": "A benchmark of a Si crystal with 256 Si-atoms showed that the performance for GPU=1,2 with CPU=1 is more than 5 times better compared to GPU=0 with CPU=1. However, using GPU=2 instead of GPU=1 showed little additional performance gain, with GPU=2 utilization observed to be around 50%."
  },
  {
    "question": "Provide an example of a Slurm job script for running a standard VASP job.",
    "answer": "An example Slurm job script for running VASP in parallel is:\n```sh\n#!/bin/bash\n#SBATCH --account=<ACCOUNT>\n#SBATCH --ntasks=4             # number of MPI processes\n#SBATCH --mem-per-cpu=1024M    # memory\n#SBATCH --time=0-00:05         # time (DD-HH:MM)\nmodule load intel/2020.1.217  intelmpi/2019.7.217 vasp/<VERSION>\nmpirun <VASP>\n```\nThis script requests four CPU cores and a total of 4096MB memory (4x1024MB)."
  },
  {
    "question": "How should the placeholders `<ACCOUNT>`, `<VERSION>`, and `<VASP>` be filled in a VASP job script?",
    "answer": "`<ACCOUNT>` should be replaced with your Slurm account name. `<VERSION>` is the VASP version you intend to use (e.g., 4.6, 5.4.1, 5.4.4, or 6.1.0). `<VASP>` is the name of the executable program for your chosen VASP version and calculation type, as listed in the \"Executable programs\" section."
  },
  {
    "question": "How can I submit a VASP job script?",
    "answer": "To submit a VASP job from the directory where your input files and job script (e.g., `vasp_job.sh`) are located, use the command: `sbatch vasp_job.sh`."
  },
  {
    "question": "What are the requirements for a VASP job script utilizing GPUs?",
    "answer": "A VASP job script utilizing GPUs would look like this:\n```sh\n#!/bin/bash\n#SBATCH --account=<ACCOUNT>\n#SBATCH --cpus-per-task=1      # number of CPU processes\n#SBATCH --gres=gpu:p100:1      # Number of GPU type:p100 (valid type only for cedar)\n#SBATCH --mem=3GB              # memory\n#SBATCH --time=0-00:05         # time (DD-HH:MM)\nmodule load intel/2020.1.217  cuda/11.0  openmpi/4.0.3 vasp/<VERSION>\nmpirun <VASP>\n```\nThis script requests one CPU core, 3GB of memory, and one GPU of type p100, which is specifically valid for Cedar."
  },
  {
    "question": "What input files does VASP require, and what is the recommended way to organize them?",
    "answer": "VASP requires four input files: INCAR, KPOINTS, POSCAR, and POTCAR. It is recommended to prepare these input files in a separate directory for each job."
  },
  {
    "question": "How can I estimate the memory needed for my VASP job before running it?",
    "answer": "To estimate memory, prepare all your input files, then run the `makeparam` executable in an interactive job submission. Use the result from `makeparam` as the required memory for your next run. For more accurate estimates for future jobs, you can check the maximum stack size used by completed jobs and use that as the memory requirement per processor."
  },
  {
    "question": "What consideration should be made when using 32 or more CPU cores for a VASP job?",
    "answer": "If you intend to use 32 or more CPU cores for your VASP job, you should read about whole-node scheduling policies."
  }
]