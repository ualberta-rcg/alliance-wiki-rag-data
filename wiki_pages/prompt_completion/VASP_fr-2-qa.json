[
  {
    "question": "What executable should be used for standard NVT calculations with non-gamma k-points when running VASP 4.6?",
    "answer": "For VASP 4.6, the `vasp` executable is used for standard NVT calculations with non-gamma k-points."
  },
  {
    "question": "Which executable is specific to standard NVT calculations using only gamma k-points in VASP 4.6?",
    "answer": "`vasp-gamma` is the executable for standard NVT calculations with only gamma k-points in VASP 4.6."
  },
  {
    "question": "How can one estimate the memory required for VASP operations on a cluster using VASP 4.6?",
    "answer": "The `makeparam` executable can be used to estimate the memory required for VASP operations on a particular cluster with VASP 4.6."
  },
  {
    "question": "What are the available executables for VASP versions 5.4.1, 5.4.4, and 6.1.0 when CUDA is not used?",
    "answer": "For VASP 5.4.1, 5.4.4, and 6.1.0 (without CUDA), the available executables are `vasp_std`, `vasp_gam`, and `vasp_ncl`."
  },
  {
    "question": "Which executable is for NPT calculations with non-gamma k-points in VASP versions 5.4.1, 5.4.4, and 6.1.0 (without CUDA)?",
    "answer": "`vasp_ncl` is used for NPT calculations with non-gamma k-points in VASP versions 5.4.1, 5.4.4, and 6.1.0 (without CUDA)."
  },
  {
    "question": "What VASP executables are available for versions 5.4.4 and 6.1.0 when CUDA is enabled?",
    "answer": "For VASP-5.4.4 and 6.1.0 (with CUDA), the available executables are `vasp_gpu` and `vasp_gpu_ncl`."
  },
  {
    "question": "Which executable supports NPT calculations with both gamma and non-gamma k-points when using VASP-5.4.4 or 6.1.0 with CUDA?",
    "answer": "`vasp_gpu_ncl` is used for NPT calculations with gamma and non-gamma k-points when running VASP-5.4.4 or 6.1.0 with CUDA."
  },
  {
    "question": "What extensions are incorporated into VASP?",
    "answer": "The Transition State Tools and VASPsol extensions are incorporated into VASP."
  },
  {
    "question": "What options are available if a desired VASP version is not offered?",
    "answer": "If the VASP version you want to use is not offered, you can either build it yourself or ask the technical support to build and install it."
  },
  {
    "question": "Can Vasp-GPU executables be run on both CPUs and GPUs?",
    "answer": "Yes, Vasp-GPU executables can be used on both CPUs and GPUs."
  },
  {
    "question": "What is recommended to ensure optimal utilization of GPU resources with VASP?",
    "answer": "It is strongly recommended to perform benchmarking with one or two GPUs to ensure optimal utilization, especially since base calculations on GPUs can be more costly."
  },
  {
    "question": "In the benchmark example of a Si crystal with 256 atoms and 1 CPU, how much better was the performance with 1 or 2 GPUs compared to no GPUs?",
    "answer": "With 1 CPU, the performance with 1 or 2 GPUs was more than 5 times better than without GPUs in the Si crystal simulation example."
  },
  {
    "question": "What was observed about the performance difference between using 1 GPU and 2 GPUs in the VASP benchmark?",
    "answer": "Between 1 and 2 GPUs, the performance varied little; in fact, the utilization of 2 GPUs was about 50% in the monitoring system."
  },
  {
    "question": "What is the purpose of the `vasp_job.sh` example script?",
    "answer": "The `vasp_job.sh` script is an example task script that executes VASP in parallel with the Slurm scheduler."
  },
  {
    "question": "How many MPI processes does the `vasp_job.sh` example script request?",
    "answer": "The `vasp_job.sh` script requests four MPI processes (`#SBATCH --ntasks=4`)."
  },
  {
    "question": "What memory allocation per CPU is specified in the `vasp_job.sh` example script?",
    "answer": "The `vasp_job.sh` example script specifies 1024MB of memory per CPU (`#SBATCH --mem-per-cpu=1024M`)."
  },
  {
    "question": "What module load command is used in the `vasp_job.sh` script for VASP?",
    "answer": "The `vasp_job.sh` script uses `module load intel/2020.1.217 intelmpi/2019.7.217 vasp/<VERSION>`."
  },
  {
    "question": "What are the four input files that VASP uses?",
    "answer": "VASP uses four input files: INCAR, KPOINTS, POSCAR, and POTCAR."
  },
  {
    "question": "What is the recommended practice for organizing input files for VASP tasks?",
    "answer": "It is preferable to prepare the input files in a different directory for each task."
  },
  {
    "question": "How do you submit a VASP job script from its directory?",
    "answer": "To submit a VASP job script from its directory, use `sbatch vasp_job.sh`."
  },
  {
    "question": "How can one estimate the memory required for a VASP task if the amount is unknown?",
    "answer": "If you are unsure of the memory required for your task, prepare your input files and execute `makeparam` in an interactive task."
  },
  {
    "question": "What should be consulted for tasks requiring 32 cores or more?",
    "answer": "For tasks requiring 32 cores or more, consult the job scheduling policy, specifically the section on 'N\u0153uds entiers ou c\u0153urs'."
  },
  {
    "question": "What is the purpose of the `vasp_gpu_job.sh` script?",
    "answer": "The `vasp_gpu_job.sh` script is an example for executing VASP tasks using GPUs."
  },
  {
    "question": "How many CPU processes does the `vasp_gpu_job.sh` script request per task?",
    "answer": "The `vasp_gpu_job.sh` script requests one CPU process per task (`#SBATCH --cpus-per-task=1`)."
  },
  {
    "question": "How does the `vasp_gpu_job.sh` script specify GPU resources?",
    "answer": "The `vasp_gpu_job.sh` script specifies GPU resources using `#SBATCH --gres=gpu:p100:1`, requesting one p100 type GPU."
  },
  {
    "question": "For which specific cluster is the p100 GPU type mentioned as valid in the `vasp_gpu_job.sh` script?",
    "answer": "The p100 GPU type is mentioned as valid only for Cedar in the `vasp_gpu_job.sh` script."
  },
  {
    "question": "What module load command is used in the `vasp_gpu_job.sh` script for VASP with CUDA?",
    "answer": "The `vasp_gpu_job.sh` script uses `module load intel/2020.1.217 cuda/11.0 openmpi/4.0.3 vasp/<VERSION>`."
  }
]