[
  {
    "question": "How can VASP modules be loaded on Trillium?",
    "answer": "To load VASP modules on Trillium, use the following commands for vasp/6.4.2: 'module load StdEnv/2023 intel/2023.2.1 intelmpi/2021.9.0 hdf5/1.14.2', then 'module use /opt/software/commercial/modules', and finally 'module load vasp/6.4.2'."
  },
  {
    "question": "Where can users find general usage information for Trillium?",
    "answer": "For general usage of Trillium, please refer to the Trillium Quickstart page."
  },
  {
    "question": "Where are VASP pseudopotentials stored on Cedar and Graham?",
    "answer": "VASP pseudopotentials are located in '$EBROOTVASP/pseudopotentials/' on Cedar and Graham."
  },
  {
    "question": "What is required to access VASP pseudopotentials?",
    "answer": "The VASP module must be loaded to access the pseudopotentials."
  },
  {
    "question": "What is the source of the VASP pseudopotentials?",
    "answer": "All pseudopotentials were downloaded from the official VASP website."
  },
  {
    "question": "What executable programs are available for VASP 4.6?",
    "answer": "For VASP 4.6, the available executables are 'vasp' (for standard NVT calculations with non-gamma k-points), 'vasp-gamma' (for standard NVT calculations with only gamma k-points), and 'makeparam' (to estimate memory requirements)."
  },
  {
    "question": "What is the 'vasp' executable used for in VASP 4.6?",
    "answer": "In VASP 4.6, 'vasp' is used for standard NVT calculations with non-gamma k-points."
  },
  {
    "question": "What is 'makeparam' used for in VASP 4.6?",
    "answer": "'makeparam' in VASP 4.6 is used to estimate the memory required to operate VASP on a particular cluster."
  },
  {
    "question": "Which executables are available for VASP 5.4.1, 5.4.4, and 6.1.0 without CUDA?",
    "answer": "For VASP 5.4.1, 5.4.4, and 6.1.0 (without CUDA), the executables available are 'vasp_std' (for standard NVT calculations and non-gamma k-points), 'vasp_gam' (for standard NVT calculations with only gamma k-points), and 'vasp_ncl' (for NPT calculations with non-gamma k-points)."
  },
  {
    "question": "What executables are available for VASP 5.4.4 and 6.1.0 with CUDA support?",
    "answer": "For VASP-5.4.4 and 6.1.0 (with CUDA), the executables available are 'vasp_gpu' (for standard NVT calculations with gamma and non-gamma K-points) and 'vasp_gpu_ncl' (for NPT calculations with gamma and non-gamma K-points)."
  },
  {
    "question": "What extensions are incorporated into VASP?",
    "answer": "The two extensions incorporated into VASP are Transition State Tools and VASPsol."
  },
  {
    "question": "What should be done if a desired VASP version is not offered?",
    "answer": "If a desired VASP version is not offered, you can either build it yourself or request the technical support to build and install it."
  },
  {
    "question": "Can Vasp-GPU executables be used on both CPUs and GPUs?",
    "answer": "Yes, Vasp-GPU executables can be used on both CPUs and GPUs."
  },
  {
    "question": "Why is benchmarking recommended when using Vasp-GPU with GPUs?",
    "answer": "Benchmarking with one or two GPUs is strongly recommended to ensure optimal usage, as basic calculations on GPUs can be much more costly."
  },
  {
    "question": "What does the example job script for VASP aim to do?",
    "answer": "The example job script executes VASP in parallel with the Slurm scheduler."
  },
  {
    "question": "How many MPI processes does the provided VASP job script example request?",
    "answer": "The example VASP job script requests 4 MPI processes ('#SBATCH --ntasks=4')."
  },
  {
    "question": "How much memory per CPU does the VASP job script example request?",
    "answer": "The example VASP job script requests 1024MB of memory per CPU ('#SBATCH --mem-per-cpu=1024M')."
  },
  {
    "question": "What does '<ACCOUNT>' represent in the VASP job script?",
    "answer": "'<ACCOUNT>' is the name of the Slurm account, found in the 'Running jobs' section under 'Accounts and projects'."
  },
  {
    "question": "What do '<VERSION>' and '<VASP>' represent in the VASP job script?",
    "answer": "'<VERSION>' is the VASP version number (e.g., 4.6, 5.4.1, 5.4.4, or 6.1.0), and '<VASP>' is the name of the executable chosen from the 'Executable programs' section."
  },
  {
    "question": "How many CPU cores and GPUs does the example VASP GPU job script request?",
    "answer": "The VASP GPU job script requests one CPU core ('#SBATCH --cpus-per-task=1') and one GPU of type p100 ('#SBATCH --gres=gpu:p100:1')."
  },
  {
    "question": "What type of GPU is requested in the VASP GPU job script example, and where is it valid?",
    "answer": "The script requests a 'p100' type GPU, which is valid only for Cedar."
  },
  {
    "question": "What command is used to execute VASP within the GPU job script?",
    "answer": "The command 'srun <VASP>' is used to execute VASP within the GPU job script."
  },
  {
    "question": "What are the four input files that VASP uses?",
    "answer": "VASP uses four input files: INCAR, KPOINTS, POSCAR, and POTCAR."
  },
  {
    "question": "How should input files be organized for each VASP task?",
    "answer": "It is preferable to prepare input files in a different directory for each task."
  },
  {
    "question": "How do you submit a VASP job from its directory?",
    "answer": "To submit a VASP job from its directory, use the command 'sbatch vasp_job.sh'."
  },
  {
    "question": "How can one estimate the memory needed for a VASP task if it's unknown?",
    "answer": "If the memory required for a task is unknown, prepare all input files and run 'makeparam' in an interactive task to get an estimate."
  },
  {
    "question": "What should be consulted for VASP tasks requiring 32 or more cores?",
    "answer": "For tasks requiring 32 or more cores, the 'Job scheduling policies' section on 'Entire nodes or cores' should be consulted."
  }
]