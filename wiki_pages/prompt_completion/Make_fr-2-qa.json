[
  {
    "question": "What is the primary function of the provided Makefile example?",
    "answer": "The Makefile example is designed to update a program composed of multiple separate routines, ensuring that only modified routines are recompiled into object files (.o), which are then linked to form an updated final program."
  },
  {
    "question": "How does the `make` command interact with this Makefile?",
    "answer": "The `make` command reads and interprets the Makefile. When called, it checks the modification dates of the program's component files and only recompiles routines that have changed since the last compilation, then links the resulting object files to update the final program."
  },
  {
    "question": "How can a user update the entire program using this Makefile on the UNIX command line?",
    "answer": "To update the entire program, a user should type 'make' on the UNIX command line."
  },
  {
    "question": "How can a user update only a specific routine using this Makefile on the UNIX command line?",
    "answer": "To update only a specific routine, a user should type 'make NomRoutine' on the UNIX command line, replacing 'NomRoutine' with the name of the routine to be updated."
  },
  {
    "question": "What is the purpose of the `NomCompilateur` variable in this Makefile?",
    "answer": "The `NomCompilateur` variable specifies the compiler to be used, such as FORTRAN or C, and is set to `xlf` in the example."
  },
  {
    "question": "What kind of options are defined by the `OptionsDeCompilation` variable?",
    "answer": "The `OptionsDeCompilation` variable defines compilation options, such as `-O3` for optimization, `-g` for debug mode, or `-O3 -pg` for profiling with gprof, typically used for FORTRAN compilation."
  },
  {
    "question": "What does the `FichiersObjets` variable contain?",
    "answer": "The `FichiersObjets` variable contains a list of the object versions (.o files) of the routines to be compiled."
  },
  {
    "question": "What is the function of the `ProgrammeOut` variable?",
    "answer": "The `ProgrammeOut` variable holds the name of the final executable program that will be produced by the compilation and linking process."
  },
  {
    "question": "How does the Makefile define a rule to build an object file (.o) from a Fortran source file (.f)?",
    "answer": "The Makefile defines the rule '.f.o:' which instructs to build an object file from a Fortran source file by executing the command `$(NomCompilateur) $(OptionsDeCompilation) -c $<`."
  },
  {
    "question": "How does the Makefile define a rule to build an object file (.o) from a C source file (.c)?",
    "answer": "The Makefile defines the rule '.c.o:' which instructs to build an object file from a C source file by executing the command `$(NomCompilateur) $(OptionsDeCompilation) -c $<`."
  },
  {
    "question": "What command is used to link the object files and create the final executable program `$(ProgrammeOut)`?",
    "answer": "The command `$(NomCompilateur) $(OptionsDeCompilation) -o $(ProgrammeOut) $(FichiersObjets)` is used to link the object files and create the final executable program."
  },
  {
    "question": "What should a user do to adapt this Makefile for their own program?",
    "answer": "To adapt this Makefile for their program, users should modify the content of the variables in the dedicated 'D\u00e9finition des variables' section, guided by the comments provided."
  },
  {
    "question": "What is an alternative term for variables in Makefile files?",
    "answer": "Variables are sometimes called 'macros' in Makefile files."
  }
]