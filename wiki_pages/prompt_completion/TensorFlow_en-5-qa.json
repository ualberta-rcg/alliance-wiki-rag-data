[
  {
    "question": "What modules need to be loaded to set up a Python virtual environment for a TensorFlow Horovod job?",
    "answer": "You need to load `StdEnv/2020` and `python/3.8`."
  },
  {
    "question": "How do you install TensorFlow version 2.5.0 and Horovod into a Python virtual environment for a job?",
    "answer": "After creating and activating your virtual environment, run the command `pip install --no-index tensorflow==2.5.0 horovod`."
  },
  {
    "question": "What is the purpose of setting the `NCCL_BLOCKING_WAIT` environment variable to `1` in a Horovod SLURM script?",
    "answer": "This environment variable should be set if you intend to use the NCCL backend for inter-GPU communication."
  },
  {
    "question": "How is Horovod initialized in a TensorFlow Python script?",
    "answer": "Horovod is initialized by calling `hvd.init()` at the beginning of the script."
  },
  {
    "question": "How do you configure visible GPUs for a Horovod job in a TensorFlow Keras Python script?",
    "answer": "First, get a list of physical GPUs using `tf.config.experimental.list_physical_devices('GPU')`, then set the visible device based on the Horovod local rank using `tf.config.experimental.set_visible_devices(gpus[hvd.local_rank()], 'GPU')`."
  },
  {
    "question": "How is the optimizer prepared for distributed training when using Horovod with TensorFlow Keras?",
    "answer": "The optimizer (e.g., `tf.keras.optimizers.SGD`) must be wrapped with `hvd.DistributedOptimizer(optimizer)`."
  },
  {
    "question": "What callback is typically used with Horovod in TensorFlow Keras for global variable broadcasting?",
    "answer": "`hvd.callbacks.BroadcastGlobalVariablesCallback(0)` is used."
  },
  {
    "question": "Why is `verbose=2` used in the `model.fit()` method in the example Horovod Python script?",
    "answer": "`verbose=2` is used to prevent printing a progress bar to the `*.out` files."
  },
  {
    "question": "Where can the CIFAR10 dataset be manually downloaded and placed if it's not automatically retrieved?",
    "answer": "It can be manually downloaded from `https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz`, renamed to 'cifar-10-batches-py.tar.gz', and placed under `~/.keras/datasets`."
  },
  {
    "question": "What is a model checkpoint in the context of TensorFlow training?",
    "answer": "A checkpoint is a snapshot of your model at a specific point during the training process (after a certain number of iterations or epochs) that is saved to disk and can be loaded later."
  },
  {
    "question": "What are the benefits of creating model checkpoints during training?",
    "answer": "Checkpoints help in breaking down long jobs into shorter ones for faster allocation and prevent loss of progress due to unexpected errors or node failures."
  },
  {
    "question": "How can you create a checkpoint at the end of every training epoch using Keras?",
    "answer": "You can use the `tf.keras.callbacks.ModelCheckpoint` callback with `save_freq=\"epoch\"`, passing it to the `callbacks` parameter of the `model.fit()` method. For example: `callbacks = [tf.keras.callbacks.ModelCheckpoint(filepath=\"./ckpt\",save_freq=\"epoch\")]`."
  },
  {
    "question": "What is the initial step required before compiling custom TensorFlow operators?",
    "answer": "You must first create a Python virtual environment and install a TensorFlow version that is compatible with your custom operators."
  },
  {
    "question": "When should custom TensorFlow operators be compiled?",
    "answer": "Custom TensorFlow operators need to be compiled *before* submitting your job."
  }
]