[
  {
    "question": "How do you create a Python virtual environment on this system?",
    "answer": "First, load a Python version (e.g., `module load python/X.Y.Z`), optionally `module load scipy-stack/X.Y.Z` if needed, then run `virtualenv --no-download ~/ENV`, replacing `ENV` with your desired directory name."
  },
  {
    "question": "What command activates a Python virtual environment?",
    "answer": "Activate the virtual environment using `source ~/ENV/bin/activate`, where `ENV` is the name of your environment directory."
  },
  {
    "question": "How should pip be updated within a virtual environment?",
    "answer": "You should update `pip` in the activated virtual environment by running the command `pip install --no-index --upgrade pip`."
  },
  {
    "question": "How do you deactivate a Python virtual environment?",
    "answer": "To deactivate a virtual environment, simply enter the command `deactivate`."
  },
  {
    "question": "What are the steps to reuse an existing Python virtual environment?",
    "answer": "To reuse a virtual environment, first load the same environment modules that were used during its creation (e.g., `module load python scipy-stack`), then activate the environment with `source ENV/bin/activate`."
  },
  {
    "question": "What command is used to install Python packages after activating a virtual environment?",
    "answer": "Once a virtual environment is activated, the `pip` command is used to handle the compilation and installation of most Python packages and their dependencies."
  },
  {
    "question": "Can you provide an example of how to install the NumPy package in a Python virtual environment?",
    "answer": "To install NumPy, first load the Python interpreter (e.g., `module load python/X.Y`), activate your virtual environment (e.g., `source ~/ENV/bin/activate`), and then run `pip install numpy --no-index`."
  },
  {
    "question": "What is the purpose of the `--no-index` option when installing packages with `pip`?",
    "answer": "The `--no-index` option instructs `pip` to only install from local sources, specifically from locally provided Python wheels, rather than searching PyPI."
  },
  {
    "question": "Why is it recommended to use the `--no-index` option when installing a package for which a local wheel is available?",
    "answer": "Using `--no-index` with local wheels is strongly recommended because these wheels are compiled by personnel, avoid missing or conflicting dependencies, and are optimized for the clusters and libraries."
  },
  {
    "question": "What happens if the `--no-index` option is omitted during a `pip` installation?",
    "answer": "If `--no-index` is omitted, `pip` will search both PyPI and local packages, installing the newest version found. If this version is from PyPI, it will be installed instead of the local wheel, potentially causing issues."
  },
  {
    "question": "When should the `--no-binary` option be used with `pip`?",
    "answer": "The `--no-binary` option should be used if you prefer to download a PyPI package and force `pip` to compile it from source, ignoring any pre-built packages or wheels."
  },
  {
    "question": "How can you check the source from which a Python package was installed by `pip`?",
    "answer": "To determine the source of an installed Python package, add the `-vvv` option to your `pip` command."
  },
  {
    "question": "What is the best practice for installing multiple Python packages to resolve dependencies?",
    "answer": "When installing multiple Python packages, it is preferable to install them in a single `pip` command, as this allows `pip` to resolve cross-dependencies more easily."
  }
]