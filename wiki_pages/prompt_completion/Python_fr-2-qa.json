[
  {
    "question": "How do you create a Python virtual environment?",
    "answer": "First, select a Python version using `module load python/X.Y.Z`. Optionally, load the SciPy stack with `module load scipy-stack/X.Y.Z`. Then, run `virtualenv --no-download ~/ENV` where `ENV` is the desired directory name for your new environment."
  },
  {
    "question": "What is the command to activate a virtual environment?",
    "answer": "You can activate a virtual environment with `source ~/ENV/bin/activate`."
  },
  {
    "question": "What command should be run to update pip after activating a virtual environment?",
    "answer": "You should run `pip install --no-index --upgrade pip` to update pip in the environment."
  },
  {
    "question": "How do you exit an active virtual environment?",
    "answer": "To exit an active virtual environment, simply use the command `deactivate`."
  },
  {
    "question": "What steps are required to reuse an existing virtual environment?",
    "answer": "To reuse an environment, you must first load the same environment modules that were active during its creation (e.g., `module load python scipy-stack`), and then activate the environment with `source ENV/bin/activate`."
  },
  {
    "question": "Which command is used to install Python packages in a virtual environment?",
    "answer": "The `pip` command is used to install Python packages and their dependencies once a virtual environment is loaded."
  },
  {
    "question": "How can you install the latest stable version of NumPy within an activated virtual environment using local wheels?",
    "answer": "First, ensure Python 3.10 is loaded with `module load python/3.10`, then activate your virtual environment using `source ~/ENV/bin/activate`, and finally run `pip install numpy --no-index`."
  },
  {
    "question": "What is the purpose of the `--no-index` option when installing packages with pip?",
    "answer": "The `--no-index` option instructs `pip` to install packages only from local source packages (wheels provided by the system) rather than searching PyPI."
  },
  {
    "question": "Why is it highly recommended to use the `--no-index` option with available Python wheels?",
    "answer": "It is strongly recommended because wheels compiled by staff avoid missing or conflicting dependencies and are optimized for the clusters and libraries."
  },
  {
    "question": "What happens if the `--no-index` option is omitted during a pip package installation?",
    "answer": "If `--no-index` is omitted, `pip` will search both PyPI and local packages and install the newest version. If the newest version is from PyPI, it will be installed, which could potentially lead to problems."
  },
  {
    "question": "How can you force pip to compile a package from its source instead of using any pre-built wheels?",
    "answer": "You can use the `--no-binary` option, which tells `pip` to ignore all pre-built packages, ensuring the package is compiled from source."
  },
  {
    "question": "How can you check the source from which a Python package was installed by pip?",
    "answer": "To find out where a Python package installed by `pip` originated, add the `-vvv` option to the command."
  },
  {
    "question": "What is the recommended method for installing multiple Python packages with pip?",
    "answer": "When possible, it is preferable to install multiple packages in a single `pip install` command, as this allows `pip` to resolve cross-dependencies more easily."
  }
]