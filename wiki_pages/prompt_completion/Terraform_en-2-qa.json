[
  {
    "question": "How do you define the OpenStack provider in Terraform with full connection details?",
    "answer": "You can define the OpenStack provider by including a `provider \"openstack\"` block in your Terraform configuration, specifying details such as `tenant_name`, `tenant_id`, `auth_url`, `user_name`, `password`, and `user_domain_name`."
  },
  {
    "question": "Can Terraform configurations use partial OpenStack credentials?",
    "answer": "Yes, Terraform supports partial credentials, allowing you to omit some values (e.g., password) from the configuration file and supply them via environment variables like `$OS_PASSWORD`."
  },
  {
    "question": "How do you configure the OpenStack provider in Terraform if you prefer to use a `clouds.yaml` file?",
    "answer": "If you prefer using `clouds.yaml`, you can specify the `cloud` attribute within the `provider \"openstack\"` stanza, like `cloud = \"my_cloud\"`."
  },
  {
    "question": "Is an empty OpenStack provider definition acceptable in Terraform?",
    "answer": "Yes, an empty `provider \"openstack\" {}` definition is acceptable, but it requires either the `$OS_CLOUD` environment variable or variables set by an appropriate RC file to be present in the executing environment for Terraform to proceed."
  },
  {
    "question": "What is a key security consideration when storing OpenStack credentials in Terraform configurations?",
    "answer": "It is important to avoid storing sensitive credentials, especially passwords, directly in Terraform configuration files, as this is considered bad practice and poses security risks."
  },
  {
    "question": "What command is used to initialize Terraform and set up the provider?",
    "answer": "The command `terraform init` is used to initialize Terraform, which ensures the provider is set up correctly and downloads the necessary OpenStack provider plugin."
  },
  {
    "question": "Does the `terraform init` command test the OpenStack credentials?",
    "answer": "No, `terraform init` successfully initializes Terraform and downloads the provider plugin, but this operation does not actually try to connect to the defined provider or test the credentials."
  },
  {
    "question": "What is recommended to prevent automatic upgrades of Terraform provider versions?",
    "answer": "To prevent automatic upgrades to new major versions that may contain breaking changes, it is recommended to add `version = \"...\"` constraints to the corresponding provider blocks in the configuration."
  },
  {
    "question": "Why should flavor and image IDs be used instead of names when defining VMs in Terraform?",
    "answer": "It is good practice to always specify flavors and images using their IDs because the ID defines the state of the resource and will never change, whereas the name can change, potentially leading to Terraform rebuilding or resizing the associated resource destructively."
  },
  {
    "question": "What happens if a flavor or image name changes when defining a VM in Terraform?",
    "answer": "If a flavor or image name changes (e.g., if it's retired and replaced with another of the same name), Terraform will detect the updated ID on the next run and determine that you want to rebuild or resize the associated resource, which is a destructive operation."
  }
]