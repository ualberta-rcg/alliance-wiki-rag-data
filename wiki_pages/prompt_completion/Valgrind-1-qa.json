[
  {
    "question": "What is Valgrind?",
    "answer": "Valgrind is a powerful debugging tool used to detect bad memory usage."
  },
  {
    "question": "What types of memory-related problems can Valgrind detect?",
    "answer": "Valgrind can detect memory leaks, access to unallocated or deallocated memory, multiple deallocation, or other bad memory usage."
  },
  {
    "question": "What program errors might indicate a problem Valgrind can help debug?",
    "answer": "If your program ends with a 'segmentation fault', 'broken pipe', or 'bus error', you most likely have a problem in your code that Valgrind can help detect."
  },
  {
    "question": "Is Valgrind pre-installed on Compute Canada clusters?",
    "answer": "Yes, Valgrind is installed on Compute Canada clusters as part of the base software distribution."
  },
  {
    "question": "Do I need to load a module to use Valgrind on Compute Canada clusters?",
    "answer": "No, there is no need to load a module to use Valgrind on Compute Canada clusters."
  },
  {
    "question": "What limitation do current versions of Valgrind have regarding processors?",
    "answer": "Current versions of Valgrind are unable to handle the AVX-512 instructions used on the latest Intel and AMD processors."
  },
  {
    "question": "What kind of error message might Valgrind produce when encountering AVX-512 instructions?",
    "answer": "It may produce an error message like 'valgrind: Unrecognised instruction at address 0x...'."
  },
  {
    "question": "On which Compute Canada clusters is AVX-512 used by default?",
    "answer": "On all current clusters except Narval, the default environment uses AVX-512 instructions."
  },
  {
    "question": "How can one work around Valgrind's AVX-512 limitation?",
    "answer": "You can circumvent this problem by first loading the AVX-2 environment with `module load arch/avx2` and then recompiling your application from scratch."
  },
  {
    "question": "What is the first step to prepare an application for debugging with Valgrind?",
    "answer": "You need to compile your code with debugging information enabled."
  },
  {
    "question": "How do you enable debugging information during compilation?",
    "answer": "With most compilers, you enable debugging information by adding a '-g' option during compilation."
  },
  {
    "question": "Why should aggressive optimizations be avoided when preparing an application for Valgrind?",
    "answer": "Some aggressive optimizations may yield false errors in Valgrind if they result in unsupported operations, which may occur in certain mathematical libraries."
  },
  {
    "question": "What type of libraries should be linked against when diagnosing issues with Valgrind?",
    "answer": "You should compile and link your code against non-optimized versions of the libraries (such as the Netlib implementation of BLAS/LAPACK) that do not use unsupported operations."
  },
  {
    "question": "When should optimized libraries be used instead of non-optimized ones?",
    "answer": "When the time comes to run real simulations, you should link against optimized libraries."
  },
  {
    "question": "What is the command to execute a program within Valgrind to check for memory issues?",
    "answer": "The command is `valgrind --tool=memcheck --leak-check=yes --show-reachable=yes ./your_program`."
  },
  {
    "question": "How does running code in Valgrind affect its execution speed?",
    "answer": "When you run your code in Valgrind, your application is executed within a virtual machine that validates every memory access, causing it to run much slower than usual."
  },
  {
    "question": "What advice is given regarding the size of the problem when testing with Valgrind?",
    "answer": "Choose the size of the problem to test with caution, making it much smaller than what you would usually run."
  },
  {
    "question": "Is it necessary to run the exact problem that causes a segmentation fault to detect memory issues with Valgrind?",
    "answer": "No, you do not need to run the exact same problem that results in a segmentation fault. Valgrind will detect even the slightest access outside of the bounds of an array, often with smaller problems."
  }
]