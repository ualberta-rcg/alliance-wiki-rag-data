[
  {
    "question": "How do you configure your identifiers and define MonarQ as your device in a Python file?",
    "answer": "You need to open a Python .py file, import `pennylane` and `MonarqClient` from `pennylane_calculquebec.API.client`, create a client using `MonarqClient(\"monarq.calculquebec.ca\", \"your username\", \"your access token\", \"your project\")`, and then create a PennyLane device with `qml.device(\"monarq.default\", client = my_client, wires = N, shots = M)`."
  },
  {
    "question": "What Python dependencies are required to set up the MonarQ client and device?",
    "answer": "You need `pennylane` (aliased as `qml`) and `MonarqClient` from `pennylane_calculquebec.API.client`."
  },
  {
    "question": "What information is required to initialize a `MonarqClient`?",
    "answer": "To initialize `MonarqClient`, you need the host (`monarq.calculquebec.ca`), your username, your access token, and your project."
  },
  {
    "question": "Where can you find your access token for MonarQ?",
    "answer": "Your access token is available through the Thunderhead portal."
  },
  {
    "question": "What is the host address for MonarQ?",
    "answer": "The host address for MonarQ is `monarq.calculquebec.ca`."
  },
  {
    "question": "What parameters can be set when creating a PennyLane device for MonarQ?",
    "answer": "When creating a PennyLane device, you can specify the `client`, the number of qubits (`wires`), and the number of `shots`."
  },
  {
    "question": "Where can a user find more information about `pennylane_calculquebec`?",
    "answer": "More information is available at `https://github.com/calculquebec/pennylane-calculquebec/blob/main/doc/getting_started.ipynb`."
  },
  {
    "question": "How do you code a quantum circuit in a Python file for MonarQ?",
    "answer": "In the same Python file where you configured your device, you can define a function decorated with `@qml.qnode(dev)` to code your quantum circuit, applying quantum gates and returning `qml.counts()`."
  },
  {
    "question": "Can you provide an example of a simple quantum circuit for MonarQ?",
    "answer": "An example circuit, named `bell_circuit`, applies `qml.Hadamard(wires=0)`, `qml.CNOT(wires=[0, 1])`, and `qml.CNOT(wires=[1, 2])`, then returns `qml.counts()`."
  },
  {
    "question": "How do you execute a quantum circuit from the scheduler?",
    "answer": "You execute a quantum circuit by submitting a task using the `sbatch` command, which runs a Slurm script that executes your Python circuit file."
  },
  {
    "question": "What command is used to submit a task to the scheduler?",
    "answer": "The `sbatch` command is used to submit a task, for example, `$ sbatch simple_job.sh`."
  },
  {
    "question": "What does a typical Slurm script for running a MonarQ circuit include?",
    "answer": "A typical Slurm script includes SBATCH directives such as `--time`, `--account` (your username), `--cpus-per-task`, and `--mem-per-cpu`, followed by the command to run your Python circuit file (e.g., `python my_circuit.py`)."
  },
  {
    "question": "Where are the results of a submitted Slurm job written?",
    "answer": "The results are written to a file with a name starting with `slurm-`, followed by the task ID and the `.out` suffix (e.g., `slurm-123456.out`)."
  },
  {
    "question": "What format do the results of a quantum circuit execution take in the output file?",
    "answer": "The output file contains the result in a dictionary format, like `{'000': 496, '001': 0, '010': 0, '011': 0, '100': 0, '101': 0, '110': 0, '111': 504}`."
  },
  {
    "question": "Where can I find more information on submitting tasks on Narval?",
    "answer": "For more information on submitting tasks on Narval, see the [[Running_jobs|Running jobs]] section."
  }
]