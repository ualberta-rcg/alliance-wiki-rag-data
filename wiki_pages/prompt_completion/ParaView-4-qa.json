[
  {
    "question": "What command is used to start the ParaView server with off-screen rendering on a cluster for large-scale interactive visualization?",
    "answer": "You would use `srun pvserver --force-offscreen-rendering --opengl-window-backend OSMesa` after loading the ParaView module."
  },
  {
    "question": "What information should be noted from the `pvserver` output when setting up a large-scale interactive visualization?",
    "answer": "You should note the node name (e.g., `fc30669`) and the port (usually `11111`) from the `Connection URL`."
  },
  {
    "question": "How do you establish an SSH tunnel from your local computer to the compute node for a ParaView client-server connection?",
    "answer": "In a terminal on your computer, use the command `ssh <username>@fir.alliancecan.ca -L 11111:fc30669:11111`, replacing `fir.alliancecan.ca` with the actual cluster name and `fc30669` with the compute node's name."
  },
  {
    "question": "What are the steps to connect the ParaView client on your computer to a remote server running on an HPC cluster?",
    "answer": "Start ParaView on your computer, go to `File -> Connect` (or click the green `Connect` button). Click `Add Server`, set `name` (e.g., `fir`), `server type` to `Client/Server`, `host` to `localhost`, and `port` to `11111`. Click `Configure`, select `Manual`, and then `Save`. Finally, select the added server from the list and click `Connect`."
  },
  {
    "question": "How can you verify that parallel rendering is active when visualizing a dataset with ParaView?",
    "answer": "You can color your dataset by the `Process Id` variable, which is only available during parallel rendering."
  },
  {
    "question": "When is it recommended to use off-screen batch visualization instead of interactive client-server mode?",
    "answer": "For large-scale and automated visualization, such as generating 1,000 frames for a movie, off-screen batch visualization is strongly recommended."
  },
  {
    "question": "How can ParaView batch production visualization be scripted?",
    "answer": "ParaView supports Python scripting, allowing you to script your workflow and submit it as a regular, possibly parallel production job on a cluster."
  },
  {
    "question": "What is the command to submit a serial ParaView batch job?",
    "answer": "After loading the ParaView module, use `sbatch serial.sh`, where `serial.sh` is your Slurm job submission script."
  },
  {
    "question": "Provide an example of a Slurm script for serial ParaView batch rendering.",
    "answer": "A `serial.sh` script might look like:\n```sh\n#!/bin/bash\n#SBATCH --time=3:0:0\n#SBATCH --mem-per-cpu=3600\n#SBATCH --account=def-someuser\npvbatch --force-offscreen-rendering --opengl-window-backend OSMesa script.py\n```"
  },
  {
    "question": "What is the command to submit a parallel ParaView batch job?",
    "answer": "After loading the ParaView module, use `sbatch distributed.sh`, where `distributed.sh` is your Slurm job submission script."
  },
  {
    "question": "Provide an example of a Slurm script for parallel ParaView batch rendering.",
    "answer": "A `distributed.sh` script might look like:\n```sh\n#!/bin/bash\n#SBATCH --time=3:0:0\n#SBATCH --mem-per-cpu=3600\n#SBATCH --ntasks=4\n#SBATCH --account=def-someuser\nsrun pvbatch --force-offscreen-rendering --opengl-window-backend OSMesa script.py\n```"
  },
  {
    "question": "Why would someone choose to run a ParaView server on a cloud VM instead of a cluster?",
    "answer": "This less common approach should be used only if you require a custom setup that is not supported by the cluster-installed ParaView."
  },
  {
    "question": "What packages need to be installed on a CentOS VM as prerequisites for compiling ParaView or VisIt?",
    "answer": "You need to install `xauth wget gcc gcc-c++ ncurses-devel python-devel libxcb-devel`, `patch imake libxml2-python mesa-libGL mesa-libGL-devel`, `mesa-libGLU mesa-libGLU-devel bzip2 bzip2-libs libXt-devel zlib-devel flex byacc`, and create a symbolic link for `glx.h`."
  },
  {
    "question": "Why is OSMesa support required when compiling ParaView for a cloud VM?",
    "answer": "Since most Arbutus VMs do not have access to a GPU, OSMesa support is needed to enable offscreen (software) rendering."
  },
  {
    "question": "What drivers does the default OSMesa configuration enable for offscreen CPU-based rendering?",
    "answer": "It enables both `llvmpipe` (older and slower) and `SWR` (newer and faster) drivers."
  },
  {
    "question": "Which driver is recommended for offscreen CPU-based rendering with OSMesa?",
    "answer": "SWR (Intel's software rasterization library) is recommended."
  },
  {
    "question": "What command starts the ParaView server on a VM with SWR rendering?",
    "answer": "The command is `./paraview/bin/pvserver --force-offscreen-rendering --opengl-window-backend OSMesa`."
  },
  {
    "question": "How do you set up an SSH tunnel from your local computer to a VM for ParaView client-server visualization?",
    "answer": "On your computer, use `ssh centos@vm.ip.address -L 11111:localhost:11111` to organize an SSH tunnel from local port 11111 to the VM's port 11111."
  },
  {
    "question": "What message should you expect to see in the console on the VM during rendering if SWR is detected?",
    "answer": "You should see the message `SWR detected AVX2`."
  }
]