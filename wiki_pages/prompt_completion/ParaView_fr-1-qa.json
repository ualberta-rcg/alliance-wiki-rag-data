[
  {
    "question": "What is an important preference option for client-server visualization in ParaView?",
    "answer": "An important preference option is the 'Remote Render Threshold,' found under 'Render View -> Remote/Parallel Rendering Options.'"
  },
  {
    "question": "How does the 'Remote Render Threshold' setting influence rendering tasks?",
    "answer": "With the default value (20MB) or similar, small rendering tasks use your computer's GPU, providing fast rotation. However, tasks deemed intensive (under 20MB) are also directed to your computer, which might result in slow visualization depending on your connection. Setting it to 0MB directs all rendering remotely to cluster resources, which is good for intensive processing but less desirable for interactive aspects."
  },
  {
    "question": "What happens if the 'Remote Render Threshold' is set to 0MB?",
    "answer": "If the 'Remote Render Threshold' is set to 0MB, all rendering tasks will be performed remotely, utilizing the cluster's resources for intensive processing. This is beneficial for heavy workloads but can be less interactive."
  },
  {
    "question": "What is the default value for the 'Remote Render Threshold'?",
    "answer": "The default value for the 'Remote Render Threshold' is 20MB."
  },
  {
    "question": "What is a critical requirement for establishing a client-server connection in ParaView?",
    "answer": "The same major version of ParaView must be installed on both the local client and the remote host computer to prevent incompatibilities that could hinder the client-server connection."
  },
  {
    "question": "If the ParaView server on a cluster is version 5.10.0, what client version is required on the local machine?",
    "answer": "You need a client version 5.10.x on your computer to connect to a 5.10.0 ParaView server on the clusters."
  },
  {
    "question": "How can client-server rendering be performed on Cedar, Graham, B\u00e9luga, and Narval?",
    "answer": "On Cedar, Graham, B\u00e9luga, and Narval, client-server rendering can be performed using either a CPU (software-based) or a GPU (hardware-based)."
  },
  {
    "question": "Which rendering method is recommended for Cedar, Graham, B\u00e9luga, and Narval clusters due to GPU complexity?",
    "answer": "Due to the complexity of GPU rendering, it is recommended to use only CPUs and allocate as many cores as needed for client-server visualization on these clusters."
  },
  {
    "question": "How do you estimate the number of CPU cores needed for visualization on Cedar, Graham, B\u00e9luga, and Narval?",
    "answer": "The easiest way to estimate the number of cores is to divide the amount of memory you believe is necessary by approximately 3.5GB per core."
  },
  {
    "question": "How many CPU cores would be needed to handle 40GB of data loaded in a single step?",
    "answer": "For 40GB of data loaded in a single step, at least 12 CPU cores would be needed just to contain the data, based on an estimation of ~3.5GB/core."
  },
  {
    "question": "What is the recommended memory per core for software-based rendering when using CPUs?",
    "answer": "Since software-based rendering is CPU-intensive, it is recommended not to exceed 4GB per core."
  },
  {
    "question": "What factors should be considered when allocating memory for ParaView tasks, beyond just data containment?",
    "answer": "In addition to data containment, a certain amount of memory must also be allocated for filters and data processing; for example, converting a structured dataset to an unstructured one could require about three times more memory."
  },
  {
    "question": "What should you do if the ParaView server stops running during execution?",
    "answer": "If the ParaView server stops during execution, you will need to increase the number of cores allocated."
  },
  {
    "question": "Can ParaView leverage modern CPU libraries for performance comparable to GPUs?",
    "answer": "Yes, in some cases, modern CPU libraries like OSPray or OpenSWR offer performance comparable to what is obtained with a GPU."
  },
  {
    "question": "How does ParaView handle very large datasets when used on a cluster's CPU?",
    "answer": "Since the ParaView server uses MPI in distributed memory, very large datasets can be processed in parallel with multiple CPU cores on a single node or across several distributed nodes."
  },
  {
    "question": "What is the first step to set up ParaView client-server visualization with a CPU on clusters like Cedar?",
    "answer": "The first step is to install the same version of ParaView on your workstation as on the cluster, then connect to the cluster and launch an interactive serial CPU task using the command `salloc --time=1:00:0 --ntasks=1 --mem-per-cpu=3600 --account=def-someprof`."
  },
  {
    "question": "How do you load the ParaView off-screen rendering module and start the server in a CPU interactive task?",
    "answer": "At the prompt in your task, first load the ParaView module using `module load paraview/5.13.1`, and then start the server with `pvserver --force-offscreen-rendering`."
  },
  {
    "question": "What command should be used to start the ParaView server with forced off-screen rendering?",
    "answer": "The command is `pvserver --force-offscreen-rendering`."
  },
  {
    "question": "How can you tell if the ParaView server is ready to accept client connections?",
    "answer": "The server will display messages such as 'Waiting for client...', 'Connection URL: cs://cdr774.int.cedar.computecanada.ca:11111', and 'Accepting connection(s): cdr774.int.cedar.computecanada.ca:11111'."
  }
]