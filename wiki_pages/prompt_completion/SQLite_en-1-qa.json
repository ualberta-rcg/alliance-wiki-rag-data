[
  {
    "question": "What is SQLite?",
    "answer": "SQLite is a database management tool used to build what are commonly called 'pocket databases'."
  },
  {
    "question": "Why are SQLite databases referred to as 'pocket databases'?",
    "answer": "They are called 'pocket databases' because they offer all the features of relational databases without the client-server architecture, and their data resides in a single disk file that can simply be copied to another computer."
  },
  {
    "question": "How do software applications interact with an SQLite database file?",
    "answer": "Software written in a wide variety of common languages can read from and write to the database file using standard SQL queries via the language's API for database interactions."
  },
  {
    "question": "Where should an SQLite database not be used?",
    "answer": "An SQLite database should not be used on a shared filesystem such as home, scratch, and project."
  },
  {
    "question": "What is the recommended practice for using an SQLite file to achieve the best possible performance?",
    "answer": "Typically, you should copy your SQLite file to the local scratch `$SLURM_TMPDIR` space at the beginning of a job."
  },
  {
    "question": "Is SQLite suitable for concurrent writing by multiple threads or processes?",
    "answer": "No, SQLite is not intended for use with multiple threads or processes writing concurrently to the database."
  },
  {
    "question": "What solution should be considered if multiple threads or processes need to write concurrently to a database?",
    "answer": "For concurrent writing, a client-server solution should be considered."
  },
  {
    "question": "How can you access an SQLite database directly?",
    "answer": "You can access an SQLite database directly using the native client command: `sqlite3 foo.sqlite`."
  },
  {
    "question": "What happens if the database file specified with the `sqlite3` command does not exist?",
    "answer": "If the file does not already exist, SQLite will create it, and the client will start in an empty database."
  },
  {
    "question": "How do you display the entire contents of a table named 'tablename' using the direct SQLite client?",
    "answer": "You can execute the query `SELECT * FROM tablename;` to print the entire contents of the table to the screen."
  },
  {
    "question": "What is the most common way for software to interact with an SQLite database?",
    "answer": "The most common way is through function calls to open a connection to the database, execute queries (read, insert, update), and then close the connection to flush changes to the SQLite file."
  },
  {
    "question": "What Python module is used for accessing an SQLite database?",
    "answer": "For Python, the `sqlite3` module is used to access an SQLite database."
  },
  {
    "question": "What R package is typically used to interact with an SQLite database?",
    "answer": "In R, the `RSQLite` package, often used with `DBI`, is used to interact with an SQLite database."
  },
  {
    "question": "What are the limitations of SQLite regarding database size and complexity?",
    "answer": "SQLite is intended for relatively simple databases that are neither excessively large (hundreds of gigabytes or more) nor too complicated in terms of their entity-relationship diagram."
  },
  {
    "question": "When might the performance of an SQLite database start to degrade?",
    "answer": "Performance could start to degrade as your SQLite database grows in size and complexity."
  },
  {
    "question": "What alternative should be considered if an SQLite database's performance degrades due to size or complexity?",
    "answer": "If performance degrades, it may be time to consider more sophisticated database software that uses a client-server model."
  },
  {
    "question": "Where can one find guidance on the appropriate uses for SQLite versus client-server databases?",
    "answer": "The SQLite web site includes an excellent page on 'Appropriate Uses For SQLite', which includes a checklist for choosing between SQLite and client-server databases."
  }
]