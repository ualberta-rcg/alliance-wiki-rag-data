[
  {
    "question": "What does IOPs stand for and what does it measure?",
    "answer": "IOPs stands for Input/Output operations per second (read/write/open/close/seek) and is essentially an inverse of latency."
  },
  {
    "question": "How is I/O Bandwidth defined?",
    "answer": "I/O Bandwidth is defined as the quantity of data you read or write."
  },
  {
    "question": "Do parallel filesystems provide 'supercomputing' performance in I/O?",
    "answer": "No, parallel filesystems are optimized for efficient I/O by multiple users on multiple machines/nodes, but they do not result in 'supercomputing' performance in I/O."
  },
  {
    "question": "What factors limit the performance of parallel filesystems?",
    "answer": "The performance of parallel filesystems is limited by disk-access time and communication over the network, which has limited bandwidth and is shared by many users."
  },
  {
    "question": "What is the typical I/O Software + Hardware stack?",
    "answer": "The I/O Software + Hardware stack typically consists of I/O Hardware, Parallel filesystem, I/O Middleware, High-end I/O library, and Application."
  },
  {
    "question": "What is an example of an open-source parallel filesystem used on national systems?",
    "answer": "Lustre is an open-source parallel filesystem used on most national systems."
  },
  {
    "question": "What is the primary purpose of a parallel filesystem?",
    "answer": "The purpose of a parallel filesystem is to maintain logical partitions and provide efficient access to data, designed to scale to tens of thousands of computing nodes."
  },
  {
    "question": "What role does I/O middleware play in the I/O stack?",
    "answer": "I/O middleware organizes access from many processes by optimizing two-phase I/O, disk I/O, and data flow over the network, and provides data sieving by converting many small non-contiguous I/O requests into fewer, bigger requests."
  },
  {
    "question": "What is the function of a high-end I/O library like HDF5 or NetCDF?",
    "answer": "High-end I/O libraries map application abstractions to storage abstractions in terms of the code's data structures, allowing data to be stored directly and efficiently to the disk."
  },
  {
    "question": "How do parallel filesystems improve performance for files?",
    "answer": "For better performance, files can be striped across multiple drives, meaning the file does not reside on a single hard drive but multiple drives, allowing parallel read/write operations."
  },
  {
    "question": "How do parallel file systems manage concurrent file access?",
    "answer": "Parallel file systems use locks to manage concurrent file access; files are pieced into 'lock' units scattered across many drives, and client nodes obtain locks on units they access before I/O occurs."
  },
  {
    "question": "What kind of files are parallel filesystems optimized for?",
    "answer": "Parallel filesystems are optimized for storing large shared files accessible from many computing nodes."
  },
  {
    "question": "Why do parallel filesystems perform poorly with many small files?",
    "answer": "Parallel filesystems show very poor performance under many small reads/writes (high IOPs) because they are optimized for large shared files."
  },
  {
    "question": "How can a user's I/O activities affect others on a shared HPC system?",
    "answer": "A user's heavy I/O activities, such as hammering the file system, can make the system slower and hurt process communications (like MPI communication), affecting all users."
  },
  {
    "question": "What are the inherent limitations of file systems in an HPC environment?",
    "answer": "File systems are limited in terms of bandwidth, IOPs, the number of files they can efficiently handle, and available storage space."
  },
  {
    "question": "What is the first best practice recommended for I/O?",
    "answer": "The first best practice is to make a plan for your data needs, considering how much data will be generated, how much needs to be saved, and where to keep it."
  },
  {
    "question": "Which filesystem commands should be minimized, especially in large directories?",
    "answer": "Users should minimize the use of filesystem commands like 'ls' and 'du' in large directories."
  },
  {
    "question": "How can users regularly check their disk usage?",
    "answer": "Users should regularly check their disk usage with the 'quota' command."
  },
  {
    "question": "What are warning signs regarding file usage that should prompt careful consideration?",
    "answer": "Warning signs include having more than 100,000 files in your space or an average data file size less than 100 MB for large output."
  },
  {
    "question": "What housekeeping practices are recommended to manage files and quotas?",
    "answer": "Regular housekeeping practices include using 'gzip' and 'tar' to compress and group multiple files, and deleting unnecessary files to maintain a reasonable number of files and stay within quotas."
  },
  {
    "question": "What are the pros and cons of using ASCII format for data storage?",
    "answer": "ASCII format is human-readable and portable (architecture-independent), but it is inefficient for storage (e.g., 13 bytes per single precision float) and expensive for read/write operations."
  },
  {
    "question": "When is ASCII format suitable for use?",
    "answer": "ASCII format is good for small input or parameter files."
  }
]