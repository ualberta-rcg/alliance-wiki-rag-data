[
  {
    "question": "What is ParaView?",
    "answer": "ParaView is a general-purpose, open-source 3D scientific visualization tool that compiles on Linux, Windows, and Mac, supports Python scripting, and can scale to tens of thousands of processors for large datasets."
  },
  {
    "question": "What platforms does ParaView support?",
    "answer": "ParaView compiles on all popular platforms including Linux, Windows, and Mac."
  },
  {
    "question": "Does ParaView support Python scripting?",
    "answer": "Yes, ParaView supports Python scripting."
  },
  {
    "question": "Where can I find ParaView's official documentation?",
    "answer": "The ParaView official documentation can be found at http://www.paraview.org/documentation."
  },
  {
    "question": "What is VisIt?",
    "answer": "VisIt is an open-source, general-purpose 3D scientific data analysis and visualization tool, similar to ParaView, that scales from interactive laptop analysis to very large HPC projects on tens of thousands of processors."
  },
  {
    "question": "What are some resources for VisIt users?",
    "answer": "VisIt users can refer to the VisIt website, gallery, user community wiki, and tutorials, which also include sample datasets."
  },
  {
    "question": "What is VMD used for?",
    "answer": "VMD is an open-source molecular visualization program designed for displaying, animating, and analyzing large biomolecular systems in 3D."
  },
  {
    "question": "Which scripting languages does VMD support?",
    "answer": "VMD supports scripting in Tcl and Python."
  },
  {
    "question": "What platforms does VMD run on?",
    "answer": "VMD runs on MacOS X, Linux, and Windows."
  },
  {
    "question": "What is VTK?",
    "answer": "VTK, the Visualization Toolkit, is an open-source package for 3D computer graphics, image processing, and visualization, which served as the basis for packages like ParaView and VisIt."
  },
  {
    "question": "What programming interfaces does VTK include?",
    "answer": "VTK includes a C++ class library and interfaces for interpreted languages such as Tcl/Tk, Java, and Python."
  },
  {
    "question": "What is YT?",
    "answer": "YT is a Python library primarily for analyzing and visualizing volumetric, multi-resolution data, initially for astrophysical simulations, but capable of handling various data types on different mesh structures and particles."
  },
  {
    "question": "What is the recommended approach for interactive visualization on Alliance systems?",
    "answer": "For interactive rendering, client-server visualization on interactive or high-priority nodes is recommended."
  },
  {
    "question": "What is the recommended approach for non-interactive visualization on Alliance systems?",
    "answer": "For non-interactive visualization, off-screen batch jobs on regular compute nodes are recommended."
  },
  {
    "question": "What are less efficient options for remote GUI visualization on Alliance systems?",
    "answer": "X11-forwarding and VNC are considered less efficient options for remote GUI visualization, though they are the only options for some packages."
  },
  {
    "question": "How does client-server interactive visualization work?",
    "answer": "In client-server mode, data is processed remotely on the cluster (using CPU or GPU rendering), and users interact with the visualization through a GUI client on their local computer."
  },
  {
    "question": "Which visualization packages support client-server mode?",
    "answer": "Both ParaView and VisIt support client-server mode."
  },
  {
    "question": "Why should X11-forwarding generally be avoided for heavy graphics?",
    "answer": "X11-forwarding should be avoided for heavy graphics because it requires many round trips and is much slower than VNC."
  },
  {
    "question": "How do you connect to a Cedar, Graham, or B\u00e9luga cluster with X11-forwarding?",
    "answer": "Connect to the cluster with the `-X/-Y` flag for X11-forwarding via ssh."
  },
  {
    "question": "How do you start a graphical application like VMD on a login node using X11-forwarding on Cedar, Graham, or B\u00e9luga?",
    "answer": "After connecting with X11-forwarding, use `module load vmd` followed by `vmd`."
  },
  {
    "question": "How do you request interactive resources on a compute node for large visualizations with X11-forwarding on Cedar, Graham, or B\u00e9luga?",
    "answer": "You can use `salloc --time=1:00:0 --ntasks=1 --mem=3500 --account=def-someprof --x11`, and then start your application inside the job."
  },
  {
    "question": "What is the process for an interactive visualization session on Niagara using X11-forwarding?",
    "answer": "First, ssh into `niagara.scinet.utoronto.ca` with the `-X/-Y` flag. Then, request an interactive job using `debugjob`. Once connected to a node, load your visualization program (e.g., `module load vmd` and `vmd`), and finally, exit the debug session."
  },
  {
    "question": "When might you use Xvfb for remote off-screen windows?",
    "answer": "Xvfb is used when applications require graphical output but you don't need to see it, as the results are saved to a file, allowing off-screen rendering as a regular batch job."
  },
  {
    "question": "How do you run an application with Xvfb using the CPU for rendering?",
    "answer": "You can run the application with `xvfb-run <name-of-application>`."
  },
  {
    "question": "How do you run an application with Xvfb using the GPU for rendering?",
    "answer": "You can run the application with `xvfb-run vglrun -d egl <name-of-application>`, provided you have reserved a GPU with Slurm."
  },
  {
    "question": "Why is it important to benchmark CPU vs. GPU for Xvfb rendering?",
    "answer": "It's important to benchmark because the GPU may not necessarily be faster than the CPU, depending on the workload, and GPUs are more expensive."
  },
  {
    "question": "Why is VNC recommended over X11-forwarding for graphical user interfaces like Matlab?",
    "answer": "VNC is recommended because X11-forwarding can result in a very slow connection for GUIs, whereas VNC allows starting and connecting to a remote desktop more efficiently."
  },
  {
    "question": "Who provided the VisIt workshop slides from HPCS'2016?",
    "answer": "The VisIt workshop slides from HPCS'2016 were provided by Marcelo Ponce and Alex Razoumov."
  },
  {
    "question": "Who presented the ParaView workshop slides from July 2017?",
    "answer": "The ParaView workshop slides from July 2017 were presented by Alex Razoumov."
  },
  {
    "question": "What topics were covered in Marcelo Ponce's slides from the Ontario HPC Summer School 2016?",
    "answer": "Marcelo Ponce's slides from the Ontario HPC Summer School 2016 covered Gnuplot, xmgrace, remote visualization tools (X-forwarding and VNC), and Python's matplotlib, along with a brief overview of ParaView & VisIt."
  },
  {
    "question": "Where can one find video recordings and slides from visualization webinars?",
    "answer": "Video recordings and slides from many visualization webinars can be found on the Western Canada visualization training materials page at https://training.westdri.ca/tools/visualization."
  },
  {
    "question": "What are some topics covered in the Western Canada visualization training webinars?",
    "answer": "Topics include the YT series for volumetric data analysis, scientific visualization with Plotly, novel visualization techniques, data visualization on Compute Canada\u2019s Supercomputers (ParaView client-server and batch scripts), ParaViewWeb, advanced VisIt scripting, CPU-based rendering with OSPRay, 3D graphs with NetworkX, VTK, and ParaView, and graph visualization with Gephi."
  }
]