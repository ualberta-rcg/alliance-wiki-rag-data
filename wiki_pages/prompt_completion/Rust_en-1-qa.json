[
  {
    "question": "What is Rust?",
    "answer": "Rust is a multi-paradigm, high-level, general-purpose programming language that emphasizes performance, type safety, and concurrency."
  },
  {
    "question": "How does Rust enforce memory safety?",
    "answer": "Rust enforces memory safety by ensuring that all references point to valid memory, without requiring a garbage collector or reference counting."
  },
  {
    "question": "Is the Rust compiler available as a module?",
    "answer": "Yes, the Rust compiler is available as a module."
  },
  {
    "question": "How can I find information about the Rust compiler module?",
    "answer": "You can find information about the Rust compiler module by running the command `module spider rust`."
  },
  {
    "question": "What is a 'crate' in Rust?",
    "answer": "A 'crate' is the term for a package written in Rust."
  },
  {
    "question": "What are the general steps to install a Rust crate?",
    "answer": "The general steps involve loading the required modules, then building and installing the crate locally from a login node, and finally testing the binary."
  },
  {
    "question": "What command is used to load the necessary modules before installing a Rust crate?",
    "answer": "You use the command `module load rust` to load the required modules."
  },
  {
    "question": "How do you install a crate from Crates.io, for example, 'ungoliant'?",
    "answer": "After loading the `rust` module, you can install a crate like 'ungoliant' from Crates.io by running `cargo install ungoliant` from a login node."
  },
  {
    "question": "Where must a crate be installed locally from Crates.io?",
    "answer": "This must be done from a login node."
  },
  {
    "question": "How can you test the binary of a locally installed crate like 'ungoliant'?",
    "answer": "You can test the binary using the command `$HOME/.cargo/bin/ungoliant -h`."
  },
  {
    "question": "How do you add the '.cargo/bin' directory to your PATH environment variable?",
    "answer": "You can add it to your PATH with the command `export PATH=\"$HOME/.cargo/bin:$PATH\"`."
  },
  {
    "question": "How do you install a Rust crate from a Git repository?",
    "answer": "First, load the required modules with `module load rust`, then build and install the crate locally from a login node using `cargo install --git https://github.com/username/repo-name`, and finally test the binary."
  },
  {
    "question": "What is the command to install a crate from a Git repository?",
    "answer": "The command is `cargo install --git https://github.com/username/repo-name`."
  },
  {
    "question": "Why might someone need the Rust nightly compiler?",
    "answer": "Some optimization features are not yet stable and are not part of the stable release, but certain crates might make use of them, requiring the nightly compiler."
  },
  {
    "question": "What are the steps to install the Rust nightly compiler locally?",
    "answer": "First, install the compiler as a local module using `eb Rust-1.53.0.eb --try-software-version=nightly --disable-enforce-checksums`, then load the local module with `module load rust/nightly`."
  },
  {
    "question": "How do you load the local module for the Rust nightly compiler?",
    "answer": "You load it using the command `module load rust/nightly`."
  },
  {
    "question": "How can you reclaim disk space used by Cargo cache and registry?",
    "answer": "You can reclaim space by removing the Cargo registry."
  },
  {
    "question": "What command is used to clean up the Cargo registry cache?",
    "answer": "The command `rm -r ~/.cargo/registry` is used to remove the Cargo registry."
  }
]