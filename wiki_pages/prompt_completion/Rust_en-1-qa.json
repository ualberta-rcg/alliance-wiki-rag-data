[
  {
    "question": "What kind of programming language is Rust?",
    "answer": "Rust is a multi-paradigm, high-level, general-purpose programming language."
  },
  {
    "question": "What aspects does Rust emphasize?",
    "answer": "Rust emphasizes performance, type safety, and concurrency."
  },
  {
    "question": "How does Rust achieve memory safety?",
    "answer": "Rust enforces memory safety without requiring the use of a garbage collector or reference counting."
  },
  {
    "question": "What does memory safety in Rust mean?",
    "answer": "Memory safety in Rust means that all references point to valid memory."
  },
  {
    "question": "How is the Rust compiler available?",
    "answer": "The Rust compiler is available as a module."
  },
  {
    "question": "What command can be used to find information about the Rust module?",
    "answer": "You can use `module spider rust` to find information about the Rust module."
  },
  {
    "question": "What is a package written in Rust called?",
    "answer": "A package written in Rust is called a 'crate'."
  },
  {
    "question": "What is the first step when installing a Rust crate?",
    "answer": "The first step is to load the required modules using `module load rust`."
  },
  {
    "question": "How do you build and install a Rust crate locally?",
    "answer": "You can build and install a crate locally using the command `cargo install ungoliant`."
  },
  {
    "question": "Where must local crate installation be performed?",
    "answer": "Local crate installation must be done from a login node."
  },
  {
    "question": "How can you test a binary after installing a Rust crate?",
    "answer": "You can test the binary using `$HOME/.cargo/bin/ungoliant -h`."
  },
  {
    "question": "How do you add the `.cargo/bin` directory to your PATH environment variable?",
    "answer": "You can add `.cargo/bin` to your `$PATH` with `export PATH=\"$HOME/.cargo/bin:$PATH\"`."
  },
  {
    "question": "Why might someone need to use the Rust nightly compiler?",
    "answer": "Some optimization features are not yet stable and are not part of the stable release, but certain crates make use of them, requiring the Rust nightly compiler."
  },
  {
    "question": "How do you install the Rust nightly compiler as a local module?",
    "answer": "You install the compiler as a local module using `eb Rust-1.53.0.eb --try-software-version=nightly --disable-enforce-checksums`."
  },
  {
    "question": "How do you load a locally installed Rust nightly module?",
    "answer": "You load the local module using `module load rust/nightly`."
  }
]