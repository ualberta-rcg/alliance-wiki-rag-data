[
  {
    "question": "Why is it preferable to use checkpoints for long-running software?",
    "answer": "Checkpoints are preferable for long-running software to minimize the risk of losing several days' worth of computation, especially because such jobs are subject to risks like system instability, power outages, and hardware defects."
  },
  {
    "question": "What is the primary reason execution time for a program can be too long?",
    "answer": "The execution time for a program can sometimes be too long for the maximum duration of a job permitted by the job schedulers used on the clusters."
  },
  {
    "question": "What form do checkpoints take?",
    "answer": "Checkpoints take the form of binary disk files."
  },
  {
    "question": "How can a program be restarted using a checkpoint file?",
    "answer": "A program can be restarted from a checkpoint file at the exact point in the computation where the checkpoint file was initially created."
  },
  {
    "question": "What should a user do if the application they are using already handles checkpoint creation and loading?",
    "answer": "If the application already handles checkpoint creation and loading, the user simply needs to read the relevant documentation about how to use this functionality."
  },
  {
    "question": "When can a user implement checkpoint/restart functionality themselves?",
    "answer": "A user can implement checkpoint/restart functionality themselves if they have access to the source code of the software and/or if they are the author."
  },
  {
    "question": "What is the suggested frequency for creating a checkpoint file?",
    "answer": "The creation of a checkpoint file is suggested to be done periodically, with a frequency of every 2 to 24 hours."
  },
  {
    "question": "What is an important consideration when writing a checkpoint file?",
    "answer": "When writing the checkpoint file, it's important to remember that the program could be interrupted at any moment for a variety of reasons."
  },
  {
    "question": "What is a recommended practice regarding the preceding checkpoint when creating a new one?",
    "answer": "It is preferable to not delete the preceding checkpoint when creating the new one."
  },
  {
    "question": "How can the creation of a checkpoint file be made 'atomic'?",
    "answer": "The creation of the checkpoint file can be made 'atomic' by performing an operation which confirms the end of the checkpoint process."
  },
  {
    "question": "Can you provide an example of making a checkpoint file creation atomic?",
    "answer": "One example is to initially name the checkpoint file based on the date and time, and as the final step, point a symbolic link 'latest-version' at this new checkpoint file."
  },
  {
    "question": "What is an advanced method to verify checkpoint file integrity during restart?",
    "answer": "A more advanced method is to create a second file containing a hash of the checkpoint file's content, which the restart function can use to verify integrity when loaded."
  },
  {
    "question": "When can older checkpoints be deleted?",
    "answer": "Older checkpoints can be deleted once the atomic write process for the new checkpoint has been completed."
  }
]