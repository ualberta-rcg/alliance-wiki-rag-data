[
  {
    "question": "What is SQLite software?",
    "answer": "SQLite is a relational database software that resides entirely in a single file stored on disk and does not require a database server."
  },
  {
    "question": "How is data accessed in an SQLite database?",
    "answer": "Data in an SQLite database can be accessed using standard SQL (Structured Query Language) commands like `SELECT`."
  },
  {
    "question": "Which programming languages support APIs for interacting with SQLite databases?",
    "answer": "APIs for interacting with SQLite databases are available for C/C++, Python, R, Java, and Perl."
  },
  {
    "question": "How can SQLite be useful for managing a large collection of small files, such as images?",
    "answer": "Modern relational databases, including SQLite, contain datatypes for handling the storage of 'binary blobs', making it much more practical to store a collection of millions of small PNG or JPEG images inside a single SQLite file rather than as individual files."
  },
  {
    "question": "What are the potential drawbacks or considerations when using SQLite?",
    "answer": "There is an overhead of creating the SQLite database, familiarity with SQL and designing a simple relational database is assumed, and performance can degrade for very large database files (several gigabytes or more)."
  },
  {
    "question": "What alternatives should be considered if SQLite's performance degrades with very large database files?",
    "answer": "For very large database files, contemplating the use of a more traditional database server like MySQL or PostgreSQL may be necessary."
  },
  {
    "question": "What is the executable name for SQLite?",
    "answer": "The SQLite executable is called `sqlite3`."
  },
  {
    "question": "How is `sqlite3` made available on the systems?",
    "answer": "The `sqlite3` executable is available via the `nixpkgs` module, which is loaded by default on the systems."
  },
  {
    "question": "When creating an archive from many files, what utility can be used for parallel compression?",
    "answer": "When creating an archive from a significant number of files, `pigz` can be used instead of the traditional `gzip` for parallel compression."
  },
  {
    "question": "Provide an example command for using `pigz` with `tar` to compress an archive using 4 cores.",
    "answer": "The command `tar -vc --use-compress-program=\"pigz -p 4\" -f dir.tar.gz dir_to_tar` will compress an archive using `pigz` with 4 cores."
  },
  {
    "question": "Is it possible to extract only a portion of an archive?",
    "answer": "Yes, sometimes it is not necessary to extract all the content of an archive, but only a part of it."
  },
  {
    "question": "How can a specific folder be extracted from a compressed archive to the local disk?",
    "answer": "A specific folder can be extracted from a compressed archive and saved on the local disk using the command `tar -zxf /path/to/archive.tar.gz dir/subdir --directory $SLURM_TMPDIR`."
  },
  {
    "question": "What environment variable typically points to the local disk within a job environment?",
    "answer": "`$SLURM_TMPDIR` typically points to the local disk within a job environment."
  },
  {
    "question": "What happens to the `.git` repository subdirectory over time?",
    "answer": "Over time, the number of files in the hidden `.git` repository subdirectory can grow significantly."
  },
  {
    "question": "Which Git command can help manage the number of files in the `.git` repository and speed up Git operations?",
    "answer": "Using `git repack` will pack many of the files together into a few large database files and greatly speed up Git's operations."
  }
]