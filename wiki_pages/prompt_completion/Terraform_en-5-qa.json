[
  {
    "question": "How do you allocate a floating IP in Terraform for OpenStack?",
    "answer": "You define a `resource \"openstack_networking_floatingip_v2\"` block, specifying the `pool` from which to allocate, like `pool = \"provider-199-2\"`. Then run `terraform apply`."
  },
  {
    "question": "What is the Terraform definition for allocating a floating IP from the \"provider-199-2\" pool?",
    "answer": "resource \"openstack_networking_floatingip_v2\" \"myvm_fip\" {\n  pool = \"provider-199-2\"\n}"
  },
  {
    "question": "How do you associate an allocated floating IP with a VM in Terraform?",
    "answer": "You define a `resource \"openstack_compute_floatingip_associate_v2\"` block, using `floating_ip = openstack_networking_floatingip_v2.myvm_fip.address` and `instance_id = openstack_compute_instance_v2.myvm.id` to reference the allocated floating IP and the VM instance."
  },
  {
    "question": "What is the general syntax for referencing attributes of other resources in Terraform?",
    "answer": "References are typically formatted as `<resource type>.<resource name>.<attribute>`."
  },
  {
    "question": "What happens immediately after `terraform apply` allocates a floating IP but before it's associated with a VM?",
    "answer": "The floating IP is allocated to the project but not yet associated with the VM."
  },
  {
    "question": "How can you attempt to connect to a new VM via SSH after adding a floating IP?",
    "answer": "You can use the command `ssh centos@X.Y.Z.W hostname`, replacing `X.Y.Z.W` with the floating IP address."
  },
  {
    "question": "What should be done if you cannot SSH into your new VM even after associating a floating IP?",
    "answer": "It may be necessary to add your workstation's IP address to the project's default security group."
  },
  {
    "question": "How do you add a root volume to an OpenStack VM using Terraform configuration?",
    "answer": "A root volume is added as a `block_device` sub-block within the `openstack_compute_instance_v2` resource definition, alongside other sub-blocks like `network`."
  },
  {
    "question": "What specific attributes are required in a `block_device` sub-block to create a root volume from an image?",
    "answer": "Required attributes include `uuid` (of the image), `source_type = \"image\"`, `destination_type = \"volume\"`, `volume_size`, `boot_index = 0`, and `delete_on_termination`."
  },
  {
    "question": "Why is adding a root volume to an existing VM considered a destructive operation in Terraform?",
    "answer": "Because it replaces the VM's boot disk, leading Terraform to destroy and then recreate the associated resources."
  },
  {
    "question": "What is the purpose of the `delete_on_termination` attribute in a `block_device` configuration?",
    "answer": "Setting `delete_on_termination` to `true` (for testing) ensures the volume is cleaned up when the VM is destroyed, while `false` (for real use) acts as a defense against accidental deletion of resources."
  },
  {
    "question": "What problem arises if `image_id` is left in the outer `openstack_compute_instance_v2` block when a `block_device` sub-block is also defined for booting from a volume?",
    "answer": "Terraform will detect a change from \"boot from volume\" to \"boot directly from image\" on every run, causing it to continuously attempt to rebuild the instance."
  },
  {
    "question": "How does a Terraform plan indicate that a resource will be destroyed and recreated?",
    "answer": "The plan uses the symbol `-/?` followed by \"destroy and then create replacement\" next to the resource."
  },
  {
    "question": "What does `destination_type = \"volume\"` signify in a `block_device` configuration?",
    "answer": "It indicates that the boot disk should be stored with an OpenStack-provided volume rather than directly using disk space on the hypervisor."
  }
]