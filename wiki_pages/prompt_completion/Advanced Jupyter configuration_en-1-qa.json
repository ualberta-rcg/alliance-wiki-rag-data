[
  {
    "question": "What are Jupyter Lab and notebooks primarily designed for?",
    "answer": "Jupyter Lab and notebooks are meant for short interactive tasks such as testing, debugging, or quickly visualizing data (few minutes)."
  },
  {
    "question": "What should be used for longer analysis tasks instead of Jupyter Lab notebooks?",
    "answer": "Running longer analysis must be done in a non-interactive job (sbatch)."
  },
  {
    "question": "Where can one find information on running notebooks as Python scripts?",
    "answer": "Information on running notebooks as Python scripts can be found in the [[Advanced_Jupyter_configuration#Running_notebooks_as_Python_scripts|how to run notebooks as python scripts below]] section."
  },
  {
    "question": "What is Project Jupyter?",
    "answer": "Project Jupyter is a non-profit, open-source project, born out of the IPython Project in 2014, evolving to support interactive data science and scientific computing across all programming languages."
  },
  {
    "question": "What is JupyterLab?",
    "answer": "JupyterLab is a web-based interactive development environment for notebooks, code, and data, with a flexible interface and modular design that allows for extensions."
  },
  {
    "question": "Where should a JupyterLab server ideally be run?",
    "answer": "A JupyterLab server should only run on a compute node or on a cloud instance."
  },
  {
    "question": "Why are cluster login nodes not recommended for running a JupyterLab server?",
    "answer": "Cluster login nodes are not a good choice because they impose various limits which can stop applications if they consume too much CPU time or memory."
  },
  {
    "question": "How can users reserve compute resources for JupyterLab on a compute node?",
    "answer": "Users can reserve compute resources by submitting a job that requests a specific number of CPUs (and optionally GPUs), an amount of memory, and the run time."
  },
  {
    "question": "Where can users find a preconfigured Jupyter environment?",
    "answer": "If looking for a preconfigured Jupyter environment, users should check the [[Jupyter]] page."
  },
  {
    "question": "How is JupyterLab installed according to these instructions?",
    "answer": "JupyterLab is installed using the `pip` command within a Python virtual environment."
  },
  {
    "question": "What is the first step if you don't have an existing Python virtual environment for JupyterLab?",
    "answer": "If you do not have an existing Python virtual environment, the first step is to create one, starting by loading a Python module using `module load python`."
  },
  {
    "question": "What module must be loaded first if you intend to use RStudio Server with JupyterLab?",
    "answer": "If you intend to use RStudio Server, you must first load the `rstudio-server` module before the `python` module: `module load rstudio-server python`."
  },
  {
    "question": "How do you create a new Python virtual environment for JupyterLab?",
    "answer": "A new Python virtual environment can be created using the command `virtualenv --no-download $HOME/jupyter_py3`."
  },
  {
    "question": "How do you activate a newly created Python virtual environment?",
    "answer": "To activate a newly created Python virtual environment, use the command `source $HOME/jupyter_py3/bin/activate`."
  },
  {
    "question": "What are the commands to install JupyterLab within a new virtual environment?",
    "answer": "First, run `pip install --no-index --upgrade pip`, and then `pip install --no-index jupyterlab`."
  },
  {
    "question": "How long does installing JupyterLab in a new virtual environment typically take?",
    "answer": "Installing JupyterLab in a new virtual environment typically takes a few minutes."
  },
  {
    "question": "How do you create a wrapper script to launch JupyterLab within the virtual environment?",
    "answer": "You can create a wrapper script by running: `echo -e '#!/bin/bash\nunset XDG_RUNTIME_DIR\njupyter lab --ip $(hostname -f) --no-browser' > $VIRTUAL_ENV/bin/jupyterlab.sh`."
  },
  {
    "question": "What command makes the JupyterLab wrapper script executable?",
    "answer": "The command `chmod u+x $VIRTUAL_ENV/bin/jupyterlab.sh` makes the JupyterLab wrapper script executable."
  },
  {
    "question": "What is the primary function of JupyterLab extensions?",
    "answer": "Extensions allow you to add functionalities and modify the JupyterLab\u2019s user interface."
  },
  {
    "question": "What is Jupyter Lmod used for?",
    "answer": "Jupyter Lmod is an extension that allows you to interact with environment modules, such as loading and unloading, using the Lmod's Python interface before launching kernels."
  },
  {
    "question": "What are the commands to install the Jupyter Lmod extension?",
    "answer": "To install Jupyter Lmod, first run `module load nodejs`, then `pip install jupyterlmod`, and finally `jupyter labextension install jupyterlab-lmod`."
  },
  {
    "question": "How long does the installation of the `jupyterlab-lmod` extension typically take?",
    "answer": "The `jupyter labextension install jupyterlab-lmod` command takes a few minutes to complete."
  },
  {
    "question": "Where can one find instructions for managing loaded software modules in JupyterLab?",
    "answer": "Instructions on how to manage loaded software modules in the JupyterLab interface are provided on the [[JupyterHub#JupyterLab|JupyterHub page]]."
  },
  {
    "question": "What functionality does the RStudio Server extension provide within JupyterLab?",
    "answer": "The RStudio Server extension allows users to develop R codes in an RStudio environment that appears in their web browser in a separate tab."
  },
  {
    "question": "What is the specific module loading order for RStudio Server when preparing to install JupyterLab?",
    "answer": "You must load the `rstudio-server` module *before* the `python` module and *before* creating a new virtual environment: `module load rstudio-server python`."
  },
  {
    "question": "After installing JupyterLab, what additional package is required for RStudio Server functionality?",
    "answer": "After JupyterLab is installed, you need to install the Jupyter RSession proxy using `pip install --no-index jupyter-rsession-proxy`."
  },
  {
    "question": "Where should the RStudio application appear within JupyterLab after its installation?",
    "answer": "In JupyterLab, the RStudio application should appear in the *Launcher* tab."
  }
]