[
  {
    "question": "What is C?",
    "answer": "C is a general-purpose, high-level, imperative programming language."
  },
  {
    "question": "Who created the C programming language?",
    "answer": "C was created by Dennis Ritchie between 1969 and 1973 at Bell Labs."
  },
  {
    "question": "What are the main ISO standards for C and their corresponding years?",
    "answer": "C is represented by ISO standards C90 (or C89) from 1989/1990, C99 from 1999, and C11 from 2011."
  },
  {
    "question": "What significant changes did the C99 standard introduce?",
    "answer": "C99 added language and Standard Library features, and `int` is no longer implicitly assumed."
  },
  {
    "question": "What major features were added in the C11 standard?",
    "answer": "C11 was a major release that added memory model and concurrency support, including features like threads, atomics, and compare-and-swap."
  },
  {
    "question": "Where can one find links to drafts of the ISO C standard documents?",
    "answer": "Links to the last drafts before each ISO C standard release can be found in the reference sections of the Wikipedia pages mentioned."
  },
  {
    "question": "Where can official ISO C standard documents be purchased?",
    "answer": "Official ISO C standard documents may be purchased from the Standards Council of Canada."
  },
  {
    "question": "What was the status of concurrency and memory models in the ISO C standard prior to 2011?",
    "answer": "Prior to 2011, the ISO C standard had no definitions of concurrency and memory models."
  },
  {
    "question": "What is the implication of compiling concurrent C code prior to C11?",
    "answer": "In pre-C11 compiled code, there are no guarantees concerning the ordering of memory reads and writes under concurrency, which is likely undefined behavior."
  },
  {
    "question": "How should concurrent C code preferably be compiled?",
    "answer": "It is preferable to compile concurrent C code as C11 code (or newer)."
  },
  {
    "question": "What is the typical usage of the `volatile` keyword in C and C++?",
    "answer": "The `volatile` keyword in C and C++ has a very specific meaning, is rarely needed, and is typically limited to certain kinds of low-level code."
  },
  {
    "question": "How does Java's `volatile` keyword differ from C's `volatile`?",
    "answer": "Java's `volatile` has a totally different meaning from C's `volatile`; specifically, Java's `volatile` keyword in C corresponds to using `atomic_*`."
  },
  {
    "question": "What is a potential issue with the GCC compiler's -O3 optimization option?",
    "answer": "The GCC compiler's -O3 option includes possibly unsafe optimizations for some types of code, such as code relying on aliasing."
  },
  {
    "question": "What GCC optimization option is recommended if unsure about -O3?",
    "answer": "If unsure about the GCC -O3 option, it is recommended to compile and optimize code using the -O2 option instead."
  },
  {
    "question": "What is a potential issue with default floating-point optimizations in Intel C/C++ compilers?",
    "answer": "Intel C/C++ compilers may default to using possibly unsafe optimizations for floating-point operations."
  },
  {
    "question": "Which options are recommended for ANSI/ISO/IEEE standards-compliant floating-point support with Intel C/C++ compilers?",
    "answer": "For ANSI/ISO/IEEE standards-compliant floating-point support, users of Intel compilers are recommended to use either the `-fp-model precise` or `-fp-model source` options."
  }
]