[
  {
    "question": "What is GROMACS?",
    "answer": "GROMACS is a molecular dynamics simulation software capable of handling systems composed of a few hundred to several million particles."
  },
  {
    "question": "What types of molecules was GROMACS initially designed for?",
    "answer": "GROMACS was initially designed for biochemical molecules with numerous complex binding interactions, such as proteins, lipids, and nucleic acids."
  },
  {
    "question": "Why is GROMACS also used for non-biological systems?",
    "answer": "GROMACS is also used for non-biological systems (e.g., polymers) due to its speed in calculating non-binding interactions, which often dominate simulation computation time."
  },
  {
    "question": "What are the main strengths of GROMACS?",
    "answer": "GROMACS offers very good performance compared to other applications, excellent CUDA acceleration for Nvidia GPUs since version 4.6, a wide choice of trajectory analysis tools, parallel execution with MPI or Thread MPI, and is free software under LGPL 2.1."
  },
  {
    "question": "Which GROMACS version introduced excellent CUDA acceleration for GPUs?",
    "answer": "Excellent CUDA acceleration for GPUs has been available since GROMACS 4.6."
  },
  {
    "question": "What are the GPU requirements for GROMACS CUDA acceleration?",
    "answer": "GROMACS CUDA acceleration requires Nvidia GPUs with compute capability greater than or equal to 2.0 (e.g., Fermi or later)."
  },
  {
    "question": "How does GROMACS support parallel execution?",
    "answer": "GROMACS supports parallel execution using the standard MPI protocol or the Thread MPI computation library for single-node workstations."
  },
  {
    "question": "Under what license is GROMACS distributed?",
    "answer": "GROMACS is free software distributed under version 2.1 of the LGPL (GNU Lesser General Public License)."
  },
  {
    "question": "What are some of the weaknesses or limitations of GROMACS?",
    "answer": "Weaknesses include reduced interactive analysis to increase simulation speed, significant variation in simulation methods and default parameters between versions making reproduction difficult, and analysis tools/utilities that may contain bugs or be poorly documented."
  },
  {
    "question": "Why is it difficult to get non-standard information from a GROMACS simulation?",
    "answer": "To increase simulation speed, interactive analyses and/or data collection are reduced, making it difficult to obtain non-standard information about the simulated system."
  },
  {
    "question": "What problem can arise when using different GROMACS versions for simulations?",
    "answer": "Simulation methods and default parameters vary greatly from one version to another, which can make it difficult to reproduce the same results with different versions."
  },
  {
    "question": "What is recommended when using GROMACS's analysis tools?",
    "answer": "It is recommended to use independent methods to verify results because the analysis tools and utilities added to the program are not always of the best quality, potentially containing bugs and often having poorly documented methods."
  },
  {
    "question": "How can a user verify if their GROMACS version allows GPU usage?",
    "answer": "The first part of the logging file describes the configuration and indicates whether the used version allows GPU usage."
  },
  {
    "question": "How does GROMACS utilize computing resources regarding CPUs and GPUs?",
    "answer": "GROMACS uses both CPUs and GPUs, and performance depends on a reasonable balance between the two."
  },
  {
    "question": "What MDP file variable is crucial for GPU acceleration with GROMACS?",
    "answer": "The `cutoff-scheme` variable, which was added due to the new neighbor structure, is crucial for GPU acceleration."
  },
  {
    "question": "What `cutoff-scheme` value is required for GPU acceleration in GROMACS, and when did it become default?",
    "answer": "For GPU acceleration, `cutoff-scheme = verlet` is required, which became the default in GROMACS version 5."
  },
  {
    "question": "What was the default `cutoff-scheme` in GROMACS versions prior to 4.6?",
    "answer": "The default `cutoff-scheme` in GROMACS versions prior to 4.6 was `group`."
  },
  {
    "question": "How do you load GROMACS 2024.4 for CPU usage in the `StdEnv/2023` environment?",
    "answer": "You load it using the command: `module load StdEnv/2023 gcc/12.3 openmpi/4.1.5 gromacs/2024.4`."
  },
  {
    "question": "How do you load GROMACS 2024.4 for GPU (CUDA) usage in the `StdEnv/2023` environment?",
    "answer": "You load it using the command: `module load StdEnv/2023 gcc/12.3 openmpi/4.1.5 cuda/12.2 gromacs/2024.4`."
  },
  {
    "question": "What components are typically included with GROMACS versions (e.g., 2024.4, 2024.1, 2023.3) when loaded in the `StdEnv/2023` environment?",
    "answer": "These versions are typically compiled with GCC, FlexiBLAS, and FFTW."
  },
  {
    "question": "What additional module must be loaded to enable GPU support for GROMACS?",
    "answer": "To enable GPU support for GROMACS, you must first load the `cuda` module."
  }
]