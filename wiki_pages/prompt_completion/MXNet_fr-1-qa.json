[
  {
    "question": "Qu'est-ce que MXNet?",
    "answer": "MXNet est une librairie en apprentissage profond \u00e0 la fois souple et efficace qui permet de combiner la programmation symbolique et imp\u00e9rative pour maximiser l'efficacit\u00e9 et la productivit\u00e9."
  },
  {
    "question": "Quelles sont les principales caract\u00e9ristiques techniques de MXNet?",
    "answer": "MXNet contient un planificateur de d\u00e9pendances dynamique qui parall\u00e9lise automatiquement les op\u00e9rations, une couche sup\u00e9rieure d'optimisation des graphes pour une ex\u00e9cution rapide et \u00e9conome en m\u00e9moire, et il est portable, l\u00e9ger et \u00e9volutif pour de nombreux GPU et machines."
  },
  {
    "question": "Comment peut-on v\u00e9rifier les paquets MXNet disponibles?",
    "answer": "Pour savoir quels paquets sont disponibles, utilisez la commande `avail_wheels mxnet`."
  },
  {
    "question": "Quelles versions de MXNet sont list\u00e9es comme disponibles pour Python?",
    "answer": "La version 1.9.1 de MXNet est disponible pour Python 3.9 (cp39), Python 3.8 (cp38) et Python 3.10 (cp310), toutes avec une architecture avx2."
  },
  {
    "question": "Quelles sont les \u00e9tapes pour cr\u00e9er et activer un environnement virtuel Python pour MXNet?",
    "answer": "1. Chargez le module `python/3.10`. 2. Cr\u00e9ez l'environnement virtuel avec `virtualenv --no-download ~/env`. 3. Activez l'environnement avec `source ~/env/bin/activate`."
  },
  {
    "question": "Comment installer MXNet et ses d\u00e9pendances Python dans un environnement virtuel?",
    "answer": "Utilisez la commande `pip install --no-index mxnet` apr\u00e8s avoir activ\u00e9 votre environnement virtuel."
  },
  {
    "question": "Comment valider l'installation de MXNet?",
    "answer": "Ex\u00e9cutez la commande `python -c \"import mxnet as mx;print((mx.nd.ones((2, 3))*2).asnumpy());\"`. Le r\u00e9sultat attendu est `[[2. 2. 2.] [2. 2. 2.]]`."
  },
  {
    "question": "Quel est le but du script Python `mxnet-conv-ex.py`?",
    "answer": "Le script `mxnet-conv-ex.py` fournit un exemple de couche simple pour les convolutions avec MXNet, illustrant la cr\u00e9ation d'un symbole de convolution et son ex\u00e9cution sur CPU ou GPU."
  },
  {
    "question": "Quelles sont les directives SLURM pour ex\u00e9cuter une t\u00e2che MXNet sur CPU?",
    "answer": "Les directives SLURM pour une t\u00e2che CPU incluent `#SBATCH --job-name`, `#SBATCH --account`, `#SBATCH --time`, `#SBATCH --cpus-per-task`, et `#SBATCH --mem`. Il faut ensuite charger `python/3.10`, cr\u00e9er/activer un environnement virtuel et installer MXNet 1.9.1, puis ex\u00e9cuter le script Python."
  },
  {
    "question": "Quelle directive SLURM est n\u00e9cessaire pour ex\u00e9cuter une t\u00e2che MXNet sur GPU?",
    "answer": "Pour ex\u00e9cuter une t\u00e2che MXNet sur GPU, il faut ajouter la directive SLURM `#SBATCH --gres=gpu:1` pour demander une ressource GPU."
  },
  {
    "question": "Comment soumettre un script de t\u00e2che MXNet \u00e0 l'ordonnanceur?",
    "answer": "Pour soumettre la t\u00e2che \u00e0 l'ordonnanceur, utilisez la commande `sbatch mxnet-conv.sh`."
  },
  {
    "question": "Quelles impl\u00e9mentations MXNet utilise-t-il pour les op\u00e9rations CPU et GPU?",
    "answer": "Pour les CPU, MXNet utilise OpenMP et MKLDNN, et pour les GPU, il utilise CUDA et cuDNN pour des op\u00e9rations comme les multiplications matricielles et les convolutions."
  },
  {
    "question": "Est-il pr\u00e9f\u00e9rable d'utiliser plusieurs CPU ou un seul GPU avec MXNet, et pourquoi?",
    "answer": "Il est fortement encourag\u00e9 d'utiliser plusieurs CPU plut\u00f4t qu'un seul GPU. Si le mod\u00e8le et l'ensemble de donn\u00e9es ne sont pas assez grands, un GPU n'utilisera qu'un faible pourcentage de sa capacit\u00e9, bloquant inutilement une ressource partag\u00e9e et ayant un effet n\u00e9gatif sur la priorit\u00e9 des t\u00e2ches des autres utilisateurs."
  },
  {
    "question": "Comment le script Python de l'exemple de haute performance d\u00e9termine-t-il le contexte d'ex\u00e9cution (CPU ou GPU)?",
    "answer": "Le script utilise `ctx = gpu() if context.num_gpus() > 0 else cpu()` pour d\u00e9finir le contexte d'ex\u00e9cution, choisissant un GPU s'il est disponible, sinon un CPU."
  },
  {
    "question": "Quel est le nom du dataset utilis\u00e9 dans l'exemple Python pour la haute performance?",
    "answer": "Le dataset utilis\u00e9 dans l'exemple Python est CIFAR10."
  }
]