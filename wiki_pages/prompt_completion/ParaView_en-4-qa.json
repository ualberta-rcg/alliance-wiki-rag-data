[
  {
    "question": "How do you compile CMake on a Cloud VM for client-server visualization?",
    "answer": "To compile CMake, first download `cmake-3.7.0.tar.gz` using `wget https://cmake.org/files/v3.7/cmake-3.7.0.tar.gz`, then unpack it, navigate into the directory, run `./bootstrap`, `make`, and finally `sudo make install`."
  },
  {
    "question": "What are the steps and CMake flags to compile LLVM on a Cloud VM for ParaView server setup?",
    "answer": "To compile LLVM, navigate to your home directory, download `llvm-3.9.1.src.tar.xz` using `wget http://releases.llvm.org/3.9.1/llvm-3.9.1.src.tar.xz`, unpack it, create and change into a `build` directory. Then run `cmake` with the flags `-DCMAKE_BUILD_TYPE=Release`, `-DLLVM_BUILD_LLVM_DYLIB=ON`, `-DLLVM_ENABLE_RTTI=ON`, `-DLLVM_INSTALL_UTILS=ON`, `-DLLVM_TARGETS_TO_BUILD:STRING=X86`, followed by `make` and `sudo make install`."
  },
  {
    "question": "How do you compile Mesa with OSMesa support for offscreen rendering on a Cloud VM?",
    "answer": "First, navigate to your home directory, download `mesa-17.0.0.tar.gz` using `wget ftp://ftp.freedesktop.org/pub/mesa/mesa-17.0.0.tar.gz`, and unpack it. Then, run `./configure` with specific flags like `--enable-opengl`, `--disable-gles1`, `--disable-gles2`, `--enable-shared-glapi`, `--enable-gallium-llvm`, `--enable-llvm-shared-libs`, `--with-gallium-drivers=swrast,swr`, `--disable-dri`, `--disable-egl`, `--disable-gbm`, `--disable-glx`, `--disable-osmesa`, and `--enable-gallium-osmesa`. Finally, run `make` and `sudo make install`."
  },
  {
    "question": "Which software rasterization drivers are built with the default OSMesa configuration, and which is recommended?",
    "answer": "The default configuration builds `llvmpipe` (older and slower) and `SWR` (newer and faster) drivers. `SWR` is recommended for use."
  },
  {
    "question": "What are the compilation steps and CMake flags for the ParaView server on a Cloud VM?",
    "answer": "To compile the ParaView server, navigate to your home directory, download `ParaView-v5.2.0.tar.gz` using `wget http://www.paraview.org/files/v5.2/ParaView-v5.2.0.tar.gz`, and unpack it. Create and change into a `build` directory. Then run `cmake` with flags `-DCMAKE_BUILD_TYPE=Release`, `-DCMAKE_INSTALL_PREFIX=/home/centos/paraview`, `-DPARAVIEW_USE_MPI=OFF`, `-DPARAVIEW_ENABLE_PYTHON=ON`, `-DPARAVIEW_BUILD_QT_GUI=OFF`, `-DVTK_OPENGL_HAS_OSMESA=ON`, `-DVTK_USE_OFFSCREEN=ON`, `-DVTK_USE_X=OFF`. Finally, run `make` and `make install`."
  },
  {
    "question": "How do you start the ParaView server on a Cloud VM with SWR rendering?",
    "answer": "You start the ParaView server using the command `./paraview/bin/pvserver --mesa-swr-avx2`."
  },
  {
    "question": "What message indicates that SWR rendering is successfully detected when starting the ParaView server on a Cloud VM?",
    "answer": "During rendering in the console, you should see the message 'SWR detected AVX2'."
  },
  {
    "question": "How do you establish an SSH tunnel from your local computer to a Cloud VM for ParaView client-server connection?",
    "answer": "On your computer, use the command `ssh centos@vm.ip.address -L 11111:localhost:11111` to tunnel local port 11111 to the VM's port 11111."
  },
  {
    "question": "After setting up the SSH tunnel, how do you connect the ParaView client on your local computer to the server running on a Cloud VM?",
    "answer": "Start the ParaView client on your computer, go to `File -> Connect` (or click the green 'Connect' button), click `Add Server`, and configure it with `host = localhost` and `port = 11111`. Select 'Manual' configuration, save, and then connect to the added server."
  },
  {
    "question": "What are the maximum memory and core limits for interactive visualizations on Graham VDI nodes?",
    "answer": "Graham VDI nodes can be used for interactive visualizations requiring up to 256GB memory and 16 cores."
  },
  {
    "question": "What command is used to load the environment module on Graham VDI nodes?",
    "answer": "The command `module load CcEnv` is used to load the environment module."
  },
  {
    "question": "How can you list available ParaView module versions on Graham VDI nodes?",
    "answer": "You can list available ParaView module versions by running `module spider paraview`."
  },
  {
    "question": "What is the recommended command to launch recent versions of ParaView on Graham VDI nodes?",
    "answer": "After loading the necessary modules like `StdEnv/2020`, `gcc/9.3.0`, `openmpi/4.0.3`, and `paraview/5.11.0`, use `LD_PRELOAD=${LD_PRELOAD/libdlfaker.so/} paraview` to disable the VirtualGL dynamic linker faker."
  },
  {
    "question": "When is batch rendering recommended for visualization tasks?",
    "answer": "Batch rendering is strongly recommended for large-scale and automated visualization tasks."
  },
  {
    "question": "How can large-scale visualization workflows be automated using ParaView?",
    "answer": "Large-scale visualization workflows can be automated by scripting the workflow using ParaView's Python scripting capabilities and submitting it as a regular, potentially parallel, production job on a cluster."
  }
]