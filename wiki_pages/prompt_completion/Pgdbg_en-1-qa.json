[
  {
    "question": "What is PGDBG used for?",
    "answer": "PGDBG is a powerful and simple tool for debugging both MPI-parallel and OpenMP thread-parallel Linux applications."
  },
  {
    "question": "Which software package includes PGDBG?",
    "answer": "PGDBG is included in the PGI compiler package."
  },
  {
    "question": "What kind of debugging is PGDBG primarily configured for?",
    "answer": "It is configured for OpenMP thread-parallel debugging."
  },
  {
    "question": "For which programming languages are regular GNU debuggers like GDB suitable?",
    "answer": "Regular GNU debuggers such as GDB can be used for most C, C++, or Fortran 77 codes."
  },
  {
    "question": "Why was PGDBG developed by The Portland Group?",
    "answer": "PGDBG was developed because Fortran 90/95 programs are not handled very well by GDB, and PGDBG is more suited for such codes."
  },
  {
    "question": "What are the two operational modes provided by Pgdbg?",
    "answer": "Pgdbg is provided in two modes: a graphical mode with enabled X11 forwarding or a text mode."
  },
  {
    "question": "What are the two main steps for using PGDBG?",
    "answer": "The two steps are Compilation (compiling the code with debugging enabled) and Execution and debugging (executing the code and analyzing the results)."
  },
  {
    "question": "How can debugging be accomplished with PGDBG?",
    "answer": "The actual debugging can be accomplished in either command-line mode or graphical mode."
  },
  {
    "question": "What needs to be loaded before profiling with PGDBG?",
    "answer": "Before profiling with PGDBG, the appropriate module needs to be loaded."
  },
  {
    "question": "How can you check which versions of the PGI compiler package are available?",
    "answer": "You can run `module avail pgi` to see what versions are currently available."
  },
  {
    "question": "How do you load a specific PGI compiler version, for example, 17.3?",
    "answer": "You use the command `module load pgi/17.3`."
  },
  {
    "question": "How do you enable debugging information when compiling code for use with pgdbg?",
    "answer": "You enable debugging information by adding the debugging flag \"-g\" during compilation, for example: `pgcc -g program.c -o program`."
  },
  {
    "question": "What is the default user interface for the PGDBG debugger?",
    "answer": "The debugger's default user interface is a graphical user interface (GUI)."
  },
  {
    "question": "How do you run PGDBG in text mode instead of the graphical user interface?",
    "answer": "You run pgdbg in text mode by adding the extra option `-text`, for example: `pgdbg -text program arg1 arg2`."
  },
  {
    "question": "What command should be executed in the PGDBG prompt to start debugging?",
    "answer": "You need to execute `run` in the prompt to begin debugging."
  },
  {
    "question": "How does PGDBG handle new threads created during program execution?",
    "answer": "PGDBG automatically attaches to new threads as they are created during program execution."
  },
  {
    "question": "How do you identify the 'current thread' in a PGDBG debug session?",
    "answer": "During a debug session, PGDBG operates in the context of a single thread, known as the 'current thread', which is chosen using the `thread` command."
  },
  {
    "question": "What command is used to list all threads currently employed by an active program in PGDBG?",
    "answer": "The `threads` command lists all threads currently employed by an active program."
  },
  {
    "question": "How do you switch the debugging context to a thread with a specific ID, such as ID 3?",
    "answer": "You use the command `pgdbg > thread 3` to switch the context to thread with ID 3."
  }
]