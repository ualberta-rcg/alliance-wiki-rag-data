[
  {
    "question": "Who developed CirQ?",
    "answer": "CirQ was developed by Google."
  },
  {
    "question": "What is CirQ?",
    "answer": "CirQ is an open-source quantum computing library used to build, optimize, simulate, and run quantum circuits."
  },
  {
    "question": "What specific capabilities does CirQ offer for circuit simulation?",
    "answer": "CirQ allows simulating circuits on particular qubit configurations to optimize them for a certain qubit architecture."
  },
  {
    "question": "Where can I find more information about CirQ's features?",
    "answer": "Information on CirQ's features can be found in its documentation and on GitHub."
  },
  {
    "question": "Which quantum computer can CirQ be used with?",
    "answer": "CirQ can be used to run quantum circuits on the MonarQ quantum computer."
  },
  {
    "question": "Where is the CirQ simulator available?",
    "answer": "The CirQ simulator is available on all of our clusters."
  },
  {
    "question": "What language must be loaded to access CirQ?",
    "answer": "You must load the Python language to access CirQ."
  },
  {
    "question": "What is the recommended environment for working with CirQ in Python?",
    "answer": "It is preferable to work in a Python virtual environment."
  },
  {
    "question": "What command loads Python 3.11 for CirQ installation?",
    "answer": "The command `module load python/3.11` loads Python 3.11."
  },
  {
    "question": "How do you create and activate a Python virtual environment for CirQ?",
    "answer": "Use `virtualenv --no-download --clear ~/ENV && source ~/ENV/bin/activate` to create and activate a virtual environment."
  },
  {
    "question": "What command installs CirQ version 1.4.1?",
    "answer": "Install CirQ version 1.4.1 using `pip install --no-index cirq==1.4.1`."
  },
  {
    "question": "How do you verify a CirQ installation?",
    "answer": "Verify the installation by running `python -c \"import cirq\"`."
  },
  {
    "question": "How do you create a requirements file for the installed CirQ version?",
    "answer": "Create a requirements file using `pip freeze > cirq-1.4.1-reqs.txt`."
  },
  {
    "question": "What is the purpose of the `cirq-1.4.1-reqs.txt` file?",
    "answer": "The `cirq-1.4.1-reqs.txt` file can be used in a job script."
  },
  {
    "question": "What modules should be loaded in a job script for CirQ?",
    "answer": "The `StdEnv/2023`, `gcc`, and `python/3.11` modules should be loaded."
  },
  {
    "question": "How is a virtual environment generated and activated in a job script on a cluster?",
    "answer": "A virtual environment is generated in `$SLURM_TMPDIR` using `virtualenv --no-download ${SLURM_TMPDIR}/env` and activated with `source ${SLURM_TMPDIR}/env/bin/activate`."
  },
  {
    "question": "How are CirQ and its dependencies installed within a job script?",
    "answer": "CirQ and its dependencies are installed using `pip install --no-index --upgrade pip` and `pip install --no-index --requirement ~/cirq-1.4.1-reqs.txt`."
  },
  {
    "question": "How do you run a CirQ program within a job script?",
    "answer": "A CirQ program can be run with `python cirq_example.py`."
  },
  {
    "question": "What is the next step after setting up a job script for CirQ?",
    "answer": "The next step is to submit your job to the scheduler."
  },
  {
    "question": "What are Bell states?",
    "answer": "Bell states are the simplest states that explain both superposition and entanglement on qubits."
  },
  {
    "question": "What gates are used to construct a Bell state in CirQ?",
    "answer": "The H gate (Hadamard gate) and the CNOT gate (controlled X gate) are used to construct a Bell state."
  },
  {
    "question": "What is the function of the H gate in creating a Bell state?",
    "answer": "The H gate creates an equal superposition of |0\u27e9 and |1\u27e9 on the first qubit."
  },
  {
    "question": "What is the function of the CNOT gate in creating a Bell state?",
    "answer": "The CNOT gate creates an entanglement between the two qubits."
  },
  {
    "question": "What is the resulting superposition of a Bell state created using the H and CNOT gates?",
    "answer": "The resulting Bell state is an equal superposition of the states |00\u27e9 and |11\u27e9."
  },
  {
    "question": "How can you visualize the results of a Bell state circuit simulation in CirQ?",
    "answer": "Simulating the circuit using CirQ allows you to visualize the results."
  },
  {
    "question": "What does the integer 3 represent in a Bell state simulation diagram?",
    "answer": "In the diagram, the integer 3 represents the state |11\u27e9."
  }
]