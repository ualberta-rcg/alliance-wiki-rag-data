[
  {
    "question": "What is CMake?",
    "answer": "CMake is a free, multi-language, multi-platform compilation tool."
  },
  {
    "question": "What does the name CMake stand for?",
    "answer": "CMake stands for 'cross-platform make'."
  },
  {
    "question": "Which traditional build tool is CMake often compared to on Linux?",
    "answer": "CMake is often compared to Autotools, which is the traditional tool used on Linux."
  },
  {
    "question": "Name some projects that have transitioned from Autotools to CMake.",
    "answer": "KDE and MySQL are examples of projects that have changed to CMake from Autotools."
  },
  {
    "question": "According to KDE, what were the main reasons for their switch from Autotools to CMake?",
    "answer": "According to KDE, the main reasons for switching to CMake were that compilation is quicker and build files are easier to write."
  },
  {
    "question": "How does the basic usage of CMake differ from Autotools' `configure` script?",
    "answer": "Instead of calling `./configure`, you call `cmake directory`."
  },
  {
    "question": "What command should you run to configure an application with CMake in the current directory?",
    "answer": "You should run `cmake .`"
  },
  {
    "question": "What is the simplest way to configure, build, and install an application or library using CMake?",
    "answer": "The simplest way is with `cmake . && make && make install`."
  },
  {
    "question": "What mechanism is used on the described clusters to ensure compiled binaries find their dependent libraries?",
    "answer": "A mechanism called `RUNPATH` or `RPATH` is used."
  },
  {
    "question": "Why might conflicts arise when using CMake with the cluster's automatic library finding mechanism?",
    "answer": "Conflicts can arise when both the cluster's `RUNPATH`/`RPATH` mechanism and CMake's RPATH feature are used at the same time."
  },
  {
    "question": "How can you prevent RPATH-related errors when compiling with CMake on the clusters?",
    "answer": "You can add the option `-DCMAKE_SKIP_INSTALL_RPATH=ON` to your CMake command line."
  },
  {
    "question": "What CMake option helps find libraries installed in non-standard locations on the clusters?",
    "answer": "Adding `-DCMAKE_SYSTEM_PREFIX_PATH=$EBROOTGENTOO` to your `cmake` command invocation can be useful."
  },
  {
    "question": "How can you specify a custom path for the CURL library and its include directory using CMake options?",
    "answer": "You can use options like `-DCURL_LIBRARY=$EBROOTGENTOO/lib/libcurl.so -DCURL_INCLUDE_DIR=$EBROOTGENTOO/include`."
  },
  {
    "question": "How do you specify a specific Python executable for CMake?",
    "answer": "You can use the option `-DPYTHON_EXECUTABLE=$EBROOTPYTHON/bin/python`."
  },
  {
    "question": "How can CMake configuration be customized?",
    "answer": "Configuration can be customized using different command-line options or through a command-line interface with the `ccmake` command."
  },
  {
    "question": "What is the `ccmake` command used for?",
    "answer": "The `ccmake` command provides a command-line interface to customize the configuration of an application or library."
  },
  {
    "question": "How do you invoke `ccmake` for the current directory?",
    "answer": "You call `ccmake .`"
  },
  {
    "question": "When should `ccmake` be run in relation to `cmake`?",
    "answer": "`ccmake` should be run *after* having run `cmake`, typically with `cmake . && ccmake .`."
  },
  {
    "question": "What does `ccmake` display to the user?",
    "answer": "`ccmake` gives you a list of options that are defined by the project."
  },
  {
    "question": "How do you modify an option's value within the `ccmake` interface?",
    "answer": "You can edit a value by pressing the `enter` key."
  },
  {
    "question": "After changing a value in `ccmake`, what key should be pressed to apply and test the new configuration?",
    "answer": "You should press the `c` key to try out the configuration with the new value."
  },
  {
    "question": "In `ccmake`, what option becomes available if the new configuration with modified values succeeds?",
    "answer": "If the new configuration succeeds, you will then have the option `g` to generate the `Makefile`."
  },
  {
    "question": "How can you exit `ccmake` without generating a Makefile?",
    "answer": "You can quit `ccmake` using the `q` key."
  },
  {
    "question": "How do you enable advanced mode in `ccmake`?",
    "answer": "You can activate advanced mode using the `t` key."
  },
  {
    "question": "What additional details does `ccmake` display when in advanced mode?",
    "answer": "`ccmake` in advanced mode displays a much longer list of variables, including libraries found and not found, and flags passed to compilers and linkers."
  }
]