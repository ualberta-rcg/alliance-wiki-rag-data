[
  {
    "question": "What is the primary purpose of a debugger in software development?",
    "answer": "A debugger is used to detect and identify the origin of runtime errors, such as memory leaks and floating-point exceptions, particularly for compiled languages like Fortran and C/C++."
  },
  {
    "question": "For which types of languages is a debugger particularly important?",
    "answer": "A debugger is particularly important for compiled languages such as Fortran and C/C++."
  },
  {
    "question": "What is the purpose of profiling software?",
    "answer": "Profiling software involves using a profiler to determine the percentage of total execution time each section of the source code is responsible for when run with a representative test case."
  },
  {
    "question": "What kind of information can a profiler provide?",
    "answer": "A profiler can provide information like how many times a particular function is called, which other functions are calling it, and how many milliseconds each invocation of this function costs on average."
  },
  {
    "question": "In the software development process, which step comes first: debugging or profiling?",
    "answer": "Debugging is an important step to assure the program's correctness, after which profiling the software is a further step."
  },
  {
    "question": "What types of debugging and profiling tools are offered on national clusters?",
    "answer": "National clusters offer a variety of debugging and profiling tools, both command line and those with a graphical user interface (GUI)."
  },
  {
    "question": "What is required to use debugging and profiling tools that have a graphical user interface (GUI)?",
    "answer": "The use of GUI debugging and profiling tools requires an X11 connection."
  },
  {
    "question": "Where should debugging sessions be conducted?",
    "answer": "Debugging sessions should be conducted using an interactive job and not run on a login node."
  },
  {
    "question": "Which specific debugger tools are mentioned as available on national clusters?",
    "answer": "The GNU debugger (gdb), PGI debugger (pgdb), and ARM debugger (ddt) are mentioned as available tools."
  },
  {
    "question": "Which specific profiler tools are mentioned as available on national clusters?",
    "answer": "The GNU profiler (gprof), Scalasca profiler (scalasca, scorep, cube), PGI profiler (pgprof), Nvidia command-line profiler (nvprof), and Valgrind are mentioned as available tools."
  },
  {
    "question": "What is Scalasca?",
    "answer": "Scalasca is an open source, GUI-driven parallel profiling tool set."
  },
  {
    "question": "What are the specific environment requirements for Scalasca?",
    "answer": "Scalasca is currently available for gcc 9.3.0 and OpenMPI 4.0.3, with AVX2 or AVX512 architecture."
  },
  {
    "question": "How can the Scalasca environment be loaded?",
    "answer": "Its environment can be loaded with: `module load StdEnv/2020 gcc/9.3.0 openmpi/4.0.3 scalasca`."
  },
  {
    "question": "What is the current version of Scalasca?",
    "answer": "The current version of Scalasca is 2.5."
  },
  {
    "question": "Where can users find more information and workflow examples for Scalasca?",
    "answer": "More information, including workflow examples, can be found in the 2.x user guide available at https://apps.fz-juelich.de/scalasca/releases/scalasca/2.5/docs/manual/."
  },
  {
    "question": "Are there any external references provided for an introduction to performance?",
    "answer": "Yes, 'Introduction to (Parallel) Performance' from SciNet is provided as an external reference."
  },
  {
    "question": "Is there a video available for code profiling on Graham?",
    "answer": "Yes, there is a 54-minute video titled 'Code profiling on Graham' available as an external reference."
  }
]