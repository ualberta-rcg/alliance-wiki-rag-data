[
  {
    "question": "What is the primary function of the `nix-env` command?",
    "answer": "The `nix-env` command is used to manage your per-user Nix environment."
  },
  {
    "question": "Is `nix-env` considered a modern command in Nix?",
    "answer": "No, `nix-env` is a legacy command that has not yet been replaced by a newer `nix <command>` command."
  },
  {
    "question": "How can I see what packages are currently installed in my Nix environment?",
    "answer": "You can use the command `nix-env --query` to see what is currently installed."
  },
  {
    "question": "How do I list all available compositions, including their attribute paths and descriptions, using `nix-env`?",
    "answer": "You can use the command `nix-env --query --available --attr-path --description`."
  },
  {
    "question": "Is there a faster alternative to `nix-env --query --available` for locating compositions?",
    "answer": "Yes, the newer `nix search` command is often a better way to locate compositions as it saves a cache, making subsequent invocations quite fast."
  },
  {
    "question": "How do I install a specific package, such as 'git', into my Nix environment using `nix-env`?",
    "answer": "You can install git using the command `nix-env --install --attr nixpkgs.git`."
  },
  {
    "question": "What might be necessary to do in bash after installing a new version of an executable with `nix-env` so it recognizes the new one?",
    "answer": "It may be necessary to tell bash to forget remembered executable locations by running `hash -r`."
  },
  {
    "question": "How do I remove a package, for example 'subversion', from my Nix environment?",
    "answer": "You can remove a package using the command `nix-env --uninstall subversion`."
  },
  {
    "question": "What happens to your Nix environment when you install or remove compositions?",
    "answer": "Each time you install or remove compositions, a new environment is created based off of the previous environment."
  },
  {
    "question": "How can I revert my Nix environment to the immediate previous state?",
    "answer": "You can restore the previous environment by using the command `nix-env --rollback`."
  },
  {
    "question": "How do I view a list of all my past Nix environment generations and switch to a specific one?",
    "answer": "Use `nix-env --list-generations` to see the list, and then `nix-env --switch-generation <number>` (e.g., `nix-env --switch-generation 4`) to switch to a specific generation."
  },
  {
    "question": "What does the 'atomic property' of Nix environments mean for installations and updates?",
    "answer": "The atomic property means that operations like installing or updating compositions either succeed entirely, creating a new environment, or fail completely, leaving the previous environment intact without being left halfway through."
  },
  {
    "question": "What happens if an `nix-env --install` operation is interrupted (e.g., with CTRL+c)?",
    "answer": "Nothing bad happens; the operation won't complete, so it has no effect on the environment, leaving it in its previous state."
  },
  {
    "question": "Why is Nix faster when reinstalling software that was previously installed?",
    "answer": "Nix reuses the software from its local store if it already exists from previous installs, making subsequent installations much faster."
  }
]