[
  {
    "question": "What is Java?",
    "answer": "Java is a general-purpose, high-level, object-oriented programming language developed in 1995 by Sun Microsystems (purchased by Oracle in 2010)."
  },
  {
    "question": "Who developed Java and in what year?",
    "answer": "Java was developed in 1995 by Sun Microsystems, which was later purchased by Oracle in 2010."
  },
  {
    "question": "What was a primary design goal for Java?",
    "answer": "A principal design goal for Java was a high degree of portability across platforms, summarized by the slogan 'write once, run anywhere'."
  },
  {
    "question": "How does Java achieve its portability?",
    "answer": "Java achieves portability by having its source code compiled to 'bytecode,' which then runs inside a Java Virtual Machine (JVM), ensuring a uniform environment across various architectures and platforms."
  },
  {
    "question": "What slogan summarizes Java's portability?",
    "answer": "The slogan 'write once, run anywhere' summarizes Java's portability."
  },
  {
    "question": "Was performance an original design goal for Java?",
    "answer": "No, performance was not one of the original design goals for Java."
  },
  {
    "question": "In what scientific domains has Java found popularity?",
    "answer": "Java has enjoyed popularity in some scientific domains, such as the life sciences, exemplified by software like the Broad Institute's GATK."
  },
  {
    "question": "How are Java virtual machines made available to users on Alliance systems?",
    "answer": "Alliance's systems make several different Java virtual machines available via the `module` command, similar to other software packages."
  },
  {
    "question": "How many Java modules should be loaded at one time?",
    "answer": "You should normally only have one Java module loaded at a time."
  },
  {
    "question": "What are the main commands associated with Java modules?",
    "answer": "The principal commands are `java` to launch the Java virtual machine and `javac` to call the Java compiler for converting a Java source file into byte code."
  },
  {
    "question": "How is Java software commonly distributed?",
    "answer": "Java software is frequently distributed in the form of a JAR file with the extension `.jar`."
  },
  {
    "question": "How do you execute a JAR file from the command line?",
    "answer": "You can execute a JAR file using the command `java -jar file.jar`, assuming it has been compiled to operate as an autonomous program (i.e., possesses a `Main-class` manifest header)."
  },
  {
    "question": "Does Java have built-in support for threading?",
    "answer": "Yes, Java includes built-in support for threading, eliminating the need for separate interfaces and libraries like OpenMP, pthreads, and Boost threads."
  },
  {
    "question": "What is the primary Java object for handling concurrency?",
    "answer": "The principal Java object for handling concurrency is the `Thread` class."
  },
  {
    "question": "What are two ways a programmer can use the `Thread` class for concurrency?",
    "answer": "A programmer can use the `Thread` class by either providing a `Runnable` method to the standard `Thread` class or by subclassing the `Thread` class."
  },
  {
    "question": "What is a drawback of subclassing the `Thread` class for multithreading?",
    "answer": "The drawback is that Java does not permit multiple inheritance, so the class implementing multithreading cannot subclass any other potentially more useful class."
  },
  {
    "question": "What library is commonly used for MPI-style parallelism in Java?",
    "answer": "The MPJ Express library is one common method for using MPI-style parallelism in a Java program."
  },
  {
    "question": "What common memory issue can arise when running Java on shared computing environments?",
    "answer": "The Java virtual machine expects access to all physical memory, which can exceed the memory limits imposed by a scheduler or shell, leading to failure messages like 'Could not reserve enough space for object heap'."
  },
  {
    "question": "What are the default initial and maximum heap sizes set by the Java VM at startup?",
    "answer": "By default, the Java VM sets an initial heap size of 1/64 of physical memory and a maximum heap size of 1/4 of physical memory."
  },
  {
    "question": "What error messages might indicate insufficient memory for the Java Runtime Environment?",
    "answer": "Error messages such as 'Could not reserve enough space for object heap' or 'There is insufficient memory for the Java Runtime Environment to continue' indicate insufficient memory."
  },
  {
    "question": "How can Java's run-time memory parameters be controlled explicitly on the command line?",
    "answer": "Run-time memory parameters can be controlled using options like `java -Xms256m -Xmx4g -version` or `java -XX:InitialHeapSize=256m -XX:MaxHeapSize=4g -version`."
  },
  {
    "question": "Which command-line flags set the initial and maximum heap sizes for the Java VM?",
    "answer": "The `-Xms` flag sets the initial heap size, and the `-Xmx` flag sets the maximum heap size."
  },
  {
    "question": "How can you view all command-line options the JVM will use?",
    "answer": "You can see all command-line options by specifying the flag `-XX:+PrintCommandLineFlags`, for example: `java -Xms256m -Xmx4g -XX:+PrintCommandLineFlags -version`."
  },
  {
    "question": "What is an alternative to passing run-time options on the command line for Java programs?",
    "answer": "An alternative is to use the `JAVA_TOOL_OPTIONS` environment variable to set run-time options."
  },
  {
    "question": "When is using the `JAVA_TOOL_OPTIONS` environment variable particularly useful?",
    "answer": "It is especially convenient when launching multiple Java calls or calling a Java program from another Java program."
  },
  {
    "question": "How do you set the `JAVA_TOOL_OPTIONS` environment variable with example values?",
    "answer": "You can set it using a command like `export JAVA_TOOL_OPTIONS=\"-Xms256m -Xmx2g\"`."
  },
  {
    "question": "How can you confirm that the `JAVA_TOOL_OPTIONS` environment variable has been successfully picked up by a Java program?",
    "answer": "When the Java program runs, it will produce a diagnostic message like 'Picked up JAVA_TOOL_OPTIONS', verifying that the options have been applied."
  },
  {
    "question": "What is the recommended memory limit for a Java job relative to the -Xmx setting?",
    "answer": "It is recommended to specify the memory limit for your job as 1-2GB more than your setting on the Java command-line option `-Xmx` to account for JVM overhead."
  }
]