[
  {
    "question": "What is the primary purpose of a condition variable in pthreads?",
    "answer": "A condition variable is used to allow multiple threads to wait for a specific condition to become true, such as waiting for work to become available for worker threads."
  },
  {
    "question": "What is the datatype for a pthreads condition variable?",
    "answer": "The datatype for a pthreads condition variable is `pthread_cond_t`."
  },
  {
    "question": "What are the initialization and destruction requirements for a condition variable?",
    "answer": "Like a mutex or read/write lock, a condition variable must be initialized before its first use and destroyed when it is no longer needed in the program."
  },
  {
    "question": "What other synchronization primitive is necessary when using a condition variable?",
    "answer": "The use of a condition variable requires a mutex to control access to the variable(s) that form the basis for the condition being tested."
  },
  {
    "question": "Which function does a thread call to wait on a condition variable, and what are its arguments?",
    "answer": "A thread calls the function `pthread_cond_wait` with two arguments: the condition variable itself and the associated mutex."
  },
  {
    "question": "What happens to the mutex when `pthread_cond_wait` is called?",
    "answer": "When `pthread_cond_wait` is called, the mutex is released atomically with the creation of the condition variable that the thread is now waiting upon. This allows other threads to lock the mutex to modify variables or wait on the same condition."
  },
  {
    "question": "In the `thread_condition.c` example, what is the constraint on the initial value of `workload`?",
    "answer": "The initial value of `workload` must be less than or equal to 25."
  },
  {
    "question": "How many worker threads are created in the `thread_condition.c` example?",
    "answer": "The `thread_condition.c` example creates two worker threads, as indicated by `const long NT = 2;`."
  },
  {
    "question": "Which worker thread in `thread_condition.c` waits for the workload condition to be met?",
    "answer": "Thread 0 (with `tnumber == 0`) waits for the workload condition to be met by calling `pthread_cond_wait`."
  },
  {
    "question": "Which worker thread in `thread_condition.c` is responsible for signaling that the condition has changed?",
    "answer": "Thread 1 (with `tnumber == 1`) is responsible for signaling the condition using `pthread_cond_signal` when `workload` exceeds 25."
  },
  {
    "question": "By how much does Thread 1 increment the `workload` variable in each iteration?",
    "answer": "Thread 1 increments the `workload` variable by 3 in each iteration of its loop."
  },
  {
    "question": "What value does Thread 0 add to `workload` once it is woken up by the condition signal?",
    "answer": "Once Thread 0 is woken up, it increments `workload` by 15."
  },
  {
    "question": "What is the C function used to signal a single waiting thread that a condition has been satisfied?",
    "answer": "The C function used to signal a single waiting thread is `pthread_cond_signal`."
  },
  {
    "question": "What is the C function used to notify all threads waiting on a condition variable?",
    "answer": "The C function used to notify all waiting threads that a condition is satisfied is `pthread_cond_broadcast`."
  },
  {
    "question": "How is the condition variable `ticker` initialized in the `thread_condition.c` program?",
    "answer": "The condition variable `ticker` is initialized in `main` by calling `pthread_cond_init(&ticker, NULL);`."
  },
  {
    "question": "How is the mutex `mutex` initialized in the `thread_condition.c` program?",
    "answer": "The mutex `mutex` is initialized in `main` by calling `pthread_mutex_init(&mutex, NULL);`."
  }
]