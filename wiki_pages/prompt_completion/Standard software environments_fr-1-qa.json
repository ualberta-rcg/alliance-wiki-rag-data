[
  {
    "question": "What is the purpose of modules in software environments?",
    "answer": "Modules allow users to alternate between different versions of a software package."
  },
  {
    "question": "How are software modules organized?",
    "answer": "These modules are organized according to a tree structure whose trunk is composed of the same utilities as those offered in Linux environments."
  },
  {
    "question": "What constitutes a standard software environment?",
    "answer": "A standard software environment is composed of a particular combination of compilation modules and MPI modules grouped in a module called `StdEnv`."
  },
  {
    "question": "What is the primary use of `StdEnv` environments?",
    "answer": "These environments are commonly used by our technical team to build other software."
  },
  {
    "question": "What were the four versions of standard environments available as of February 2023?",
    "answer": "In date of February 2023, the four versions of the standard environments were 2023, 2020, 2018.3 and 2016.4."
  },
  {
    "question": "Which `StdEnv` versions are currently supported?",
    "answer": "We support only the versions 2023 and 2020."
  },
  {
    "question": "Why is it recommended to install the latest `StdEnv` version?",
    "answer": "The most recent versions of software packages are usually installed in the most recent software environment."
  },
  {
    "question": "What are the default components of the `StdEnv/2023` environment?",
    "answer": "This latest iteration of our software environment uses by default GCC 12.3.0, Intel 2023.1, and Open MPI 4.1.5."
  },
  {
    "question": "How do you activate the `StdEnv/2023` environment?",
    "answer": "To activate this environment, launch the command `module load StdEnv/2023`."
  },
  {
    "question": "What is the minimal CPU instruction set supported by `StdEnv/2023`?",
    "answer": "The minimal set of CPU instructions supported is AVX2, generally `x86-64-v3`."
  },
  {
    "question": "What is the default compiler in `StdEnv/2023`?",
    "answer": "The default compiler is GCC rather than Intel."
  },
  {
    "question": "When are applications compiled with Intel in `StdEnv/2023`?",
    "answer": "We compile with Intel only applications that demonstrate better performance with Intel."
  },
  {
    "question": "How does CUDA integrate with OpenMPI in `StdEnv/2023`?",
    "answer": "CUDA becomes an extension of OpenMPI, meaning MPI for CUDA is loaded at launch if CUDA is loaded."
  },
  {
    "question": "What versions of GCC were updated in `StdEnv/2023`?",
    "answer": "GCC was updated from 9.3 to 12.3."
  },
  {
    "question": "What versions of OpenMPI were updated in `StdEnv/2023`?",
    "answer": "OpenMPI was updated from 4.0.3 to 4.1.5."
  },
  {
    "question": "What versions of Intel Compilers were updated in `StdEnv/2023`?",
    "answer": "Intel Compilers were updated from 2020 to 2023."
  },
  {
    "question": "What replaced Intel MKL 2020 in `StdEnv/2023` by default?",
    "answer": "Intel MKL 2020 was replaced by Flexiblas 3.3.1 (with MKL 2023 or BLIS 0.9.0)."
  },
  {
    "question": "What versions of CUDA were updated in `StdEnv/2023`?",
    "answer": "CUDA was updated from 11 to 12."
  },
  {
    "question": "When did `StdEnv/2020` become the default software environment?",
    "answer": "This third version of our software environment became the default version in April 2021."
  },
  {
    "question": "What were the default compilers for `StdEnv/2020`?",
    "answer": "The default compilers are GCC 9.3.0 and Intel 2020.1."
  },
  {
    "question": "What was the default MPI for `StdEnv/2020`?",
    "answer": "MPI by default passed to Open MPI 4.0.3."
  },
  {
    "question": "How do you activate the `StdEnv/2020` environment?",
    "answer": "Activate this environment with the command `module load StdEnv/2020`."
  },
  {
    "question": "What CPU instruction sets do Intel compiler-generated binaries support in `StdEnv/2020`?",
    "answer": "The binaries generated with the Intel compiler automatically support AVX2 and AVX512 instruction sets."
  },
  {
    "question": "What are multi-architecture binaries also known as, in the context of `StdEnv/2020`?",
    "answer": "Technically, these are multi-architecture binaries, also called fat binaries."
  },
  {
    "question": "What is an advantage of using Intel compiler-generated software packages on clusters like Cedar or Graham with `StdEnv/2020`?",
    "answer": "You no longer need to manually load one of the `arch` modules if you use software packages generated with the Intel compiler."
  },
  {
    "question": "How did `StdEnv/2020` improve the visibility of modules like R and bioinformatics packages?",
    "answer": "Some software packages installed previously with GCC or Intel are now at a lower level of the hierarchy, making the same module visible regardless of the compiler that is loaded."
  },
  {
    "question": "What made the optimizations for R and bioinformatics packages possible in `StdEnv/2020`?",
    "answer": "This was made possible by specific CPU architecture optimizations that we performed below the compiler level."
  }
]