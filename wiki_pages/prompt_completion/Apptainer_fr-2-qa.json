[
  {
    "question": "Is `sudo` available on the clusters?",
    "answer": "No, `sudo` is not possible on the clusters."
  },
  {
    "question": "What are the options if `sudo` permissions are required for Apptainer tasks?",
    "answer": "You can install Linux, Apptainer, and `sudo` in a virtual machine on your own computer to build images, or request assistance from technical support to build your image."
  },
  {
    "question": "How does Apptainer version 1.1.x assist with tasks that typically require `sudo`?",
    "answer": "Apptainer version 1.1.x supports `fakeroot`, which allows building images from definition files or building images without needing `sudo` in many cases."
  },
  {
    "question": "Can all Apptainer images be built without `sudo` or root permissions using `fakeroot`?",
    "answer": "No, not all images can be built without `sudo` or root permissions, even with the `fakeroot` option."
  },
  {
    "question": "What are the recommendations for building Apptainer images or overlays?",
    "answer": "Do not build a sandbox image with `--fakeroot` in a network file system, configure `APPTAINER_CACHEDIR` and `APPTAINER_TMPDIR` to locations on non-networked file systems, and avoid using Lustre/GPFS file systems."
  },
  {
    "question": "Why should Lustre/GPFS file systems be avoided when building Apptainer containers?",
    "answer": "Lustre/GPFS file systems do not offer the necessary functionalities for container construction, especially when using `--fakeroot`."
  },
  {
    "question": "How do you load the default Apptainer module?",
    "answer": "You can load the default Apptainer module by running `$ module load apptainer`."
  },
  {
    "question": "How can you check for all available versions of the Apptainer module?",
    "answer": "To see all available versions of the Apptainer module, run `$ module spider apptainer`."
  },
  {
    "question": "What is a common problem when running programs in an Apptainer container related to the host environment?",
    "answer": "Apptainer by default adopts the host shell's environment, which can cause problems because containerized software uses different libraries and tools than the host system, and shouldn't use host-defined configurations."
  },
  {
    "question": "What does the `apptainer -C` option do?",
    "answer": "The `apptainer -C` option isolates the active container from all file systems, the parent PID, IPC, and the environment. Bind mounts are required to access external file systems."
  },
  {
    "question": "What does the `apptainer -c` option do?",
    "answer": "The `apptainer -c` option isolates the active container from most file systems, using only a minimal `/dev`, an empty `/tmp`, and an empty `/home` directory. Bind mounts are required to access external file systems."
  },
  {
    "question": "What options can be used with `apptainer run`, `apptainer shell`, `apptainer exec`, and/or `apptainer instance` to prevent programs from using external configurations?",
    "answer": "The options `-C`, `-c`, and `-e` can be used to isolate the container environment and prevent it from using configuration parameters or software defined outside the container."
  }
]