[
  {
    "question": "What is ARM DDT?",
    "answer": "ARM DDT is a powerful commercial parallel debugger with a graphical user interface, formerly known as Allinea DDT."
  },
  {
    "question": "What types of programs can ARM DDT debug?",
    "answer": "It can be used to debug serial, MPI, multi-threaded, and CUDA programs, or any combination, written in C, C++, and FORTRAN."
  },
  {
    "question": "What is ARM MAP?",
    "answer": "MAP, formerly Allinea, is an efficient parallel profiler."
  },
  {
    "question": "Which ARM tool modules are available on Graham?",
    "answer": "On Graham, 'ddt-cpu' is for CPU debugging and profiling, and 'ddt-gpu' is for GPU or mixed CPU/GPU debugging."
  },
  {
    "question": "Which ARM tool module is available on Niagara?",
    "answer": "On Niagara, the 'ddt' module is available."
  },
  {
    "question": "How should users log in to use DDT, considering it's a GUI application?",
    "answer": "Log in using 'ssh -Y' and an SSH client like MobaXTerm (Windows) or XQuartz (Mac) to ensure proper X11 tunnelling."
  },
  {
    "question": "How are DDT and MAP typically used interactively?",
    "answer": "Both DDT and MAP are normally used interactively through their GUI, which is typically accomplished using the 'salloc' command."
  },
  {
    "question": "Can MAP be used non-interactively?",
    "answer": "Yes, MAP can also be used non-interactively, in which case it can be submitted to the scheduler with the 'sbatch' command."
  },
  {
    "question": "What are the current license limitations for DDT/MAP usage?",
    "answer": "The current license limits the use of DDT/MAP to a maximum of 512 CPU cores across all users at any given time, while DDT-GPU is limited to 8 GPUs."
  },
  {
    "question": "What is the first step to debug or profile CPU-only code with DDT/MAP?",
    "answer": "Allocate the node or nodes on which to do the debugging or profiling using 'salloc --x11 --time=0-1:00 --mem-per-cpu=4G --ntasks=4'."
  },
  {
    "question": "Which module should be loaded for CPU-only debugging or profiling?",
    "answer": "For CPU-only code, load the 'ddt-cpu' module."
  },
  {
    "question": "How do you run the DDT or MAP command after allocating nodes and loading the module for CPU-only code?",
    "answer": "Run 'ddt path/to/code' or 'map path/to/code'."
  },
  {
    "question": "What important check should be made in the DDT/MAP application window before running MPI programs?",
    "answer": "Make sure the MPI implementation is the default OpenMPI and specify the desired number of CPU cores."
  },
  {
    "question": "How do you terminate a DDT/MAP allocation?",
    "answer": "Exit the shell to terminate the allocation when done."
  },
  {
    "question": "Is there a known compatibility issue between current DDT and OpenMPI versions?",
    "answer": "Yes, there is a compatibility issue that breaks the display of message queues in DDT."
  },
  {
    "question": "What is the workaround for the DDT/OpenMPI message queue compatibility issue?",
    "answer": "Execute 'export OMPI_MCA_pml=ob1' before running DDT."
  },
  {
    "question": "What is a potential consequence of using the 'OMPI_MCA_pml=ob1' workaround?",
    "answer": "The workaround can make your MPI code run slower, so it should only be used when debugging."
  },
  {
    "question": "How do you allocate nodes for debugging or profiling CUDA code?",
    "answer": "Use the command 'salloc --x11 --time=0-1:00 --mem-per-cpu=4G --ntasks=1 --gres=gpu:1'."
  },
  {
    "question": "Which module should be loaded for CUDA code debugging?",
    "answer": "Load the 'ddt-gpu' module."
  },
  {
    "question": "What should be done if 'ddt-gpu' module loading suggests loading an older OpenMPI version?",
    "answer": "Reload the OpenMPI module with the suggested command (e.g., 'module load openmpi/2.0.2'), and then reload the 'ddt-gpu' module."
  },
  {
    "question": "What additional module is required for debugging CUDA code?",
    "answer": "Ensure a CUDA module is loaded, for example, by running 'module load cuda'."
  },
  {
    "question": "What should you do if DDT complains about a CUDA driver and toolkit version mismatch?",
    "answer": "Execute 'export ALLINEA_FORCE_CUDA_VERSION=10.1' (using the specific version suggested) and then run DDT again."
  },
  {
    "question": "Why might the DDT interface be laggy when using X11 forwarding?",
    "answer": "X11 is very sensitive to packet latency, which can cause lag unless you are on the same campus as the computer cluster."
  },
  {
    "question": "How can the lag in the DDT interface be fixed?",
    "answer": "The lag can be fixed by running DDT under VNC."
  },
  {
    "question": "What is the process for manually launching a job with DDT if using a VNC session on a login node or graham vdi node?",
    "answer": "From the DDT startup screen, pick 'manually launch backend yourself', enter job information, press 'listen', then 'help' for the command to start the job."
  }
]