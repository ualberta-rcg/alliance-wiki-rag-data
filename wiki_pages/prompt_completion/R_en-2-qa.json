[
  {
    "question": "What environment variable might be required before installing some R packages?",
    "answer": "Some R packages require defining the environment variable `TMPDIR` before installation."
  },
  {
    "question": "How do you specify a local installation directory for R packages when dealing with multiple R versions?",
    "answer": "You can specify the local installation directory by first creating it with `mkdir -p ~/.local/R/$EBVERSIONR/` and then setting the `R_LIBS` environment variable with `export R_LIBS=~/.local/R/$EBVERSIONR/`."
  },
  {
    "question": "How do you install an R package like 'sp' for one or many R versions using a specific repository?",
    "answer": "After setting the local library directory, you can install the package using the command `R -e 'install.packages(\"sp\", repos=\"https://cloud.r-project.org/\")'`."
  },
  {
    "question": "How do you ensure the local R library directory is recognized in a job submission script?",
    "answer": "In your submission script, you must load the desired R module and set the local library directory with `export R_LIBS=~/.local/R/$EBVERSIONR/`."
  },
  {
    "question": "What should you do if an R package depends on external libraries?",
    "answer": "If an R package depends on external libraries, you should load the appropriate module for that library before installing the R package, provided the library is listed in 'Available software'."
  },
  {
    "question": "How can you check which modules are currently loaded in your environment?",
    "answer": "You can verify the currently loaded modules by running the command `module list`."
  },
  {
    "question": "What action should be taken if an R package fails to install and gives an error message?",
    "answer": "If an R package fails to install, you should carefully read the error message as it might provide details concerning additional modules you need to load."
  },
  {
    "question": "How do you install an R package that you have downloaded manually (not using `install.packages()`)?",
    "answer": "To install a manually downloaded package (e.g., `archive_package.tgz`), run the command `R CMD INSTALL -l 'path for your local (home) R library' archive_package.tgz` in a shell."
  },
  {
    "question": "What is a potential issue with using the `system()` command in R on clusters, and how can it be mitigated?",
    "answer": "Using the `system()` command in R on clusters can lead to an incorrect value for the environment variable `LD_LIBRARY_PATH`. This can be avoided by using the syntax `system(\"LD_LIBRARY_PATH=$RSNT_LD_LIBRARY_PATH <my system call>\")`."
  },
  {
    "question": "Why is it beneficial to pass parameters as arguments to R scripts?",
    "answer": "Passing parameters as arguments to R scripts is useful to avoid repeatedly changing the script for every job or managing multiple identical script copies, especially for input/output files or numerical parameters."
  },
  {
    "question": "How can numerical parameters be passed to an R script from the command line?",
    "answer": "Parameters can be passed to an R script by running `Rscript myscript.R arg1 arg2`, for example, `Rscript myscript.R input_1.csv 5`."
  },
  {
    "question": "How does an R script retrieve arguments passed to it from the command line?",
    "answer": "An R script can retrieve command-line arguments using the `commandArgs(trailingOnly=TRUE)` function."
  },
  {
    "question": "What makes supercomputers powerful for R code execution?",
    "answer": "Supercomputers are powerful because they provide access to thousands of CPU cores with a high-performance network, enabling parallel code execution."
  },
  {
    "question": "What should be done to R code before attempting to parallelize it?",
    "answer": "Before parallelizing R code, you should first ensure that your serial implementation is as efficient as possible."
  },
  {
    "question": "What is a common performance bottleneck in R, particularly for interpreted languages?",
    "answer": "The use of loops in R, especially nested loops, constitutes a significant performance bottleneck, particularly because it is an interpreted language."
  },
  {
    "question": "What R programming techniques can improve performance by reducing the need for loops?",
    "answer": "To improve performance, whenever possible, you should try to use vectorized forms of R functions and more functional elements of the R programming language like the `apply` family of functions and the `ifelse` function."
  }
]