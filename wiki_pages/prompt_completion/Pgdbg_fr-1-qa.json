[
  {
    "question": "What is PGDBG?",
    "answer": "PGDBG is a simple but powerful tool for debugging parallel MPI and OpenMP applications under Linux. It's part of the PGI compiler package and is configured for OpenMP with parallel threads."
  },
  {
    "question": "What types of applications can PGDBG debug?",
    "answer": "PGDBG can debug parallel MPI and OpenMP applications under Linux."
  },
  {
    "question": "In which modes can PGDBG be used?",
    "answer": "PGDBG can be used in graphical mode with X11 redirection or in command-line mode."
  },
  {
    "question": "Why was PGDBG developed by the Portland Group?",
    "answer": "PGDBG was developed because a GNU debugger like GDB does not work very well with Fortran 90/95 programs, although it suits most C, C++, or Fortran77 programs."
  },
  {
    "question": "What are the general steps for working with PFDBG?",
    "answer": "The work with PFDBG typically involves two steps: compilation (with the -g option for debugging symbols) and execution/debugging (where the code is run and results analyzed)."
  },
  {
    "question": "What option is required during compilation to obtain debugging symbols?",
    "answer": "The `-g` option is required during compilation to obtain debugging symbols."
  },
  {
    "question": "What is the first step in setting up the environment for PGDBG?",
    "answer": "The first step is to load the module for the PGI package."
  },
  {
    "question": "How can you check the available versions of PGI compiler modules?",
    "answer": "You can check available versions by running the command `module avail pgi`."
  },
  {
    "question": "How do you load a specific PGI module version, for example, 17.3?",
    "answer": "To load PGI version 17.3, you would use the command `module load pgi/17.3`."
  },
  {
    "question": "What command is used to compile a C program for debugging with PGDBG?",
    "answer": "To compile a C program for debugging, you would use a command like `pgcc -g program.c -o program`."
  },
  {
    "question": "How do you launch PGDBG in command-line mode?",
    "answer": "You can launch PGDBG in command-line mode by adding the `text` option to the launch command, for example, `pgdbg -text program`."
  },
  {
    "question": "What is the default display mode for PGDBG?",
    "answer": "By default, PGDBG displays through its graphical interface."
  },
  {
    "question": "What command starts the program execution from the PGDBG command-line prompt?",
    "answer": "At the `pgdbg>` prompt, you launch the program with the command `run`."
  },
  {
    "question": "How does PGDBG handle threads during program execution?",
    "answer": "PGDBG automatically attaches to threads and describes each one as it is created. During debugging, it works on a single thread at a time, known as the current thread."
  },
  {
    "question": "Which command is used to list all active threads in PGDBG's command-line interface?",
    "answer": "The command `threads` lists the threads currently used by an active program."
  },
  {
    "question": "Which command selects the current thread in PGDBG?",
    "answer": "The command `thread` is used to select the current thread."
  },
  {
    "question": "How do you select thread ID 3 as the current thread in PGDBG's command-line interface?",
    "answer": "You would use the command `pgdbg > thread 3` to select thread ID 3 as the current thread."
  }
]