[
  {
    "question": "What significant change occurred in GCC between versions 4.9 and 5.1?",
    "answer": "The transition from GCC version 4.9 to version 5.1 introduced a major change to its application binary interface (ABI)."
  },
  {
    "question": "What potential issue can arise if different compiler versions are used when linking source code with dependent libraries?",
    "answer": "If different compilers are used, the ABI change may cause linking to fail, especially when linking to precompiled libraries provided in a vendor's product."
  },
  {
    "question": "How can GCC's Dual ABI feature help resolve linking issues with legacy libraries when using GCC v5.1 or higher?",
    "answer": "You can use GCC's Dual ABI feature by passing `-D_GLIBCXX_USE_CXX11_ABI=0` to GCC v5.1 or higher to tell GCC to use the old ABI, allowing your application to link properly with legacy libraries."
  },
  {
    "question": "What is the primary function of passing `-D_GLIBCXX_USE_CXX11_ABI=0` to GCC?",
    "answer": "Passing `-D_GLIBCXX_USE_CXX11_ABI=0` to GCC tells it to use the old ABI for an application to link properly with legacy libraries."
  },
  {
    "question": "What kind of error might `-D_GLIBCXX_USE_CXX11_ABI=0` help resolve?",
    "answer": "In some cases, using `-D_GLIBCXX_USE_CXX11_ABI=0` will resolve errors like 'std::list' is ambiguous."
  },
  {
    "question": "What does the Application Binary Interface (ABI) consist of, according to the document?",
    "answer": "The Application Binary Interface (ABI) consists of the `extern \"C++\"` symbol names that C++ compilers mangle and export using a compiler-specific algorithm."
  },
  {
    "question": "What is the role of the ABI in the compilation process?",
    "answer": "The ABI is used to link the compiled code with libraries."
  },
  {
    "question": "What is the consequence of a change to a compiler's ABI?",
    "answer": "Any change to a compiler's ABI can result in programs failing to link if symbol names do not match up."
  },
  {
    "question": "What is the name of the C++ source file provided in the example?",
    "answer": "The C++ source file used in the example is `main.cxx`."
  },
  {
    "question": "What is the content of the `main.cxx` program?",
    "answer": "The `main.cxx` program includes `<iostream>` and `<string>`, and its `main` function prints \"Hello World!\" to the console."
  },
  {
    "question": "What is the purpose of the Makefile in the provided example?",
    "answer": "The Makefile is used to compile the `main.cxx` program using a number of different settings to demonstrate how the ABI calls differ."
  },
  {
    "question": "What command is used in the Makefile to extract symbol names from object files?",
    "answer": "The command `nm $@ | cut -c 20- >$@.symbols` is used in the Makefile to extract symbol names."
  }
]