[
  {
    "question": "How is a C++ code initially modified to use OpenACC with the `kernels` directive for GPU offloading?",
    "answer": "The first step is to add the `#pragma acc kernels` directive around the relevant code block, such as a loop structure, without initially worrying about data transfer or further compiler information."
  },
  {
    "question": "Which compiler options are used with NVidia compilers to enable OpenACC and managed memory?",
    "answer": "NVidia compilers use the `-acc` option to enable compilation for an accelerator and `-gpu=managed` to enable managed memory."
  },
  {
    "question": "What is the purpose of the `-gpu=managed` sub-option when compiling with OpenACC?",
    "answer": "The `-gpu=managed` sub-option tells the compiler to use managed memory, which simplifies the process of transferring data to and from the device."
  },
  {
    "question": "What does the `-Minfo=accel` option do in NVidia compilers?",
    "answer": "The `-Minfo=accel` option provides compiler feedback related to accelerator code generation, such as loop dependencies preventing parallelization."
  },
  {
    "question": "According to the compiler output, what prevented the parallelization of the outer loop (line 31) in the matrix-vector product example after applying the `kernels` directive?",
    "answer": "The compiler output indicated that 'Loop carried dependence of ycoefs->' and 'Complex loop carried dependence of Acoefs->,xcoefs->' prevented parallelization of the outer loop."
  },
  {
    "question": "What is 'pointer aliasing' in C/C++ and why does it cause false loop dependencies?",
    "answer": "Pointer aliasing occurs when two pointers are said to be aliased if they point to the same memory. If the compiler does not know that pointers are not aliased, it must assume they are, leading to false loop dependencies that prevent parallelization."
  },
  {
    "question": "How can a programmer explicitly tell the C compiler that pointers will not be aliased?",
    "answer": "In C (since C99), the `restrict` keyword can be used to inform the compiler that pointers will not be aliased."
  },
  {
    "question": "Which keyword is used by Portland Group and NVidia compilers in C++ to indicate non-aliased pointers?",
    "answer": "For Portland Group and NVidia compilers in C++, the `__restrict` keyword is used to indicate non-aliased pointers."
  },
  {
    "question": "Where should the `__restrict` keyword be placed when declaring a pointer in C/C++?",
    "answer": "The `__restrict` keyword should be placed *after* the pointer, for example, `float * __restrict A;`, because it refers to the pointer itself and not to the type."
  },
  {
    "question": "What is an optimization option used in NVidia compilers for OpenACC builds?",
    "answer": "The `-fast` option is an optimization option used in NVidia compilers for OpenACC builds."
  }
]