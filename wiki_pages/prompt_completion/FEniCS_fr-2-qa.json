[
  {
    "question": "What is the initial step for installing Python packages within the FEniCS virtual environment?",
    "answer": "The first step for installing Python packages in the FEniCS virtual environment is to activate it using `source $FENICS_INSTALL/bin/activate`."
  },
  {
    "question": "Which basic Python libraries are installed directly into the FEniCS virtual environment by the `make_py_packages` function?",
    "answer": "The `make_py_packages` function installs `ply` and `numpy` using `pip3 install`."
  },
  {
    "question": "How are FEniCS core components like `fiat`, `dijitso`, `ufl`, and `ffc` installed during the `make_py_packages` process?",
    "answer": "Components like `fiat`, `dijitso`, `ufl`, and `ffc` are installed by changing into their respective directories (`$FENICS_INSTALL/fiat`, etc.) and then running `pip3 install .`."
  },
  {
    "question": "What is the first action taken in the `make_dolfin` function?",
    "answer": "The `make_dolfin` function begins by changing the current directory to `$FENICS_INSTALL/dolfin/build`."
  },
  {
    "question": "What `cmake` flags are specified when building DOLFIN in the `make_dolfin` function?",
    "answer": "When building DOLFIN, `cmake` flags include `-DDOLFIN_SKIP_BUILD_TESTS=true`, `-DCMAKE_EXE_LINKER_FLAGS=\"-lpthread\"`, `-DEIGEN3_INCLUDE_DIR=$EBROOTEIGEN/include`, and `-DCMAKE_INSTALL_PREFIX=$HOME/fenics`."
  },
  {
    "question": "How is the Python component of DOLFIN installed after the main compilation?",
    "answer": "After the `make -j 8 install` command, the Python component of DOLFIN is installed by navigating to `$FENICS_INSTALL/dolfin/python` and executing `pip3 install .`."
  },
  {
    "question": "Is the 'Plugiciels' (Add-ons) section current for StdEnv/2020?",
    "answer": "No, the 'Plugiciels' section is explicitly stated as not being up to date for StdEnv/2020."
  },
  {
    "question": "What is a prerequisite for installing FEniCS add-ons like `mshr`?",
    "answer": "FEniCS must be installed first by following the main directives before installing any add-ons."
  },
  {
    "question": "What modules need to be loaded to install `mshr` according to `mshr_install.sh`?",
    "answer": "To install `mshr`, the `mshr_install.sh` script requires loading `hdf5-mpi/1.8.18`, `boost`, `eigen`, `python/3.5`, `scipy-stack/2017b`, `petsc/3.7.5`, and `fftw-mpi/3.3.6` modules."
  },
  {
    "question": "How is the `mshr` source code acquired for installation?",
    "answer": "The `mshr` source code is acquired by cloning the Git repository `https://bitbucket.org/fenics-project/mshr.git`."
  },
  {
    "question": "What command is used to build the FEniCS Singularity image?",
    "answer": "The command to build the FEniCS Singularity image is `sudo singularity build FEniCS.simg FEniCS-ComputeCanada-Singularity-Recipe`."
  },
  {
    "question": "What is the base Docker image used in the `FEniCS-ComputeCanada-Singularity-Recipe`?",
    "answer": "The `FEniCS-ComputeCanada-Singularity-Recipe` uses `quay.io/fenicsproject/stable:latest` as its base Docker image."
  },
  {
    "question": "What types of packages are installed by the `%post` section of the Singularity recipe?",
    "answer": "The `%post` section installs numerous Python-related packages (e.g., `python-numpy`, `ipython`, `python-matplotlib`) as well as general utilities like `automake`, `git-core`, and `openmpi-bin`."
  },
  {
    "question": "What cleanup commands are executed at the end of the Singularity recipe's `%post` section?",
    "answer": "At the end of the `%post` section, the commands `sudo apt-get clean` and `sudo rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*` are executed to clean up downloaded and temporary files."
  },
  {
    "question": "Where should the Singularity build command be executed to create the FEniCS image?",
    "answer": "The Singularity build command should be executed on a Linux computer where Singularity is installed and where you have all necessary permissions."
  }
]