[
  {
    "question": "What new feature was added in Version 1.0.3 of META?",
    "answer": "Version 1.0.3, released in March 2025, adds support for the Trillium cluster through the introduction of the new WHOLE_NODE mode."
  },
  {
    "question": "When was Version 1.0.3 of META released?",
    "answer": "Version 1.0.3 was released in March 2025."
  },
  {
    "question": "How is the WHOLE_NODE mode configured?",
    "answer": "The WHOLE_NODE mode can be set in config.h; it is disabled by default."
  },
  {
    "question": "What is the primary function of the Whole Node mode?",
    "answer": "The Whole Node mode operates by packaging serial farm jobs into whole node jobs."
  },
  {
    "question": "What does META stand for?",
    "answer": "META is short for META-Farm."
  },
  {
    "question": "What is META?",
    "answer": "META is a suite of scripts designed in SHARCNET to automate high-throughput computing, which involves running a large number of related calculations."
  },
  {
    "question": "What terms are used to describe the practice of automating high-throughput computing with META?",
    "answer": "This practice is sometimes called farming, serial farming, or task farming."
  },
  {
    "question": "On which systems does META work?",
    "answer": "META works on all Alliance national systems and could also be used on other clusters which use the Slurm scheduler."
  },
  {
    "question": "What is a 'case' in the context of META?",
    "answer": "A 'case' is defined as one independent computation, which may involve the execution of a serial, parallel, or GPU-using program."
  },
  {
    "question": "What is a 'job' in the context of META?",
    "answer": "A 'job' is an invocation of the Slurm job scheduler, which may handle several cases."
  },
  {
    "question": "What are the two modes of operation for META?",
    "answer": "META has two modes of operation: SIMPLE mode, which handles one case per job, and META mode, which handles many cases per job."
  },
  {
    "question": "Which mode of META offers dynamic workload balancing?",
    "answer": "Dynamic workload balancing is a feature available in META mode."
  },
  {
    "question": "Does META automatically resubmit failed computations?",
    "answer": "Yes, META automatically resubmits all the cases which failed or never ran."
  },
  {
    "question": "What is a technical requirement for describing cases in each farm?",
    "answer": "For each farm, each case to be computed must be described as a separate line in a table.dat file."
  },
  {
    "question": "How are multiple farms managed concurrently?",
    "answer": "You can run multiple farms independently, but each farm must have its own directory."
  },
  {
    "question": "What are metajobs in META mode?",
    "answer": "Metajobs are the actual jobs submitted by the META package in META mode, and their number is usually much smaller than the total number of cases to process."
  },
  {
    "question": "How do metajobs process cases from table.dat in META mode?",
    "answer": "Each metajob can process multiple lines (multiple cases) from table.dat, reading them in a serialized manner using a lockfile mechanism to prevent race conditions."
  },
  {
    "question": "What is an advantage of META over GLOST regarding queue wait times?",
    "answer": "The queue wait time can be dramatically shorter with the META package than with GLOST, with META producing first results within minutes, compared to weeks for large GLOST farms."
  },
  {
    "question": "How does META handle idle time at the end of farm computations compared to GLOST?",
    "answer": "With META, there is no wasted idle time as individual metajobs exit earlier if they have no more workload to process, unlike GLOST where some MPI ranks sit idle."
  },
  {
    "question": "Does GLOST support automated resubmission of failed cases?",
    "answer": "GLOST and other similar packages do not support automated resubmission of cases which failed or never ran, while META does."
  },
  {
    "question": "When was the META webinar recorded?",
    "answer": "A webinar describing the META package was recorded on October 6th, 2021."
  },
  {
    "question": "What is the first step to start using META?",
    "answer": "The first step is to log into a cluster."
  },
  {
    "question": "How do you load the META package module?",
    "answer": "You load the meta-farm module by running 'module load meta-farm'."
  },
  {
    "question": "How do you create a new farm directory in META?",
    "answer": "You create a new farm directory by running 'farm_init.run Farm_name', where 'Farm_name' is your chosen name."
  },
  {
    "question": "What file describes one independent computation per line in a META farm?",
    "answer": "The 'table.dat' file inside the farm directory describes one case (one independent computation) per line."
  },
  {
    "question": "How do you submit a farm in SIMPLE mode?",
    "answer": "Inside the farm directory, execute 'submit.run -1' for the one case per job (SIMPLE) mode."
  },
  {
    "question": "How do you submit a farm in META mode?",
    "answer": "Inside the farm directory, execute 'submit.run N' for the many cases per job (META) mode, where N is the desired number of metajobs."
  },
  {
    "question": "What is the purpose of the `farm_init.run` command?",
    "answer": "`farm_init.run` is used to initialize a farm."
  },
  {
    "question": "What does the `submit.run` command do?",
    "answer": "`submit.run` submits the farm to the scheduler."
  },
  {
    "question": "What is the function of `resubmit.run`?",
    "answer": "`resubmit.run` resubmits all computations which failed or never ran as a new farm."
  },
  {
    "question": "Which command provides a short summary of the farm's state, including progress?",
    "answer": "`query.run` provides a short summary of the state of the farm, showing the number of queued, running, and completed jobs, and prints the progress."
  },
  {
    "question": "How do you terminate all running and queued jobs in a META farm?",
    "answer": "You can kill all running and queued jobs in the farm by using the `kill.run` command."
  },
  {
    "question": "What does `clean.run` do?",
    "answer": "`clean.run` deletes all files in the farm directory (except specific configuration files) and associated files in `/home/$USER/tmp`, requiring caution as it deletes results."
  },
  {
    "question": "Where must most META commands be executed?",
    "answer": "All commands, except for `farm_init.run` itself, have to be executed inside a farm directory created by `farm_init.run`."
  },
  {
    "question": "Under what conditions is SIMPLE mode recommended?",
    "answer": "SIMPLE mode is recommended if the total number of cases is fairly small (less than 500) and each case runs for at least 20 minutes."
  }
]