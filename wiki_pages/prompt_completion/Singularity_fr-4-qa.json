[
  {
    "question": "How do you execute a single command inside a Singularity container?",
    "answer": "To execute a single command inside a Singularity container, use the `singularity exec` command."
  },
  {
    "question": "How can user-defined environment variables be passed to a Singularity container?",
    "answer": "User-defined environment variables can be passed to a Singularity container using the `--env-file` indicator, which takes the path to a file where the variables are defined."
  },
  {
    "question": "What is an example of defining and using an environment variable file with `singularity exec`?",
    "answer": "To use a variable like `PYSPARK_SUBMIT_ARGS`, you create a file (e.g., `envfile`) defining it, such as `PYSPARK_SUBMIT_ARGS='--driver-memory 96g --driver-java-options \"-verbose:gc -XX:+UseSerialGC -XX:-UseGCOverheadLimit\" pyspark-shell'`, and then execute `singularity exec --env-file envfile myimage.simg gcc -v`."
  },
  {
    "question": "Which Singularity commands should be used to run daemons or background processes in a container?",
    "answer": "To run daemons and background processes in a container, you should use `singularity instance.start` and `singularity instance.stop` instead of the `exec` command."
  },
  {
    "question": "What is the benefit of using Singularity instance commands for background processes?",
    "answer": "By using Singularity instance commands, Singularity ensures that any applications running within the instance are properly terminated when the task ends."
  },
  {
    "question": "How do you start a Singularity container instance?",
    "answer": "To start a Singularity container instance, use `singularity instance.start` followed by the image name and a chosen session name, for example, `singularity instance.start myimage.simg quadrat5run`."
  },
  {
    "question": "How do you stop a running Singularity container instance?",
    "answer": "To stop a running Singularity container instance, use `singularity instance.stop` followed by the image name and the session name, for example, `singularity instance.stop myimage.simg quadrat5run`."
  },
  {
    "question": "How can you view a list of all active Singularity container sessions?",
    "answer": "You can see a list of all active Singularity container sessions by executing the command `singularity instance.list`."
  },
  {
    "question": "How do you execute commands or interact with a running Singularity instance?",
    "answer": "When a session is running, applications can be executed using `singularity shell`, `exec`, or `run` commands by indicating the image name followed by the prefix `instance://` and the session name, for example, `singularity exec myimage.simg instance://mysessionname ps -eaf`."
  },
  {
    "question": "What files are visible by default to an application running in a Singularity container?",
    "answer": "By default, an application executed in a Singularity container only sees files within the container's image and those in the current working directory."
  },
  {
    "question": "What is the purpose of a 'bind mount' in Singularity?",
    "answer": "A 'bind mount' allows Singularity tasks to make external file systems visible and accessible inside the container, which is necessary for applications to interact with files outside the container image."
  },
  {
    "question": "How do you specify directories for bind mounting into a Singularity container?",
    "answer": "You specify directories for bind mounting using the `-B` option with `shell`, `exec`, or `run` commands, for example, `singularity shell -B /home -B /project -B /scratch -B /localscratch myimage.simg`."
  },
  {
    "question": "Can a bind-mounted directory have a different name inside the container?",
    "answer": "Yes, you can rename a bind-mounted directory inside the container by using a colon-separated path like `-B /localscratch:/temp`, which mounts `/localscratch` on the host as `/temp` inside the container."
  }
]