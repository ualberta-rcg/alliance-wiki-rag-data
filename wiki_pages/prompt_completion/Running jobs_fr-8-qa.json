[
  {
    "question": "Why should you avoid using word processors for creating scripts on the cluster?",
    "answer": "Using a word processor instead of a text editor can introduce hidden characters, which may cause problems for your scripts on the cluster."
  },
  {
    "question": "Which text editors are recommended for working with scripts directly on the cluster?",
    "answer": "It is preferable to use an editor like nano, vim, or emacs when working directly on the cluster."
  },
  {
    "question": "How should scripts be prepared offline on Windows for use on the cluster?",
    "answer": "On Windows, use a text editor like Notepad or Notepad++ to prepare scripts, then upload them and change the Windows end-of-line codes to Linux end-of-line codes using `dos2unix`."
  },
  {
    "question": "What is the recommended way to prepare scripts offline on a Mac for use on the cluster?",
    "answer": "On a Mac, use a terminal editor like nano, vim, or emacs in a terminal window."
  },
  {
    "question": "What happens to a dependent task if its parent task fails?",
    "answer": "If a parent task, for which a dependent task was submitted with `--dependency=afterok:<jobid>`, stops prematurely (i.e., produces a non-zero exit code), the dependent task will never execute and will be automatically cancelled."
  },
  {
    "question": "How can you find out why a specific module cannot be loaded, indicated by an Lmod error?",
    "answer": "When Lmod reports that a module cannot be loaded, you should use `module spider <module-name>/<version>` to see how to load the module and identify any prerequisite modules that need to be loaded first."
  },
  {
    "question": "What is the solution if an Lmod error states that a module cannot be loaded as requested?",
    "answer": "To resolve this, you need to add the necessary prerequisite `module load` commands (identified by `module spider`) to your script before attempting to load the problematic module."
  },
  {
    "question": "Why is it recommended to add `module purge` at the beginning of a script?",
    "answer": "Adding `module purge` before loading modules ensures that tasks are submitted uniformly and are not affected by environment modifications made in the shell from which they were launched."
  },
  {
    "question": "How can you prevent a task from inheriting environment variables from the shell that submitted it?",
    "answer": "You can use the `--export=none` directive to prevent a task from inheriting environment parameters from the submitting shell, which can help in diagnosing problems."
  }
]