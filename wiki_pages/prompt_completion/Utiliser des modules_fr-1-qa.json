[
  {
    "question": "What kind of software can our servers execute?",
    "answer": "Our servers can execute all software running under Linux."
  },
  {
    "question": "How is already installed software typically accessed on a compute server?",
    "answer": "Software already installed on a compute server is accessible as a 'module'."
  },
  {
    "question": "What options are available if the required software is not installed?",
    "answer": "You can either ask our team to install it for you, or you can install it yourself."
  },
  {
    "question": "What is the purpose of modules?",
    "answer": "Modules are configuration files containing instructions to modify your software environment, allowing multiple versions of an application to be installed without conflict."
  },
  {
    "question": "What tool manages modules on new servers?",
    "answer": "On new servers, modules are managed by Lmod, developed at TACC."
  },
  {
    "question": "Which tool did Lmod replace for module management?",
    "answer": "Lmod replaces 'Environment Modules', which is used on most older servers."
  },
  {
    "question": "What information does a modulefile contain?",
    "answer": "A modulefile contains the necessary information to make an application or library available in the user's session."
  },
  {
    "question": "How do modulefiles typically make software available?",
    "answer": "Typically, a modulefile contains instructions that modify or initialize environment variables such as PATH and LD_LIBRARY_PATH."
  },
  {
    "question": "Does loading a module execute the software?",
    "answer": "No, simply loading a module does not execute the software."
  },
  {
    "question": "How can you view details about a specific module?",
    "answer": "You can view details for a module by typing the command 'module show <module_name>'."
  },
  {
    "question": "What is the general syntax for using the 'module' command?",
    "answer": "The normal syntax is 'module commande [autres options]'."
  },
  {
    "question": "How do you get a list of available subcommands for the 'module' command?",
    "answer": "To get a list of available subcommands, use 'module help'."
  },
  {
    "question": "What does the 'spider' subcommand do?",
    "answer": "The 'spider' subcommand displays all modules found in the current standard software environment."
  },
  {
    "question": "How can you list all available versions of a specific application using 'spider'?",
    "answer": "You can list all available versions of an application by using 'module spider <application_name>', for example, 'module spider openmpi'."
  },
  {
    "question": "How do you display loading options for a specific version of an application with 'spider'?",
    "answer": "You can display loading options for a specific version of an application by using 'module spider <application_name>/<version_number>', for example, 'module spider openmpi/4.0.3'."
  },
  {
    "question": "What is the purpose of the 'avail' subcommand?",
    "answer": "The 'avail' subcommand is used to list the modules that you can load."
  },
  {
    "question": "How do you list available modules for a particular library or tool using 'avail'?",
    "answer": "You can obtain a list of available modules for a particular library or tool with 'module avail <library_or_tool_name>', for example, 'module avail openmpi'."
  },
  {
    "question": "Why might 'module avail' not list certain modules?",
    "answer": "'module avail' may not list certain modules that are incompatible with the modules you have already loaded."
  },
  {
    "question": "How can you see a complete list of modules, including those incompatible with loaded ones?",
    "answer": "To see a list of modules other than those loaded and available to you, use the 'spider' subcommand."
  },
  {
    "question": "What does the 'list' subcommand do?",
    "answer": "The 'list' subcommand displays the modules that are currently loaded in your environment."
  },
  {
    "question": "How do you load a module?",
    "answer": "The 'load' subcommand allows you to load a given module, for example, 'module load gcc/9.3'."
  },
  {
    "question": "Can multiple modules be loaded with a single command?",
    "answer": "Yes, you can load more than one module with the same command, for example, 'module load gcc/9.3 openmpi/4.0'."
  },
  {
    "question": "What happens if you load a module that is incompatible with an already loaded module?",
    "answer": "If you load a module that is incompatible with a module already loaded, Lmod will indicate that it has replaced the old module with the new one."
  }
]