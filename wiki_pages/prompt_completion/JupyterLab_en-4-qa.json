[
  {
    "question": "What is required to use Ansys software in JupyterLab?",
    "answer": "You will need to provide your own license for Ansys, as explained in the Ansys page."
  },
  {
    "question": "How do I make the Ansys EDT launcher appear in JupyterLab?",
    "answer": "Loading the `ansysedt` module will make the corresponding launcher appear for Ansys EDT."
  },
  {
    "question": "Does Ansys EDT require a specific license?",
    "answer": "Yes, for Ansys EDT, you will need to provide your own license, as explained in the Ansys EDT page."
  },
  {
    "question": "What is COMSOL primarily used for?",
    "answer": "COMSOL is a general-purpose software for modelling engineering applications."
  },
  {
    "question": "How can I launch the COMSOL graphical user interface in JupyterLab?",
    "answer": "Loading a `comsol` module will add a launcher to start the graphical user interface for COMSOL through a VNC session."
  },
  {
    "question": "Do I need a license file for COMSOL?",
    "answer": "Yes, you will need to provide your own license file to use COMSOL software."
  },
  {
    "question": "How is MATLAB made available in JupyterLab?",
    "answer": "MATLAB is available by loading a `matlab` module, which will add a launcher to start the software in a VNC session."
  },
  {
    "question": "Is a license required for MATLAB in JupyterLab?",
    "answer": "Yes, you will need to provide your own license file for MATLAB, as explained in the MATLAB page."
  },
  {
    "question": "What is NVidia Nsight Systems?",
    "answer": "NVidia Nsight Systems is a performance analysis tool developed primarily for profiling GPUs, but which can profile CPU code as well."
  },
  {
    "question": "Which modules should be loaded to access NVidia Nsight Systems?",
    "answer": "Loading a `cuda` or a `nvhpc` module will add a launcher to start the graphical user interface for NVidia Nsight Systems in a VNC session."
  },
  {
    "question": "What is GNU Octave?",
    "answer": "GNU Octave is an open-source scientific programming language largely compatible with MATLAB."
  },
  {
    "question": "How do I launch the Octave graphical user interface in JupyterLab?",
    "answer": "Loading an `octave` module will add a launcher to start the graphical user interface for Octave through a VNC session."
  },
  {
    "question": "What is ParaView used for?",
    "answer": "ParaView is a powerful open-source visualisation software."
  },
  {
    "question": "How can I start the ParaView graphical user interface?",
    "answer": "Loading a `paraview` module will add a launcher to start the Paraview graphical user interface through a VNC session."
  },
  {
    "question": "What is QGIS?",
    "answer": "QGIS is a powerful open-source software for visualizing and processing geographic information systems (GIS) data."
  },
  {
    "question": "How do I launch the QGIS graphical user interface in JupyterLab?",
    "answer": "Loading a `qgis` module will add a launcher to start the QGIS graphical user interface through a VNC session."
  },
  {
    "question": "What kind of software is Star-CCM+?",
    "answer": "Star-CCM+ is Siemens's commercial computational fluid dynamic simulation software."
  },
  {
    "question": "Which modules enable Star-CCM+ in JupyterLab?",
    "answer": "Star-CCM+ is available by loading one of the `starccm` or the `starccm-mixed` modules."
  },
  {
    "question": "Is a license required for Star-CCM+?",
    "answer": "Yes, as a commercial package, you will need to provide your own license for Star-CCM+."
  },
  {
    "question": "What module must be loaded for scientific Python packages in a notebook?",
    "answer": "If any scientific Python packages like `matplotlib`, `numpy`, or `pandas` are required by your notebook, you must load the `scipy-stack` module from the JupyterLab 'Softwares' tool before opening the notebook."
  },
  {
    "question": "Name some packages included in the `scipy-stack` module.",
    "answer": "The `scipy-stack` module includes packages such as `ipython`, `ipython_genutils`, `ipykernel`, `ipyparallel`, `matplotlib`, `numpy`, `pandas`, `scipy`, `Cycler`, `futures`, `jupyter_client`, `jupyter_core`, `mpmath`, `pathlib2`, `pexpect`, `pickleshare`, `ptyprocess`, `pyzmq`, `simplegeneric`, `sympy`, `tornado`, and `traitlets`."
  },
  {
    "question": "How can I install additional Python packages in a JupyterLab notebook?",
    "answer": "You can install needed packages by running `pip install --no-index package-name` in a cell of your notebook."
  },
  {
    "question": "What might be necessary after installing certain Python packages in a notebook?",
    "answer": "For some packages (like `plotly`), you may need to restart the notebook's kernel before importing the package after installation."
  },
  {
    "question": "Are packages installed via `pip install --no-index` in a notebook persistent?",
    "answer": "No, the installation of packages in the default Python kernel environment is temporary to the lifetime of the JupyterLab session; you will have to reinstall these packages the next time you start a new JupyterLab session."
  },
  {
    "question": "How can I get a persistent Python environment for my JupyterLab notebooks?",
    "answer": "For a persistent Python environment, you must configure a custom Python kernel."
  },
  {
    "question": "What is the procedure to open an existing Python notebook in JupyterLab?",
    "answer": "To open an existing Python notebook, go to the 'File Browser', browse to the location of the `*.ipynb` file, and double-click on it. This will open it in a new JupyterLab tab and start an IPython kernel."
  },
  {
    "question": "How do I open a new Python notebook in JupyterLab?",
    "answer": "To open a new Python notebook in the current 'File Browser' directory, click on the 'Python 3.x' launcher under the 'Notebook' section. This will open a new notebook in a new JupyterLab tab and start a new IPython kernel."
  }
]