[
  {
    "question": "How do you edit a value in `ccmake`?",
    "answer": "You can edit a value in `ccmake` by pressing the `enter` key."
  },
  {
    "question": "What key should be pressed in `ccmake` to try out a new configuration after modifying a value?",
    "answer": "After modifying a value in `ccmake`, you should press the `c` key to try out the configuration with the new value."
  },
  {
    "question": "How do you generate the `Makefile` in `ccmake` once a new configuration is successful?",
    "answer": "If a new configuration succeeds in `ccmake`, you will have the option `g` to generate the `Makefile`."
  },
  {
    "question": "How can you quit `ccmake` without generating a `Makefile`?",
    "answer": "You can quit `ccmake` without generating a `Makefile` by pressing the `q` key."
  },
  {
    "question": "What key is used to activate advanced mode in `ccmake`?",
    "answer": "The `t` key is used to activate advanced mode in `ccmake`."
  },
  {
    "question": "What kind of information does `ccmake` display in advanced mode?",
    "answer": "In advanced mode, `ccmake` displays both found and not-found libraries (like BLAS) and the list of flags passed to C, C++, and other compilers, as well as the linker, depending on the build type."
  },
  {
    "question": "How can command-line options displayed by `ccmake` be modified using the `cmake` command?",
    "answer": "All command-line options displayed by `ccmake` can be modified on the command line using the syntax: `cmake . -DVARIABLE=VALUE`."
  },
  {
    "question": "Provide an example of how to specify the install location using a `cmake` command-line option.",
    "answer": "To specify the install location, you would use: `cmake . -DCMAKE_INSTALL_PREFIX=/home/user/my_directory`."
  },
  {
    "question": "What `cmake` option is used to change the C compiler?",
    "answer": "The `CMAKE_C_COMPILER` option is used to change the C compiler."
  },
  {
    "question": "Which `cmake` option allows you to change the flags passed to the C++ compiler?",
    "answer": "You can change the flags passed to the C++ compiler using the `CMAKE_CXX_FLAGS` option."
  },
  {
    "question": "What is the purpose of the `CMAKE_BUILD_TYPE` option in CMake?",
    "answer": "The `CMAKE_BUILD_TYPE` option defines which compilation type must be used, simplifying the configuration of compiler options."
  },
  {
    "question": "What are the possible values for the `CMAKE_BUILD_TYPE` option and what do they do?",
    "answer": "Possible values for `CMAKE_BUILD_TYPE` include:\n- `Debug`: Activates debugging options and deactivates optimization options.\n- `Release`: Deactivates debugging options and activates usual optimizations.\n- `MinSizeRel`: Deactivates debugging options and activates optimization options that minimize the binary's size.\n- `RelWithDebInfo`: Activates debugging options and usual optimizations.\n- `-`: No specific value."
  }
]