[
  {
    "question": "What is GPAW?",
    "answer": "GPAW is a Python-based Density Functional Theory (DFT) code that utilizes the Projector Augmented-Wave (PAW) method and the Atomic Simulation Environment (ASE)."
  },
  {
    "question": "How can you check which versions of GPAW Python wheels are available?",
    "answer": "You can check available versions by running the command `avail_wheels gpaw`."
  },
  {
    "question": "Which Python module version is loaded as an example for GPAW installation?",
    "answer": "Python/3.10 is loaded using `module load python/3.10`."
  },
  {
    "question": "What is the command to create a new virtual environment for GPAW?",
    "answer": "A new virtual environment can be created with `virtualenv --no-download venv_gpaw`."
  },
  {
    "question": "How do you activate the GPAW virtual environment?",
    "answer": "The command to activate the virtual environment is `source venv_gpaw/bin/activate`."
  },
  {
    "question": "What command is used to install GPAW within its activated virtual environment?",
    "answer": "GPAW is installed using `pip install --no-index gpaw`."
  },
  {
    "question": "Where should GPAW data be downloaded and installed, and what command is used?",
    "answer": "GPAW data should be downloaded and installed into the SCRATCH file system using the command `gpaw install-data $SCRATCH`."
  },
  {
    "question": "How do you set the `GPAW_SETUP_PATH` environment variable?",
    "answer": "You set it using `export GPAW_SETUP_PATH=$SCRATCH/gpaw-setups-0.9.20000` to point to the directory where data was installed."
  },
  {
    "question": "How do you run a quick test to verify a GPAW installation?",
    "answer": "A quick test can be run with the command `gpaw test`."
  },
  {
    "question": "How can you perform a parallel test for GPAW, for instance, using 4 cores?",
    "answer": "A parallel test can be performed using `gpaw -P 4 test`."
  },
  {
    "question": "Where are the results of the GPAW tests stored?",
    "answer": "The results of the GPAW tests are stored in the `test.txt` file in the current directory."
  },
  {
    "question": "What is the purpose of the provided `job_gpaw.sh` example script?",
    "answer": "The `job_gpaw.sh` script serves as an example for hybrid OpenMP and MPI parallelization when running GPAW."
  },
  {
    "question": "Which SLURM parameters are configured in the example GPAW job script for resource allocation?",
    "answer": "The example script configures `--ntasks=8`, `--cpus-per-task=4`, `--mem-per-cpu=4000M`, and `--time=0-01:00`."
  },
  {
    "question": "What modules must be loaded before executing the GPAW job script?",
    "answer": "The `gcc/9.3.0` and `openmpi/4.0.3` modules must be loaded."
  },
  {
    "question": "How is the `OMP_NUM_THREADS` environment variable set in the example job script?",
    "answer": "It is set using `export OMP_NUM_THREADS=\"${SLURM_CPUS_PER_TASK:-1}\"`."
  },
  {
    "question": "Why are specific `gcc` and `openmpi` modules loaded for a GPAW job?",
    "answer": "These modules are loaded to ensure that the correct MPI library is used for the task, matching the one that was utilized to build the GPAW wheels."
  },
  {
    "question": "How many total CPUs does the example `job_gpaw.sh` script utilize?",
    "answer": "The example script uses a total of 32 CPUs (8 MPI ranks with 4 OpenMP threads per rank) on a single node."
  },
  {
    "question": "What is the general recommendation for setting `ntasks` and `cpus-per-task` in a GPAW job script?",
    "answer": "It is recommended to modify these values so that their product matches the total number of cores on an entire node (e.g., 32 on Graham, 40 on B\u00e9luga and Niagara, 48 on Cedar, or 64 on Narval)."
  }
]