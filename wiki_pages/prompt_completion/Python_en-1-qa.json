[
  {
    "question": "What is Python?",
    "answer": "Python is an interpreted programming language known for its readability of code, simple and expressive syntax, and an extensive, easy-to-use standard library."
  },
  {
    "question": "How can the capabilities of Python be extended?",
    "answer": "The capabilities of Python can be extended with packages developed by third parties."
  },
  {
    "question": "Where are users generally expected to install third-party Python packages?",
    "answer": "In general, individual users and groups are expected to install these third-party packages in their own directories."
  },
  {
    "question": "Is a default Python version available when logging into clusters?",
    "answer": "Yes, a default Python version will be available when you log into our clusters."
  },
  {
    "question": "Should the default Python version be used on clusters?",
    "answer": "Generally, no, especially if you need to install any Python packages."
  },
  {
    "question": "Which Python version should a user choose if they are unsure?",
    "answer": "If you are not sure which version you need, it is reasonable to use the latest version available."
  },
  {
    "question": "How can you discover the versions of Python available on the system?",
    "answer": "You can discover available Python versions by running the command `module avail python`."
  },
  {
    "question": "How do you load Python version 3.10?",
    "answer": "You can load Python 3.10 using the command `module load python/3.10`."
  },
  {
    "question": "How many recent Python versions are supported with prebuilt packages in the wheelhouse?",
    "answer": "Prebuilt Python packages in our wheelhouse are provided only for the 3 most recent Python versions available on the systems."
  },
  {
    "question": "What happens if older Python versions are used to install packages from the wheelhouse?",
    "answer": "Using older versions of Python with these packages will result in dependencies issues."
  },
  {
    "question": "When did support stop for building wheels for Python 3.7?",
    "answer": "Support for building wheels for Python 3.7 stopped in 2022-02."
  },
  {
    "question": "When did support stop for building wheels for Python 2.7?",
    "answer": "Support for building wheels for Python 2.7 stopped in 2020-01."
  },
  {
    "question": "What is the SciPy stack?",
    "answer": "The SciPy stack is an environment module that includes several Python packages like NumPy, SciPy, Matplotlib, IPython, pandas, Sympy, and nose."
  },
  {
    "question": "How do you load the SciPy stack module?",
    "answer": "To load the SciPy stack, you first load a Python version of your choice, and then use `module load scipy-stack`."
  },
  {
    "question": "How can you get a complete list of packages and their version numbers within a specific SciPy stack module version, for example, 2020a?",
    "answer": "Run `module spider scipy-stack/2020a` to get a complete list of packages and their version numbers within that SciPy stack module version."
  },
  {
    "question": "What tool is provided to create virtual environments in Python?",
    "answer": "The `virtualenv` tool is provided with each version of Python to create virtual environments."
  },
  {
    "question": "What are the benefits of using Python virtual environments?",
    "answer": "Virtual environments allow users to easily install many versions of the same package, or to compartmentalize a Python installation according to specific project needs."
  },
  {
    "question": "Where should Python virtual environments typically be created?",
    "answer": "Usually, Python virtual environments should be created in your `/home` directory or in one of your `/project` directories."
  },
  {
    "question": "Where should you avoid creating your virtual environment?",
    "answer": "Do not create your virtual environment under `$SCRATCH` as it may get partially deleted."
  },
  {
    "question": "What steps are required before creating a virtual environment?",
    "answer": "Before creating a virtual environment, ensure you have selected a Python version with `module load python/X.Y.Z` and optionally load `scipy-stack/X.Y.Z` if needed."
  },
  {
    "question": "How do you create a virtual environment named 'ENV' using the provided tool?",
    "answer": "To create a virtual environment named 'ENV', use the command `virtualenv --no-download ENV`."
  },
  {
    "question": "How do you activate a virtual environment?",
    "answer": "Once created, a virtual environment must be activated using `source ENV/bin/activate`."
  },
  {
    "question": "What command should be run after activating a new virtual environment?",
    "answer": "You should upgrade `pip` in the environment by running `pip install --no-index --upgrade pip`."
  },
  {
    "question": "How do you exit a virtual environment?",
    "answer": "To exit a virtual environment, simply enter the command `deactivate`."
  },
  {
    "question": "What steps are needed to use an already created virtual environment?",
    "answer": "Each time you want to use an existing virtual environment, you need to load the same environment modules that were loaded during its creation (e.g., `module load python scipy-stack`) and then activate it with `source ENV/bin/activate`."
  },
  {
    "question": "What command is used to install Python packages once a virtual environment is loaded?",
    "answer": "The `pip` command is used to install Python packages in a loaded virtual environment."
  },
  {
    "question": "Where can a comprehensive index of Python packages be found?",
    "answer": "A comprehensive index of Python packages can be found at PyPI (https://pypi.python.org/pypi)."
  },
  {
    "question": "How do you install the latest stable version of Numpy within an activated virtual environment, specifically using prebuilt wheels?",
    "answer": "First load the Python interpreter (`module load python/3.10`), then activate the virtual environment (`source ENV/bin/activate`), and finally install Numpy with `pip install numpy --no-index`."
  },
  {
    "question": "What are Python wheels?",
    "answer": "Python wheels are prebuilt distribution packages for Python."
  },
  {
    "question": "What is the purpose of the `--no-index` option when using `pip install`?",
    "answer": "The `--no-index` option tells `pip` to install only from locally available packages (our wheels) and not from PyPI."
  },
  {
    "question": "Why is it recommended to use the `--no-index` option when installing packages for which wheels are provided?",
    "answer": "It is strongly recommended because wheels compiled by staff can prevent issues with missing or conflicting dependencies and are optimized for the cluster's hardware and libraries."
  },
  {
    "question": "What happens if the `--no-index` option is omitted during `pip install`?",
    "answer": "If omitted, `pip` will search both PyPI and local packages, potentially installing a newer PyPI version which could cause issues."
  },
  {
    "question": "How can you force `pip` to ignore prebuilt packages entirely and compile from source?",
    "answer": "You can use the `--no-binary` option to tell `pip` to ignore prebuilt packages and always compile from source."
  },
  {
    "question": "How can you get more detailed output from the `pip` command for diagnosing installation issues?",
    "answer": "You can use the `-vvv` option with `pip` to make it more verbose."
  },
  {
    "question": "What is the recommended approach when installing multiple Python packages with `pip`?",
    "answer": "When installing multiple packages, it is advisable to install them with one command as it helps `pip` resolve dependencies."
  },
  {
    "question": "Why can launching Python and loading a virtual environment be slow on parallel filesystems?",
    "answer": "Parallel filesystems are good for large data chunks but can be bad for intensive use of small files, which is typical when launching software and loading libraries."
  },
  {
    "question": "What is a workaround for slow virtual environment loading in single-node Python jobs?",
    "answer": "A workaround is to create your virtual environment inside of your job, using the compute node's local disk."
  },
  {
    "question": "Why does a node-local virtual environment need to be created for each node in a multi-node job?",
    "answer": "This approach has to be done for each node in the job because the virtual environment is only accessible on one node."
  },
  {
    "question": "What is the purpose of a `requirements.txt` file when creating virtual environments inside jobs?",
    "answer": "The `requirements.txt` file ensures that your environment is reproducible between jobs."
  },
  {
    "question": "What is required for the instructions on creating virtual environments inside jobs to work correctly regarding packages?",
    "answer": "All packages you need must be available in the Python wheels provided by the system."
  },
  {
    "question": "What should you do if a package's wheel is not available in the wheelhouse for creating an environment inside a job?",
    "answer": "If a wheel is not available, you can pre-download it or contact technical support to make a request for its inclusion."
  },
  {
    "question": "How do you create virtual environments on each allocated node in a multi-node job submission script?",
    "answer": "In your submission script, use an `srun` block like `srun --ntasks $SLURM_NNODES --tasks-per-node=1 bash << EOF ... EOF` to run the `virtualenv` and `pip install` commands on each node."
  },
  {
    "question": "How is the virtual environment activated on the main node in a multi-node job?",
    "answer": "The virtual environment is activated on the main node with `source $SLURM_TMPDIR/env/bin/activate;`."
  },
  {
    "question": "How do you run your Python script using the activated virtual environment across multiple nodes in a multi-node job?",
    "answer": "You use `srun python myscript.py;` to run your script, as `srun` exports the current environment variables including `$VIRTUAL_ENV` and `$PATH`."
  },
  {
    "question": "Where can you find a list of currently available Python wheels?",
    "answer": "Currently available wheels are listed on the [[Available Python wheels]] page, or you can run the command `avail_wheels` on the cluster."
  },
  {
    "question": "What does the `avail_wheels` command show by default?",
    "answer": "By default, `avail_wheels` shows only the latest version of a specific package (unless versions are given), versions compatible with the loaded Python module or virtual environment, and versions compatible with the current CPU architecture and software environment."
  },
  {
    "question": "How do you list wheels that contain 'cdf' (case insensitive) in their name using `avail_wheels`?",
    "answer": "You can list wheels containing 'cdf' in their name by running `avail_wheels \"*cdf*\"`."
  },
  {
    "question": "How do you list wheels for an exact package name, for example, 'numpy'?",
    "answer": "To list wheels for an exact name, run `avail_wheels numpy`."
  },
  {
    "question": "How do you list a specific version of a package, like Numpy 1.23, using `avail_wheels`?",
    "answer": "You can list a specific version using `avail_wheels numpy==1.23` or `avail_wheels numpy --version 1.23`."
  },
  {
    "question": "What operators can be used with `avail_wheels` for version specification?",
    "answer": "You can use operators like `==`, `<`, `>`, `~=`, `<=`, `>=`, `!=` for version specification with `avail_wheels`."
  },
  {
    "question": "How do you list all available versions of wheels for a package containing 'cdf' in its name?",
    "answer": "To list all available versions, use the `--all-version` option, for example: `avail_wheels \"*cdf*\" --all-version`."
  },
  {
    "question": "How do you list available wheels for a specific Python version, such as Numpy versions less than 1.23 for Python 3.9?",
    "answer": "You can list wheels for a specific Python version using `avail_wheels 'numpy<1.23' --python 3.9`."
  },
  {
    "question": "What does 'cp39' signify in the 'python' column of the `avail_wheels` output?",
    "answer": "In the `avail_wheels` output, 'cp39' stands for `cpython 3.9`."
  },
  {
    "question": "How can you list available wheels based on a `requirements.txt` file?",
    "answer": "You can list available wheels based on a `requirements.txt` file with the command `avail_wheels -r requirements.txt`."
  },
  {
    "question": "How do you display wheels that are not available based on a `requirements.txt` file?",
    "answer": "To display wheels that are not available based on a `requirements.txt` file, use `avail_wheels -r requirements.txt --not-available`."
  },
  {
    "question": "How do you pre-download a package like `tensorboardX` without its dependencies on a login node?",
    "answer": "Run `pip download --no-deps tensorboardX` to pre-download the package as a wheel file in the working directory."
  },
  {
    "question": "What should be done if a pre-downloaded wheel's filename does not end with `none-any`?",
    "answer": "If the filename does not end with `none-any` (e.g., ends with `linux_x86_64`), you should contact Technical support to have them compile the wheel and make it available."
  },
  {
    "question": "How do you install a pre-downloaded wheel file (e.g., `tensorboardX-1.9-py2.py3-none-any.whl`)?",
    "answer": "You can install a pre-downloaded wheel file using its path and filename, for example: `pip install tensorboardX-1.9-py2.py3-none-any.whl`."
  }
]