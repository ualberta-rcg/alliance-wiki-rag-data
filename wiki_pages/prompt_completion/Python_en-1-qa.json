[
  {
    "question": "What is Python?",
    "answer": "Python is an interpreted programming language known for its design philosophy stressing code readability, simple and expressive syntax, and an extensive, easy-to-use standard library."
  },
  {
    "question": "How can Python's capabilities be extended?",
    "answer": "Python's capabilities can be extended with packages developed by third parties."
  },
  {
    "question": "Who is responsible for installing third-party Python packages?",
    "answer": "In general, it is left up to individual users and groups to install these third-party packages in their own directories."
  },
  {
    "question": "Should I use the default Python version available on clusters?",
    "answer": "No, you should generally not use the default Python version available when logging into clusters, especially if you need to install any Python packages."
  },
  {
    "question": "Which Python version should I use on the clusters?",
    "answer": "You should try to find out which version of Python is required for your programs and load the appropriate module. If unsure, use the latest version available."
  },
  {
    "question": "How do I discover the available Python versions on the system?",
    "answer": "To discover the available Python versions, run the command `module avail python`."
  },
  {
    "question": "How do I load a specific Python module?",
    "answer": "You can load a specific Python version using `module load python/X.Y`, where `X.Y` represents the version, such as `3.13`."
  },
  {
    "question": "Why is it important to use modern Python versions for package compatibility?",
    "answer": "Many packages in the Python ecosystem only support the latest few versions of Python 3.x, and using older Python versions can lead to dependency issues when installing packages."
  },
  {
    "question": "Does the system provide prebuilt Python packages for all Python versions?",
    "answer": "No, prebuilt Python packages in the wheelhouse are provided only for the 3 most recent Python versions available on the systems."
  },
  {
    "question": "What is the SciPy stack module?",
    "answer": "The SciPy stack is an environment module that includes popular scientific Python packages such as NumPy, SciPy, Matplotlib, IPython, pandas, Sympy, and nose."
  },
  {
    "question": "How do I use packages from the SciPy stack?",
    "answer": "To use packages from the SciPy stack, first load a Python version of your choice, and then run `module load scipy-stack`."
  },
  {
    "question": "How can I see a complete list of packages and their versions within a specific `scipy-stack` module version?",
    "answer": "You can get a complete list of packages and their version numbers by running `module spider scipy-stack/2020a`, replacing `2020a` with the desired version."
  },
  {
    "question": "What is `virtualenv` and what is its purpose?",
    "answer": "`virtualenv` is a tool provided with each Python version that allows users to create isolated virtual environments for installing Python packages, enabling multiple package versions or project-specific installations."
  },
  {
    "question": "Where should I create my Python virtual environments?",
    "answer": "You should usually create your Python virtual environment(s) in your `/home` directory or in one of your `/project` directories."
  },
  {
    "question": "Where should virtual environments NOT be created and why?",
    "answer": "Do not create your virtual environment under `$SCRATCH` as it may get partially deleted."
  },
  {
    "question": "What are the steps to create a virtual environment?",
    "answer": "To create a virtual environment, first load a Python version (e.g., `module load python/X.Y.Z`), optionally load `scipy-stack/X.Y.Z` if needed, and then run `virtualenv --no-download ENV` where `ENV` is your environment's directory name."
  },
  {
    "question": "How do I activate a virtual environment?",
    "answer": "Once created, a virtual environment must be activated by running `source ENV/bin/activate`."
  },
  {
    "question": "What should I do after activating a new virtual environment?",
    "answer": "You should upgrade `pip` in the environment by running `pip install --no-index --upgrade pip`."
  },
  {
    "question": "How do I exit a virtual environment?",
    "answer": "To exit a virtual environment, simply enter the command `deactivate`."
  },
  {
    "question": "What command is used to install Python packages within an activated virtual environment?",
    "answer": "The `pip` command is used to install Python packages and their dependencies once a virtual environment is loaded and activated."
  },
  {
    "question": "Where can I find a comprehensive index of Python packages?",
    "answer": "A comprehensive index of Python packages can be found at PyPI (Python Package Index) at `https://pypi.python.org/pypi`."
  },
  {
    "question": "How do I install a Python package like Numpy into an activated virtual environment?",
    "answer": "After loading the Python interpreter (e.g., `module load python/X.Y`) and activating your virtual environment (e.g., `source ENV/bin/activate`), you can install Numpy with `pip install numpy --no-index`."
  },
  {
    "question": "What does the `--no-index` option do when using `pip install`?",
    "answer": "The `--no-index` option tells `pip` to install packages only from locally available sources (our prebuilt wheels) and not to search PyPI."
  },
  {
    "question": "Why is it recommended to use the `--no-index` option for installing packages when a wheel is provided?",
    "answer": "Using `--no-index` with provided wheels is strongly recommended because these wheels are compiled by staff to prevent dependency issues, resolve conflicts, and are optimized for the cluster's hardware and libraries."
  },
  {
    "question": "What happens if I omit the `--no-index` option during `pip install`?",
    "answer": "If you omit `--no-index`, `pip` will search both PyPI and local packages, potentially installing a newer version from PyPI instead of the local wheel, which could cause issues."
  },
  {
    "question": "How can I force `pip` to ignore prebuilt packages and compile from source?",
    "answer": "You can use the `--no-binary` option with `pip install` to ignore prebuilt packages entirely, which will always compile the package from source."
  },
  {
    "question": "How can I get more detailed output from `pip` for debugging installation issues?",
    "answer": "You can make `pip` more verbose by using the `-vvv` option, e.g., `pip install -vvv package_name`."
  },
  {
    "question": "What is the recommendation for installing multiple Python packages?",
    "answer": "When installing multiple packages, it is advisable to install them with one command (e.g., `pip install package1 package2`) as it helps `pip` resolve dependencies more effectively."
  },
  {
    "question": "What is the recommended approach for creating virtual environments on Trillium?",
    "answer": "On Trillium, it is recommended to create virtual environments from a login node in your `HOME` directory and then source it in your job script."
  },
  {
    "question": "Why might it be slow to run Python and load virtual environments from parallel filesystems?",
    "answer": "Parallel filesystems are good for large data chunks but can be slow for intensive use of small files, which is common when launching software and loading libraries like Python and virtual environments."
  },
  {
    "question": "What is a workaround for slow Python performance from parallel filesystems in single-node jobs?",
    "answer": "As a workaround, you can create your virtual environment inside of your job, using the compute node's local disk (`$SLURM_TMPDIR`), which can be faster and provide protection against filesystem performance issues."
  },
  {
    "question": "How can I create a reproducible virtual environment for jobs using a `requirements.txt` file?",
    "answer": "You can create a test environment on a login node, install your desired packages, then run `pip freeze --local > requirements.txt`. This file can then be used in your job script to install packages reproducibly."
  },
  {
    "question": "What command is used to check for available Python wheels on the cluster?",
    "answer": "You can run the command `avail_wheels` on the cluster to list available wheels, or check the `Available Python wheels` page."
  },
  {
    "question": "How can I list specific versions of a Python package using `avail_wheels`?",
    "answer": "You can list specific versions using pip-like format such as `avail_wheels numpy==1.23` or `avail_wheels numpy --version 1.23`."
  },
  {
    "question": "How do I list all available versions of a specific wheel using `avail_wheels`?",
    "answer": "To list all available versions of a package, use the `--all-version` option, for example, `avail_wheels \"*cdf*\" --all-version`."
  },
  {
    "question": "How can I check if packages from a `requirements.txt` file are available as wheels?",
    "answer": "You can list available wheels based on a `requirements.txt` file by running `avail_wheels -r requirements.txt`."
  },
  {
    "question": "What command can I use to pre-download a Python package for later installation?",
    "answer": "You can pre-download a package on a login node using `pip download --no-deps package_name`."
  },
  {
    "question": "What should I do if a pre-downloaded wheel file doesn't end with `none-any`?",
    "answer": "If a downloaded wheel's filename does not end with `none-any` (e.g., ends with `linux_x86_64`), you should contact technical support as the wheel might not function correctly and may need to be compiled by staff."
  }
]