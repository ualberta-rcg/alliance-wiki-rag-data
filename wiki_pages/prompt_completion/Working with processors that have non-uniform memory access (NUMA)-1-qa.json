[
  {
    "question": "What is Non-uniform memory access (NUMA)?",
    "answer": "NUMA (Non-uniform memory access) is a feature of memory design found on most modern processors that have a large number of cores."
  },
  {
    "question": "Why would someone want to control program execution with NUMA features?",
    "answer": "Controlling program execution with NUMA features is done to optimize a program's performance to get the best results possible."
  },
  {
    "question": "How are CPU cores and memory organized in a NUMA architecture?",
    "answer": "In NUMA, CPU cores and memory are divided into subsets called NUMA nodes."
  },
  {
    "question": "What is the access speed difference between memory within a NUMA node versus memory in other nodes?",
    "answer": "Cores belonging to a particular NUMA node can access the memory within that node faster than they can access memory belonging to other nodes."
  },
  {
    "question": "For what kind of programs is it beneficial to place all resources within a single NUMA node?",
    "answer": "For programs where performance is dependent on the latency of memory access, it is beneficial to place all cores and memory used by the program within a single NUMA node."
  },
  {
    "question": "Does the Slurm scheduler currently support direct job submission to a specific NUMA node?",
    "answer": "No, the Slurm scheduler does not currently support NUMA features, meaning you cannot submit a job directly to run on a particular NUMA node."
  },
  {
    "question": "How can users still control NUMA features when using the Slurm scheduler?",
    "answer": "Users can submit a job that utilizes a full node, gaining full control over various NUMA features when they launch their programs within that node."
  },
  {
    "question": "Is the NUMA layout consistent across all processor types?",
    "answer": "No, the NUMA layout is typically different for each type of processor."
  },
  {
    "question": "How should job scripts be designed if they intend to use NUMA features?",
    "answer": "Job scripts that use NUMA features should be targeted for a particular type of processor, as NUMA layouts differ."
  },
  {
    "question": "What command can be used to check the NUMA layout of a system?",
    "answer": "The command `numactl --hardware` can be used to check the NUMA layout on a system."
  },
  {
    "question": "Describe the NUMA layout example provided for a Graham broadwell node.",
    "answer": "The example Graham broadwell node has two NUMA nodes (0 and 1), with node 0 containing CPUs 0-15 and 64030 MB of memory, and node 1 containing CPUs 16-31 and 64508 MB of memory."
  },
  {
    "question": "What Slurm directives are used in the example `array_job.sh` script to configure the job for NUMA optimization?",
    "answer": "The example script uses `#SBATCH --nodes=1`, `#SBATCH --exclusive`, `#SBATCH --constraint=broadwell`, `#SBATCH --mem=0`, `#SBATCH --ntasks=2`, and `#SBATCH --cpus-per-task=16`."
  },
  {
    "question": "How does the example job script bind a program to a specific NUMA node?",
    "answer": "The example job script uses `numactl --cpunodebind=<node_id> --membind=<node_id> ./test.x &` to bind a program to a specific NUMA node, for instance, `numactl --cpunodebind=0 --membind=0 ./test.x &`."
  },
  {
    "question": "What is the purpose of `export OMP_NUM_THREADS=$SLURM_CPUS_PER_TASK` in the example job script?",
    "answer": "This line sets the OpenMP (OMP) thread count to the number of CPUs allocated per task by Slurm, which is determined by the `--cpus-per-task` directive."
  }
]