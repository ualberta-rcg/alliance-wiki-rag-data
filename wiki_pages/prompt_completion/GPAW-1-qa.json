[
  {
    "question": "What is GPAW?",
    "answer": "GPAW is a density-functional theory (DFT) Python code based on the projector-augmented wave (PAW) method and the atomic simulation environment (ASE)."
  },
  {
    "question": "How can GPAW be installed?",
    "answer": "GPAW can be installed into a virtual Python environment using precompiled Python wheels."
  },
  {
    "question": "What command is used to check available GPAW versions?",
    "answer": "The command `avail_wheels gpaw` is used to check available GPAW versions."
  },
  {
    "question": "How do you load a Python module, for example, `python/3.10`, for GPAW setup?",
    "answer": "You load a Python module using the command `module load python/3.10`."
  },
  {
    "question": "How do you create a new virtual environment for GPAW?",
    "answer": "A new virtual environment can be created using the command `virtualenv --no-download venv_gpaw`."
  },
  {
    "question": "What is the command to activate a GPAW virtual environment named `venv_gpaw`?",
    "answer": "To activate the virtual environment, use the command `source venv_gpaw/bin/activate`."
  },
  {
    "question": "How do you install GPAW into an activated virtual environment?",
    "answer": "Once the virtual environment is activated, GPAW can be installed using `pip install --no-index gpaw`."
  },
  {
    "question": "How do you download and install GPAW data?",
    "answer": "GPAW data can be downloaded and installed into the SCRATCH filesystem using `gpaw install-data $SCRATCH`."
  },
  {
    "question": "Where are GPAW setups typically installed by the `gpaw install-data` command?",
    "answer": "Setups are typically installed into a directory within the SCRATCH filesystem, for example, `/scratch/name/gpaw-setups-0.9.20000`."
  },
  {
    "question": "How do you set the `GPAW_SETUP_PATH` environment variable after installing GPAW data?",
    "answer": "You set the `GPAW_SETUP_PATH` environment variable using `export GPAW_SETUP_PATH=$SCRATCH/gpaw-setups-0.9.20000`."
  },
  {
    "question": "What command is used to run tests for a GPAW installation?",
    "answer": "The command `gpaw test` is used to run tests for a GPAW installation."
  },
  {
    "question": "How can you run a parallel GPAW test with 4 cores?",
    "answer": "A parallel GPAW test with 4 cores can be run using the command `gpaw -P 4 test`."
  },
  {
    "question": "Where are the results of the GPAW tests saved?",
    "answer": "The results of the last test can be found in the file `test.txt` in the current directory."
  },
  {
    "question": "What are the recommended SBATCH parameters for a GPAW jobscript using hybrid parallelization?",
    "answer": "Recommended SBATCH parameters include `--ntasks=8`, `--cpus-per-task=4`, `--mem-per-cpu=4000M`, and `--time=0-01:00`."
  },
  {
    "question": "Which modules should be loaded in a GPAW jobscript for hybrid parallelization?",
    "answer": "The `gcc/9.3.0` and `openmpi/4.0.3` modules should be loaded."
  },
  {
    "question": "Why are specific `gcc` and `openmpi` modules loaded in a GPAW jobscript?",
    "answer": "Loading these specific modules ensures that the exact MPI library used for building the GPAW wheels is also used for the job."
  },
  {
    "question": "How is the `OMP_NUM_THREADS` environment variable set in the example GPAW jobscript?",
    "answer": "`OMP_NUM_THREADS` is set to the value of `${SLURM_CPUS_PER_TASK}` if available, or `1` otherwise, using `export OMP_NUM_THREADS=\"${SLURM_CPUS_PER_TASK:-1}\"`."
  },
  {
    "question": "How is `GPAW_SETUP_PATH` specified in the example jobscript?",
    "answer": "`GPAW_SETUP_PATH` is specified as `/scratch/$USER/gpaw-setups-0.9.20000`."
  },
  {
    "question": "What command is used to execute a GPAW Python script named `my_gpaw_script.py` within the example jobscript?",
    "answer": "The script is executed using `srun --cpus-per-task=$OMP_NUM_THREADS gpaw python my_gpaw_script.py`."
  },
  {
    "question": "If a jobscript uses `--ntasks=8` and `--cpus-per-task=4`, what is the total number of CPUs utilized?",
    "answer": "This configuration would utilize a total of 32 CPUs (8 MPI-ranks * 4 OpenMP threads per MPI rank)."
  },
  {
    "question": "How should the `ntasks` and `cpus-per-task` parameters be adjusted for different computing nodes?",
    "answer": "These numbers should be adjusted so that their product matches the total number of cores of a whole node (e.g., 32 at Graham, 40 at B\u00e9luga and Niagara, 48 at Cedar, or 64 at Narval)."
  }
]