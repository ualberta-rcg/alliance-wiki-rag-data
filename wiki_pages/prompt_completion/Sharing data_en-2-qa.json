[
  {
    "question": "What permissions are required on a directory to access files within it?",
    "answer": "To access files within a directory, you need both read and execute permission on that directory. This corresponds to '5' or '7' in octal notation."
  },
  {
    "question": "Which command is used to change file or directory permissions?",
    "answer": "The `chmod` command is used to alter file or directory permissions."
  },
  {
    "question": "How can you grant read, write, and execute permissions to everyone in your group for a file?",
    "answer": "You can use the command `chmod 770 name_of_file` to grant read, write, and execute permissions to everyone in your group for that file."
  },
  {
    "question": "Can I change permissions on any file or directory?",
    "answer": "No, you can only modify the permissions of a file or directory that you own."
  },
  {
    "question": "Which command is used to change the group ownership of a file or directory?",
    "answer": "The `chgrp` command is used to alter the group ownership of a file or directory."
  },
  {
    "question": "What is the purpose of the sticky bit in a Unix filesystem?",
    "answer": "The sticky bit is used to restrict filesystem permissions for a directory so that a file within it can only be renamed or deleted by its owner or the directory's owner, even if other users have write and execute permissions for that directory."
  },
  {
    "question": "How do you set the sticky bit on a directory using symbolic notation?",
    "answer": "You can set the sticky bit using the command `chmod +t <directory name>`."
  },
  {
    "question": "How do you set the sticky bit on a directory using octal notation, along with rwxrwxr-- permissions?",
    "answer": "You can set the sticky bit and `rwxrwxr--` permissions using the command `chmod 1774 <directory name>`."
  },
  {
    "question": "How is the sticky bit represented in the output of `ls -l`?",
    "answer": "The sticky bit is represented by the letter 't' or 'T' in the last place of the permissions field in `ls -l` output."
  },
  {
    "question": "How do you unset the sticky bit on a directory?",
    "answer": "You can unset the sticky bit using the command `chmod -t <directory name>` or `chmod 0774 <directory name>` via octal notation."
  },
  {
    "question": "What is the primary function of the Set Group ID (setGID) bit on a directory?",
    "answer": "The setGID bit ensures that new files and directories created within a parent directory will automatically inherit the same group ownership as the parent directory."
  },
  {
    "question": "Why is the setGID bit important for project filesystems like Graham and Cedar?",
    "answer": "It's key for project filesystems because storage quotas in these spaces are enforced by group, ensuring newly created files contribute to the correct group's quota."
  },
  {
    "question": "How do you enable the setGID permission on a directory using symbolic notation?",
    "answer": "You can enable the setGID permission on a directory using the command `chmod g+s <directory name>`."
  },
  {
    "question": "How does the `ls -l` output change when the setGID bit is enabled on a directory?",
    "answer": "When the setGID bit is enabled, the 'x' permission for the group in the `ls -l` output changes to an 's'."
  },
  {
    "question": "What happens when you create a new directory inside a directory with the setGID bit enabled?",
    "answer": "If you create a new directory inside a directory with the setGID bit enabled, the new directory will inherit the same group as the parent folder and will also have its own setGID bit enabled."
  },
  {
    "question": "What does an uppercase 'S' in the group permissions field for a directory indicate when the setGID bit is set?",
    "answer": "An uppercase 'S' indicates that the execute permissions have been removed from the directory, but the setGID bit is still in place. This can lead to unexpected problems, such as group members not being able to access files within that directory."
  }
]