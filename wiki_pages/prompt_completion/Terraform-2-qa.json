[
  {
    "question": "What is the purpose of defining a 'provider' in Terraform?",
    "answer": "Defining a provider tells Terraform which infrastructure to manage (e.g., OpenStack) and how. During initialization, the necessary provider plugin will be installed, and subsequent Terraform operations will use the included credentials to connect to the specified cloud."
  },
  {
    "question": "How can connection and credential information for OpenStack be provided to Terraform?",
    "answer": "Connection and credential information can be provided in the Terraform specification itself, via environment variables, or partially in the specification with the rest supplied through environment variables."
  },
  {
    "question": "Can you provide an example of a full OpenStack provider specification in Terraform?",
    "answer": "```terraform\nterraform {\n  required_providers {\n    openstack = {\n      source  = \"terraform-provider-openstack/openstack\"\n    }\n  }\n}\n\nprovider \"openstack\" {\n  tenant_name = \"some_tenant\"\n  tenant_id   = \"1a2b3c45678901234d567890fa1b2cd3\"\n  auth_url     = \"https://cloud.example.org:5000/v3\"\n  user_name   = \"joe\"\n  password     = \"sharethiswithyourfriends!\"\n  user_domain_name = \"CentralID\"\n}\n```"
  },
  {
    "question": "Does Terraform support using partial credentials for OpenStack?",
    "answer": "Yes, Terraform supports partial credentials, allowing some values (like the password) to be omitted from the configuration and instead provided through environment variables, such as `$OS_PASSWORD`."
  },
  {
    "question": "How can `clouds.yaml` be used to provide OpenStack credentials to Terraform?",
    "answer": "If you prefer to use `clouds.yaml`, you can specify the `cloud` attribute within the `provider \"openstack\"` stanza, for example: `cloud = \"my_cloud\"`."
  },
  {
    "question": "What happens if the OpenStack provider definition is left completely empty in Terraform?",
    "answer": "If the provider definition is completely empty, either the `$OS_CLOUD` environment variable or variables set by an appropriate RC file would need to be present in the executing environment for Terraform to proceed."
  },
  {
    "question": "What is an important security consideration when configuring OpenStack credentials in Terraform?",
    "answer": "It is strongly recommended to avoid storing sensitive credentials like passwords directly in Terraform configuration files, even on a personal workstation, to prevent security risks and accidental exposure."
  },
  {
    "question": "What command is used to initialize Terraform and install provider plugins?",
    "answer": "The command `terraform init` is used to initialize Terraform, which includes initializing the backend and downloading necessary provider plugins like the OpenStack provider."
  },
  {
    "question": "Does the `terraform init` command test OpenStack credentials?",
    "answer": "No, `terraform init` does not test OpenStack credentials because this operation only sets up the provider plugin and doesn't attempt to connect to the defined provider."
  },
  {
    "question": "Why is it important to use image and flavor IDs rather than names when defining a VM in Terraform for OpenStack?",
    "answer": "It is good practice to always specify image and flavor IDs because the ID defines the actual state of the resource and will never change. Names, however, can change, and a name change (or reuse for a different resource) could cause Terraform to detect a change and attempt to rebuild or resize the associated resource, which is a destructive operation."
  },
  {
    "question": "Can you provide an example of how to define a minimal OpenStack VM in Terraform?",
    "answer": "```terraform\nresource \"openstack_compute_instance_v2\" \"myvm\" {\n  name = \"myvm\"\n  image_id = \"80ceebef-f9aa-462e-a793-d3c1cf96123b\"\n  flavor_id = \"0351ddb0-00d0-4269-80d3-913029d1a111\"\n  key_pair = \"Aluminum\"\n  security_groups = [\"default\"]\n}\n```"
  },
  {
    "question": "What are the essential attributes for defining a minimal OpenStack VM in Terraform?",
    "answer": "A minimal OpenStack VM definition in Terraform typically requires `name`, `image_id`, `flavor_id`, `key_pair`, and `security_groups`."
  },
  {
    "question": "How can you find the `image_id` and `flavor_id` for use in a Terraform configuration?",
    "answer": "You can find these IDs by using the OpenStack CLI with commands like `flavor list` or `image list`. Alternatively, you can use the Horizon web interface, though finding flavor IDs directly is more complex."
  },
  {
    "question": "What is the purpose of the `terraform plan` command?",
    "answer": "The `terraform plan` command compiles the Terraform definition and determines how to reconcile the desired state with the actual state on the cloud. It then produces a detailed plan of what actions Terraform would take if the changes were applied, without actually making any modifications."
  },
  {
    "question": "What does `(known after apply)` mean in the output of `terraform plan`?",
    "answer": "In the output of `terraform plan`, `(known after apply)` indicates that these specific values (e.g., IP addresses, IDs) will only be determined and available after the resources have been successfully created or modified on the cloud."
  },
  {
    "question": "What is a critical piece of information to check in the `terraform plan` output?",
    "answer": "It is critical to carefully review the summary line of the plan, which states 'Plan: X to add, Y to change, Z to destroy,' to ensure that Terraform's intended actions align with your expectations and to avoid any unintended destructive operations."
  },
  {
    "question": "What could cause an 'incomplete credentials' error during `terraform plan`?",
    "answer": "An 'incomplete credentials' error during `terraform plan` might occur if the `OS_CLOUD` environment variable was not defined, the appropriate RC file was not sourced, or the `clouds.yaml` file is missing or improperly configured."
  },
  {
    "question": "Does Terraform manage OpenStack resources that existed before being defined in its configuration?",
    "answer": "No, Terraform does not automatically manage existing OpenStack resources that were not defined in its configuration. It operates only on resources defined in its configuration and tracked in its state file, making existing, unmanaged resources invisible to it."
  },
  {
    "question": "Is it possible to import existing OpenStack resources into Terraform management?",
    "answer": "Yes, it is possible to import previously defined OpenStack resources into Terraform management, although the document notes that it is 'not a trivial amount of work' and is outside the scope of the tutorial."
  }
]