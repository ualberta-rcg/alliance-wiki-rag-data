[
  {
    "question": "How do I configure the LibTorch environment for StdEnv/2023?",
    "answer": "First, load the necessary modules: `StdEnv/2023 gcc cuda/12.2 cmake protobuf cudnn python/3.11 abseil cusparselt opencv/4.8.1`. Then, create and activate a virtual environment using `virtualenv --no-download --clear ~/ENV && source ~/ENV/bin/activate`, and finally install `torch` and `numpy` with `pip install --no-index torch numpy`."
  },
  {
    "question": "How can I check which module versions (like abseil, cusparselt, opencv) were used to compile the PyTorch wheel?",
    "answer": "You can determine the module versions by running the command: `ldd $VIRTUAL_ENV/lib/python3.11/site-packages/torch/lib/libtorch_cuda.so | sed -n 's&^.*/\\(\\(opencv\\|abseil\\|cusparselt\\)/[^/]*\\).*&\\1&p' | sort -u`."
  },
  {
    "question": "What are the setup steps for LibTorch using StdEnv/2020?",
    "answer": "You should load the `gcc cuda/11.4 cmake protobuf cudnn python/3.10` modules. Then, create and activate a virtual environment with `virtualenv --no-download --clear ~/ENV && source ~/ENV/bin/activate`, and install `torch` and `numpy` using `pip install --no-index torch numpy`."
  },
  {
    "question": "Can you provide a minimal C++ example for LibTorch?",
    "answer": "A minimal `example.cpp` would include `<torch/torch.h>` and `<iostream>`, and in `main()`, it would check `torch::cuda::is_available()`, set the device, create a tensor like `torch::rand({2, 3}).to(device)`, and print it."
  },
  {
    "question": "What should the `CMakeLists.txt` file contain for a simple LibTorch project?",
    "answer": "The `CMakeLists.txt` file should define the minimum CMake version, project name (`project(example)`), find the Torch package (`find_package(Torch REQUIRED)`), add an executable (`add_executable(example example.cpp)`), link Torch libraries (`target_link_libraries(example \"${TORCH_LIBRARIES}\")`), and set the C++ standard (`set_property(TARGET example PROPERTY CXX_STANDARD 14)`)."
  },
  {
    "question": "How do I compile a LibTorch example with CMake using StdEnv/2023?",
    "answer": "After activating your Python virtual environment, configure the project with `cmake -B build -S . -DCMAKE_PREFIX_PATH=$VIRTUAL_ENV/lib/python3.11/site-packages -DCMAKE_EXE_LINKER_FLAGS=-Wl,-rpath=$VIRTUAL_ENV/lib/python3.11/site-packages/torch/lib,-L$EBROOTCUDA/extras/CUPTI/lib64 -DCMAKE_SKIP_RPATH=ON -DTORCH_CUDA_ARCH_LIST=\"6.0;7.0;7.5;8.0;9.0\"`, then build with `cmake --build build`."
  },
  {
    "question": "What are the CMake commands for compiling a LibTorch application in a StdEnv/2020 environment?",
    "answer": "First, activate the Python virtual environment. Then, use `cmake -B build -S . -DCMAKE_PREFIX_PATH=$VIRTUAL_ENV/lib/python3.10/site-packages -DCMAKE_EXE_LINKER_FLAGS=-Wl,-rpath=$VIRTUAL_ENV/lib/python3.10/site-packages/torch/lib -DCMAKE_SKIP_RPATH=ON` to configure, and `cmake --build build` to compile the program."
  },
  {
    "question": "How can I run the compiled LibTorch example program?",
    "answer": "You can run the compiled program by executing `build/example`."
  },
  {
    "question": "What is required to test a LibTorch application that uses CUDA?",
    "answer": "To test a CUDA application, you need to request an interactive job with a GPU."
  },
  {
    "question": "Where can I find more documentation about LibTorch?",
    "answer": "Further documentation for LibTorch is available at `https://pytorch.org/cppdocs/`."
  }
]