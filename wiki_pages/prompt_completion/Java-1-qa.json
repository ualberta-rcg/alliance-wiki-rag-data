[
  {
    "question": "What is Java?",
    "answer": "Java is a general-purpose, high-level, object-oriented programming language developed in 1995 by Sun Microsystems (purchased by Oracle in 2010)."
  },
  {
    "question": "Who developed Java and when?",
    "answer": "Java was developed in 1995 by Sun Microsystems, which was later purchased by Oracle in 2010."
  },
  {
    "question": "What was a key design goal for Java?",
    "answer": "A principal design goal for Java was a high degree of portability across platforms."
  },
  {
    "question": "What is the slogan that summarizes Java's portability?",
    "answer": "The slogan summarizing Java's portability is 'write once, run anywhere'."
  },
  {
    "question": "How does Java achieve portability across different platforms?",
    "answer": "Java achieves portability by having its source code compiled to 'bytecode' which then runs inside a Java virtual machine (JVM), ensuring a uniform environment."
  },
  {
    "question": "Why has Java gained popularity in scientific domains like life sciences?",
    "answer": "While performance was not an original design goal, Java has enjoyed popularity in some scientific domains like the life sciences due to ways to help Java code run quickly, with software like GATK as an example."
  },
  {
    "question": "How are Java virtual machines made available to users on Alliance systems?",
    "answer": "Java virtual machines are made available to users on Alliance systems via the `module` command, similar to other software packages."
  },
  {
    "question": "What is the `java` command used for?",
    "answer": "The `java` command is used to launch the Java virtual machine."
  },
  {
    "question": "What is the `javac` command used for?",
    "answer": "The `javac` command is used to call the Java compiler for converting a Java source file into byte code."
  },
  {
    "question": "How is Java software typically distributed?",
    "answer": "Java software is frequently distributed in the form of a JAR file with the extension `.jar`."
  },
  {
    "question": "How can you run a JAR file as an autonomous program?",
    "answer": "You can run a JAR file using the command `java -jar file.jar`, assuming the JAR file has been compiled to operate as an autonomous program (i.e., it possesses a `Main-class` manifest header)."
  },
  {
    "question": "Does Java include built-in support for threading?",
    "answer": "Yes, Java includes built-in support for threading, obviating the need for separate interfaces and libraries like OpenMP or pthreads."
  },
  {
    "question": "What is the primary Java object for handling concurrency?",
    "answer": "The principal Java object for handling concurrency is the `Thread` class."
  },
  {
    "question": "What are two methods for a programmer to use the `Thread` class for concurrency?",
    "answer": "A programmer can use the `Thread` class by either providing a `Runnable` method to the standard `Thread` class or by subclassing the `Thread` class."
  },
  {
    "question": "What is a disadvantage of subclassing the `Thread` class for multithreading?",
    "answer": "The drawback of subclassing the `Thread` class is that Java does not permit multiple inheritance, so the class implementing multithreading is unable to subclass any other potentially more useful class."
  },
  {
    "question": "What library is a common method for using MPI-style parallelism in a Java program?",
    "answer": "MPJ Express is one common method for using MPI-style parallelism in a Java program."
  },
  {
    "question": "Why do schedulers or shells impose memory limits in a shared computing environment?",
    "answer": "In a shared computing environment, these limits ensure that finite resources, such as memory and CPU cores, do not get exhausted by one job at the expense of another."
  },
  {
    "question": "What are the default memory parameters the Java VM sets when it starts?",
    "answer": "When the Java VM starts, it sets an initial heap size of 1/64 of physical memory and a maximum heap size of 1/4 of physical memory."
  },
  {
    "question": "What is the default initial heap size set by the Java VM?",
    "answer": "The default initial heap size set by the Java VM is 1/64 of physical memory."
  },
  {
    "question": "What is the default maximum heap size set by the Java VM?",
    "answer": "The default maximum heap size set by the Java VM is 1/4 of physical memory."
  },
  {
    "question": "What error messages might occur if Java's default memory settings exceed system limits?",
    "answer": "If Java's default maximum heap size exceeds default memory limits, Java might fail with messages such as 'Could not reserve enough space for object heap' or 'There is insufficient memory for the Java Runtime Environment to continue'."
  },
  {
    "question": "How can run-time memory parameters for Java be controlled explicitly on the command line?",
    "answer": "Run-time memory parameters for Java can be explicitly controlled on the command line using syntax like `java -Xms256m -Xmx4g -version` or `java -XX:InitialHeapSize=256m -XX:MaxHeapSize=4g -version`."
  },
  {
    "question": "What command line flags can be used to set the initial and maximum heap sizes for a Java application?",
    "answer": "The command line flags `-Xms` (initial heap size) and `-Xmx` (maximum heap size), or alternatively `-XX:InitialHeapSize` and `-XX:MaxHeapSize`, can be used to set the heap sizes."
  },
  {
    "question": "How can you view all the command line options the JVM is configured to run with?",
    "answer": "You can see all the command line options the JVM is going to run with by specifying the flag `-XX:+PrintCommandLineFlags`."
  },
  {
    "question": "Provide an example command to show the JVM's command line flags along with specific memory settings.",
    "answer": "An example command is `$ java -Xms256m -Xmx4g -XX:+PrintCommandLineFlags -version`."
  }
]