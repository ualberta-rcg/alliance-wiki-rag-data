[
  {
    "question": "What Abaqus and environment modules should be loaded for Abaqus 2021?",
    "answer": "Users should load `StdEnv/2020` and `abaqus/2021`. Older versions like `StdEnv/2016` and `abaqus/2020` can also be used by uncommenting the relevant lines."
  },
  {
    "question": "Which environment variables are unset or exported in the Abaqus Slurm scripts?",
    "answer": "The `SLURM_GTIDS` environment variable is unset, and `MPI_IC_ORDER` is exported as 'tcp'."
  },
  {
    "question": "How is the Abaqus license file path typically displayed or confirmed within the Slurm scripts?",
    "answer": "The license file paths are displayed using `echo \"LM_LICENSE_FILE=$LM_LICENSE_FILE\"` and `echo \"ABAQUSLM_LICENSE_FILE=$ABAQUSLM_LICENSE_FILE\"`."
  },
  {
    "question": "What are the default resource requests in the single-node Abaqus project directory script for standard analysis?",
    "answer": "The script defaults to `--account=def-group`, `--time=00-06:00` (6 hours), `--cpus-per-task=4`, `--mem=8G`, and `--nodes=1`."
  },
  {
    "question": "How can you specify a GPU for an Abaqus job in a single-node project directory script?",
    "answer": "You can uncomment lines like `--constraint=cascade` (for cpu/gpu jobs) or `--constraint=rome` (for gpu only jobs) along with `--gres=gpu:t4:1` or `--gres=gpu:a100:1` in the SBATCH directives. Additionally, uncomment `gpus=$SLURM_GPUS_ON_NODE` in the Abaqus command line."
  },
  {
    "question": "How is the 'memory' argument for the Abaqus command calculated in the single-node project directory script?",
    "answer": "The 'memory' argument is calculated as `\"$((${SLURM_MEM_PER_NODE}-3072))MB\"`, which subtracts 3072MB from the total memory per node requested via Slurm."
  },
  {
    "question": "How do you specify in the Abaqus input file to write restart data every N=12 time increments?",
    "answer": "You specify `*RESTART, WRITE, OVERLAY, FREQUENCY=12` in the input file."
  },
  {
    "question": "How do you specify in the Abaqus input file to write restart data for a total of 12 time increments?",
    "answer": "You specify `*RESTART, WRITE, OVERLAY, NUMBER INTERVAL=12, TIME MARKS=NO` in the input file."
  },
  {
    "question": "How can you check for completed restart information in Abaqus output files?",
    "answer": "You can use the command `egrep -i \"step|start\" testsp*.com testsp*.msg testsp*.sta`."
  },
  {
    "question": "What optional argument might benefit some Abaqus simulations when added to the command?",
    "answer": "Adding `order_parallel=OFF` to the Abaqus command can benefit some simulations."
  },
  {
    "question": "How do you restart a standard Abaqus analysis from a previous job using a project directory restart script?",
    "answer": "The Abaqus command in the script uses `oldjob=testsp1` and `job=testsp2` (assuming `testsp1` was the previous job). The restart input file `mystd-sim-restart.inp` should contain `*HEADING` and `*RESTART, READ`."
  },
  {
    "question": "What should the restart input file for a project directory restart script contain?",
    "answer": "The restart input file should contain `*HEADING` and `*RESTART, READ`."
  },
  {
    "question": "When should temporary directory scripts be used for single-node Abaqus jobs?",
    "answer": "Temporary directory scripts should be used for single-node jobs that run for more than a day or create large restart files, benefiting from writing to local disk via `SLURM_TMPDIR`."
  },
  {
    "question": "How does the temporary directory script ensure data is saved during a long-running job?",
    "answer": "It uses a `while` loop with `sleep 6h` in the background to periodically copy (`cp -fv * $SLURM_SUBMIT_DIR`) all files from the temporary directory to the submission directory until the main Abaqus job completes or is terminated."
  },
  {
    "question": "What directory is used for Abaqus scratch files when running a job with the temporary directory script?",
    "answer": "A scratch directory is created within `SLURM_TMPDIR` (e.g., `mkdir $SLURM_TMPDIR/scratch`), and the Abaqus command uses `scratch=$SLURM_TMPDIR/scratch`."
  },
  {
    "question": "How does the temporary directory restart script handle existing restart files from a previous job?",
    "answer": "It copies `testst1*` files from the submission directory to `SLURM_TMPDIR` before starting the restart job, and then modifies their names (e.g., `testst2${f#testst1}`)."
  },
  {
    "question": "When should users consider using multiple node computing for Abaqus?",
    "answer": "Users with large memory or compute needs (and large licenses) should use multi-node computing to distribute calculations over an arbitrary range of nodes."
  },
  {
    "question": "Are restart scripts available for multi-node Abaqus jobs?",
    "answer": "No, a companion template script for performing restarts of multi-node jobs is not currently provided due to additional limitations."
  },
  {
    "question": "What Slurm options are crucial for configuring multi-node MPI-based Abaqus jobs?",
    "answer": "Key Slurm options include `--ntasks` (number of cores), `--mem-per-cpu` (memory per core), and `--cpus-per-task=1` (which should not be changed). `--nodes` can optionally be specified."
  },
  {
    "question": "How are host lists determined and configured for MPI-based Abaqus jobs on multiple nodes?",
    "answer": "The script uses `slurm_hl2hl.py` to generate a hostlist, then processes it to create an `mp_host_list` string (e.g., `mp_host_list=[['hostname1',N1],['hostname2',N2]]`), which is exported and also written to `abaqus_v6.env`."
  },
  {
    "question": "What is the Abaqus command structure for submitting a multi-node MPI-based job?",
    "answer": "The command is `abaqus job=testsp1-mpi input=mystd-sim.inp scratch=$SLURM_TMPDIR cpus=$SLURM_NTASKS interactive mp_mode=mpi`. An optional `mp_host_split` parameter can be uncommented to specify the number of DMP processes per node."
  }
]