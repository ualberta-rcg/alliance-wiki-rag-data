[
  {
    "question": "What is FEniCS?",
    "answer": "FEniCS is a popular open-source computing platform for solving partial differential equations (PDEs)."
  },
  {
    "question": "What are the available installation methods for FEniCS?",
    "answer": "FEniCS can be installed either in a virtual environment or by using a Singularity container."
  },
  {
    "question": "Why isn't a single, global installation of FEniCS offered?",
    "answer": "FEniCS can be built with various extensions, so a single, global installation is not offered."
  },
  {
    "question": "Which FEniCS version do the virtual environment installation instructions cover?",
    "answer": "These instructions cover FEniCS version 2019.1.0, under StdEnv/2020 with OpenMPI and GCC 9.3.0."
  },
  {
    "question": "How do you run the FEniCS installation script for a virtual environment?",
    "answer": "You can run the script by copying it to the cluster and executing `bash fenics-install.sh`."
  },
  {
    "question": "What warning message might appear during the FEniCS installation?",
    "answer": "The installation will warn that it will create (or replace) the application directory, typically `$HOME/fenics`."
  },
  {
    "question": "Can the FEniCS installation directory be changed?",
    "answer": "Yes, the installation script can be modified to change the installation directory if needed."
  },
  {
    "question": "What is the default FEniCS installation path in the provided script?",
    "answer": "The default FEniCS installation path is `$HOME/fenics`."
  },
  {
    "question": "What Python version is specified in the FEniCS installation script's `PYTHONPATH`?",
    "answer": "The script specifies Python 3.10, adding `$FENICS_INSTALL/lib/python3.10/site-packages` to `PYTHONPATH`."
  },
  {
    "question": "Which modules are loaded by the FEniCS installation script for a virtual environment?",
    "answer": "The script loads StdEnv/2020, gcc/9.3.0, hdf5-mpi/1.10.6, boost/1.72.0, eigen, python/3.10.2, scipy-stack/2023b, mpi4py/3.0.3, petsc/3.17.1, slepc/3.17.2, scotch/6.0.9, fftw-mpi/3.3.8, ipp/2020.1.217, swig, and flexiblas."
  },
  {
    "question": "What are the final steps to use FEniCS/DOLFIN after a successful virtual environment installation?",
    "answer": "To use FEniCS/DOLFIN, you need to `module load $MODULES`, `source $FENICS_INSTALL/bin/activate`, and `source $FENICS_INSTALL/share/dolfin/dolfin.conf`."
  },
  {
    "question": "What does the `make_fenics_directory` function in the installation script do?",
    "answer": "It removes any existing `$FENICS_INSTALL` directory, creates a new one, and then changes the current directory to it."
  },
  {
    "question": "Which FEniCS-related projects are cloned during the `download_py_packages` step?",
    "answer": "The script clones fiat, dijitso, ufc-deprecated (as ufc), ufl, ffc, dolfin, mshr, and pybind11."
  },
  {
    "question": "What initial Python packages are installed by the `make_py_packages` function?",
    "answer": "The `make_py_packages` function installs `ply`, `numpy`, and then installs `fiat`, `dijitso`, `ufl`, and `ffc` using `pip3 install .`."
  },
  {
    "question": "How is pybind11 built and installed in the FEniCS script?",
    "answer": "Pybind11 is built using `cmake` with specific flags (e.g., `-DPYBIND11_TEST=off`, `-DCMAKE_INSTALL_PREFIX=$HOME/fenics`) and then installed with `make -j8 install`."
  },
  {
    "question": "How is DOLFIN built and installed in the FEniCS script?",
    "answer": "DOLFIN is built using `cmake` with flags like `-DDOLFIN_SKIP_BUILD_TESTS=true` and `-DCMAKE_INSTALL_PREFIX=$HOME/fenics`, then installed with `make -j 8 install`, followed by `pip3 install .` in its python directory."
  },
  {
    "question": "What is mentioned about the 'FEniCS add-ons' section regarding StdEnv/2020?",
    "answer": "The 'FEniCS add-ons' section has not been updated to work with StdEnv/2020."
  },
  {
    "question": "What is the prerequisite for installing FEniCS add-ons?",
    "answer": "First install FEniCS following the instructions for installation in a virtual environment."
  },
  {
    "question": "Which modules are loaded for the `mshr` installation script?",
    "answer": "The `mshr` installation loads hdf5-mpi/1.8.18, boost, eigen, python/3.5, scipy-stack/2017b, petsc/3.7.5, and fftw-mpi/3.3.6."
  },
  {
    "question": "Where does the `mshr_install.sh` script install `mshr` by default?",
    "answer": "The `mshr` installation script installs `mshr` to `$HOME/software/mshr`."
  },
  {
    "question": "What steps are required to run FEniCS with `mshr` using the `fenics_mshr_run.sh` script?",
    "answer": "You need to load specific modules, source `~/software/dolfin/share/dolfin/dolfin.conf`, source `~/fenics/bin/activate`, and export `PYTHONPATH` and `LD_LIBRARY_PATH` to include `mshr`'s paths."
  },
  {
    "question": "What are the requirements for running the Singularity recipe to build a FEniCS image?",
    "answer": "The recipe must be run on your own Linux machine with Singularity installed, where you have root access."
  },
  {
    "question": "How do you build a FEniCS image using the Singularity recipe?",
    "answer": "Run the command `sudo singularity build FEniCS.simg FEniCS-ComputeCanada-Singularity-Recipe`."
  },
  {
    "question": "Where does the FEniCS Docker image place files within the container after building?",
    "answer": "The FEniCS Docker image places a number of files in `/home/fenics`."
  },
  {
    "question": "What is the base Docker image used for the FEniCS Singularity recipe?",
    "answer": "The base Docker image is `quay.io/fenicsproject/stable:latest`."
  },
  {
    "question": "What is the first command executed in the `%post` section of the FEniCS Singularity recipe?",
    "answer": "The first command executed is `sudo apt-get -qq update`."
  }
]