[
  {
    "question": "What is Terraform?",
    "answer": "Terraform is a tool used to define and provision data center infrastructure, including virtual machines (VMs)."
  },
  {
    "question": "What is the primary benefit of Terraform's infrastructure-as-code model for OpenStack resources?",
    "answer": "It allows OpenStack resources to be maintained as a collection of definitions that can be easily updated with text editors, shared among group members, and stored in a version control system."
  },
  {
    "question": "What does this Terraform tutorial aim to demonstrate?",
    "answer": "This tutorial presents Terraform, demonstrates its use on OpenStack clouds, shows how to configure a local workspace, and how to create a virtual machine (VM) with a floating IP and an attached volume."
  },
  {
    "question": "What are the prerequisites for starting with Terraform?",
    "answer": "Before starting with Terraform, you need access to an OpenStack project with available resources, the `terraform` binary installed, and some configurations performed on your workstation or laptop."
  },
  {
    "question": "Where can users find information on how to get an OpenStack project?",
    "answer": "To access the cloud, users should refer to the 'Obtenir un projet dans l'environnement infonuagique' section on the Cloud/fr page."
  },
  {
    "question": "What should new OpenStack users do before using Terraform?",
    "answer": "New users should first familiarize themselves with OpenStack by creating a virtual machine, attaching a volume, associating a floating IP, and ensuring they can connect to the VM."
  },
  {
    "question": "What does this Terraform tutorial assume regarding SSH keys?",
    "answer": "The tutorial assumes that you have already created an SSH key pair and imported the public key into OpenStack."
  },
  {
    "question": "Where can one find a good introduction to OpenStack basics if unfamiliar?",
    "answer": "The 'Cloud Quick Start/fr' guide is a good introduction for those unfamiliar with OpenStack basics."
  },
  {
    "question": "Why is it recommended to create resources using OpenStack's web interface before using Terraform?",
    "answer": "Creating resources using OpenStack's web interface first helps in understanding how the system works and the utility of Terraform."
  },
  {
    "question": "How do you install the Terraform binary?",
    "answer": "To install the Terraform binary, consult the Terraform download page (https://www.terraform.io/downloads.html) for the latest version. This tutorial uses Terraform 0.12."
  },
  {
    "question": "What are the two ways to provide OpenStack credentials in a command-line environment for Terraform?",
    "answer": "OpenStack credentials can be provided via environment variables or in a configuration file."
  },
  {
    "question": "How can you download OpenStack credentials from the Horizon dashboard?",
    "answer": "After logging in, click 'API Access' in the navigation bar, then use the 'Download OpenStack RC File' dropdown to download a `clouds.yaml` file or an RC file."
  },
  {
    "question": "What does an OpenStack RC file contain and how is it used?",
    "answer": "An RC file contains a list of shell commands used to export environment variables into your active session. It is used by sourcing it, for example, `$ source openrc.sh`, and then entering your OpenStack password."
  },
  {
    "question": "What is the alternative method for providing OpenStack credentials besides an RC file?",
    "answer": "Another method is to create a configuration in `$HOME/.config/openstack/clouds.yaml`."
  },
  {
    "question": "How do you specify which OpenStack cloud to use with CLI tools when using a `clouds.yaml` file?",
    "answer": "You create an environment variable `$OS_CLOUD` and set its value to the meaningful name you assigned to the cloud in your `clouds.yaml` file, for example, `$ export OS_CLOUD=arbutus`."
  }
]