[
  {
    "question": "What does the error message 'No matching distribution found for X' mean when using pip?",
    "answer": "This error means that pip could not find a package to install that satisfies the specified requirements (name, version, or tags)."
  },
  {
    "question": "How can one verify if a package is available when encountering a 'No matching distribution found' error?",
    "answer": "You can verify the package's availability using the `avail_wheels` command or by searching on the 'Available Python wheels' page."
  },
  {
    "question": "Which specific type of Python wheels are discarded by pip?",
    "answer": "`manylinux_x_y` wheels are discarded by pip."
  },
  {
    "question": "What is the recommended approach for installing multiple Python packages with pip?",
    "answer": "When installing multiple packages, it is best to install them in one command, such as `pip install package1 package2 package3 package4`, as this helps pip resolve dependencies issues."
  },
  {
    "question": "Why might a Python virtual environment stop working or become non-reproducible?",
    "answer": "A virtual environment might become non-reproducible due to package updates, or it might become nonfunctional if created in `$SCRATCH` and partially deleted by the automatic filesystem purge."
  },
  {
    "question": "How can a non-reproducible virtual environment be remedied or made stable?",
    "answer": "To remedy this, freeze specific packages and their versions during installation, then create a requirements file to install these exact versions in your job."
  },
  {
    "question": "What command format is used to freeze specific package versions when installing?",
    "answer": "You can freeze specific packages and their versions with commands like `pip install --no-index 'package1==X.Y' 'package2==X.Y.Z' 'package3<X.Y' 'package4>X.Y'` after upgrading pip."
  },
  {
    "question": "What does the error 'X is not a supported wheel on this platform' indicate?",
    "answer": "This error indicates that some packages may be incompatible or not supported on the systems."
  },
  {
    "question": "What are common reasons for the 'X is not a supported wheel on this platform' error?",
    "answer": "Two common cases are trying to install a `manylinux` package or a Python package built for a different Python version (e.g., installing a package built for Python 3.11 when Python 3.9 is active)."
  },
  {
    "question": "Can `manylinux` packages be used even if they initially report 'not a supported wheel'?",
    "answer": "Some `manylinux` packages can be made available through the wheelhouse."
  },
  {
    "question": "What is a common cause of `AttributeError: module \u2018numpy\u2019 has no attribute \u2018X\u2019` errors?",
    "answer": "This error often occurs when installing `numpy` without specifying a version number, leading to the installation of the latest version where attributes deprecated in v1.20 have expired in v1.24."
  },
  {
    "question": "How can an `AttributeError` related to NumPy's deprecated attributes, like `AttributeError: module \u2018numpy\u2019 has no attribute \u2018bool\u2019`, be resolved?",
    "answer": "This can be solved by installing a previous version of Numpy, such as `pip install --no-index 'numpy<1.24'`."
  },
  {
    "question": "What are common causes for a `ModuleNotFoundError: No module named 'X'`?",
    "answer": "Common causes include the package not being installed or visible to the interpreter, the module name differing from the package name, or a broken virtual environment."
  },
  {
    "question": "What actions should be avoided to prevent `ModuleNotFoundError`?",
    "answer": "To avoid `ModuleNotFoundError`, do not modify the `PYTHONPATH` or `PATH` environment variables, and do not load a module while a virtual environment is activated."
  },
  {
    "question": "What troubleshooting steps should be taken when encountering a `ModuleNotFoundError`?",
    "answer": "First, ensure recommended practices are followed. Then, run `pip list` to confirm the package is installed, double-check the module name for case and underscores, and verify the module is imported at the correct level."
  },
  {
    "question": "What is the final recommendation if `ModuleNotFoundError` persists after troubleshooting?",
    "answer": "If `ModuleNotFoundError` persists, it is recommended to start over with a new virtual environment."
  },
  {
    "question": "What causes the `ImportError: numpy.core.multiarray failed to import` error?",
    "answer": "This error is caused by an incompatible version of Numpy being installed or used."
  },
  {
    "question": "How can an `ImportError: numpy.core.multiarray failed to import` be resolved, especially in the context of Numpy 2.0?",
    "answer": "You must install a compatible version of Numpy; specifically, if a wheel was built with version 1.x but version 2.x is installed (which breaks the ABI), you must install a lower version with `pip install --no-index 'numpy<2.0'`."
  }
]