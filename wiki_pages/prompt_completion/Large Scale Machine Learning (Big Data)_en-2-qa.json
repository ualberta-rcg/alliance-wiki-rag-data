[
  {
    "question": "How can you fit a linear SVM classifier using batches of data from numpy arrays in scikit-learn?",
    "answer": "You can use `SGDClassifier` with the `partial_fit` method, iterating through large memory-mapped numpy arrays and loading small batches into memory at a time."
  },
  {
    "question": "How are numpy arrays typically stored for out-of-core learning in the provided example?",
    "answer": "The numpy arrays are stored on disk as .npy files and are kept there by memory-mapping these files using `np.memmap`."
  },
  {
    "question": "What is the purpose of the `partial_fit` method in `SGDClassifier` when performing out-of-core learning?",
    "answer": "Each call to `partial_fit` runs one epoch of stochastic gradient descent over a batch of data, allowing for incremental training without loading the entire dataset into memory."
  },
  {
    "question": "What does the `batch_loader` function in the `svm-sgd-npy.py` example do?",
    "answer": "The `batch_loader` function returns a generator that yields batches of features (X) and targets (y) from the input arrays, allowing iteration over the data in specified `batch_size` chunks."
  },
  {
    "question": "How do you train a LASSO regression model by reading data in batches from a CSV file?",
    "answer": "You can use `sklearn.linear_model.SGDRegressor` and read data in batches from a CSV file using the `pandas` package's `read_csv` function with the `chunksize` and `iterator` parameters, then call `model.partial_fit` for each batch."
  },
  {
    "question": "What is Snap ML?",
    "answer": "Snap ML is a closed-source machine learning library developed by IBM that supports classical machine learning models, scales to large datasets, offers distributed training, GPU acceleration, and supports sparse data structures."
  },
  {
    "question": "What are some key features of Snap ML?",
    "answer": "Snap ML offers distributed training, GPU acceleration, supports sparse data structures, and scales gracefully to datasets with billions of examples and/or features."
  },
  {
    "question": "How does Snap ML's API compare to scikit-learn?",
    "answer": "Snap ML features an API very similar to scikit-learn and can be used as a replacement for that library when dealing with massive datasets."
  },
  {
    "question": "How can you check the latest available version of Snap ML wheels?",
    "answer": "You can see the latest version of Snap ML that has been built by running the command `avail_wheels \"snapml\"`."
  },
  {
    "question": "What is the preferred way to install Snap ML?",
    "answer": "The preferred option is to install it using the Python wheel."
  },
  {
    "question": "What are the steps to install Snap ML using a Python wheel in a virtual environment?",
    "answer": "First, load a Python module using `module load python`, then create and start a virtual environment, and finally install Snap ML in the virtual environment with `pip install --no-index snapml`."
  },
  {
    "question": "Do Snap ML estimators support thread parallelism?",
    "answer": "Yes, all estimators in Snap ML support thread parallelism."
  },
  {
    "question": "How can thread parallelism be controlled in Snap ML estimators?",
    "answer": "Thread parallelism can be controlled via the `n_jobs` parameter in Snap ML estimators."
  },
  {
    "question": "What is the benefit of setting the `n_jobs` parameter to the number of available cores in Snap ML?",
    "answer": "Setting the `n_jobs` parameter to the number of cores available in your job will typically deliver a good speedup relative to the scikit-learn implementation of the same estimator."
  }
]