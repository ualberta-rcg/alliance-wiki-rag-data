[
  {
    "question": "What is the purpose of creating a `gurobi.env` file for each submitted Gurobi Python task?",
    "answer": "Creating a `gurobi.env` file ensures Gurobi uses the number of execution threads allocated by the scheduler, preventing it from defaulting to the total physical cores of the node, which could slow down tasks and impact other users."
  },
  {
    "question": "How can you specify the number of threads for a Gurobi Python task in a Slurm script using a `gurobi.env` file?",
    "answer": "You can set the number of threads by including the line `echo \"Threads ${SLURM_CPUS_ON_NODE:-1}\" > gurobi.env` in your Slurm script, which writes the allocated CPU count to the `gurobi.env` file."
  },
  {
    "question": "Which Gurobi and StdEnv versions are loaded in the `script-facility.sh` example?",
    "answer": "The `script-facility.sh` example loads `StdEnv/2023` and `gurobi/11.0.1`."
  },
  {
    "question": "Why is a Python virtual environment recommended for Gurobi?",
    "answer": "A Python virtual environment is recommended because Gurobi's own Python distribution does not include other third-party packages like NumPy, Matplotlib, or Pandas, which users may need to use with Gurobi."
  },
  {
    "question": "How can you check the Python versions supported by a specific Gurobi version with a given `StdEnv`?",
    "answer": "You can load the desired `StdEnv` and Gurobi modules, then navigate to `$EBROOTGUROBI/lib` and list the directories starting with `python*` (e.g., `ls -d python*`)."
  },
  {
    "question": "What Python versions are supported by Gurobi 8.1.1 when `StdEnv/2016` is loaded?",
    "answer": "Gurobi 8.1.1 with `StdEnv/2016` supports `python2.7`, `python2.7_utf16`, `python2.7_utf32`, `python3.5_utf32`, `python3.6_utf32`, and `python3.7_utf32`."
  },
  {
    "question": "What Python versions are supported by Gurobi 9.5.2 when `StdEnv/2020` is loaded?",
    "answer": "Gurobi 9.5.2 with `StdEnv/2020` supports `python2.7_utf16`, `python2.7_utf32`, `python3.10_utf32`, `python3.7`, `python3.7_utf32`, `python3.8_utf32`, and `python3.9_utf32`."
  },
  {
    "question": "What Python versions are supported by Gurobi 10.0.3 when `StdEnv/2023` is loaded?",
    "answer": "Gurobi 10.0.3 with `StdEnv/2023` supports `python3.10_utf32`, `python3.11_utf32`, `python3.7`, `python3.7_utf32`, `python3.8_utf32`, and `python3.9_utf32`."
  },
  {
    "question": "What Python version is supported by Gurobi 11.0.1 when `StdEnv/2023` is loaded?",
    "answer": "Gurobi 11.0.1 with `StdEnv/2023` supports `python3.11`."
  },
  {
    "question": "Which method for installing Gurobi for Python is now considered obsolete?",
    "answer": "The method using `setup.py` for installing Gurobi for Python is now considered obsolete."
  },
  {
    "question": "For which Gurobi versions can the `setup.py` method still be used for Python installation?",
    "answer": "The `setup.py` method can only be used with Gurobi versions 10 and older."
  },
  {
    "question": "What is the new recommended approach for installing Gurobi for Python for versions 11.0.0 and newer?",
    "answer": "The new recommended approach involves downloading a compatible binary wheel from pypi.org and converting it into a usable format."
  },
  {
    "question": "What are the initial steps to create and activate a virtual environment for Gurobi 10.0.3 (or older) on systems with `StdEnv2023` (or older)?",
    "answer": "First, load the `gurobi/10.0.3` and `python` modules, then create the virtual environment with `virtualenv --no-download ~/env_gurobi`, and finally activate it using `source ~/env_gurobi/bin/activate`."
  },
  {
    "question": "How do you install Python packages like `pandas` into a Gurobi virtual environment?",
    "answer": "After activating the virtual environment, you can install packages using `pip install --no-index pandas`."
  },
  {
    "question": "What issue arises if you try to install `gurobipy` directly into `$EBROOTGUROBI` using `python setup.py install` on `StdEnv/2023` for Gurobi 10.0.3 and older?",
    "answer": "It results in a fatal error and the message `error: could not create 'gurobipy.egg-info': Read-only file system`."
  },
  {
    "question": "What is the recommended workaround for installing `gurobipy` for Gurobi versions 10.0.3 and older on `StdEnv/2023` to avoid read-only file system errors?",
    "answer": "You should create a temporary directory (e.g., `mkdir /tmp/$USER`), copy `$EBROOTGUROBI/{lib,setup.py}` into it, navigate to that directory, and then run `python setup.py install`."
  },
  {
    "question": "How do you deactivate a Python virtual environment?",
    "answer": "You can deactivate a Python virtual environment by running the `deactivate` command."
  }
]