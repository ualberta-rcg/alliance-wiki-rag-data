[
  {
    "question": "How do you compile and run a basic C 'Hello, world!' program?",
    "answer": "To compile a C 'Hello, world!' program (e.g., `hello.c`), you can use `cc -Wall hello.c -o hello`. To run it, execute `./hello`."
  },
  {
    "question": "What does a basic 'Hello, world!' program look like in C?",
    "answer": "A basic C 'Hello, world!' program includes `<stdio.h>` and uses `printf(\"Hello, world!\\n\");` inside `main()`."
  },
  {
    "question": "What does a basic 'Hello, world!' program look like in C++?",
    "answer": "A basic C++ 'Hello, world!' program includes `<iostream>`, uses `using namespace std;`, and outputs `\"Hello, world!\"` with `cout << \"Hello, world!\" << endl;` inside `main()`."
  },
  {
    "question": "What does a basic 'Hello, world!' program look like in Fortran?",
    "answer": "A basic Fortran 'Hello, world!' program is defined within `program hello` and `end program hello`, using `print *, 'Hello, world!'`."
  },
  {
    "question": "What does a basic 'Hello, world!' program look like in Python?",
    "answer": "A basic Python 'Hello, world!' program simply contains `print('Hello, world!')`."
  },
  {
    "question": "What is the SPMD model in parallel programming?",
    "answer": "SPMD (Single Program, Multiple Data) is an execution model used by parallel programs written using MPI. It involves running multiple copies of a single program."
  },
  {
    "question": "What is a 'rank' in the context of MPI's SPMD model?",
    "answer": "In MPI, each copy or 'process' running under the SPMD model is assigned a unique number called its 'rank'. Processes can obtain their rank during execution."
  },
  {
    "question": "How do processes behave differently in the SPMD model?",
    "answer": "Processes in the SPMD model typically use 'if' statements based on their unique 'rank' to execute different sets of instructions, allowing for divergent behavior within a single program."
  },
  {
    "question": "What header files or modules are required for an MPI program in C/C++?",
    "answer": "MPI programs in C/C++ must include `mpi.h`."
  },
  {
    "question": "What modules are required for an MPI program in Fortran?",
    "answer": "MPI programs in Fortran should use `use mpi` or, for new Fortran 2008 code, `use mpi_f08`. The `mpif.h` header is strongly discouraged."
  },
  {
    "question": "What are MPI compiler wrappers?",
    "answer": "MPI compiler wrappers are handy scripts provided by most MPI implementations that handle all set-up issues like `include` and `lib` directories and linking flags when compiling MPI programs."
  },
  {
    "question": "What are the common compiler wrappers for C, Fortran, and C++ MPI programs?",
    "answer": "The common compiler wrappers are `mpicc` for C, `mpifort` (recommended) or `mpif90` for Fortran, and `mpiCC` or `mpicxx` for C++."
  },
  {
    "question": "What is the MPI initialization function?",
    "answer": "The MPI initialization function is `MPI_Init`, which must be called by each MPI program before using any other MPI features."
  },
  {
    "question": "What is the prototype for `MPI_Init` in C?",
    "answer": "The prototype for `MPI_Init` in C is `int MPI_Init(int *argc, char **argv[]);`."
  },
  {
    "question": "What is the prototype for `MPI_Init` in Fortran?",
    "answer": "The prototype for `MPI_Init` in Fortran is `MPI_INIT(IERR)` where `IERR` is an integer, or `MPI_Init(ierr)` with `INTEGER, OPTIONAL, INTENT(OUT) :: ierr` for Fortran 2008."
  },
  {
    "question": "How is MPI initialized using `mpi4py` in Python?",
    "answer": "In `mpi4py` for Python, MPI is often automatically initialized upon importing the library, but `MPI.Init()` can also be explicitly called."
  },
  {
    "question": "What is the purpose of the `MPI_Finalize` function?",
    "answer": "The `MPI_Finalize` function is called to perform any clean-up required before an MPI program exits."
  },
  {
    "question": "What is the prototype for `MPI_Finalize` in C?",
    "answer": "The prototype for `MPI_Finalize` in C is `int MPI_Finalize(void);`."
  },
  {
    "question": "What is the prototype for `MPI_Finalize` in Fortran?",
    "answer": "The prototype for `MPI_Finalize` in Fortran is `MPI_FINALIZE(IERR)` where `IERR` is an integer, or `MPI_Finalize(ierr)` with `INTEGER, OPTIONAL, INTENT(OUT) :: ierr` for Fortran 2008."
  },
  {
    "question": "When should `MPI_Init` and `MPI_Finalize` be called in an MPI program?",
    "answer": "As a rule of thumb, `MPI_Init` should be called as the first statement of an MPI program, and `MPI_Finalize` as its last statement."
  },
  {
    "question": "Which MPI functions are used to obtain the rank of a process and the total number of processes?",
    "answer": "The `MPI_Comm_rank` function reports the rank of the calling process, and `MPI_Comm_size` reports the total number of processes running in the job."
  },
  {
    "question": "What is the starting rank for processes in MPI?",
    "answer": "Ranks in MPI start from 0."
  },
  {
    "question": "What is a 'communicator' in MPI?",
    "answer": "A communicator in MPI is a set of processes that are capable of sending messages to one another."
  },
  {
    "question": "What is `MPI_COMM_WORLD`?",
    "answer": "`MPI_COMM_WORLD` is a predefined communicator in MPI that represents all the MPI processes started with the job."
  }
]