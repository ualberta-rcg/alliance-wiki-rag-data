[
  {
    "question": "How do you connect to a JupyterLab server from Linux or macOS?",
    "answer": "On your computer, open a new terminal window and create an SSH tunnel using the `sshuttle` command: `sshuttle --dns -Nr <username>@<cluster>.alliancecan.ca`. Then, copy and paste the first HTTP address provided by JupyterLab into your web browser."
  },
  {
    "question": "Which Python package is recommended for creating an SSH tunnel on Linux or macOS to connect to JupyterLab?",
    "answer": "The Python package `sshuttle` ([https://sshuttle.readthedocs.io sshuttle]) is recommended for creating an SSH tunnel on Linux or macOS."
  },
  {
    "question": "How do you connect to JupyterLab from Windows?",
    "answer": "To connect from Windows, you need to create an SSH tunnel using MobaXTerm or any terminal that supports the `ssh` command. First, extract the `hostname:port` and `token` from the JupyterLab URL. Then, open a new Terminal tab in MobaXTerm and run `ssh -L 8888:<hostname:port> <username>@<cluster>.alliancecan.ca`. Finally, open your web browser and go to `http://localhost:8888/?token=<token>`."
  },
  {
    "question": "What tools can be used to create an SSH tunnel from Windows for JupyterLab?",
    "answer": "For Windows, you can use MobaXTerm or any terminal that supports the `ssh` command to create an SSH tunnel."
  },
  {
    "question": "How do you stop the JupyterLab server before its allocated time limit?",
    "answer": "To stop the JupyterLab server, press `CTRL-C` twice in the terminal where the interactive task was launched."
  },
  {
    "question": "How do you close an SSH tunnel created with MobaXterm?",
    "answer": "If you used MobaXterm to create an SSH tunnel, press `Ctrl-D` to close the tunnel."
  },
  {
    "question": "What is the general process for adding new kernels to JupyterLab?",
    "answer": "Adding a new kernel involves two main steps: first, installing the packages that allow the language interpreter to communicate with the Jupyter interface, and second, creating a kernel spec file that tells JupyterLab how to establish a communication channel with the interpreter. This file is saved in a sub-directory of `~/.local/share/jupyter/kernels`."
  },
  {
    "question": "What are the prerequisites for configuring a Julia kernel in JupyterLab?",
    "answer": "The prerequisites for configuring a Julia kernel are: a Python virtual environment and a `kernels` directory. The installation of Julia packages requires internet access, so the Julia kernel configuration must be done at the command prompt on a login node."
  }
]