[
  {
    "question": "How do you connect to a JupyterLab server from a Linux or macOS computer?",
    "answer": "On your computer, open a new terminal window and create an SSH tunnel using the `sshuttle` command: `sshuttle --dns -Nr <username>@<cluster>.computecanada.ca`. Then, copy and paste the provided HTTP address from the JupyterLab server into your web browser."
  },
  {
    "question": "What Python package is recommended for creating an SSH tunnel on Linux or macOS to access JupyterLab?",
    "answer": "The `sshuttle` Python package is recommended for creating an SSH tunnel on Linux or macOS."
  },
  {
    "question": "What tools can be used to create an SSH tunnel from Windows to access JupyterLab?",
    "answer": "To create an SSH tunnel from Windows, you can use MobaXTerm or any terminal that supports the `ssh` command."
  },
  {
    "question": "What information is needed from the JupyterLab URL to create an SSH tunnel on Windows?",
    "answer": "You need to extract the `hostname:port` and the `token` from the first HTTP address provided by JupyterLab."
  },
  {
    "question": "How do you establish an SSH tunnel on Windows after extracting the hostname, port, and token?",
    "answer": "Open a new terminal tab in MobaXTerm and run the command: `ssh -L 8888:<hostname:port> <username>@<cluster>.computecanada.ca`. Then, open your web browser and go to `http://localhost:8888/?token=<token>`."
  },
  {
    "question": "How do you stop the JupyterLab server before its allocated time limit expires?",
    "answer": "To stop the JupyterLab server, press `CTRL-C` twice in the terminal where the interactive task was launched."
  },
  {
    "question": "How do you close an SSH tunnel created with MobaXterm?",
    "answer": "If you used MobaXterm to create an SSH tunnel, press `Ctrl-D` to close the tunnel."
  },
  {
    "question": "What is the purpose of adding kernels to JupyterLab?",
    "answer": "Adding kernels allows you to use other programming languages, different versions of Python, or persistent virtual environments that contain all the necessary packages and libraries for your project."
  },
  {
    "question": "What are the two main steps for installing a new kernel in JupyterLab?",
    "answer": "The two main steps are: 1. Installing the packages that enable the language interpreter to communicate with the Jupyter interface. 2. Creating a kernel spec file (saved in `~/.local/share/jupyter/kernels`) that tells JupyterLab how to initialize a communication channel with the language interpreter."
  },
  {
    "question": "What are the prerequisites for configuring a Julia kernel?",
    "answer": "The configuration of a Julia kernel requires a Python virtual environment and a `kernels` directory. Additionally, because Julia package installation needs internet access, the configuration must be done at the command prompt on a login node."
  },
  {
    "question": "Is a Python kernel explicitly required to configure a Julia kernel?",
    "answer": "No, a Python kernel is not explicitly required, but a Python virtual environment and a `kernels` directory are dependencies for configuring a Julia kernel."
  },
  {
    "question": "Why is Julia kernel configuration recommended to be done on a login node via SSH?",
    "answer": "Julia kernel configuration must be done on a login node via SSH because the installation of Julia packages requires internet access."
  }
]