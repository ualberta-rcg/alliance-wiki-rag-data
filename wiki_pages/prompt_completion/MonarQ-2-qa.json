[
  {
    "question": "What are the prerequisites for getting started with MonarQ?",
    "answer": "To get started with MonarQ, you need to have access to MonarQ and your login credentials, which include a username and an API token."
  },
  {
    "question": "Who should I contact if I have questions about accessing MonarQ?",
    "answer": "For any questions regarding MonarQ access, you can write to quantique@calculquebec.ca."
  },
  {
    "question": "Where is MonarQ accessible from?",
    "answer": "MonarQ is exclusively accessible from Narval, which is a Calcul Qu\u00e9bec cluster."
  },
  {
    "question": "What is the connection node for Narval?",
    "answer": "The connection node for Narval is 'narval.alliancecan.ca'."
  },
  {
    "question": "Where can I find help for connecting to Narval?",
    "answer": "For assistance with connecting to Narval, you can consult the [[SSH/fr|SSH]] page."
  },
  {
    "question": "What kind of Python environment is required to use MonarQ?",
    "answer": "You need to create a Python virtual environment (version 3.11 or later) to use PennyLane and the PennyLane-CalculQu\u00e9bec plugin with MonarQ."
  },
  {
    "question": "Are PennyLane and PennyLane-CalculQu\u00e9bec pre-installed on Narval?",
    "answer": "Yes, PennyLane and the PennyLane-CalculQu\u00e9bec plugin are already installed on Narval; you only need to import the desired software libraries."
  },
  {
    "question": "What are the commands to set up the Python environment for MonarQ on Narval?",
    "answer": "The commands to set up the Python environment are: `module load python/3.11`, `virtualenv --no-download --clear ~/ENV && source ~/ENV/bin/activate`, `pip install --no-index --upgrade pip`, `pip install --no-index --upgrade pennylane-calculquebec`, and `python -c \"import pennylane; import pennylane_calculquebec\"`."
  },
  {
    "question": "How do I configure my MonarQ credentials in a Python script?",
    "answer": "You need to open a Python .py file, import PennyLane and MonarqClient, then create a client using your host ('monarq.calculquebec.ca'), username, access token, and project."
  },
  {
    "question": "Where can I find my MonarQ API token?",
    "answer": "Your MonarQ API token is available from the Thunderhead portal."
  },
  {
    "question": "What is the host address for connecting to MonarQ as a device?",
    "answer": "The host address for connecting to MonarQ as a device is 'monarq.calculquebec.ca'."
  },
  {
    "question": "How do I define MonarQ as a device in PennyLane?",
    "answer": "You can define MonarQ as a PennyLane device using `qml.device(\"monarq.default\", client = my_client, wires = 3, shots = 1000)`, where `my_client` is your configured MonarqClient and you specify the number of qubits (`wires`) and samples (`shots`)."
  },
  {
    "question": "Where can I get more help configuring the PennyLane-CalculQu\u00e9bec plugin?",
    "answer": "For additional help configuring PennyLane-CalculQu\u00e9bec, you can consult the documentation at [https://github.com/calculquebec/pennylane-calculquebec/blob/main/doc/getting_started.ipynb]."
  },
  {
    "question": "How do I create a quantum circuit for MonarQ using PennyLane?",
    "answer": "You can code your quantum circuit in the same Python file where you configured your MonarQ device, using PennyLane functions such as `qml.Hadamard` and `qml.CNOT`."
  },
  {
    "question": "How do I execute my quantum circuit on MonarQ from the scheduler?",
    "answer": "You execute your circuit from the scheduler by using the `sbatch` command to submit a Slurm script that runs your Python circuit file."
  },
  {
    "question": "What is the command to submit a job to the scheduler?",
    "answer": "The command to submit a job to the scheduler is `sbatch simple_job.sh`."
  },
  {
    "question": "What are some common parameters for a Slurm script when running a MonarQ job?",
    "answer": "Common parameters for a Slurm script include `#SBATCH --time=00:15:00`, `#SBATCH --account=def-someuser`, `#SBATCH --cpus-per-task=1`, and `#SBATCH --mem-per-cpu=1G`."
  },
  {
    "question": "Where are the results of an executed circuit saved?",
    "answer": "The results of the executed circuit are written into a file named `slurm-ID.out`, where 'ID' corresponds to the task ID."
  },
  {
    "question": "Where can I find more information about submitting tasks on Narval?",
    "answer": "More information on submitting tasks on Narval can be found by consulting the [[Running_jobs/fr|Ex\u00e9cuter des t\u00e2ches]] page."
  }
]