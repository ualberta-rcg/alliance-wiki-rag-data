[
  {
    "question": "What is the purpose of CDO?",
    "answer": "CDO is a collection of command line Operators designed to manipulate and analyze Climate and NWP model Data."
  },
  {
    "question": "What are some available versions for the CDO software?",
    "answer": "Available versions of CDO include 1.9.8, 1.9.10, 2.0.4, 2.0.5, and 2.2.2."
  },
  {
    "question": "What is the homepage for CDO?",
    "answer": "The homepage for CDO is https://code.zmaw.de/projects/cdo."
  },
  {
    "question": "What is Cell Ranger?",
    "answer": "Cell Ranger is a suite of analysis pipelines that processes Chromium single cell 3-RNA-seq output to align reads, generate gene-cell matrices, and perform clustering and gene expression analysis."
  },
  {
    "question": "Which version of Cell Ranger is listed in the document?",
    "answer": "The listed version of Cell Ranger is 2.1.0."
  },
  {
    "question": "What are the four main gene expression pipelines included in Cell Ranger?",
    "answer": "The four main gene expression pipelines in Cell Ranger are cellranger mkfastq, cellranger count, cellranger aggr, and cellranger reanalyze."
  },
  {
    "question": "What is the function of cellranger mkfastq?",
    "answer": "cellranger mkfastq wraps Illumina's bcl2fastq to demultiplex Chromium-prepared sequencing samples and convert barcode and read data to FASTQ files."
  },
  {
    "question": "What does the cellranger count pipeline do?",
    "answer": "The cellranger count pipeline takes FASTQ files from cellranger mkfastq and performs alignment, filtering, and UMI counting."
  },
  {
    "question": "How does cellranger aggr work?",
    "answer": "cellranger aggr aggregates outputs from multiple runs of cellranger count, normalizing those runs to the same sequencing depth and then recomputing gene-barcode matrices and analysis on the combined data."
  },
  {
    "question": "What is the purpose of cellranger reanalyze?",
    "answer": "cellranger reanalyze takes gene-barcode matrices and reruns dimensionality reduction, clustering, and gene expression algorithms using tunable parameter settings."
  },
  {
    "question": "What output formats does Cell Ranger support?",
    "answer": "Cell Ranger delivers output in standard BAM, MEX, CSV, HDF5, and HTML formats."
  },
  {
    "question": "What is cellsnp-lite primarily designed for?",
    "answer": "cellsnp-lite was initially designed to pileup expressed alleles in single-cell or bulk RNA-seq data for donor deconvolution and doublet detection."
  },
  {
    "question": "What types of data can cellsnp-lite be applied to?",
    "answer": "Besides RNA-seq data, cellsnp-lite can also be applied to DNA-seq and ATAC-seq data, in both bulk and single-cell contexts."
  },
  {
    "question": "What is Centrifuge?",
    "answer": "Centrifuge is a microbial classification engine that provides rapid, accurate, and sensitive labeling of reads and quantification of species on desktop computers."
  },
  {
    "question": "What indexing scheme does Centrifuge use for metagenomic classification?",
    "answer": "Centrifuge uses a novel indexing scheme based on the Burrows-Wheeler transform (BWT) and the Ferragina-Manzini (FM) index."
  },
  {
    "question": "What is the typical index size required by Centrifuge?",
    "answer": "Centrifuge typically requires a relatively small index of 4.7 GB for all complete bacterial and viral genomes plus the human genome."
  },
  {
    "question": "How quickly can Centrifuge classify sequences?",
    "answer": "Centrifuge classifies sequences at very high speed, processing millions of reads from a typical high-throughput DNA sequencing run within a few minutes."
  },
  {
    "question": "What versions of Centrifuge are available?",
    "answer": "Available versions of Centrifuge include 1.0.4-beta and 1.0.4.2."
  },
  {
    "question": "What is the cereal library?",
    "answer": "cereal is a header-only C++11 serialization library."
  },
  {
    "question": "What kind of data can cereal handle?",
    "answer": "cereal takes arbitrary data types and reversibly turns them into different representations like compact binary encodings, XML, or JSON."
  },
  {
    "question": "What are the key design principles of the cereal library?",
    "answer": "cereal was designed to be fast, light-weight, and easy to extend, with no external dependencies."
  },
  {
    "question": "What versions of the cereal library are available?",
    "answer": "Versions 1.3.0 and 1.3.2 of the cereal library are available."
  }
]