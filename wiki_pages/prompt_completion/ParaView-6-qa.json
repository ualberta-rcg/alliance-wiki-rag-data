[
  {
    "question": "How do you compile the ParaView server after setting up other prerequisites on a cloud VM?",
    "answer": "First, navigate to your home directory (`cd`), then download the ParaView source: `wget https://www.paraview.org/files/v6.0/ParaView-v6.0.0.tar.gz`. Unpack the archive, create a build directory (`mkdir -p build && cd build`), and then run `cmake` with the following flags: `-DCMAKE_BUILD_TYPE=Release`, `-DCMAKE_INSTALL_PREFIX=/home/centos/paraview`, `-DPARAVIEW_USE_MPI=OFF`, `-DPARAVIEW_ENABLE_PYTHON=ON`, `-DPARAVIEW_BUILD_QT_GUI=OFF`, `-DVTK_OPENGL_HAS_OSMESA=ON`, `-DVTK_USE_OFFSCREEN=ON`, `-DVTK_USE_X=OFF`. Finally, compile with `make` and install with `make install`."
  },
  {
    "question": "Once compiled, how do you start the ParaView server on the VM with SWR rendering enabled?",
    "answer": "You can start the ParaView server by executing the command: `./paraview/bin/pvserver --force-offscreen-rendering --opengl-window-backend OSMesa`."
  },
  {
    "question": "How do you set up an SSH tunnel from your local computer to the VM to connect the ParaView client?",
    "answer": "From your local computer, open a terminal and execute the command: `ssh centos@vm.ip.address -L 11111:localhost:11111`. Remember to replace `vm.ip.address` with the actual IP address of your virtual machine."
  },
  {
    "question": "After setting up the SSH tunnel, how do you connect the ParaView client running on your local computer to the server on the VM?",
    "answer": "Start the ParaView client application on your computer and connect to `localhost:11111`."
  },
  {
    "question": "How can you confirm that SWR rendering is being used during a client-server ParaView session with a VM?",
    "answer": "If successful, during rendering in the console where the ParaView server is running on the VM, you should see the message 'SWR detected AVX2.'"
  }
]