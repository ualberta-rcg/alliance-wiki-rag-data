[
  {
    "question": "What environment variable on Trillium points to the top-level directory on the HPSS nearline storage system?",
    "answer": "A variable called `$ARCHIVE` will point to the top-level directory on HPSS (the /nearline system attached to Trillium)."
  },
  {
    "question": "What is the storage quota for the `$HOME` directory per user on Trillium?",
    "answer": "The `$HOME` directory has a quota of 100GB per user."
  },
  {
    "question": "Is the `$HOME` directory backed up on Trillium?",
    "answer": "Yes, the `$HOME` directory is backed up."
  },
  {
    "question": "Can the `$HOME` directory be written to from compute nodes?",
    "answer": "No, the `$HOME` directory is read-only on compute nodes."
  },
  {
    "question": "What is the storage quota for the `$SCRATCH` directory per user on Trillium?",
    "answer": "The `$SCRATCH` directory has a quota of 25TB per user."
  },
  {
    "question": "Is the `$SCRATCH` directory backed up on Trillium?",
    "answer": "No, the `$SCRATCH` directory is not backed up."
  },
  {
    "question": "How is the quota for the `$PROJECT` directory determined?",
    "answer": "The quota for the `$PROJECT` directory is determined by allocation via competition, with a default of 1 TB per group."
  },
  {
    "question": "Is the `$PROJECT` directory backed up on Trillium?",
    "answer": "Yes, the `$PROJECT` directory is backed up."
  },
  {
    "question": "Are the policies for `$SCRATCH` storage definitive?",
    "answer": "No, the policies for `$SCRATCH` are not definitive."
  },
  {
    "question": "Does the resource allocation contest allow increasing quotas for `$PROJECT` and `$ARCHIVE` on Trillium?",
    "answer": "No, the resource allocation contest does not allow increasing quotas for `$PROJECT` and `$ARCHIVE` on Trillium."
  },
  {
    "question": "How does Trillium manage compilers, libraries, and other software packages?",
    "answer": "Trillium uses environment modules to manage compilers, libraries, and other software packages."
  },
  {
    "question": "What command is used to load the default version of a software package module?",
    "answer": "The command `module load <module-name>` loads the default version of a software package."
  },
  {
    "question": "How do you load a specific version of a module on Trillium?",
    "answer": "To load a specific version of a module, use the command `module load <nom-module>/<version-module>`."
  },
  {
    "question": "What command removes all currently loaded modules?",
    "answer": "The command `module purge` removes all currently loaded modules."
  },
  {
    "question": "How can you list all available modules that can be loaded on Trillium?",
    "answer": "You can list all available modules by using the command `module avail`."
  },
  {
    "question": "What command displays the modules currently loaded in your environment?",
    "answer": "The command `module list` displays the modules currently loaded."
  },
  {
    "question": "How can you search for modules and their versions, including dependencies?",
    "answer": "You can search for modules and their versions using `module spider` or `module spider <module-name>`."
  },
  {
    "question": "What is the abbreviation for the `module list` command?",
    "answer": "The abbreviation `ml` is equivalent to `module list`."
  },
  {
    "question": "Which modules are loaded by default when you connect to Trillium?",
    "answer": "When you connect, only the modules `CCconfig`, `gentoo/2023`, and `mii` are loaded by default."
  },
  {
    "question": "How can you load a standard set of compilers and libraries on Trillium?",
    "answer": "To obtain a standard set of compilers and libraries, you should load `StdEnv/2023`."
  },
  {
    "question": "Why should you avoid loading modules in your `.bashrc` file?",
    "answer": "Loading modules in your `.bashrc` file can lead to unexpected behaviors, especially in non-interactive environments like batch jobs or remote shells."
  },
  {
    "question": "What is a recommended best practice for loading modules to ensure control and clean environments?",
    "answer": "It is recommended to load modules manually, from a separate script, or using module collections."
  },
  {
    "question": "Where should modules be loaded to guarantee that your job runs in the expected software environment?",
    "answer": "Modules should be loaded in your job script to guarantee that your job runs in the expected software environment."
  },
  {
    "question": "Why is it important to be explicit about module versions (e.g., `gcc/13.3` instead of `gcc`)?",
    "answer": "Being explicit about module versions ensures long-term reproducibility, as default module versions can change over time."
  },
  {
    "question": "How can `module spider` help with module dependencies?",
    "answer": "`module spider <module-name>` can be used to resolve dependencies, showing which modules are required and how to load them in the correct order."
  }
]