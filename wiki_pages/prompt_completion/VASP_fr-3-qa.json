[
  {
    "question": "What are the default resource requests for the standard VASP job script?",
    "answer": "The standard VASP job script requests four CPU cores and 4096MB of memory (4x1024MB)."
  },
  {
    "question": "How can I determine the Slurm account name for the VASP job script?",
    "answer": "You can find the Slurm account name by consulting the \"Ex\u00e9cuter des t\u00e2ches\" (Running jobs) page, specifically the \"Comptes et projets\" (Accounts and projects) section."
  },
  {
    "question": "Which VASP versions can be used with the standard job script example?",
    "answer": "The VASP versions that can be used with the standard job script example are 4.6, 5.4.1, 5.4.4, or 6.1.0."
  },
  {
    "question": "How do I choose the correct VASP executable for my job script?",
    "answer": "You should refer to the \"Programmes ex\u00e9cutables\" (Executable programs) section to choose the appropriate executable name for `<VASP>` in your script."
  },
  {
    "question": "What resources does the VASP GPU job script request?",
    "answer": "The VASP GPU job script requests one CPU core, 1024MB of memory, and one P100 type GPU (available on Cedar)."
  },
  {
    "question": "On which cluster is the P100 GPU type specifically available, according to the GPU job script example?",
    "answer": "The P100 GPU type, as specified in the VASP GPU job script example, is available only on Cedar."
  },
  {
    "question": "What are the four essential input files that VASP uses?",
    "answer": "VASP uses four input files: INCAR, KPOINTS, POSCAR, and POTCAR."
  },
  {
    "question": "How should input files be organized for VASP tasks?",
    "answer": "It is recommended to prepare VASP input files in a different directory for each task."
  },
  {
    "question": "What command is used to submit a VASP job script?",
    "answer": "To submit a VASP job script, use the command `sbatch vasp_job.sh` from the task's directory."
  },
  {
    "question": "How can I estimate the memory requirements for a VASP task if I don't know them?",
    "answer": "You can estimate memory requirements by preparing your input files and executing `makeparam` in an interactive task. The result will give you an estimated memory amount to use for future executions."
  },
  {
    "question": "How can I get a better memory estimate for future VASP tasks?",
    "answer": "For a better estimate, check the maximum memory stack size for completed tasks and use that value to request memory per processor."
  },
  {
    "question": "What should I do if my VASP task requires 32 CPU cores or more?",
    "answer": "If your VASP task requires 32 CPU cores or more, you should consult the \"Job_scheduling_policies/fr\" page, specifically the \"N\u0153uds entiers ou c\u0153urs\" (Whole nodes or cores) section."
  },
  {
    "question": "What are the prerequisites for building VASP yourself?",
    "answer": "To build VASP yourself, you need a VASP license and access to the VASP source code."
  },
  {
    "question": "Which command is used to install VASP in the home directory using EasyBuild?",
    "answer": "The command to install VASP using EasyBuild in your home directory is `eb -f [RECIPE NAME] --sourcepath=[SOURCEPATH]`."
  },
  {
    "question": "What do `[SOURCEPATH]` and `[RECIPE NAME]` refer to in the EasyBuild command for VASP?",
    "answer": "`[SOURCEPATH]` is the directory containing the VASP source code, and `[RECIPE NAME]` is the name of the EasyBuild recipe."
  },
  {
    "question": "Where can I download the VASP source code?",
    "answer": "You can download the VASP source code from the official VASP website at [https://www.vasp.at/]."
  },
  {
    "question": "How long does the EasyBuild command typically take to complete when building VASP?",
    "answer": "The EasyBuild command can take more than an hour to complete."
  },
  {
    "question": "How do I use VASP after building it with EasyBuild?",
    "answer": "Once the EasyBuild operation is complete, you can load and execute VASP using the `module` commands, as explained in the \"Utilisation des modules VASP\" section."
  },
  {
    "question": "Where can I find additional documentation for building custom VASP versions?",
    "answer": "Additional documentation for building custom VASP versions can be found at \"Installing software in your home directory/fr\", \"Installing VASP 5\" [https://www.vasp.at/wiki/index.php/Installing_VASP.5.X.X], or \"Installing VASP 6\" [https://www.vasp.at/wiki/index.php/Installing_VASP.6.X.X]."
  },
  {
    "question": "What is the recipe name for VASP version 6.4.2 for CPU with StdEnv/2023, including VTSTtools and VASPsol?",
    "answer": "The recipe name is `VASP-6.4.2-iimpi-2023a.eb`, which uses `vasp.6.4.2.tar` as the source file."
  },
  {
    "question": "Does the VASP-6.5.1-iimpi-2023a.eb recipe include VTSTtools and vaspSOL?",
    "answer": "No, the `VASP-6.5.1-iimpi-2023a.eb` recipe does not include VTSTtools or vaspSOL."
  },
  {
    "question": "Which libraries are included in the VASP-5.4.4-iimpi-2020a.eb recipe?",
    "answer": "The `VASP-5.4.4-iimpi-2020a.eb` recipe includes Wannier function and Beef libraries, but not HDF5, LibXC, ELPA, Libmbd, or dft4."
  },
  {
    "question": "Which libraries are included in the VASP-6.5.1-iimpi-2023a.eb recipe?",
    "answer": "The `VASP-6.5.1-iimpi-2023a.eb` recipe includes Wannier function, Beef, HDF5, LibXC, ELPA, Libmbd, and dft4 libraries."
  }
]