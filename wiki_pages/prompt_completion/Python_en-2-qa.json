[
  {
    "question": "What is the typical sequence of commands to create a `requirements.txt` file for a TensorFlow environment on a login node?",
    "answer": "The sequence involves loading the Python module, setting an `ENVDIR`, creating the virtual environment with `virtualenv --no-download $ENVDIR`, activating it with `source $ENVDIR/bin/activate`, upgrading pip with `pip install --no-index --upgrade pip`, installing TensorFlow with `pip install --no-index tensorflow`, generating the `requirements.txt` file with `pip freeze --local > requirements.txt`, deactivating the environment, and finally removing the temporary directory with `rm -rf $ENVDIR`."
  },
  {
    "question": "What is the purpose of the `requirements.txt` file mentioned in the context?",
    "answer": "This file will ensure that your environment is reproducible between jobs."
  },
  {
    "question": "What should be done if a required package wheel is not available in the provided wheelhouse?",
    "answer": "If the wheel is not available in our wheelhouse, you can pre-download it or contact Technical support to make a request for its inclusion."
  },
  {
    "question": "How are virtual environments created on multiple allocated nodes within a job submission script?",
    "answer": "In your submission script, create the virtual environment on each allocated node using an `srun` command block: `srun --ntasks $SLURM_NNODES --tasks-per-node=1 bash << EOF ... EOF` which contains commands to create, activate, and install packages into the virtual environment using `--no-download` and `--no-index` options."
  },
  {
    "question": "After creating virtual environments on multiple nodes, how is the virtual environment activated on the main node?",
    "answer": "Activate the virtual environment on the main node using `source $SLURM_TMPDIR/env/bin/activate;`."
  },
  {
    "question": "How is a Python script executed across multiple nodes after setting up node-local virtual environments?",
    "answer": "Use `srun python myscript.py;` to run your script, as `srun` exports the current environment, which contains `$VIRTUAL_ENV` and `$PATH` variables."
  },
  {
    "question": "What modules are loaded in the example multi-node submission script?",
    "answer": "The example submission script loads `StdEnv/2023`, `python/3.11`, and `mpi4py`."
  },
  {
    "question": "What is the command to install TensorFlow without using PyPI?",
    "answer": "The command is `pip install --no-index tensorflow`."
  },
  {
    "question": "What command is used to upgrade pip without accessing the PyPI index?",
    "answer": "The command is `pip install --no-index --upgrade pip`."
  }
]