[
  {
    "question": "What is the purpose of the `terraform plan` command?",
    "answer": "The `terraform plan` command compiles the Terraform definition, attempts to reconcile the resulting state with the current state of the cloud, and produces a plan of the modifications that would be applied."
  },
  {
    "question": "What should you do after running `terraform plan`?",
    "answer": "It is necessary to review the output of `terraform plan` to understand its content before accepting any modifications, in order to avoid unpleasant surprises."
  },
  {
    "question": "What does `known after apply` signify in a Terraform plan?",
    "answer": "`known after apply` means that these values will be determined from the state of the newly created resources queried from OpenStack after the plan is applied."
  },
  {
    "question": "What might cause an incomplete credential error during a Terraform plan?",
    "answer": "An incomplete credential error might occur if you forgot to define `OS_CLOUD`, to source the RC file, or if your `clouds.yaml` file is missing."
  },
  {
    "question": "Why is it important to check the last line of the `terraform plan` output?",
    "answer": "The last line of the plan (e.g., `Plan: 1 to add, 0 to change, 0 to destroy.`) indicates the number of resources to be added, changed, or destroyed. This is crucial to verify that the planned actions align with your intentions, especially to prevent accidental destruction or reconstruction of resources."
  },
  {
    "question": "Does Terraform manage OpenStack resources that already exist in a project?",
    "answer": "No, Terraform does not know about or attempt to determine the state of resources already defined in an OpenStack project. Its actions are based on the provided configuration and previously determined state, making existing resources invisible to Terraform."
  },
  {
    "question": "Can pre-existing OpenStack resources be imported into Terraform?",
    "answer": "Yes, it is possible to import previously defined OpenStack resources into Terraform, although the document notes that 'ce n'est pas une mince affaire' (it's not a trivial task) and is beyond the scope of the current tutorial."
  },
  {
    "question": "What command is used to apply the configuration changes described in a Terraform plan?",
    "answer": "The `terraform apply` command is used to perform the changes described in the plan."
  },
  {
    "question": "What input is required when prompted by `terraform apply` to confirm actions?",
    "answer": "When prompted, you must enter 'yes' to approve and perform the described actions."
  },
  {
    "question": "What was the error encountered in the example when attempting to create an OpenStack server with `terraform apply`?",
    "answer": "The error was `Error creating OpenStack server: Expected HTTP response code [] when accessing [...] but got 409 instead {\"conflictingRequest\": {\"message\": \"Multiple possible networks found, use a Network ID to be more specific.\", \"code\": 409}}`."
  },
  {
    "question": "Why did the `terraform apply` command fail with a 'Multiple possible networks found' error?",
    "answer": "The `terraform apply` command failed because there are at least two networks defined for an OpenStack project (private and public), and Terraform needed to know which one to use, requiring a more specific Network ID."
  },
  {
    "question": "How do you add a network to an OpenStack VM definition in Terraform to resolve the 'Multiple possible networks found' error?",
    "answer": "To resolve the error, you need to add a `network` sub-block to your VM definition, specifying the private network name, for example: `network { name = \"my-tenant-net\" }`."
  },
  {
    "question": "How can you find the name of the private network for an OpenStack project?",
    "answer": "The private network name can be found using the OpenStack CLI with `network list` or in Horizon under `R\u00e9seau -> R\u00e9seaux` (Network -> Networks). They are typically on a 192.168.X.Y network."
  }
]