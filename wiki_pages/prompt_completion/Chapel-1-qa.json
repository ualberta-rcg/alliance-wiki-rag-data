[
  {
    "question": "What is Chapel?",
    "answer": "Chapel is a general-purpose, compiled, high-level parallel programming language with built-in abstractions for shared- and distributed-memory parallelism."
  },
  {
    "question": "What are the two styles of parallel programming available in Chapel?",
    "answer": "The two styles are (1) task parallelism, driven by programmer-specified tasks, and (2) data parallelism, which applies the same computation on subsets of data elements, potentially distributed over multiple nodes."
  },
  {
    "question": "Who is Chapel ideal for in the context of parallel programming?",
    "answer": "Chapel is ideal for a novice HPC user learning parallel programming due to its high-level abstractions."
  },
  {
    "question": "What programming languages does Chapel strive to combine in terms of ease-of-use and performance?",
    "answer": "Chapel strives to merge the ease-of-use of Python with the performance of traditional compiled languages such as C and Fortran."
  },
  {
    "question": "How does Chapel compare to MPI regarding code verbosity for parallel blocks?",
    "answer": "Parallel blocks that typically take tens of lines of MPI code can be expressed in only a few lines of Chapel code."
  },
  {
    "question": "Is Chapel an open-source language?",
    "answer": "Yes, Chapel is open source."
  },
  {
    "question": "What operating systems can Chapel run on?",
    "answer": "Chapel can run on any Unix-like operating system."
  },
  {
    "question": "What range of hardware does Chapel support?",
    "answer": "Chapel supports hardware ranging from laptops to large HPC systems."
  },
  {
    "question": "What is a current limitation of Chapel regarding available libraries?",
    "answer": "Due to its relatively small user base, many libraries that exist for C, C++, and Fortran have not yet been implemented in Chapel."
  },
  {
    "question": "Where can users find more information about Chapel?",
    "answer": "Users can find more information by watching the Chapel webinars provided at https://westgrid.github.io/trainingMaterials/programming/#chapel."
  },
  {
    "question": "What does 'Single-locale Chapel' refer to?",
    "answer": "Single-locale Chapel refers to Chapel running on a single node with shared-memory only."
  },
  {
    "question": "Which module provides Single-locale Chapel on general-purpose clusters?",
    "answer": "The `chapel-multicore` module provides Single-locale Chapel on general-purpose clusters."
  },
  {
    "question": "How do you load the necessary modules for single-locale Chapel (serial or multicore)?",
    "answer": "You load the modules using the command: `module load gcc/12.3 chapel-multicore/2.4.0`."
  },
  {
    "question": "How do you allocate resources for testing single-locale Chapel code serially using `salloc`?",
    "answer": "To allocate resources for serial testing, use: `salloc --time=0:30:0 --ntasks=1 --mem-per-cpu=3600 --account=def-someprof`."
  },
  {
    "question": "How do you compile a Chapel program named `test.chpl` for single-locale execution?",
    "answer": "You compile it using the command: `chpl test.chpl -o test`."
  },
  {
    "question": "How do you run a compiled Chapel program named `test` for single-locale serial execution?",
    "answer": "You execute it using the command: `./test`."
  },
  {
    "question": "How do you allocate resources for testing single-locale Chapel code on multiple cores on the same node using `salloc`?",
    "answer": "To allocate resources for multicore testing on a single node, use: `salloc --time=0:30:0 --ntasks=1 --cpus-per-task=3 --mem-per-cpu=3600 --account=def-someprof`."
  },
  {
    "question": "How should production jobs for Single-locale Chapel be submitted?",
    "answer": "For production jobs, a job submission script should be written and submitted with `sbatch`."
  },
  {
    "question": "What does 'Multi-locale Chapel' refer to?",
    "answer": "Multi-locale Chapel refers to Chapel running on multiple nodes, utilizing hybrid shared- and distributed-memory."
  },
  {
    "question": "Which module provides Multi-locale Chapel on InfiniBand clusters?",
    "answer": "The `chapel-ucx` module provides Multi-locale Chapel on InfiniBand clusters."
  },
  {
    "question": "What is the purpose of the `probeLocales.chpl` example code?",
    "answer": "The `probeLocales.chpl` code prints basic information about the nodes available inside your Chapel job."
  },
  {
    "question": "How do you load the necessary modules for multi-locale Chapel on an InfiniBand cluster?",
    "answer": "You load the modules using the command: `module load gcc/12.3 chapel-ucx/2.4.0`."
  },
  {
    "question": "How do you allocate resources for testing multi-locale Chapel code on an InfiniBand cluster with `salloc`?",
    "answer": "To allocate resources for multi-locale testing, use: `salloc --time=0:30:0 --nodes=4 --cpus-per-task=3 --mem-per-cpu=3500 --account=def-someprof`."
  },
  {
    "question": "How do you compile the `probeLocales.chpl` program for multi-locale execution?",
    "answer": "You compile it using the command: `chpl --fast probeLocales.chpl`."
  },
  {
    "question": "How do you run the `probeLocales` program to probe 4 locales?",
    "answer": "You execute it using the command: `./probeLocales -nl 4`."
  },
  {
    "question": "How should production jobs for Multi-locale Chapel be submitted?",
    "answer": "For production jobs, a Slurm submission script should be written and submitted with `sbatch`."
  },
  {
    "question": "Which module enables NVIDIA GPU support for Multi-locale Chapel on InfiniBand clusters?",
    "answer": "The `chapel-ucx-cuda` module enables NVIDIA GPU support for Multi-locale Chapel."
  },
  {
    "question": "What is the purpose of the `probeGPU.chpl` example code?",
    "answer": "The `probeGPU.chpl` code is a basic Chapel GPU program designed to probe and display GPU information."
  },
  {
    "question": "How do you load the necessary modules for multi-locale Chapel with NVIDIA GPU support?",
    "answer": "You load the modules using the command: `module load gcc/12.3 cuda/12.2 chapel-ucx-cuda/2.4.0`."
  },
  {
    "question": "How do you allocate resources for testing multi-locale Chapel code with GPU support using `salloc`?",
    "answer": "To allocate resources for GPU testing, use: `salloc --time=0:30:0 --mem-per-cpu=3500 --gpus-per-node=1 --account=def-someprof`."
  },
  {
    "question": "How do you compile the `probeGPU.chpl` program for multi-locale execution with GPU support?",
    "answer": "You compile it using the command: `chpl --fast probeGPU.chpl`."
  },
  {
    "question": "How do you run the `probeGPU` program for a single locale with GPU support?",
    "answer": "You execute it using the command: `./probeGPU -nl 1`."
  },
  {
    "question": "How should production jobs for Multi-locale Chapel with GPU support be submitted?",
    "answer": "For production jobs, a Slurm submission script should be written and submitted with `sbatch`."
  }
]