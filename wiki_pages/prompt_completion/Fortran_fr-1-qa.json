[
  {
    "question": "Which Fortran compilers are installed on Calcul Canada computers?",
    "answer": "The `gfortran` and `ifort` compilers are installed."
  },
  {
    "question": "Why are compiled languages like Fortran, C, or C++ encouraged?",
    "answer": "They generally offer better performance compared to other languages."
  },
  {
    "question": "What `gfortran` option is used to check array bounds and uninitialized variables?",
    "answer": "The `-fcheck=all` option is used for `gfortran`."
  },
  {
    "question": "What `ifort` option is used to check array bounds and uninitialized variables?",
    "answer": "The `-check` option is used for `ifort`."
  },
  {
    "question": "How can an `ifort` application be made to interrupt on floating-point errors like division by zero?",
    "answer": "Use the `-fpe0` compilation option with `ifort`."
  },
  {
    "question": "What compilation option should be used to disable optimizations during Fortran tests?",
    "answer": "Use `-O0` to disable optimizations."
  },
  {
    "question": "What compilation option should be used to add debugging symbols during Fortran tests?",
    "answer": "Use `-g` to add debugging symbols."
  },
  {
    "question": "Which Fortran 90 functions are available for matrix and vector multiplications?",
    "answer": "`matmul` and `dot_product` are available for matrix and vector multiplications."
  },
  {
    "question": "Which Fortran 90 function is used for matrix transposition?",
    "answer": "The `transpose` function is used for matrix transposition."
  },
  {
    "question": "What is the recommended approach for numerical linear algebra operations in Fortran?",
    "answer": "Always use Fortran 90 functions like `matmul`, `dot_product`, `transpose` or the provided BLAS/LAPACK libraries."
  },
  {
    "question": "Why should BLAS routines be used for matrix multiplication instead of custom implementations?",
    "answer": "A BLAS routine for matrix multiplication can be up to 100 times faster than a primary algorithm with three nested loops."
  },
  {
    "question": "What is a common cause of segmentation faults in Fortran executables?",
    "answer": "Segmentation faults often arise from interface problems when passing pointers, dynamically allocated arrays, or function pointers as subroutine arguments."
  },
  {
    "question": "What message indicates a segmentation fault in a Fortran executable?",
    "answer": "The message `forrtl: severe (174): SIGSEGV, segmentation fault occurred` indicates a segmentation fault."
  },
  {
    "question": "How can segmentation faults related to interface problems be resolved in Fortran?",
    "answer": "To resolve these, the interface of the subroutine must be explicitly defined using the `INTERFACE` command in Fortran."
  }
]