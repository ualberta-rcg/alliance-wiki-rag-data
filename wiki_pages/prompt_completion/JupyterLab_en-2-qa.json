[
  {
    "question": "What is the purpose of the search box within the Software Modules tool in JupyterLab?",
    "answer": "The search box can search for any available module and display the results in the Available Modules subpanel."
  },
  {
    "question": "How can a user find specific modules that might be hidden until their dependencies are loaded?",
    "answer": "Users are recommended to first look for a specific module using `module spider module_name` from a terminal."
  },
  {
    "question": "What does the 'Loaded Modules' subpanel show?",
    "answer": "The 'Loaded Modules' subpanel shows a list of modules currently loaded in the entire JupyterLab session."
  },
  {
    "question": "What is the 'Available modules' subpanel similar to?",
    "answer": "The 'Available modules' subpanel is similar to the output of `module avail`."
  },
  {
    "question": "How can detailed information about a module be viewed in the Software Modules tool?",
    "answer": "Detailed information about a module is displayed by clicking on its name."
  },
  {
    "question": "How can a user load a module from the 'Available modules' list?",
    "answer": "To load a module, click on the 'Load' link next to its name; it will then be added to the 'Loaded Modules' list."
  },
  {
    "question": "What happens when you click on the icons in the status bar at the bottom of JupyterLab?",
    "answer": "Clicking on the icons in the status bar brings you to the 'Running Terminals and Kernels' tool."
  },
  {
    "question": "What types of applications does JupyterLab offer access to?",
    "answer": "JupyterLab offers access to a terminal, an IDE (Desktop), a Python console, and different options for creating text and markdown files."
  },
  {
    "question": "Why are some applications available by default without extra actions?",
    "answer": "A number of software modules are loaded by default to provide access to those applications without any further actions."
  },
  {
    "question": "Is a Python kernel automatically loaded when starting JupyterLab?",
    "answer": "Yes, a Python kernel, with the default version, is automatically loaded, allowing users to start Python notebooks immediately."
  },
  {
    "question": "How can a user switch to a different version of Python than the default?",
    "answer": "A user can use a different version of the Python software by loading another version of the `ipython-kernel` modules."
  },
  {
    "question": "Does the default Python environment in JupyterLab include many pre-installed packages?",
    "answer": "No, the default Python environment does not come with most pre-installed packages."
  },
  {
    "question": "How can users obtain additional Python features, such as scientific packages?",
    "answer": "Users can load specific modules, such as `scipy-stack`, to gain additional features."
  },
  {
    "question": "How can Python packages be installed directly within a notebook's environment?",
    "answer": "Python packages can be installed directly in the notebook's environment by running `pip install --no-index package-name` in a cell and then restarting the kernel."
  },
  {
    "question": "What is VS Code within the JupyterLab environment?",
    "answer": "VS Code (Visual Studio Code) is a code editor, originally developed by Microsoft, based on code-server to make it accessible through any web browser."
  },
  {
    "question": "Does the installed version of VS Code come with extensions?",
    "answer": "Yes, the installed version of VS Code comes with a large number of pre-installed extensions."
  },
  {
    "question": "How long does a new VS Code session typically take to start?",
    "answer": "A new VS Code session can take up to 3 minutes to complete its startup."
  },
  {
    "question": "Can an active VS Code session be reopened after closing the browser tab?",
    "answer": "Yes, it is possible to reopen an active VS Code session after the web browser tab was closed."
  },
  {
    "question": "When does a VS Code session terminate?",
    "answer": "The VS Code session will end when the JupyterLab session ends."
  },
  {
    "question": "What is LibreQDA?",
    "answer": "LibreQDA is an application for qualitative analysis, which was forked from Taguette."
  },
  {
    "question": "What is LibreQDA used for in its single-user version?",
    "answer": "The single-user version of LibreQDA can be used for text analysis."
  },
  {
    "question": "How long does a new LibreQDA session typically take to start?",
    "answer": "A new LibreQDA session can take up to 3 minutes to complete its startup."
  },
  {
    "question": "Can an active LibreQDA session be reopened if the web browser tab is closed?",
    "answer": "Yes, it is possible to reopen an active LibreQDA session after the web browser tab was closed."
  },
  {
    "question": "When does a LibreQDA session end?",
    "answer": "The LibreQDA session will end when the JupyterLab session ends."
  },
  {
    "question": "What is RStudio primarily used for?",
    "answer": "RStudio is an integrated development environment primarily used for the R language."
  },
  {
    "question": "When should a user load a different version of the `rstudio-server` modules if they wish to use a different R software version?",
    "answer": "Users should load another version of the `rstudio-server` modules before launching RStudio, otherwise they may need to restart their JupyterLab session."
  },
  {
    "question": "How does the RStudio launcher open the RStudio interface?",
    "answer": "The RStudio launcher will open or reopen an RStudio interface in a new web browser tab."
  },
  {
    "question": "Is it possible to reopen an active RStudio session after the browser tab has been closed?",
    "answer": "Yes, it is possible to reopen an active RStudio session after the web browser tab was closed."
  },
  {
    "question": "What action should a user take to properly end an RStudio session and release its resources?",
    "answer": "Users should end their RStudio session with the menu item `File > Log Out` on the JupyterLab browser tab."
  }
]