[
  {
    "question": "How can users search for available software modules within JupyterLab?",
    "answer": "Users can use the search box within the Software tool to search for any available module, which will display results in the *Available Modules* subpanel."
  },
  {
    "question": "How can users find modules that are initially hidden due to dependencies?",
    "answer": "Users are recommended to first look for a specific module using `module spider module_name` from a terminal."
  },
  {
    "question": "What are the three subpanels related to software modules in JupyterLab?",
    "answer": "The three subpanels are *Available Modules* (search results), *Loaded Modules* (currently active), and *Available modules* (similar to `module avail`)."
  },
  {
    "question": "How do you load a software module in JupyterLab's Software tool?",
    "answer": "You can load a module by clicking on its name for detailed information, and then clicking on the *Load* link to add it to the *Loaded Modules* list."
  },
  {
    "question": "What functionality does clicking on icons in the bottom status bar provide?",
    "answer": "Clicking on icons in the bottom status bar will bring you to the *Running Terminals and Kernels* tool."
  },
  {
    "question": "What types of applications does JupyterLab offer access to as prebuilt applications?",
    "answer": "JupyterLab offers access to a terminal, an IDE (Desktop), a Python console, and different options to create text and markdown files."
  },
  {
    "question": "Why are some applications available without further action in JupyterLab?",
    "answer": "A number of software modules are loaded by default, to give you access to those applications without any further actions."
  },
  {
    "question": "What Python kernel is automatically loaded in JupyterLab by default?",
    "answer": "A Python kernel, with the default version, is automatically loaded."
  },
  {
    "question": "How can a user use a different version of Python in JupyterLab?",
    "answer": "A user can load a different version of Python by loading another version of the `ipython-kernel` modules."
  },
  {
    "question": "How can users install Python packages directly within a JupyterLab notebook's environment?",
    "answer": "Users can install Python packages by running `pip install --no-index package-name` in a cell of their notebook and then restarting their kernel."
  },
  {
    "question": "Are Python packages installed directly in a notebook's environment persistent across JupyterLab sessions?",
    "answer": "No, the installation of packages in the default Python kernel environment is temporary and users will have to reinstall them the next time they start a new JupyterLab session."
  },
  {
    "question": "What is VS Code in the context of JupyterLab?",
    "answer": "VS Code (Visual Studio Code) is a code editor originally developed by Microsoft, which is made available through any browser via `code-server`."
  },
  {
    "question": "Does the installed VS Code version in JupyterLab include pre-installed extensions?",
    "answer": "Yes, the installed version of VS Code comes with a large number of pre-installed extensions."
  },
  {
    "question": "How long does a new VS Code session typically take to start up?",
    "answer": "A new VS Code session can take up to 3 minutes to complete its startup."
  },
  {
    "question": "Can an active VS Code session be reopened if the web browser tab is closed?",
    "answer": "Yes, it is possible to reopen an active VS Code session after the web browser tab was closed."
  },
  {
    "question": "When does a VS Code session in JupyterLab terminate?",
    "answer": "The VS Code session will end when the JupyterLab session ends."
  },
  {
    "question": "What is LibreQDA used for in JupyterLab?",
    "answer": "LibreQDA is an application for qualitative analysis, forked from Taguette, which can be used for text analysis."
  },
  {
    "question": "What is the startup time for a new LibreQDA session?",
    "answer": "A new LibreQDA session can take up to 3 minutes to complete its startup."
  },
  {
    "question": "Can a LibreQDA session be reopened after closing the browser tab?",
    "answer": "Yes, it is possible to reopen an active LibreQDA session after the web browser tab was closed."
  },
  {
    "question": "When does a LibreQDA session conclude in JupyterLab?",
    "answer": "The LibreQDA session will end when the JupyterLab session ends."
  },
  {
    "question": "What is RStudio?",
    "answer": "RStudio is an integrated development environment primarily used for the R language."
  },
  {
    "question": "How can a user use a different version of R software with RStudio in JupyterLab?",
    "answer": "A user can load a different version of R software by loading another version of the `rstudio-server` modules, but this must be done *before* launching RStudio."
  },
  {
    "question": "What happens if you load a different `rstudio-server` module after launching RStudio?",
    "answer": "If `rstudio-server` modules are loaded after launching RStudio, the user may have to restart their JupyterLab session."
  },
  {
    "question": "What does the RStudio launcher do in JupyterLab?",
    "answer": "The RStudio launcher will open or reopen an RStudio interface in a new web browser tab."
  },
  {
    "question": "How should a user properly end an RStudio session to release resources?",
    "answer": "Users should end their session with the menu item `File > Log Out` on the JupyterLab browser tab, as simply quitting RStudio or closing browser tabs will not release resources."
  }
]