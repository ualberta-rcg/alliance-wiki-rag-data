[
  {
    "question": "How do you install the Jupyter RSession proxy for RStudio Server?",
    "answer": "After JupyterLab is installed in a new virtual environment, install the Jupyter RSession proxy by running 'pip install --no-index jupyter-rsession-proxy'."
  },
  {
    "question": "What indicates a successful RStudio Server setup in JupyterLab?",
    "answer": "You should see an RStudio application in the 'Launcher' tab within JupyterLab."
  },
  {
    "question": "How do you activate your Python virtual environment for JupyterLab after logging onto a cluster?",
    "answer": "You need to activate it again by running 'source $HOME/jupyter_py3/bin/activate'."
  },
  {
    "question": "How can you verify that your Python virtual environment is ready and Jupyter packages are installed?",
    "answer": "Run the command 'pip freeze | grep jupyter' to list installed Jupyter-related packages."
  },
  {
    "question": "How do you start a JupyterLab server on a compute node?",
    "answer": "Submit an interactive job using 'salloc', adjusting parameters like time, tasks, CPUs, memory, and account, then run the JupyterLab script, e.g., 'salloc --time=1:0:0 --ntasks=1 --cpus-per-task=2 --mem-per-cpu=1024M --account=def-yourpi srun $VIRTUAL_ENV/bin/jupyterlab.sh'."
  },
  {
    "question": "Why is an SSH tunnel required to access JupyterLab on a compute node?",
    "answer": "An SSH tunnel is needed because compute nodes are not directly accessible from the internet."
  },
  {
    "question": "What Python package is recommended for creating an SSH tunnel from Linux or macOS to access JupyterLab?",
    "answer": "The 'sshuttle' Python package is recommended."
  },
  {
    "question": "How do you create an SSH tunnel from Linux or macOS to connect to JupyterLab?",
    "answer": "Open a new terminal and run 'sshuttle --dns -Nr <username>@<cluster>.alliancecan.ca', then copy and paste the provided HTTP address from the JupyterLab server into your web browser."
  },
  {
    "question": "What information do you need to extract from the JupyterLab URL for Windows SSH tunneling?",
    "answer": "You need to extract the 'hostname:port' and the 'token' from the first provided HTTP address."
  },
  {
    "question": "How do you create an SSH tunnel from Windows using MobaXTerm to access JupyterLab?",
    "answer": "Open a new Terminal tab in MobaXTerm and run 'ssh -L 8888:<hostname:port> <username>@<cluster>.alliancecan.ca' after extracting the hostname:port and token from the JupyterLab URL."
  },
  {
    "question": "How do you connect to JupyterLab from a web browser on Windows after setting up an SSH tunnel?",
    "answer": "Open your web browser and go to 'http://localhost:8888/?token=<token>', replacing <token> with the extracted alphanumeric value."
  },
  {
    "question": "How do you shut down a JupyterLab server?",
    "answer": "Press 'Ctrl-C twice' in the terminal where the interactive job was launched."
  },
  {
    "question": "How do you shut down an SSH tunnel created using MobaXTerm?",
    "answer": "Press 'Ctrl-D' in the MobaXTerm terminal that created the tunnel."
  },
  {
    "question": "What are the two main steps for installing a new kernel in JupyterLab?",
    "answer": "The two steps are: installation of packages for the language interpreter to communicate with Jupyter, and creation of a kernel spec file in a subfolder of '~/.local/share/jupyter/kernels'."
  },
  {
    "question": "What are the prerequisites for configuring a Julia kernel?",
    "answer": "A Python virtual environment and a 'kernels' folder are needed. The configuration must be done in a remote shell session on a login node to access the internet for Julia packages."
  },
  {
    "question": "How do you install IJulia to configure a Julia kernel?",
    "answer": "After loading the Julia module, run 'echo -e 'using Pkg\\nPkg.add(\"IJulia\")' | julia'."
  },
  {
    "question": "What must be done immediately after installing IJulia before using the Julia kernel?",
    "answer": "You must start or restart a new JupyterLab session."
  },
  {
    "question": "How do you install additional Julia packages?",
    "answer": "From a login node with the Julia module loaded, run 'echo -e 'using Pkg\\nPkg.add(\"Glob\")' | julia' (replacing 'Glob' with your desired package)."
  },
  {
    "question": "What is the initial step for configuring a custom Python kernel if using Jupyter Terminal via JupyterHub?",
    "answer": "Start from a clean Bash environment by running 'env -i HOME=$HOME bash -l'."
  },
  {
    "question": "How do you create the common 'kernels' folder for JupyterLab?",
    "answer": "Run the command 'mkdir -p ~/.local/share/jupyter/kernels'."
  },
  {
    "question": "How do you install the 'ipykernel' library for a Python kernel?",
    "answer": "Run 'pip install --no-index ipykernel' within your activated Python virtual environment."
  },
  {
    "question": "How do you generate the kernel spec file for a Python kernel?",
    "answer": "Run 'python -m ipykernel install --user --name <unique_name> --display-name \"Python 3.x Kernel\"', replacing '<unique_name>' with a unique identifier."
  },
  {
    "question": "How do you install more Python libraries into a configured Python virtual environment for a kernel?",
    "answer": "Ensure the virtual environment is active and run 'pip install --no-index numpy' (replacing 'numpy' with the desired library)."
  },
  {
    "question": "What are the prerequisites for configuring an R kernel?",
    "answer": "A Python virtual environment and a 'kernels' folder are required. Also, the configuration must be done in a remote shell session on a login node to access CRAN."
  },
  {
    "question": "How do you install the R kernel dependencies like 'crayon', 'pbdZMQ', and 'devtools'?",
    "answer": "Load an R module (e.g., 'module load r/4.1'), then start an R shell with 'R --no-save' and run 'install.packages(c('crayon', 'pbdZMQ', 'devtools'), repos='http://cran.us.r-project.org')'."
  },
  {
    "question": "How do you install the R kernel itself?",
    "answer": "After installing dependencies, from the R shell, run 'devtools::install_github(paste0('IRkernel/', c('repr', 'IRdisplay', 'IRkernel')))'."
  },
  {
    "question": "How do you install the R kernel spec file?",
    "answer": "From the R shell, run 'IRkernel::installspec()'."
  },
  {
    "question": "Can R packages be installed directly from Jupyter notebooks?",
    "answer": "No, the installation of R packages cannot be done from notebooks because there is no access to CRAN."
  },
  {
    "question": "How do you install additional R packages?",
    "answer": "From a login node with the R module loaded, start an R shell with 'R --no-save' and run 'install.packages('doParallel', repos='http://cran.us.r-project.org')' (replacing 'doParallel' with your desired package)."
  }
]