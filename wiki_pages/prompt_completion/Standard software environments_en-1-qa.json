[
  {
    "question": "What are standard software environments provided through?",
    "answer": "Our software environments are provided through a set of modules which allow you to switch between different versions of software packages."
  },
  {
    "question": "How are the modules in software environments organized?",
    "answer": "These modules are organized in a tree structure with the trunk made up of typical utilities provided by any Linux environment. Branches are compiler versions and sub-branches are versions of MPI or CUDA."
  },
  {
    "question": "What do standard environments identify?",
    "answer": "Standard environments identify combinations of specific compiler and MPI modules that are used most commonly by our team to build other software."
  },
  {
    "question": "What are the combinations of compiler and MPI modules grouped into?",
    "answer": "These combinations are grouped in modules named `StdEnv`."
  },
  {
    "question": "How many standard software environments were there as of February 2023?",
    "answer": "As of February 2023, there are four such standard environments, versioned 2023, 2020, 2018.3 and 2016.4."
  },
  {
    "question": "Which versions of the standard environments are actively supported?",
    "answer": "Only versions 2020 and 2023 are actively supported."
  },
  {
    "question": "What is the most recent iteration of the software environment?",
    "answer": "`StdEnv/2023` is the most recent iteration of our software environment."
  },
  {
    "question": "What are the default components used by `StdEnv/2023`?",
    "answer": "It uses GCC 12.3.0, Intel 2023.1, and Open MPI 4.1.5 as defaults."
  },
  {
    "question": "How do you activate the `StdEnv/2023` environment?",
    "answer": "To activate this environment, use the command `module load StdEnv/2023`."
  },
  {
    "question": "What is the minimum CPU instruction set supported by `StdEnv/2023`?",
    "answer": "The minimum CPU instruction set supported by this environment is AVX2, or more generally, `x86-64-v3`."
  },
  {
    "question": "What is the default compiler in `StdEnv/2023`?",
    "answer": "GCC becomes the default compiler, instead of Intel."
  },
  {
    "question": "How is CUDA handled in the `StdEnv/2023` environment?",
    "answer": "CUDA becomes an add-on to OpenMPI, rather than the other way around, meaning CUDA-aware MPI is loaded at run time if CUDA is loaded."
  },
  {
    "question": "Which version of GCC is used by `StdEnv/2023` by default?",
    "answer": "GCC 12.3 is the default version in `StdEnv/2023`, upgraded from GCC 9.3."
  },
  {
    "question": "Which version of OpenMPI is used by `StdEnv/2023` by default?",
    "answer": "OpenMPI 4.1.5 is the default version in `StdEnv/2023`, upgraded from OpenMPI 4.0.3."
  },
  {
    "question": "Which version of Intel compilers is used by `StdEnv/2023` by default?",
    "answer": "Intel compilers 2023 is the default version in `StdEnv/2023`, upgraded from Intel 2020."
  },
  {
    "question": "What replaced Intel MKL 2020 in `StdEnv/2023`?",
    "answer": "Intel MKL 2020 was replaced by Flexiblas 3.3.1 (with MKL 2023 or BLIS 0.9.0) in `StdEnv/2023`."
  },
  {
    "question": "Which version of CUDA is used by `StdEnv/2023` by default?",
    "answer": "CUDA 12 is the default version in `StdEnv/2023`, upgraded from CUDA 11."
  },
  {
    "question": "What are the default components used by `StdEnv/2020`?",
    "answer": "It uses GCC 9.3.0, Intel 2020.1, and Open MPI 4.0.3 as defaults."
  },
  {
    "question": "How do you activate the `StdEnv/2020` environment?",
    "answer": "To activate this environment, use the command `module load StdEnv/2020`."
  },
  {
    "question": "What is a performance improvement feature for binaries compiled with Intel compiler in `StdEnv/2020`?",
    "answer": "Binaries compiled with the Intel compiler now automatically support both AVX2 and AVX512 instruction sets, known as multi-architecture binaries or fat binaries."
  },
  {
    "question": "What is the benefit of multi-architecture binaries in `StdEnv/2020` on clusters with multiple processor generations?",
    "answer": "When running on a cluster such as Cedar and Graham which has multiple generations of processors, you don't have to manually load one of the `arch` modules if you use software packages generated by the Intel compiler."
  },
  {
    "question": "How did `StdEnv/2020` improve the visibility of certain software packages?",
    "answer": "Many software packages which were previously installed either with GCC or with Intel are now installed at a lower level of the software hierarchy, which makes the same module visible, irrespective of which compiler is loaded."
  },
  {
    "question": "What type of software packages benefited from improved visibility in `StdEnv/2020`?",
    "answer": "Many bioinformatics software packages as well as the R modules, which previously required loading the `gcc` module, benefited from improved visibility."
  },
  {
    "question": "What component was updated in `StdEnv/2020` to introduce optimizations in mathematical functions?",
    "answer": "A more recent version of the GNU C Library was installed, which introduces optimizations in some mathematical functions."
  },
  {
    "question": "What was used for the compatibility layer in `StdEnv/2016.4` and `StdEnv/2018.3`?",
    "answer": "For the 2016.4 and 2018.3 versions, the Nix package manager was used for the compatibility layer."
  },
  {
    "question": "What was used for the compatibility layer in `StdEnv/2020`?",
    "answer": "For the 2020 version, Gentoo Prefix was used for the compatibility layer."
  },
  {
    "question": "What was the Linux kernel requirement for `StdEnv/2016.4` and `StdEnv/2018.3`?",
    "answer": "Versions 2016.4 and 2018.3 required a Linux kernel version 2.6.32 or more recent, supporting CentOS versions starting at CentOS 6."
  },
  {
    "question": "What is the Linux kernel requirement for `StdEnv/2020`?",
    "answer": "With the 2020 version, we require a Linux kernel 3.10 or better, meaning it no longer supports CentOS 6, but requires CentOS 7 instead."
  },
  {
    "question": "How were Python extensions handled differently in `StdEnv/2020`?",
    "answer": "With the 2020 environment, more Python extensions were installed inside of their corresponding core modules, such as PyQt5 inside of the qt/5.12.8 module."
  },
  {
    "question": "How can you find module extensions like PyQt5 in the `StdEnv/2020` environment?",
    "answer": "You can find such extensions by running `module spider pyqt5`, which will tell you to load the `qt/5.12.8` module."
  }
]