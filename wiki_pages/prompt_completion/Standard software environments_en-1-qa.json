[
  {
    "question": "What are standard software environments?",
    "answer": "Standard software environments are provided through modules that allow switching between different software package versions. They identify common combinations of specific compiler and MPI modules used by the team, grouped under the name `StdEnv`."
  },
  {
    "question": "How are software environments provided?",
    "answer": "Software environments are provided through a set of modules that allow users to switch between different versions of software packages."
  },
  {
    "question": "How are modules organized?",
    "answer": "Modules are organized in a tree structure, with the trunk containing typical Linux utilities, branches representing compiler versions, and sub-branches representing versions of MPI or CUDA."
  },
  {
    "question": "How many standard environments are there as of February 2023, and what are their versions?",
    "answer": "As of February 2023, there are four standard environments: 2023, 2020, 2018.3, and 2016.4."
  },
  {
    "question": "Which standard environments are actively supported?",
    "answer": "Only versions 2020 and 2023 of the standard environments are actively supported."
  },
  {
    "question": "Which standard environment is the most recent iteration?",
    "answer": "`StdEnv/2023` is the most recent iteration of our software environment."
  },
  {
    "question": "What are the default components for `StdEnv/2023`?",
    "answer": "`StdEnv/2023` uses GCC 12.3.0, Intel 2023.1, and Open MPI 4.1.5 as defaults."
  },
  {
    "question": "How do you activate the `StdEnv/2023` environment?",
    "answer": "To activate the `StdEnv/2023` environment, use the command `module load StdEnv/2023`."
  },
  {
    "question": "What is the minimum CPU instruction set supported by `StdEnv/2023`?",
    "answer": "The minimum CPU instruction set supported by `StdEnv/2023` is AVX2, or more generally, x86-64-v3."
  },
  {
    "question": "Which compiler became the default in `StdEnv/2023`?",
    "answer": "GCC became the default compiler in `StdEnv/2023`, instead of Intel."
  },
  {
    "question": "How has CUDA's role changed in `StdEnv/2023`?",
    "answer": "In `StdEnv/2023`, CUDA becomes an add-on to OpenMPI, meaning CUDA-aware MPI is loaded at run time if CUDA is loaded, allowing for shared MPI libraries across CUDA and non-CUDA branches."
  },
  {
    "question": "What version of GCC is default in `StdEnv/2023`?",
    "answer": "GCC 12.3 is the default version in `StdEnv/2023`, upgraded from GCC 9.3."
  },
  {
    "question": "What version of OpenMPI is default in `StdEnv/2023`?",
    "answer": "OpenMPI 4.1.5 is the default version in `StdEnv/2023`, upgraded from OpenMPI 4.0.3."
  },
  {
    "question": "What version of Intel compilers is default in `StdEnv/2023`?",
    "answer": "Intel compilers 2023 are the default in `StdEnv/2023`, upgraded from Intel compilers 2020."
  },
  {
    "question": "What is the default for Intel MKL in `StdEnv/2023`?",
    "answer": "Flexiblas 3.3.1 (with MKL 2023 or BLIS 0.9.0) is the default for Intel MKL in `StdEnv/2023`, upgraded from Intel MKL 2020."
  },
  {
    "question": "What version of CUDA is default in `StdEnv/2023`?",
    "answer": "CUDA 12 is the default version in `StdEnv/2023`, upgraded from CUDA 11."
  },
  {
    "question": "When did `StdEnv/2020` become the default software environment?",
    "answer": "`StdEnv/2020` became the default software environment in April 2021."
  },
  {
    "question": "What are the default components for `StdEnv/2020`?",
    "answer": "`StdEnv/2020` uses GCC 9.3.0, Intel 2020.1, and Open MPI 4.0.3 as defaults."
  },
  {
    "question": "How do you activate the `StdEnv/2020` environment?",
    "answer": "To activate the `StdEnv/2020` environment, use the command `module load StdEnv/2020`."
  },
  {
    "question": "What performance improvement was introduced for Intel compiler binaries in `StdEnv/2020`?",
    "answer": "In `StdEnv/2020`, binaries compiled with the Intel compiler automatically support both AVX2 and AVX512 instruction sets, known as multi-architecture or fat binaries."
  },
  {
    "question": "What was the benefit of multi-architecture binaries in `StdEnv/2020`?",
    "answer": "Multi-architecture binaries in `StdEnv/2020` eliminate the need to manually load specific `arch` modules when running on clusters with multiple generations of processors, like Cedar and Graham."
  },
  {
    "question": "How did `StdEnv/2020` improve the visibility of software packages?",
    "answer": "Many software packages were installed at a lower level of the software hierarchy in `StdEnv/2020`, making the same module visible regardless of the loaded compiler, as seen with bioinformatics software and R modules."
  },
  {
    "question": "What change was made to the GNU C Library in `StdEnv/2020`?",
    "answer": "A more recent version of the GNU C Library was installed in `StdEnv/2020`, introducing optimizations in some mathematical functions."
  },
  {
    "question": "What package manager was used for the compatibility layer in `StdEnv/2016.4` and `StdEnv/2018.3`?",
    "answer": "The Nix package manager was used for the compatibility layer in `StdEnv/2016.4` and `StdEnv/2018.3`."
  },
  {
    "question": "What tool was used for the compatibility layer in `StdEnv/2020`?",
    "answer": "For `StdEnv/2020`, Gentoo Prefix was used for the compatibility layer."
  },
  {
    "question": "What is the Linux kernel requirement for `StdEnv/2020`?",
    "answer": "`StdEnv/2020` requires a Linux kernel version 3.10 or better."
  },
  {
    "question": "Which CentOS version is no longer supported by `StdEnv/2020`?",
    "answer": "`StdEnv/2020` no longer supports CentOS 6, requiring CentOS 7 instead, due to its Linux kernel requirement."
  }
]