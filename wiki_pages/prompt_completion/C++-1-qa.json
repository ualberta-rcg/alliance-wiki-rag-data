[
  {
    "question": "What type of programming language is C++?",
    "answer": "C++ is a general-purpose, high-level, multi-paradigm programming language."
  },
  {
    "question": "Who created the C++ programming language?",
    "answer": "C++ was created by Bjarne Stroustrup."
  },
  {
    "question": "When and where was C++ first created?",
    "answer": "C++ was created at Bell Labs in 1979."
  },
  {
    "question": "How was C++ developed initially?",
    "answer": "C++ was created by extending the C programming language."
  },
  {
    "question": "What are some of the ISO C++ standards that have been released?",
    "answer": "ISO C++ standards include C++98, C++03, C++11, C++14, C++17, and C++20."
  },
  {
    "question": "What is the current release cycle for ISO C++ standards?",
    "answer": "The ISO C++ committee is currently releasing its standards on a three-year cycle."
  },
  {
    "question": "When is the next C++ standard expected after C++20?",
    "answer": "After C++20, the next standard will be in 2023."
  },
  {
    "question": "Where can I find a definitive online reference for C++?",
    "answer": "A definitive, up-to-date, free online wiki reference for C++ is cppreference.com."
  },
  {
    "question": "Is C a distinct language from C++?",
    "answer": "Yes, the C language is a distinct language from the C++ language."
  },
  {
    "question": "Can C code be used in C++?",
    "answer": "A lot of C code can be used as-is in C++, though differences between C and C++ can affect compilation or program execution."
  },
  {
    "question": "If I am compiling C code as C++ code, how should I refer to it when asking for help?",
    "answer": "If you are compiling C code as C++ code, refer to it as C++ code when asking for help."
  },
  {
    "question": "What was lacking in ISO C++ standards regarding concurrency prior to 2011?",
    "answer": "Prior to 2011, ISO C++ standards had no definitions of concurrency and memory models."
  },
  {
    "question": "What is the recommended C++ standard for compiling concurrent C++ code?",
    "answer": "It is preferable to compile concurrent C++ code as C++11 code (or newer)."
  },
  {
    "question": "Why is it beneficial to use newer C++ compilers and standards?",
    "answer": "Newer compilers and standards allow taking full advantage of optimizations from features like `constexpr` and offer updates that improve code correctness."
  },
  {
    "question": "Do C++ compilers implement language features uniformly?",
    "answer": "No, various compilers implement language features differently, and compiler releases may only partially implement a specific ISO C++ standard."
  },
  {
    "question": "Where can I find information about C++ compiler support for specific language features?",
    "answer": "A wiki page at cppreference.com lists compiler support for specific language features for virtually all major C++ compilers."
  },
  {
    "question": "Do C++ compilers on Linux usually provide their own C++ Standard Library implementation?",
    "answer": "Many C++ compilers under Linux do not provide their own C++ Standard Library implementation; instead, they use one normally installed on the system."
  },
  {
    "question": "Which C++ Standard Library is commonly used by compilers on Linux systems?",
    "answer": "Typically, libstdc++, which is distributed with GCC, is used."
  },
  {
    "question": "What is a critical guideline for users regarding administrator-installed libraries in C++ development?",
    "answer": "Users should never hard-code paths to administrator-installed libraries in order to compile software."
  },
  {
    "question": "Where can I find details about Standard Library components supported in libstdc++?",
    "answer": "The GCC documentation has a section that details Standard Library components supported in libstdc++."
  },
  {
    "question": "What is the recommended starting point for someone new to C++ or needing an update?",
    "answer": "They should start by checking out the ISO C++ advocacy site's 'Get Started' page, especially its recommended books."
  },
  {
    "question": "What is the typical usage of the `volatile` keyword in C/C++?",
    "answer": "The `volatile` keyword in C and C++ has very specific meanings, and needing to use it is a rare event."
  },
  {
    "question": "When might the `volatile` keyword be used in high-performance computing code?",
    "answer": "In rare instances, `volatile` might be used in high-performance computing code to declare a variable to tell the compiler not to optimize away load/store side-effects."
  },
  {
    "question": "Should `volatile` be used for synchronization in C/C++?",
    "answer": "No, `volatile` should never be used for synchronization; instead, C11/C++11 atomic operations and locks should be used."
  },
  {
    "question": "Is the meaning of `volatile` consistent across different programming languages?",
    "answer": "No, `volatile` in other programming languages, such as Java, is often different from its meaning in C/C++."
  }
]