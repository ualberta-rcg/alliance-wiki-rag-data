[
  {
    "question": "What is FEniCS?",
    "answer": "FEniCS is an open-source software platform for solving partial differential equations."
  },
  {
    "question": "What are the two main installation options for the FEniCS platform?",
    "answer": "You have the choice between installing it in a virtual environment or using a Singularity container."
  },
  {
    "question": "Which FEniCS version is installed when using the virtual environment method described?",
    "answer": "Version 2019.1.0 is installed under StdEnv/2020 with OpenMPI and GCC 9.3.0."
  },
  {
    "question": "How do you execute the FEniCS installation script on a cluster?",
    "answer": "You can copy the `fenics-install.sh` script to the cluster and run it by launching `bash fenics-install.sh`."
  },
  {
    "question": "What warning is displayed during the FEniCS installation process?",
    "answer": "A warning is displayed indicating that the FEniCS/DOLFIN installation will wipe out the `$FENICS_INSTALL` directory, prompting the user to press Ctrl-C to abort or any key to continue."
  },
  {
    "question": "Can the installation directory for FEniCS be changed from the default in the script?",
    "answer": "Yes, the script can be modified to specify a different installation directory."
  },
  {
    "question": "What is the default installation path for FEniCS as defined in the `fenics-install.sh` script?",
    "answer": "The default installation path is `$HOME/fenics`."
  },
  {
    "question": "What are the necessary steps to use FEniCS/DOLFIN after installation?",
    "answer": "You need to run `module load $MODULES`, `source $FENICS_INSTALL/bin/activate`, and `source $FENICS_INSTALL/share/dolfin/dolfin.conf`."
  },
  {
    "question": "Which Python version is loaded for the FEniCS virtual environment installation?",
    "answer": "Python 3.10.2 is loaded."
  },
  {
    "question": "List some of the modules loaded by the `fenics-install.sh` script before compilation.",
    "answer": "Modules loaded include StdEnv/2020, gcc/9.3.0, hdf5-mpi/1.10.6, boost/1.72.0, eigen, python/3.10.2, scipy-stack/2023b, mpi4py/3.0.3, petsc/3.17.1, slepc/3.17.2, scotch/6.0.9, fftw-mpi/3.3.8, ipp/2020.1.217, swig, and flexiblas."
  },
  {
    "question": "What is the purpose of the `make_fenics_directory` function in the installation script?",
    "answer": "It removes any existing FEniCS installation directory (`$FENICS_INSTALL`), creates a new one, and then changes the current directory to it."
  },
  {
    "question": "How does the `fenics-install.sh` script create the Python virtual environment?",
    "answer": "It uses the command `virtualenv --no-download $FENICS_INSTALL`."
  },
  {
    "question": "Which Python packages are specifically installed using `pip3` in the `make_py_packages` function?",
    "answer": "The script installs `ply`, `numpy`, and then installs `fiat`, `dijitso`, `ufl`, and `ffc` from their respective cloned directories using `pip3 install .`."
  },
  {
    "question": "What is the version of pybind11 specified in the FEniCS installation script?",
    "answer": "The `PYBIND11_VERSION` is 2.2.3."
  },
  {
    "question": "How are core FEniCS components like fiat, dijitso, ufl, ffc, dolfin, and mshr obtained during installation?",
    "answer": "They are obtained by cloning their respective repositories from Bitbucket using `git clone --branch=release`."
  }
]