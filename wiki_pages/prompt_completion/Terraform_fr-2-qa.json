[
  {
    "question": "How do you set the OS_CLOUD environment variable?",
    "answer": "You can set the OS_CLOUD environment variable using the command `$ export OS_CLOUD=arbutus`."
  },
  {
    "question": "Why is it useful to have an OpenStack CLI terminal open when working with Terraform?",
    "answer": "It provides a practical reference for the specifications you create, as you'll need flavor and image IDs to verify actions performed by Terraform."
  },
  {
    "question": "Can Horizon be used to directly find flavor IDs?",
    "answer": "Horizon can be used to search for images and generally verify Terraform's effects, but it is not possible to directly search for flavor IDs."
  },
  {
    "question": "What is OpenStack CLI and how can it be installed?",
    "answer": "OpenStack CLI (also called OSC) is a Python client that can be installed with Python Pip and is available for several distributions and operating systems."
  },
  {
    "question": "What should be created as a starting point for Terraform configuration and state files?",
    "answer": "Finally, create a directory for your configuration and state files that will serve as a starting point."
  },
  {
    "question": "What is the first step in defining the OpenStack provider for Terraform?",
    "answer": "First, describe the provider; this is where you tell Terraform to use OpenStack and how to use it."
  },
  {
    "question": "What happens when the OpenStack provider plugin is initialized by Terraform?",
    "answer": "Upon initialization, the latest version of the OpenStack provider plugin will be installed in the working directory, and included credentials will be used for subsequent Terraform operations to connect to the specified cloud."
  },
  {
    "question": "How can OpenStack connection and identification information be provided to Terraform?",
    "answer": "OpenStack connection and identification information can be provided to Terraform in the specification, in the environment, or partially in the specification with the rest in the environment."
  },
  {
    "question": "How can a password be specified for OpenStack in Terraform if it's left out of the configuration file?",
    "answer": "If the password is left out of the configuration file, it should be specified in the environment using the `$OS_PASSWORD` variable."
  },
  {
    "question": "How can OpenStack be configured using a `clouds.yaml` file in Terraform?",
    "answer": "You can use `clouds.yaml` and specify the cloud within the provider block, for example: `provider \"openstack\" { cloud = \"my_cloud\" }`."
  },
  {
    "question": "What must be present in the execution environment if the OpenStack provider definition is empty in Terraform?",
    "answer": "If the provider definition is empty (`provider \"openstack\" {}`), either `$OS_CLOUD` or variables defined by the appropriate RC file must be in the execution environment for Terraform to continue."
  },
  {
    "question": "Where can detailed options for the OpenStack provider in Terraform be found?",
    "answer": "Detailed options for the OpenStack provider are described on the Terraform documentation page for the OpenStack Provider."
  },
  {
    "question": "What is the most important security consideration for your Terraform configuration?",
    "answer": "The most important consideration for your configuration is security; you should avoid storing your credentials in the Terraform configuration."
  },
  {
    "question": "Why is it considered bad practice to store passwords and other credentials in configuration files?",
    "answer": "It is not a good practice to store passwords and other credentials in configuration files because they can easily be copied and moved, increasing security risks."
  }
]