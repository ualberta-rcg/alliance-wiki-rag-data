[
  {
    "question": "What is Apache MXNet designed for?",
    "answer": "Apache MXNet is a deep learning framework designed for both efficiency and flexibility."
  },
  {
    "question": "What kind of programming paradigms can you mix in MXNet?",
    "answer": "MXNet allows you to mix symbolic and imperative programming."
  },
  {
    "question": "What component in MXNet automatically parallelizes operations?",
    "answer": "MXNet contains a dynamic dependency scheduler that automatically parallelizes both symbolic and imperative operations on the fly."
  },
  {
    "question": "How does MXNet make symbolic execution fast and memory efficient?",
    "answer": "A graph optimization layer makes symbolic execution fast and memory efficient."
  },
  {
    "question": "How can you list available MXNet wheels?",
    "answer": "You can list available wheels using the `avail_wheels mxnet` command."
  },
  {
    "question": "Which Python versions are listed for MXNet 1.9.1 wheels?",
    "answer": "MXNet 1.9.1 wheels are available for Python 3.9 (cp39), Python 3.8 (cp38), and Python 3.10 (cp310)."
  },
  {
    "question": "What is the first step to install MXNet in a Python virtual environment?",
    "answer": "The first step is to create and activate a Python virtual environment."
  },
  {
    "question": "How do you activate a virtual environment created at `~/env`?",
    "answer": "You activate it by running `source ~/env/bin/activate`."
  },
  {
    "question": "What command is used to install MXNet within an activated virtual environment, without using an index?",
    "answer": "You use the command `pip install --no-index mxnet`."
  },
  {
    "question": "How can you validate an MXNet installation using a Python command?",
    "answer": "You can validate it by running `python -c \"import mxnet as mx;print((mx.nd.ones((2, 3))*2).asnumpy());\"`."
  },
  {
    "question": "What is the expected output when validating MXNet with `mx.nd.ones((2, 3))*2`?",
    "answer": "The expected output is `[[2. 2. 2.] [2. 2. 2.]]`."
  },
  {
    "question": "How does the `mxnet-conv-ex.py` script determine whether to use CPU or GPU?",
    "answer": "It checks `mx.context.num_gpus()`. If greater than 0, it uses `mx.gpu()`; otherwise, it defaults to `mx.cpu()`."
  },
  {
    "question": "What MXNet backend is used for Convolution layers on CPU?",
    "answer": "On CPU, MXNet will use MKLDNN for Convolution layers."
  },
  {
    "question": "What SBATCH parameters are used for a CPU job in `mxnet-conv.sh`?",
    "answer": "The parameters include `--job-name=mxnet-conv`, `--account=def-someprof`, `--time=01:00:00`, `--cpus-per-task=2`, and `--mem=20G`."
  },
  {
    "question": "What additional SBATCH parameter is needed for a GPU job compared to a CPU job?",
    "answer": "For a GPU job, you need to add `--gres=gpu:1`."
  },
  {
    "question": "How do you submit the `mxnet-conv.sh` job to the scheduler?",
    "answer": "You submit the job using the command `sbatch mxnet-conv.sh`."
  },
  {
    "question": "How does MXNet achieve high performance on multiple CPUs for Deep Learning operations?",
    "answer": "MXNet leverages OpenMP and MKLDNN for CPU-based parallel implementations of operators."
  },
  {
    "question": "When is it recommended to use multiple CPUs instead of a GPU for training small scale models?",
    "answer": "It is strongly recommended to use multiple CPUs when the model and dataset are not large enough, as the GPU speed-up might not be significant and could block resources."
  },
  {
    "question": "What are the potential negative impacts of unnecessarily requesting a GPU in a shared HPC environment?",
    "answer": "It can unnecessarily block a resource, use up group allocation, and affect the priority of other users' jobs."
  },
  {
    "question": "How can you modify the `mxnet-example.sh` script to run using CPU only?",
    "answer": "To run using CPU only, remove the line `#SBATCH --gres=gpu:1` from the script."
  },
  {
    "question": "What is the purpose of the `if __name__=='__main__': main()` construct in Python scripts like `mxnet-example.py`?",
    "answer": "This construct ensures that the `main()` function is executed only when the script is run directly, not when imported as a module."
  },
  {
    "question": "What dataset is used for training in the `mxnet-example.py` script?",
    "answer": "The `mxnet-example.py` script uses the CIFAR10 dataset for training."
  },
  {
    "question": "What kind of neural network architecture is built in `mxnet-example.py`?",
    "answer": "The script builds a sequential Convolutional Neural Network (CNN) with Conv2D, MaxPool2D, Flatten, and Dense layers."
  },
  {
    "question": "How is performance measured and reported in the `mxnet-example.py` script?",
    "answer": "Performance is measured as `images_per_sec` for each batch, and the script prints the mean of these values at the end."
  }
]