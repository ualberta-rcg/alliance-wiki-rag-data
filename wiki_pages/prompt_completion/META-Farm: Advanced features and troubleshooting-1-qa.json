[
  {
    "question": "How do you enable automatic resubmission of failed cases in META-Farm?",
    "answer": "To enable this feature, add the `-auto` switch to your `submit.run` or `resubmit.run` command."
  },
  {
    "question": "What is an example command to use the `-auto` switch for automatic resubmission?",
    "answer": "An example command is `$ submit.run N -auto`."
  },
  {
    "question": "Can the `-auto` feature for resubmitting failed cases be used in both SIMPLE and META modes?",
    "answer": "Yes, this can be used in either SIMPLE or META mode."
  },
  {
    "question": "What happens when the `-auto` switch is added to `(re)submit.run`?",
    "answer": "When you add `-auto`, `(re)submit.run` submits one more (serial) job, in addition to the farm jobs, with the purpose of running the `resubmit.run` command automatically."
  },
  {
    "question": "What script is used for the automatic resubmission job and how should it be customized?",
    "answer": "The job script for this additional job is `resubmit_script.sh`, which should be present in the farm directory, and the only customization needed is to correct the account name in the `#SBATCH -A` line."
  },
  {
    "question": "How should the `NJOBS_MAX` parameter be adjusted when using the `-auto` feature?",
    "answer": "The value of the `NJOBS_MAX` parameter defined in the `config.h` file should be at least one smaller than the largest number of jobs you can submit on the cluster."
  },
  {
    "question": "When does automatic resubmission stop when using the `-auto` switch?",
    "answer": "When using `-auto`, if at some point the only cases left to be processed are the ones which failed earlier, auto-resubmission will stop, and farm computations will end to avoid an infinite loop on badly-formed cases."
  },
  {
    "question": "Where are system messages from the auto-resubmit feature logged?",
    "answer": "System messages from the auto-resubmit feature are logged in `farm.log`, in the root farm directory."
  },
  {
    "question": "What is the purpose of the automatic post-processing job feature?",
    "answer": "It is the ability to run a post-processing job automatically once all the cases from `table.dat` have been successfully processed."
  },
  {
    "question": "Under what condition will the automatic post-processing job not run?",
    "answer": "If any cases failed (i.e., had a non-zero exit status), the post-processing job will not run."
  },
  {
    "question": "How do you enable the automatic post-processing job feature?",
    "answer": "To enable this feature, simply create a script for the post-processing job with the name `final.sh` inside the farm directory."
  },
  {
    "question": "What kind of job can the `final.sh` script for post-processing be?",
    "answer": "This job can be of any kind-- serial, parallel, or an array job."
  },
  {
    "question": "What script does the automatic post-processing feature use?",
    "answer": "This feature uses the same script, `resubmit_script.sh`, described for the `-auto` feature."
  },
  {
    "question": "How should `NJOBS_MAX` be adjusted for the automatic post-processing feature?",
    "answer": "Adjust the parameter `NJOBS_MAX` in `config.h` accordingly (e.g., if the cluster has a job limit of 999, set it to 998)."
  },
  {
    "question": "If both auto-resubmit and auto-post-processing features are used, how many additional jobs are submitted?",
    "answer": "If you use both the auto-resubmit and the auto-post-processing features, they will together only submit one additional job."
  },
  {
    "question": "What is WHOLE_NODE mode in meta-farm?",
    "answer": "WHOLE_NODE mode supports packaging individual serial farming jobs into whole node jobs, which made it possible to use the package on Trillium."
  },
  {
    "question": "How do you enable WHOLE_NODE mode?",
    "answer": "To enable it, edit the file `config.h` inside your farm directory, set `WHOLE_NODE=1`, and set the variable `NWHOLE` to the number of CPU cores per node."
  },
  {
    "question": "What value should `NWHOLE` be set to for Trillium in WHOLE_NODE mode?",
    "answer": "For Trillium, you need to set the variable `NWHOLE` to 192, which is the number of CPU cores per node."
  },
  {
    "question": "How does the positive integer argument for `submit.run` change in WHOLE_NODE mode?",
    "answer": "In the WHOLE_NODE mode, the positive integer argument for the `submit.run` command changes its meaning to be the number of whole nodes to be used in META mode, instead of the number of meta-jobs."
  },
  {
    "question": "What does the command `$ submit.run 2` do when WHOLE_NODE mode is enabled?",
    "answer": "If the WHOLE_NODE mode is enabled, `$ submit.run 2` will allocate 2 whole nodes, which will be used to run up to 384 concurrent serial tasks (192 tasks on each node) using META mode."
  },
  {
    "question": "How is the number of whole node jobs calculated when using `submit.run -1` in WHOLE_NODE mode?",
    "answer": "The number of actual (whole node) jobs is computed as `Number_of_cases / NWHOLE`."
  },
  {
    "question": "What is required for 'Automatic job resubmission' and 'Automatic post-processing job' to work on Trillium with WHOLE_NODE mode?",
    "answer": "The features will only work on Trillium if you place the line `module load StdEnv` at the end of your `~/.bashrc` file."
  },
  {
    "question": "What type of farming is WHOLE_NODE mode limited to?",
    "answer": "The WHOLE_NODE mode can only be used for serial farming."
  },
  {
    "question": "When is WHOLE_NODE mode advantageous on clusters other than Trillium?",
    "answer": "It may be advantageous in situations when the queue wait time for whole node jobs becomes shorter than the queue wait time for serial jobs."
  }
]