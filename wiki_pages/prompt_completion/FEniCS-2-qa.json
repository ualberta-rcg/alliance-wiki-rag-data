[
  {
    "question": "Which Python packages are installed during the FEniCS Singularity container build?",
    "answer": "The build installs various Python packages including `python-dateutil`, `python-deap`, `python-decorator`, `python-ecdsa`, `python-enum34`, `python-funcsigs`, `ipython`, `python-jinja2`, `python-jsonschema`, `python-lockfile`, `python-markupsafe`, `python-matplotlib`, `python-mistune`, `python-mock`, `python-mpmath`, `python-netaddr`, `python-netifaces`, `python-nose`, `ipython-notebook`, `python-numpy`, `python-pandas`, `python-paramiko`, `python-path`, `python-pathlib`, `python-pbr`, `python-pexpect`, `python-pickleshare`, `python-prompt-toolkit`, `python-ptyprocess`, `python-pycryptopp`, `python-pygments`, `python-pyparsing`, `python-zmq`, `python-requests`, `python-scipy`, `python-setuptools`, `python-simplegeneric`, `python-singledispatch`, `python-six`, `python-sympy`, `python-terminado`, `python-tornado`, and `python-traitlets`."
  },
  {
    "question": "What system tools and Python utilities are installed as part of the FEniCS Singularity recipe?",
    "answer": "`automake`, `git-core`, `libopenmpi-dev`, `libtool`, `mercurial`, `openmpi-bin`, `python3-pip`, and `python3-venv` are installed."
  },
  {
    "question": "How are temporary files and downloaded lists cleaned up after the FEniCS Singularity container installation?",
    "answer": "The cleanup involves running `sudo apt-get clean` and then `sudo rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*`."
  },
  {
    "question": "What is the purpose of the 'FEniCS Legacy (2019) Installation on Trillium' section?",
    "answer": "This section provides instructions for setting up and testing a container for the legacy FEniCS 2019 version on Trillium, starting from the user's home directory."
  },
  {
    "question": "How do you download the FEniCS Legacy Docker image as an Apptainer SIF file?",
    "answer": "You can download it by executing the command `apttainer pull fenics-legacy.sif docker://ghcr.io/scientificcomputing/fenics-gmsh:2024-05-30`."
  },
  {
    "question": "What command is used to create a writable sandbox directory from an Apptainer SIF file for FEniCS Legacy?",
    "answer": "The command `apptainer build --sandbox fenics-legacy.sandbox fenics-legacy.sif` is used to create a writable sandbox directory."
  },
  {
    "question": "Why would someone create a writable sandbox directory from an Apptainer SIF file for FEniCS Legacy?",
    "answer": "A writable sandbox directory is created to allow for modifications or the installation of extra packages within the FEniCS Legacy container."
  },
  {
    "question": "Is the name 'fenics-legacy.sandbox' mandatory for the writable directory tree created from an Apptainer SIF file?",
    "answer": "No, 'fenics-legacy.sandbox' is just a convention; you can choose a different directory name like `fenics-dev/` or `my_rw_image/`, and the `.sandbox` suffix is not required."
  },
  {
    "question": "How do you fix the pip certificate bundle path inside the FEniCS Legacy sandbox?",
    "answer": "Inside the sandbox, you need to create a certs folder and symlink the CA bundle using the command: `apptainer exec --writable fenics-legacy.sandbox sh -c \"mkdir -p /etc/pki/tls/certs && ln -s /etc/ssl/certs/ca-certificates.crt /etc/pki/tls/certs/ca-bundle.crt\"`."
  },
  {
    "question": "What is the purpose of symlinking the CA bundle within the FEniCS Legacy sandbox?",
    "answer": "The purpose is to fix the pip certificate bundle path so that pip/SSL trusts HTTPS connections within the sandbox."
  }
]