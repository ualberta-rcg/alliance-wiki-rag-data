[
  {
    "question": "What is one of the learning objectives regarding data transfer?",
    "answer": "To understand the offloading process."
  },
  {
    "question": "What is one of the learning objectives regarding OpenACC?",
    "answer": "To understand what an OpenACC directive is."
  },
  {
    "question": "What key difference should one know about OpenACC directives?",
    "answer": "The difference between the `loop` and `kernels` directives."
  },
  {
    "question": "What programming skill is an objective of this document?",
    "answer": "To know how to program with OpenACC."
  },
  {
    "question": "What concept related to C/C++ is a learning objective?",
    "answer": "To understand the concept of aliasing in C/C++."
  },
  {
    "question": "What is an objective regarding compiler feedback and aliasing?",
    "answer": "To know how to use compiler feedback and avoid false aliases."
  },
  {
    "question": "What is a fundamental difference between GPUs and host CPUs regarding memory?",
    "answer": "GPUs do not share the same memory as the host CPU."
  },
  {
    "question": "How does host memory compare to GPU memory in terms of size and speed?",
    "answer": "Host memory is generally larger but slower than GPU memory."
  },
  {
    "question": "Does a GPU have direct access to host memory?",
    "answer": "No, a GPU does not have direct access to the host's memory."
  },
  {
    "question": "How do data transfer to a GPU, and what is the characteristic of this transfer medium?",
    "answer": "Data must pass through the PCI bus, which has lower bandwidth than the CPU and GPU."
  },
  {
    "question": "What is the process of managing data transfers between host memory and the GPU called?",
    "answer": "It is called 'offloading'."
  },
  {
    "question": "What are OpenACC directives, and how are they expressed in C/C++ and Fortran?",
    "answer": "OpenACC directives are similar to OpenMP directives, expressed as `pragmas` in C/C++ and as comments in Fortran."
  },
  {
    "question": "What is an advantage of using OpenACC directives for debugging?",
    "answer": "Modifications can be made incrementally, making it easy to identify the precise change causing a bug."
  },
  {
    "question": "How does OpenACC allow for compiling both accelerated and normal versions of code from the same source?",
    "answer": "OpenACC can be deactivated at compilation time, causing pragmas to be treated as comments."
  },
  {
    "question": "What is the third advantage of OpenACC directives regarding hardware compatibility?",
    "answer": "The same code can be compiled for different accelerators (GPU, SIMD on CPU), requiring only a compiler update for hardware changes."
  },
  {
    "question": "Where does the compiler identify kernels in C/C++ and Fortran examples with OpenACC?",
    "answer": "In C/C++, kernels are inside each loop, while in Fortran, they are inside the first loop and the implicit loop for array operations."
  },
  {
    "question": "How are OpenACC blocks delimited in C/C++ and Fortran?",
    "answer": "In C/C++, they are delimited by braces; in Fortran, by comments at the beginning and `!$acc end kernels` at the end."
  },
  {
    "question": "What does the compiler do when it encounters an OpenACC `kernels` directive?",
    "answer": "It analyzes the code to identify sections that can be parallelized."
  },
  {
    "question": "What kind of code sections are often identified as parallelizable by the `kernels` directive?",
    "answer": "The body of a loop with independent iterations."
  },
  {
    "question": "How does the compiler delimit the parallelizable code body when using the `kernels` directive?",
    "answer": "It delimits the start and end of the code body with a 'kernel' function."
  },
  {
    "question": "What is a characteristic of kernel function calls generated by the `kernels` directive?",
    "answer": "Calls to this function are not affected by other calls, and it can be executed on an accelerator."
  },
  {
    "question": "How are kernel functions executed on an accelerator with multiple cores?",
    "answer": "Each of the hundreds of accelerator cores can execute the function in parallel for a specific index, as each call is independent."
  }
]