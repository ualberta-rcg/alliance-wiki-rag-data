[
  {
    "question": "What is BEAST?",
    "answer": "BEAST is a cross-platform program designed for Bayesian MCMC analysis of molecular sequences."
  },
  {
    "question": "What is BEAST primarily used for?",
    "answer": "It is orientated towards rooted, time-measured phylogenies inferred using molecular clock models, and can reconstruct phylogenies or test evolutionary hypotheses without conditioning on a single tree topology."
  },
  {
    "question": "How does BEAST handle tree space?",
    "answer": "BEAST uses MCMC to average over tree space, weighting each tree proportionally to its posterior probability."
  },
  {
    "question": "What is `beagle-lib` and how is it related to BEAST?",
    "answer": "`beagle-lib` is a high-performance library that BEAST can use to perform core calculations for Bayesian and Maximum Likelihood phylogenetics packages."
  },
  {
    "question": "How do you load the BEAST module?",
    "answer": "You can load the BEAST module by running the command: `module load beast`."
  },
  {
    "question": "What dependencies are automatically loaded when the BEAST module is loaded?",
    "answer": "Loading the BEAST module automatically loads its dependencies, specifically the `beagle-lib` and `java` modules."
  },
  {
    "question": "What environment variable is set after loading the BEAST module?",
    "answer": "The `EBROOTBEAST` environment variable is set, pointing to the directory where BEAST's program files are located."
  },
  {
    "question": "Does BEAST come with packages (add-ons) pre-installed?",
    "answer": "No, BEAST is installed without any packages (add-ons)."
  },
  {
    "question": "How do you install desired BEAST packages (add-ons) for BEAST v2.5.1 and newer?",
    "answer": "For BEAST v2.5.1 and newer, you use the `packagemanager` command to install desired packages within your home directory."
  },
  {
    "question": "Which command is used to install packages for older versions of BEAST (e.g., v2.4.x)?",
    "answer": "For older versions of BEAST (like v2.4.x), the command `addonmanager` is used to install packages."
  },
  {
    "question": "How do you list available packages for BEAST v2.5.1?",
    "answer": "After loading the module `beast/2.5.1`, you can list packages using `packagemanager -list`."
  },
  {
    "question": "How do you install the SNAPP package for BEAST v2.5.1?",
    "answer": "After loading the module `beast/2.5.1`, use the command `packagemanager -add SNAPP` to install the SNAPP package."
  },
  {
    "question": "Where are packages like SNAPP installed for BEAST v2.5?",
    "answer": "Packages like SNAPP are installed in `~/.beast/2.5/SNAPP`."
  },
  {
    "question": "How do you list available add-ons for BEAST v2.4.0?",
    "answer": "After loading the module `beast/2.4.0`, you can list add-ons using `addonmanager -list`."
  },
  {
    "question": "How do you install the SNAPP add-on for BEAST v2.4.0?",
    "answer": "After loading the module `beast/2.4.0`, use the command `addonmanager -add SNAPP` to install the SNAPP add-on."
  },
  {
    "question": "Where can I find more information on managing BEAST packages?",
    "answer": "More information on managing BEAST packages can be found in the 'Server machines' section at http://www.beast2.org/managing-packages/."
  },
  {
    "question": "What is a basic command to run BEAST within a jobscript?",
    "answer": "A basic command to run BEAST is `beast input_beast.xml` after loading the appropriate BEAST module."
  },
  {
    "question": "How is memory specified for a BEAST job in a SLURM script?",
    "answer": "Memory for a BEAST job can be specified using `#SBATCH --mem-per-cpu` in the SLURM directives, and further refined by setting `BEAST_MEM` in the script, ensuring it is 250M lower than the `--mem-per-cpu` value."
  },
  {
    "question": "What is the recommended difference between `--mem-per-cpu` and `BEAST_MEM` in a high-memory BEAST jobscript?",
    "answer": "`BEAST_MEM` needs to be 250M lower than the value set for `--mem-per-cpu`."
  },
  {
    "question": "How are BEAST and BEAGLE-lib paths defined for a high-memory jobscript?",
    "answer": "The paths are defined as `BEAST_LIB=\"${EBROOTBEAST}/lib\"` and `BEAST_EXTRA_LIBS=\"${BEAST_LIB}:${BEAGLE_LIB}\"`."
  },
  {
    "question": "How do you set `LD_LIBRARY_PATH` for a high-memory BEAST job?",
    "answer": "The `LD_LIBRARY_PATH` is set using `export LD_LIBRARY_PATH=\"${BEAGLE_LIB}:${LD_LIBRARY_PATH}\"`."
  },
  {
    "question": "What is the structure of the Java command used to run BEAST with custom memory and library paths?",
    "answer": "The Java command typically looks like: `java -Xms256m ${BEAST_MEM} -Djava.library.path=${BEAST_EXTRA_LIBS} -cp ${BEAST_LIB}/launcher.jar beast.app.beastapp.BeastLauncher`."
  },
  {
    "question": "How do you execute the BEAST application with Beagle support using the constructed Java command?",
    "answer": "You execute it by running `$CMD -beagle input_beast.xml`."
  }
]