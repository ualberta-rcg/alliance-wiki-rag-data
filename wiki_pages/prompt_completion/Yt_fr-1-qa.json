[
  {
    "question": "What is the purpose of this document section?",
    "answer": "This section describes how to perform rendering on a cluster."
  },
  {
    "question": "How do you install YT for CPU rendering in your home directory?",
    "answer": "First, load modules 'python' and 'mpi4py', then create a virtual environment with 'virtualenv astro', activate it with 'source ~/astro/bin/activate', and finally install 'cython', 'numpy', and 'yt' using pip."
  },
  {
    "question": "Which modules must be loaded before setting up YT?",
    "answer": "You need to load the 'python' and 'mpi4py' modules."
  },
  {
    "question": "What command creates a Python virtual environment named 'astro' in your home directory?",
    "answer": "The command is `virtualenv astro`."
  },
  {
    "question": "How do you activate the 'astro' virtual environment?",
    "answer": "You activate it by running `source ~/astro/bin/activate`."
  },
  {
    "question": "Which Python packages should be installed for YT using pip?",
    "answer": "You need to install 'cython', 'numpy', and 'yt'."
  },
  {
    "question": "After installing YT, how do you load the environment and launch Python?",
    "answer": "First, load the environment with `source ~/astro/bin/activate`, then launch Python with `python`."
  },
  {
    "question": "How do you deactivate the Python virtual environment?",
    "answer": "You run the `deactivate` command."
  },
  {
    "question": "Where can the Enzo_64 dataset be downloaded from?",
    "answer": "The Enzo_64 dataset can be downloaded from http://yt-project.org/data."
  },
  {
    "question": "What is the function of the `grids.py` script?",
    "answer": "The `grids.py` script is used to render the dataset into 90 images, rotating on the vertical axis."
  },
  {
    "question": "How is MPI parallelism enabled within the `grids.py` script?",
    "answer": "MPI parallelism is turned on by calling `yt.enable_parallelism()`."
  },
  {
    "question": "What resolution is set for each frame in the `grids.py` script?",
    "answer": "The resolution set for each frame is (1024, 1024)."
  },
  {
    "question": "How many frames are generated by rotation in the `grids.py` script?",
    "answer": "90 frames are generated by rotation."
  },
  {
    "question": "What rotation angle is used for generating frames in `grids.py`?",
    "answer": "The rotation angle used is 'pi' (180 degrees)."
  },
  {
    "question": "What is the walltime limit specified in the `yt-mpi.sh` SBATCH script?",
    "answer": "The walltime limit is 0 hours and 30 minutes (0:30:00)."
  },
  {
    "question": "How many MPI processes are requested in the `yt-mpi.sh` script?",
    "answer": "4 MPI processes are requested (`--ntasks=4`)."
  },
  {
    "question": "What is the memory per CPU requested in the `yt-mpi.sh` script?",
    "answer": "The memory per CPU requested is 3800 MB (`--mem-per-cpu=3800`)."
  },
  {
    "question": "How is the `grids.py` script executed within the `yt-mpi.sh` job?",
    "answer": "It is executed using `srun python grids.py`."
  },
  {
    "question": "How do you submit the rendering job using the `yt-mpi.sh` script?",
    "answer": "You submit the job with the command `sbatch yt-mpi.sh`."
  },
  {
    "question": "What command is used to create a movie from the rendered frames after the job is complete?",
    "answer": "The command is `ffmpeg -r 30 -i frame%04d.png -c:v libx264 -pix_fmt yuv420p -vf \"scale=trunc(iw/2)*2:trunc(ih/2)*2\" grids.mp4`."
  },
  {
    "question": "What frame rate is used when creating the movie from the rendered frames?",
    "answer": "A frame rate of 30 frames per second is used (`-r 30`)."
  },
  {
    "question": "What is the output filename for the movie created from the frames?",
    "answer": "The output filename for the movie is `grids.mp4`."
  }
]