[
  {
    "question": "What is CVMFS?",
    "answer": "CVMFS stands for CERN Virtual Machine File System. It is a distributed read-only content distribution system, implemented as a POSIX filesystem in user space (FUSE) using HTTP transport."
  },
  {
    "question": "What is the primary purpose of CVMFS?",
    "answer": "CVMFS is used to distribute software, data, and other content. It was originally developed for the LHC experiments at CERN to deliver software to virtual machines and replace shared software installation areas."
  },
  {
    "question": "Where can I find further information about CVMFS?",
    "answer": "You can refer to the [[accessing CVMFS]] page for client configuration, and the official documentation [https://cvmfs.readthedocs.io/] and webpage [https://cernvm.cern.ch/fs/]."
  },
  {
    "question": "Who originally developed CVMFS and why?",
    "answer": "CVMFS was originally developed for the LHC (Large Hadron Collider) experiments at CERN to deliver software to virtual machines and to replace diverse shared software installation areas and package management systems at numerous computing sites."
  },
  {
    "question": "What is the approximate scale of CVMFS usage globally?",
    "answer": "The scale of CVMFS usage across dozens of projects involves approximately 10^10 files and directories, 10^2 compute sites, and 10^5 clients around the world."
  },
  {
    "question": "How can one monitor CVMFS usage?",
    "answer": "The CernVM Monitor ([https://cvmfs-monitor-frontend.web.cern.ch/]) shows many research groups which use CVMFS and the stratum sites which replicate their repositories."
  },
  {
    "question": "What is a key feature of CVMFS regarding software maintenance?",
    "answer": "Only one copy of the software needs to be maintained, and can be propagated to and used at multiple sites, reducing remote software administration."
  },
  {
    "question": "Does CVMFS impose requirements on the client's Linux distribution type?",
    "answer": "No, software applications and their prerequisites can be run from CVMFS, eliminating any requirement on the Linux distribution type or release level of a client node."
  },
  {
    "question": "How does CVMFS support decoupling of the software stack and OS, especially for cloud use cases?",
    "answer": "CVMFS allows the project software stack and OS to be decoupled, enabling software to be accessed in a VM without being embedded in the VM image, so VM images and software can be updated and distributed separately."
  },
  {
    "question": "How does CVMFS provide content versioning?",
    "answer": "Content versioning is provided via repository catalog revisions, allowing updates to be committed in transactions and rolled back to a previous state."
  },
  {
    "question": "How are updates propagated to CVMFS clients?",
    "answer": "Updates are propagated to clients automatically and atomically."
  },
  {
    "question": "Can CVMFS clients view older versions of repository content?",
    "answer": "Yes, CVMFS clients can view historical versions of repository content."
  },
  {
    "question": "Which protocol is used by CVMFS to fetch files?",
    "answer": "Files are fetched using the standard HTTP protocol."
  },
  {
    "question": "Do CVMFS client nodes require specific ports or firewalls to be opened?",
    "answer": "No, client nodes do not require ports or firewalls to be opened."
  },
  {
    "question": "How does CVMFS achieve fault tolerance and reliability?",
    "answer": "Fault tolerance and reliability are achieved by using multiple redundant proxy and stratum servers, with clients transparently failing over to the next available proxy or server."
  },
  {
    "question": "Describe the hierarchical caching model in CVMFS.",
    "answer": "CVMFS uses hierarchical caching with several levels: stratum 0 (master copy), multiple stratum 1 servers (replicate from stratum 0), HTTP proxy servers (cache client requests), and the CVMFS client's local cache(s)."
  },
  {
    "question": "What types of local caches can a CVMFS client use?",
    "answer": "A CVMFS client can use two tiers of local cache (e.g., fast SSD and large HDD) or a cluster filesystem as a shared cache for all nodes in a cluster."
  },
  {
    "question": "What kind of access do CVMFS clients have to the filesystem?",
    "answer": "CVMFS clients have read-only access to the filesystem."
  },
  {
    "question": "How does CVMFS ensure file integrity and authenticity?",
    "answer": "File integrity and authenticity are verified using signed cryptographic hashes, avoiding data corruption or tampering."
  },
  {
    "question": "How does CVMFS minimize storage usage on both server and client sides?",
    "answer": "Automatic de-duplication and compression minimize storage usage on the server side, while file chunking and on-demand access minimize storage usage on the client side."
  },
  {
    "question": "How can custom configurations be deployed in CVMFS?",
    "answer": "Versatile configurations can be deployed by writing authorization helpers or cache plugins to interact with external authorization or storage providers."
  }
]