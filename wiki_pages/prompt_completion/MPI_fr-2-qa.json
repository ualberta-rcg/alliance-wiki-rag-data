[
  {
    "question": "What programming languages are supported for MPI code development in this tutorial?",
    "answer": "This tutorial presents the development of MPI code in C, C++, Fortran, and Python."
  },
  {
    "question": "What is the primary objective of the 'Principes de base' section?",
    "answer": "The primary objective of the 'Principes de base' section is to parallelize the simple 'Hello World' program."
  },
  {
    "question": "Which execution model does MPI parallelization utilize?",
    "answer": "MPI parallelization uses the SPMD ('single program multiple data') execution model."
  },
  {
    "question": "How can different behaviors be assigned to individual instances in the SPMD model?",
    "answer": "To assign a different behavior to each instance, a conditional 'if' statement is typically used."
  },
  {
    "question": "What header file is required for MPI programs in C/C++?",
    "answer": "A C/C++ MPI program must include the `<tt>mpi.h</tt>` header file."
  },
  {
    "question": "What are the recommended Fortran modules for MPI programs, especially for Fortran 2008?",
    "answer": "For Fortran, `mpif.h` or `use mpi` can be used, but `use mpi_f08` is recommended for Fortran 2008, while `mpif.h` is strongly discouraged."
  },
  {
    "question": "What is a 'compiler wrapper' in the context of MPI?",
    "answer": "A compiler wrapper is a convenient script provided by the MPI implementation that encapsulates the compiler call, properly configuring `include` and `lib` paths, among other linking indicators."
  },
  {
    "question": "Which compiler wrapper script is used for C programs in the MPI examples?",
    "answer": "For C programs, the `<tt>mpicc</tt>` compiler wrapper is used."
  },
  {
    "question": "What is the recommended compiler wrapper script for Fortran?",
    "answer": "The recommended compiler wrapper script for Fortran is `<tt>mpifort</tt>`."
  },
  {
    "question": "What is the initial coordination step for launched instances in an MPI program?",
    "answer": "The initial coordination step for launched instances is calling an initialization function."
  },
  {
    "question": "How is the MPI initialization function typically declared in C?",
    "answer": "In C, the MPI initialization function is typically declared as `int MPI_Init(int *argc, char **argv[]);`."
  },
  {
    "question": "How is MPI initialized in Python when using `mpi4py`?",
    "answer": "When using `mpi4py`, MPI is automatically initialized upon importing, but `MPI.Init()` can also be explicitly called."
  },
  {
    "question": "What do `argc` and `argv` represent as arguments to `MPI_Init` in C?",
    "answer": "In C, `argc` and `argv` as arguments to `MPI_Init` point to the command-line arguments."
  },
  {
    "question": "How do Fortran MPI routines handle error reporting?",
    "answer": "In Fortran, MPI routines return errors in the `IERR` argument, which is optional with `use mpi_f08`."
  }
]