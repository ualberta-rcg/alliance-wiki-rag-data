[
  {
    "question": "What is the recommended starting memory allocation for an interactive job?",
    "answer": "It is recommended to start with a low memory allocation, such as 2G, and increase it if needed."
  },
  {
    "question": "How many CPUs are suggested to request for an interactive CheckV job?",
    "answer": "As suggested in the CheckV software's proposed command line, you can ask for 16 tasks (CPUs)."
  },
  {
    "question": "Which modules need to be loaded for running CheckV?",
    "answer": "The necessary modules to load are 'gcc', 'hmmer/3.3.2', 'prodigal-gv/2.6.3', 'diamond/2.0.4', and 'python/3.10'."
  },
  {
    "question": "When should the necessary modules be loaded relative to activating the virtual environment?",
    "answer": "It is important to load the modules before activating your virtual environment."
  },
  {
    "question": "How do you activate a virtual environment for CheckV?",
    "answer": "You activate the virtual environment by running the command `source ~/CheckV_env/bin/activate`."
  },
  {
    "question": "What is the example command for running the CheckV `end_to_end` pipeline?",
    "answer": "The example command is `checkv end_to_end test_sequences.fna $SCRATCH/checkv_output -t ${SLURM_CPUS_PER_TASK:-1} -d $SCRATCH/checkv-db-v1.5`."
  },
  {
    "question": "Why is it important to gather information after an interactive run?",
    "answer": "Gathering information about execution time and peak memory usage from an interactive run is important for setting appropriate time and memory parameters in a bash submission script for compute node jobs."
  },
  {
    "question": "How do you submit a bash submission script to a compute node?",
    "answer": "You can submit a bash script to a compute node using the command `sbatch run_CheckV.sh`."
  },
  {
    "question": "What is the purpose of the `seff` command?",
    "answer": "The `seff` command is a post-run command that uses the Slurm job number as a parameter to show the time, CPU efficiency, and memory efficiency of a job, helping to adjust future runs to optimize resource usage."
  },
  {
    "question": "Where can you find useful information about a job run after it has completed?",
    "answer": "You can find useful information about a job run in the Slurm output file, typically named `slurm-[job_number].out`, which can be viewed using `less slurm-[job_number].out`."
  },
  {
    "question": "What are the key SBATCH parameters specified in the example `run_CheckV.sh` script?",
    "answer": "The example script includes `#SBATCH --job-name=CheckV_run`, `#SBATCH --account=def-someprof`, `#SBATCH --time=00:20:00`, `#SBATCH --cpus-per-task=16`, and `#SBATCH --mem=2G`."
  },
  {
    "question": "How is the virtual environment set up and activated within the `run_CheckV.sh` submission script?",
    "answer": "The virtual environment is generated in `$SLURM_TMPDIR` using `virtualenv --no-download ${SLURM_TMPDIR}/env` and then activated with `source ${SLURM_TMPDIR}/env/bin/activate`."
  },
  {
    "question": "How are CheckV and its dependencies installed within the `run_CheckV.sh` script?",
    "answer": "Pip is upgraded with `pip install --no-index --upgrade pip`, and then CheckV and its dependencies are installed from a requirements file using `pip install --no-index --requirement ~/checkv-1.0.1-requirements.txt`."
  }
]