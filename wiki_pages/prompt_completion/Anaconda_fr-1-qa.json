[
  {
    "question": "Is it recommended to install Anaconda on the Alliance's clusters?",
    "answer": "No, users are explicitly asked not to install Anaconda on the clusters."
  },
  {
    "question": "What alternatives are recommended for managing Python on the clusters instead of Anaconda?",
    "answer": "Users are recommended to use virtual environments or Apptainer containers for more complex cases."
  },
  {
    "question": "Why should users avoid installing Anaconda on the Alliance's clusters?",
    "answer": "On the Alliance's clusters, library management is handled by personnel to ensure maximum compatibility and performance, which is incompatible with Anaconda's approach."
  },
  {
    "question": "What are the specific technical issues caused by Anaconda installations on the clusters?",
    "answer": "Anaconda often installs redundant and non-optimally configured software, uses binaries not optimized for cluster processors, makes bad assumptions about library locations, consumes a significant portion of the `$HOME` file quota, is slower for package installation, and can cause conflicts by modifying `$HOME/.bashrc`."
  },
  {
    "question": "Where does Anaconda typically install itself by default, and what is a consequence for user quotas?",
    "answer": "Anaconda installs itself in the `$HOME` directory by default, which can consume nearly half of a user's file quota on the number of files in their personal space."
  },
  {
    "question": "How can a user transition from using Conda on a personal computer to virtualenv on the Alliance's clusters?",
    "answer": "Users should list their application's dependencies, identify which are Python packages and which are Anaconda-provided libraries, remove non-Python dependencies (like `cudatoolkit` and `cudnn`), and then install the remaining Python dependencies within a virtualenv."
  },
  {
    "question": "What methods can be used to list application dependencies when preparing to use virtualenv?",
    "answer": "Dependencies can be listed by running `pip show <package_name>`, checking for a `requirements.txt` file in the Git repository, or examining the `install_requires` variable in `setup.py`."
  },
  {
    "question": "What types of dependencies should be removed from a list when transitioning from Conda to virtualenv for use on the clusters?",
    "answer": "Non-Python packages, such as `cudatoolkit` and `cudnn`, which are typically provided by Anaconda but already installed on the clusters, should be removed from the dependency list."
  },
  {
    "question": "When is Apptainer recommended for managing software environments on the clusters?",
    "answer": "Apptainer is recommended for situations where software dependencies are complex and require complete control over the environment."
  },
  {
    "question": "Is it possible to convert Docker images for use with Apptainer?",
    "answer": "Yes, a Docker image can be converted into an Apptainer image."
  },
  {
    "question": "What is a drawback of using Apptainer, and how can it be mitigated?",
    "answer": "Apptainer images consume a lot of disk space. To mitigate this, research groups should group multiple images together in a single directory within their group's project space to avoid duplicates."
  },
  {
    "question": "Why is Anaconda's R installation not recommended for use on the clusters?",
    "answer": "Anaconda's R installation forces the installation of R that underperforms compared to the R available through modules (which uses Intel MKL) and can cause tasks to fail, wasting resources."
  }
]