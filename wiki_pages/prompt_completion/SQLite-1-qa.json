[
  {
    "question": "What is SQLite?",
    "answer": "SQLite is a database management tool used to build 'pocket databases' that offer all the features of relational databases without a client-server architecture."
  },
  {
    "question": "Why are SQLite databases referred to as 'pocket databases'?",
    "answer": "They are called 'pocket databases' because they provide all the features of relational databases without the client-server architecture, and their data resides on a single disk file that can be easily copied to another computer."
  },
  {
    "question": "How do applications typically interact with an SQLite database?",
    "answer": "Software written in various common languages can read from and write to the database file using standard SQL queries via the language's API for database interactions."
  },
  {
    "question": "Where should an SQLite database NOT be used?",
    "answer": "An SQLite database should not be used on a shared filesystem such as home, scratch, and project."
  },
  {
    "question": "For optimal performance, where should an SQLite file be copied at the beginning of a job?",
    "answer": "For optimal performance, you should copy your SQLite file to the local scratch `$SLURM_TMPDIR` space at the beginning of a job."
  },
  {
    "question": "Is SQLite suitable for concurrent writing from multiple threads or processes?",
    "answer": "No, SQLite is not intended for use with multiple threads or processes writing concurrently to the database."
  },
  {
    "question": "What kind of database solution should be considered if multiple threads or processes need to write concurrently?",
    "answer": "For concurrent writing scenarios, a client-server solution should be considered."
  },
  {
    "question": "How can you access an SQLite database directly using the native client?",
    "answer": "You can access an SQLite database directly using the native client by running `sqlite3 foo.sqlite`."
  },
  {
    "question": "What happens if the database file specified (e.g., `foo.sqlite`) does not exist when using `sqlite3 foo.sqlite`?",
    "answer": "If the file does not already exist, SQLite will create it, and the client will start in an empty database."
  },
  {
    "question": "How can you print the entire contents of a table named `tablename` when accessing SQLite directly?",
    "answer": "You can execute the query `SELECT * FROM tablename;` to print the entire contents of the table `tablename` to the screen."
  },
  {
    "question": "What is the common method for interacting with an SQLite database from software?",
    "answer": "The most common way is through function calls to open a connection, execute queries (read, insert, update data), and close the connection to flush changes to the SQLite file."
  },
  {
    "question": "Which Python module is used to access an SQLite database?",
    "answer": "The `sqlite3` module is used for Python to access an SQLite database."
  },
  {
    "question": "How do you connect to an SQLite database in Python?",
    "answer": "You connect by using `dbase = sqlite3.connect(\"foo.sqlite\")`."
  },
  {
    "question": "How do you execute an INSERT query in Python using the `sqlite3` module?",
    "answer": "You can use `dbase.execute(\"INSERT INTO employee(name,age) VALUES(\"John Smith\",\" + str(age) + \");\")`."
  },
  {
    "question": "How do you close an SQLite database connection in Python?",
    "answer": "You close the connection using `dbase.close()`."
  },
  {
    "question": "Which R package is needed to interact with an SQLite database?",
    "answer": "The `RSQLite` package needs to be installed in your R environment, and `library(DBI)` should be used."
  },
  {
    "question": "How do you connect to an SQLite database in R?",
    "answer": "You connect using `dbase <- dbConnect(RSQLite::SQLite(),\"foo.sqlite\")`."
  },
  {
    "question": "How do you execute a query in R for an SQLite database?",
    "answer": "You execute queries using `dbExecute(dbase,query)` after constructing the query string."
  },
  {
    "question": "How do you close an SQLite database connection in R?",
    "answer": "You close the connection using `dbDisconnect(dbase)`."
  },
  {
    "question": "Which header file is necessary for C++ to interact with SQLite?",
    "answer": "The `<sqlite3.h>` header file is necessary for C++ to interact with SQLite."
  },
  {
    "question": "How do you open an SQLite database connection in C++?",
    "answer": "You open the connection using `sqlite3_open(\"foo.sqlite\",&dbase);`."
  },
  {
    "question": "How do you execute an SQL query in C++ for an SQLite database?",
    "answer": "You execute queries using `sqlite3_exec(dbase,query.c_str(),nullptr,nullptr,nullptr);`."
  },
  {
    "question": "How do you close an SQLite database connection in C++?",
    "answer": "You close the connection using `sqlite3_close(dbase);`."
  },
  {
    "question": "What are the intended uses for SQLite databases?",
    "answer": "SQLite is intended for relatively simple databases that are neither excessively large (hundreds of gigabytes or more) nor too complicated in terms of their entity-relationship diagram."
  },
  {
    "question": "What happens if an SQLite database becomes too large or complex?",
    "answer": "If an SQLite database grows in size and complexity, its performance could start to degrade."
  },
  {
    "question": "When should one consider using more sophisticated database software with a client-server model instead of SQLite?",
    "answer": "When an SQLite database grows significantly in size and complexity, and performance degrades, it's time to consider a client-server database solution."
  },
  {
    "question": "Where can users find more information on appropriate uses for SQLite and a checklist for choosing between SQLite and client-server databases?",
    "answer": "The SQLite web site includes an excellent page on 'Appropriate Uses For SQLite' at `https://www.sqlite.org/whentouse.html`, which includes a checklist."
  }
]