[
  {
    "question": "How do you copy a public SSH key to a cloud VM?",
    "answer": "From your computer, use the command `cat ~/.ssh/id_rsa.pub | ssh -i ~/.ssh/cloudwestkey.pem centos@vm.ip.address 'cat >>.ssh/authorized_keys'` to copy the public key to the VM's authorized_keys."
  },
  {
    "question": "Why is OSMesa support necessary for ParaView on Cloud VMs?",
    "answer": "OSMesa support is needed because most Cloud VMs, like Arbutus VMs, do not have access to a GPU, requiring ParaView to perform offscreen (software) rendering."
  },
  {
    "question": "What does the default configuration of OSMesa enable for ParaView?",
    "answer": "The default configuration of OSMesa enables OpenSWR, Intel's software rasterization library for running OpenGL."
  },
  {
    "question": "Which CPU rendering drivers are built with OSMesa, and which is recommended?",
    "answer": "Both `llvmpipe` (older and slower) and `SWR` (newer and faster) drivers are built, with SWR being the recommended driver for offscreen CPU-based rendering."
  },
  {
    "question": "What are the steps to compile CMake on a Cloud VM?",
    "answer": "First, download the source using `wget https://cmake.org/files/v3.7/cmake-3.7.0.tar.gz`. Then unpack and change into the directory, run `./bootstrap`, `make`, and finally `sudo make install`."
  },
  {
    "question": "How do you compile LLVM on a Cloud VM for ParaView?",
    "answer": "Download `llvm-3.9.1.src.tar.xz`, unpack it, create and navigate into a `build` directory, run a specific `cmake` command with flags like `-DCMAKE_BUILD_TYPE=Release` and `-DLLVM_TARGETS_TO_BUILD:STRING=X86`, then `make`, and `sudo make install`."
  },
  {
    "question": "What is the process for compiling Mesa with OSMesa support on a Cloud VM?",
    "answer": "Download `mesa-17.0.0.tar.gz`, unpack it, navigate into the directory, then run a `./configure` command with various flags including `--enable-opengl`, `--enable-gallium-osmesa`, and `--with-gallium-drivers=swrast,swr`, followed by `make` and `sudo make install`."
  },
  {
    "question": "What are the steps to compile the ParaView server on a Cloud VM?",
    "answer": "Download `ParaView-v5.2.0.tar.gz`, unpack it, create and navigate into a `build` directory, run a `cmake` command with flags such as `-DVTK_OPENGL_HAS_OSMESA=ON` and `-DVTK_USE_OFFSCREEN=ON`, then run `make` and `make install`."
  },
  {
    "question": "Which CMake flags are crucial when compiling the ParaView server for offscreen rendering on a VM?",
    "answer": "Key CMake flags include `-DVTK_OPENGL_HAS_OSMESA=ON`, `-DVTK_USE_OFFSCREEN=ON`, and `-DVTK_USE_X=OFF`."
  },
  {
    "question": "How do you start the ParaView server on a Cloud VM with SWR rendering?",
    "answer": "On the VM, run the command `./paraview/bin/pvserver --mesa-swr-avx2`."
  },
  {
    "question": "How do you set up an SSH tunnel for a ParaView client-server connection from your local computer to a Cloud VM?",
    "answer": "From your local computer, use the command `ssh centos@vm.ip.address -L 11111:localhost:11111` to create an SSH tunnel from local port 11111 to the VM's port 11111."
  },
  {
    "question": "How do you connect the ParaView client on your local computer to a ParaView server running on a Cloud VM?",
    "answer": "Start the ParaView client on your computer and connect to `localhost:11111`."
  },
  {
    "question": "What message indicates successful SWR rendering in the ParaView server console on a VM?",
    "answer": "The message \"SWR detected AVX2\" will be displayed in the console during rendering."
  },
  {
    "question": "What is an alternative method for interactive ParaView visualization besides client-server mode?",
    "answer": "ParaView can be used in JupyterLab for interactive visualization, which utilizes VNC remote desktop."
  },
  {
    "question": "How do you launch ParaView within JupyterLab?",
    "answer": "Launch a JupyterLab instance through one of the supported options, then load a `paraview` module, which will make a launcher icon for ParaView appear."
  },
  {
    "question": "What type of remote access does Nibi's Open OnDemand use for visualization?",
    "answer": "Nibi's Open OnDemand uses VNC remote desktop for visualization, unlike client-server visualizations."
  },
  {
    "question": "What are the initial steps to use Nibi's Open OnDemand for ParaView visualization?",
    "answer": "First, connect to `gra-vdi` as described in the TigerVNC documentation, then open a terminal window and run `module load CcEnv`."
  }
]