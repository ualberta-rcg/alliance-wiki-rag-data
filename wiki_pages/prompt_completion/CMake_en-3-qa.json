[
  {
    "question": "What information does `ccmake` display in advanced mode?",
    "answer": "`ccmake` in advanced mode displays both the libraries that were found and those that were not found."
  },
  {
    "question": "How can I check and modify the BLAS version identified by CMake using `ccmake`?",
    "answer": "In `ccmake` advanced mode, you can immediately see which version of BLAS was found by CMake and modify it if necessary."
  },
  {
    "question": "Besides libraries, what other information does `ccmake` display?",
    "answer": "`ccmake` also displays the list of flags passed to the C, C++, and other compilers, as well as to the linker, depending on the build type."
  },
  {
    "question": "What is the general syntax for modifying CMake options from the command line?",
    "answer": "All command line options displayed by `ccmake` can be modified using the syntax `cmake . -DVARIABLE=VALUE`."
  },
  {
    "question": "How do you specify the installation location using a command line option in CMake?",
    "answer": "You can specify the installation location using `cmake . -DCMAKE_INSTALL_PREFIX=/home/user/my_directory`."
  },
  {
    "question": "Which CMake option is used to change the C compiler?",
    "answer": "The `CMAKE_C_COMPILER` option is used to change the C compiler."
  },
  {
    "question": "How can I change the flags passed to the C++ compiler in CMake via the command line?",
    "answer": "You can change the flags passed to the C++ compiler using the `CMAKE_CXX_FLAGS` option."
  },
  {
    "question": "What is the purpose of the `CMAKE_BUILD_TYPE` option in CMake?",
    "answer": "The `CMAKE_BUILD_TYPE` option defines which compilation type must be used."
  },
  {
    "question": "What are the characteristics of the `Debug` build type in CMake?",
    "answer": "The `Debug` build type activates debugging options and deactivates optimization options."
  },
  {
    "question": "How does the `Release` build type affect compilation?",
    "answer": "The `Release` build type deactivates debugging options and activates usual optimizations."
  },
  {
    "question": "What happens when `CMAKE_BUILD_TYPE` is set to `MinSizeRel`?",
    "answer": "Setting `CMAKE_BUILD_TYPE` to `MinSizeRel` deactivates debugging options and activates optimization options that minimize the binary's size."
  },
  {
    "question": "What does the `RelWithDebInfo` build type imply for compilation?",
    "answer": "`RelWithDebInfo` activates debugging options and usual optimizations."
  },
  {
    "question": "Why is using `CMAKE_BUILD_TYPE` simpler than setting individual compiler flags?",
    "answer": "`CMAKE_BUILD_TYPE` is simpler because it defines compiler options that vary from compiler to compiler, so you do not need to check which exact compiler flags have to be used."
  }
]