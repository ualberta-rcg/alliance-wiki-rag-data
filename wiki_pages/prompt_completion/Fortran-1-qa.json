[
  {
    "question": "What type of programming language is Fortran?",
    "answer": "Fortran is a compiled programming language."
  },
  {
    "question": "Which Fortran compilers are available on Compute Canada's servers?",
    "answer": "The `gfortran` and `ifort` compilers are installed and available on Compute Canada's servers."
  },
  {
    "question": "Why are compiled languages like Fortran, C, or C++ recommended for writing programs?",
    "answer": "Compiled languages generally provide much better performance, which is why they are encouraged."
  },
  {
    "question": "What `gfortran` compiler option can be used to check array bounds and identify disassociated pointers or uninitialized variables?",
    "answer": "The `-fcheck=all` option for the `gfortran` compiler can be used for these debugging checks."
  },
  {
    "question": "Which `ifort` compiler option performs checks for array bounds, disassociated pointers, and uninitialized variables?",
    "answer": "The `-check` option for the `ifort` compiler performs these checks."
  },
  {
    "question": "How can an `ifort` compiled application be configured to halt execution upon encountering floating point exceptions?",
    "answer": "Using the `-fpe0` option with the `ifort` compiler will cause the application to halt for floating point exceptions like division by zero or the square root of a negative number."
  },
  {
    "question": "What compiler options should be used during code testing to disable optimizations and include debugging symbols?",
    "answer": "During testing, you should use `-O0` to disable optimizations and `-g` to add debugging symbols."
  },
  {
    "question": "What built-in functions do modern Fortran versions (Fortran 90 onwards) provide for basic linear algebra operations?",
    "answer": "Modern Fortran includes built-in functions like `matmul` for matrix/vector multiplication, `dot_product`, and `transpose` for matrix transposition."
  },
  {
    "question": "What libraries should be used for numerical linear algebra operations in Fortran, instead of writing custom methods?",
    "answer": "You should use the built-in functions (like `matmul`, `dot_product`, `transpose`) or the system-provided BLAS/LAPACK libraries."
  },
  {
    "question": "Why is it advised not to write custom methods for numerical linear algebra operations in Fortran, except for educational purposes?",
    "answer": "System-provided routines, such as the BLAS matrix-matrix multiplication, can be significantly faster, potentially up to 100 times faster than a naive implementation."
  },
  {
    "question": "What common error can occur in Fortran programs due to interface problems?",
    "answer": "A frequently seen error is a segmentation fault, often indicated by a message like `forrtl: severe (174): SIGSEGV, segmentation fault occurred`."
  },
  {
    "question": "Under what circumstances do Fortran interface problems lead to segmentation faults?",
    "answer": "Interface problems surface if a pointer, a dynamically allocated array, or a function pointer is passed as an argument to a subroutine without its interface being explicitly defined."
  },
  {
    "question": "How can segmentation faults caused by Fortran interface problems be resolved?",
    "answer": "To resolve this, you should ensure that the interface of the subroutine is explicitly defined using the `INTERFACE` command in Fortran."
  },
  {
    "question": "What role does the `INTERFACE` command play in fixing Fortran segmentation faults related to arguments?",
    "answer": "The `INTERFACE` command allows the compiler to construct the correct interface for the subroutine, thereby fixing segmentation faults when pointers, allocatable arrays, or function pointers are passed as arguments."
  }
]