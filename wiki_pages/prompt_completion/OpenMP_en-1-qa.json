[
  {
    "question": "What does OpenMP stand for?",
    "answer": "OpenMP stands for Open Multi-Processing."
  },
  {
    "question": "What is OpenMP?",
    "answer": "OpenMP is an application programming interface (API) designed for shared memory parallel computing."
  },
  {
    "question": "On which platforms is OpenMP supported?",
    "answer": "OpenMP is supported on numerous platforms, including Linux and Windows."
  },
  {
    "question": "Which programming languages are supported by OpenMP?",
    "answer": "OpenMP is available for the C/C++ and Fortran programming languages."
  },
  {
    "question": "What are the main components of the OpenMP API?",
    "answer": "The OpenMP API consists of a set of directives, a software library, and environment variables."
  },
  {
    "question": "How does OpenMP help in developing parallel applications?",
    "answer": "OpenMP allows for the development of fine-grained parallel applications on multicore machines while preserving the structure of the serial code."
  },
  {
    "question": "What is the role of directives in OpenMP programs?",
    "answer": "Directives inserted into the program control whether a section of the program executes in parallel and manage the distribution of work among subtasks."
  },
  {
    "question": "Are OpenMP directives intrusive to the code?",
    "answer": "No, OpenMP directives are usually non-intrusive, meaning a compiler that does not support them can still compile the program to run serially."
  },
  {
    "question": "What fundamental concept does OpenMP rely on?",
    "answer": "OpenMP relies on the notion of threads."
  },
  {
    "question": "How is a thread defined in the context of computing?",
    "answer": "A thread is formally defined as the smallest unit of work or processing that can be scheduled by an operating system, similar to a lightweight process or virtual processor."
  },
  {
    "question": "Is the number of threads dependent on the number of physical cores?",
    "answer": "No, the number of threads is independent of the number of physical cores within the computer. The operating system decides how to share the cores' time between threads."
  },
  {
    "question": "Can a single thread be executed by multiple processors simultaneously?",
    "answer": "No, a single thread cannot be executed by two processors at the same time."
  },
  {
    "question": "What is the usual practice for the number of OpenMP threads compared to available cores?",
    "answer": "The usual practice is to match the number of threads to the number of available cores, although in some cases using more threads might be advantageous."
  },
  {
    "question": "Why is synchronization important for OpenMP threads?",
    "answer": "Synchronization is important because when multiple threads compute simultaneously, one cannot assume anything about the order of operations. If the order matters for correctness, OpenMP synchronization directives must be used."
  },
  {
    "question": "What is scalability in the context of parallel programming?",
    "answer": "Scalability refers to how well a program is able to run in parallel."
  },
  {
    "question": "What is recommended after parallelizing software with OpenMP?",
    "answer": "After parallelizing software and ensuring its correctness, it is recommended to perform a scaling analysis to understand its parallel performance."
  },
  {
    "question": "How are OpenMP programs typically compiled?",
    "answer": "OpenMP programs are typically compiled by simply adding a command-line option to the compilation flags."
  },
  {
    "question": "What is the OpenMP compilation flag for GNU compilers (GCC)?",
    "answer": "For GNU compilers (GCC), the OpenMP compilation flag is -fopenmp."
  },
  {
    "question": "What are the potential OpenMP compilation flags for Intel compilers?",
    "answer": "For Intel compilers, depending on the version, the OpenMP compilation flag may be -qopenmp, -fopenmp, or -openmp."
  },
  {
    "question": "How are OpenMP directives inserted into Fortran programs?",
    "answer": "OpenMP directives are inserted into Fortran programs using sentinels, which are keywords placed immediately after a comment-marking symbol, such as `!$OMP` or `C$OMP`."
  },
  {
    "question": "How are OpenMP directives inserted into C/C++ programs?",
    "answer": "In C/C++ programs, OpenMP directives are inserted using a pragma construct, for example, `#pragma omp directive`."
  },
  {
    "question": "What is the Fortran syntax for the OpenMP PARALLEL directive?",
    "answer": "The Fortran syntax for the OpenMP PARALLEL directive is `!$OMP PARALLEL [clause, clause,\u2026]` followed by a block and `!$OMP END PARALLEL`."
  },
  {
    "question": "What is the C/C++ syntax for the OpenMP PARALLEL directive?",
    "answer": "The C/C++ syntax for the OpenMP PARALLEL directive is `#pragma omp parallel [clause, clause,\u2026]` followed by a structured-block."
  },
  {
    "question": "How do you specify a parallel loop in Fortran using OpenMP directives?",
    "answer": "In Fortran, a parallel loop is specified using `!$OMP DO [ clause, clause,\u2026 ]` followed by the do_loop and `!$OMP END DO`."
  },
  {
    "question": "How do you specify a parallel loop in C/C++ using OpenMP directives?",
    "answer": "In C/C++, a parallel loop is specified using `#pragma omp for [ clause, clause,\u2026 ]` followed by the for-loop."
  },
  {
    "question": "What is the Fortran syntax for the OpenMP SECTIONS directive?",
    "answer": "The Fortran syntax for the OpenMP SECTIONS directive involves `!$OMP SECTIONS [clause, clause,\u2026]`, then `!$OMP SECTION` blocks, and `!$OMP END SECTIONS [NOWAIT]`."
  },
  {
    "question": "What is the C/C++ syntax for the OpenMP SECTIONS directive?",
    "answer": "The C/C++ syntax for the OpenMP SECTIONS directive is `#pragma omp sections [clause, clause,\u2026] { [ #pragma omp section ] structured-block [ #pragma omp section ] structured-block }`."
  }
]