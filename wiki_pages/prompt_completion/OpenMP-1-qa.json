[
  {
    "question": "What is OpenMP?",
    "answer": "OpenMP (Open Multi-Processing) is an application programming interface (API) for shared memory parallel computing."
  },
  {
    "question": "Which programming languages and platforms does OpenMP support?",
    "answer": "OpenMP is supported on numerous platforms, including Linux and Windows, and is available for the C/C++ and Fortran programming languages."
  },
  {
    "question": "What components make up the OpenMP API?",
    "answer": "The OpenMP API consists of a set of directives, a software library, and environment variables."
  },
  {
    "question": "How do OpenMP directives help in parallelizing code?",
    "answer": "Directives inserted into the program control whether a section of the program executes in parallel and distribute work among subtasks."
  },
  {
    "question": "What happens if a compiler doesn't support OpenMP directives?",
    "answer": "A compiler that does not support them can still compile the program, and the user can run it serially."
  },
  {
    "question": "What is a thread in the context of OpenMP?",
    "answer": "A thread is a bit like a light weight process or a 'virtual processor, operating serially', and can formally be defined as the smallest unit of work/processing that can be scheduled by an operating system."
  },
  {
    "question": "Is the number of OpenMP threads dependent on the number of physical cores?",
    "answer": "No, the number of threads is independent of the number of physical cores within the computer."
  },
  {
    "question": "What is the usual practice for matching the number of threads to cores?",
    "answer": "The usual practice is to match the number of threads to the number of cores, although using more threads than cores may sometimes be advantageous."
  },
  {
    "question": "What is important to consider regarding threads when multiple threads compute simultaneously?",
    "answer": "Synchronization is important; one must assume nothing about the order in which things happen."
  },
  {
    "question": "What is 'scalability' in the context of parallelizing a program?",
    "answer": "Scalability refers to how well the program is able to run in parallel."
  },
  {
    "question": "How do you compile an OpenMP program with GNU compilers (GCC)?",
    "answer": "For GNU compilers (GCC), compiling an OpenMP program is done by adding the command-line option `<tt>-fopenmp</tt>` to the compilation flags."
  },
  {
    "question": "How are OpenMP directives inserted into Fortran programs?",
    "answer": "OpenMP directives are inserted in Fortran programs using sentinels, which are keywords placed immediately after a symbol that marks a comment (e.g., `!$OMP directive`)."
  },
  {
    "question": "How are OpenMP directives inserted into C programs?",
    "answer": "In C, directives are inserted using a pragma construct, as follows: `#pragma omp directive`."
  },
  {
    "question": "What environment variable typically controls the number of threads in an OpenMP program?",
    "answer": "The `OMP_NUM_THREADS` environment variable influences the execution of an OpenMP program."
  },
  {
    "question": "What is the purpose of the `OMP_SCHEDULE` environment variable?",
    "answer": "The `OMP_SCHEDULE` environment variable controls how loops and parallel sections are distributed among threads."
  },
  {
    "question": "What are the possible values for `OMP_SCHEDULE`?",
    "answer": "Possible values for `OMP_SCHEDULE` are `static,n`, `dynamic,n`, `guided,n`, or `auto`."
  },
  {
    "question": "What is the `OMP_STACKSIZE` environment variable used for?",
    "answer": "The `OMP_STACKSIZE` environment variable specifies the size of the stack for each thread created by the OpenMP runtime (excluding the main thread)."
  },
  {
    "question": "What is the implied value of `OMP_STACKSIZE` if it is not set?",
    "answer": "If `OMP_STACKSIZE` is not set, its implied value will be 4M."
  }
]