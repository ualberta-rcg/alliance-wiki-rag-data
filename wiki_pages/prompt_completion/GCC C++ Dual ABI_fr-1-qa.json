[
  {
    "question": "Quelle modification importante a \u00e9t\u00e9 introduite dans l'interface binaire-programme (ABI) de GCC?",
    "answer": "Une modification importante a \u00e9t\u00e9 introduite \u00e0 l'interface binaire-programme (ABI) entre les versions 4.9 et 5.1 de GCC."
  },
  {
    "question": "Quand est-ce que l'utilisation de diff\u00e9rentes versions de compilateurs GCC pose un probl\u00e8me d'ABI?",
    "answer": "L'utilisation de versions diff\u00e9rentes de compilateurs GCC peut emp\u00eacher l'\u00e9dition des liens de se faire correctement en raison de la modification de l'ABI, surtout si les liens se font vers des biblioth\u00e8ques pr\u00e9compil\u00e9es."
  },
  {
    "question": "Comment \u00e9viter les probl\u00e8mes de liaison li\u00e9s \u00e0 l'ABI lorsqu'on utilise diff\u00e9rentes versions de GCC, notamment avec des biblioth\u00e8ques pr\u00e9compil\u00e9es?",
    "answer": "Dans un tel cas, il faut utiliser la fonction Dual ABI pour que l'\u00e9dition des liens se fasse de fa\u00e7on appropri\u00e9e avec l'ancienne interface ABI."
  },
  {
    "question": "Quel param\u00e8tre doit-on passer \u00e0 GCC si l'on utilise une version sup\u00e9rieure \u00e0 5.1 pour g\u00e9rer la compatibilit\u00e9 avec l'ancienne ABI?",
    "answer": "Il faut passer `-D_GLIBCXX_USE_CXX11_ABI=0` \u00e0 GCC si vous utilisez une version sup\u00e9rieure \u00e0 5.1 pour la compatibilit\u00e9 avec l'ancienne ABI."
  },
  {
    "question": "Quel type d'erreurs peut \u00eatre r\u00e9solu en utilisant le param\u00e8tre `-D_GLIBCXX_USE_CXX11_ABI=0`?",
    "answer": "Dans certains cas, `-D_GLIBCXX_USE_CXX11_ABI=0` r\u00e9sout des erreurs comme `error: \u201cstd::list\u201d is ambiguous`."
  },
  {
    "question": "Qu'est-ce qu'une Interface binaire-programme (ABI) dans le contexte des compilateurs C++?",
    "answer": "L'ABI est constitu\u00e9e par les noms de symboles `extern \"C++\"` que les compilateurs utilisent pour composer des noms uniques et exporter, et qui sont utilis\u00e9s pour lier le code compil\u00e9 avec les biblioth\u00e8ques."
  },
  {
    "question": "Pourquoi une modification de l'ABI d'un compilateur peut-elle emp\u00eacher l'\u00e9dition des liens?",
    "answer": "Toute modification \u00e0 l'ABI d'un compilateur peut emp\u00eacher l'\u00e9dition des liens de se faire car les noms de symboles peuvent ne plus concorder entre le code et les biblioth\u00e8ques."
  },
  {
    "question": "Quelle est la condition essentielle pour que l'\u00e9dition des liens r\u00e9ussisse pour un programme ou une biblioth\u00e8que?",
    "answer": "Pour que l'\u00e9dition des liens s'effectue correctement, tous les noms de symboles doivent concorder, autrement l'\u00e9dition \u00e9chouera."
  },
  {
    "question": "Quel est le but de l'exemple de code C++ et du Makefile fournis?",
    "answer": "L'exemple d\u00e9montre l'effet des options pass\u00e9es \u00e0 GCC (>=v5.1) sur l'ABI utilis\u00e9e par les binaires g\u00e9n\u00e9r\u00e9s, en montrant comment les noms de symboles diff\u00e8rent selon la configuration du compilateur."
  },
  {
    "question": "Comment le Makefile de l'exemple met-il en \u00e9vidence les diff\u00e9rences d'ABI?",
    "answer": "Le Makefile compile le fichier `main.cxx` avec diverses options (par exemple, `-std=c++98`, `-std=c++11`, avec ou sans `-D_GLIBCXX_USE_CXX11_ABI=0` ou `1`), puis utilise `nm` pour extraire les noms de symboles et compare les r\u00e9sultats avec `diff`."
  }
]