[
  {
    "question": "How do you create an SSH tunnel for JupyterLab on Linux or macOS?",
    "answer": "On a Linux or macOS system, open a new terminal and use the `sshuttle` command: `sshuttle --dns -Nr <username>@<cluster>.alliancecan.ca`."
  },
  {
    "question": "After creating an SSH tunnel with sshuttle on Linux/macOS, how do you access JupyterLab in your web browser?",
    "answer": "Copy and paste the first provided HTTP address (e.g., `http://node_name.int.cluster.alliancecan.ca:8888/lab?token=...`) into your web browser."
  },
  {
    "question": "What tool is recommended for creating an SSH tunnel for JupyterLab from Windows?",
    "answer": "An SSH tunnel can be created from Windows using MobaXTerm."
  },
  {
    "question": "What two pieces of information must be extracted from the JupyterLab HTTP address to create an SSH tunnel on Windows?",
    "answer": "You need to extract the `hostname:port` (e.g., `node_name.int.cluster.alliancecan.ca:8888`) and the `token` (e.g., `101c368829...2728fad4eb`) from the first provided HTTP address."
  },
  {
    "question": "What is the command to establish an SSH tunnel for JupyterLab using MobaXTerm on Windows?",
    "answer": "After extracting the `hostname:port` and `token`, open a new Terminal tab in MobaXTerm and run `ssh -L 8888:<hostname:port> <username>@<cluster>.alliancecan.ca`."
  },
  {
    "question": "Once an SSH tunnel is established via MobaXTerm on Windows, how do you access JupyterLab in your web browser?",
    "answer": "Open your web browser and go to `http://localhost:8888/?token=<token>`, replacing `<token>` with the alphanumerical value extracted from the JupyterLab URL."
  },
  {
    "question": "How do you manually shut down the JupyterLab server before its allocated walltime limit expires?",
    "answer": "You can shut down the JupyterLab server by pressing `Ctrl-C` twice in the terminal that launched the interactive job."
  },
  {
    "question": "How do you shut down an SSH tunnel that was created using MobaXterm?",
    "answer": "To shut down an SSH tunnel created with MobaXterm, press `Ctrl-D` in the terminal where the tunnel was launched."
  },
  {
    "question": "What is the primary reason for adding kernels to JupyterLab?",
    "answer": "Adding kernels allows you to use JupyterLab with other programming languages, different Python versions, or specific persistent virtual environments containing required packages and libraries for your project."
  },
  {
    "question": "What are the two main steps involved in installing a new kernel in JupyterLab?",
    "answer": "The installation of a new kernel involves installing packages that allow the language interpreter to communicate with the Jupyter interface, and creating a `kernel spec file` which will be saved in `~/.local/share/jupyter/kernels`."
  },
  {
    "question": "What are the prerequisites for configuring a Julia kernel?",
    "answer": "Configuring a Julia kernel requires a Python virtual environment and a `kernels` folder. Additionally, since Julia package installation needs internet access, this configuration must be performed in a remote shell session on a login node."
  },
  {
    "question": "How do you load the Julia module when setting up a Julia kernel?",
    "answer": "You load the Julia module using the command `module load julia` in a terminal with an activated Python virtual environment."
  },
  {
    "question": "What command is used to install IJulia for the Julia kernel?",
    "answer": "To install IJulia, run the command `echo -e 'using Pkg\\nPkg.add(\"IJulia\")' | julia`."
  },
  {
    "question": "What is a crucial step after installing IJulia for the Julia kernel before it can be used?",
    "answer": "After installing IJulia, it is important to start or restart a new JupyterLab session before attempting to use the Julia kernel."
  }
]