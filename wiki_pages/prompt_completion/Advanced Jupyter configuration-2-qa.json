[
  {
    "question": "How do you create an SSH tunnel from Linux or macOS to access JupyterLab?",
    "answer": "On a Linux or macOS system, use the `sshuttle` Python package. Open a new terminal and run `sshuttle --dns -Nr <username>@<cluster>.computecanada.ca`."
  },
  {
    "question": "After creating an SSH tunnel with sshuttle, how do you access JupyterLab in your web browser?",
    "answer": "Copy and paste the first provided HTTP address (e.g., `http://node_name.int.cluster.computecanada.ca:8888/lab?token=...`) into your web browser."
  },
  {
    "question": "What tool is recommended for creating an SSH tunnel from Windows?",
    "answer": "An SSH tunnel can be created from Windows using MobaXTerm."
  },
  {
    "question": "How do you extract the hostname:port and token from the JupyterLab HTTP address on Windows?",
    "answer": "From the JupyterLab HTTP address (e.g., `http://node_name.int.cluster.computecanada.ca:8888/lab?token=...`), the `hostname:port` is `node_name.int.cluster.computecanada.ca:8888` and the `token` is the alphanumeric string after `token=`."
  },
  {
    "question": "What command do you use in MobaXTerm to create an SSH tunnel for JupyterLab?",
    "answer": "Open a new Terminal tab in MobaXTerm and run `ssh -L 8888:<hostname:port> <username>@<cluster>.computecanada.ca`, replacing the placeholders with your specific values."
  },
  {
    "question": "How do you access JupyterLab in a web browser after creating an SSH tunnel using MobaXTerm on Windows?",
    "answer": "Open your web browser and go to `http://localhost:8888/?token=<token>`, replacing `<token>` with the value extracted from the JupyterLab server's URL."
  },
  {
    "question": "How do you shut down the JupyterLab server?",
    "answer": "Press `Ctrl-C` twice in the terminal that launched the interactive job."
  },
  {
    "question": "How do you shut down an SSH tunnel created with MobaXterm?",
    "answer": "Press `Ctrl-D` in the MobaXterm terminal where the tunnel was initiated."
  },
  {
    "question": "Why would you add kernels to JupyterLab?",
    "answer": "You can add kernels for other programming languages, different Python versions, or persistent virtual environments with project-specific packages and libraries."
  },
  {
    "question": "What are the two main steps for installing a new kernel in JupyterLab?",
    "answer": "The two steps are: 1) Installing packages for the language interpreter to communicate with Jupyter, and 2) Creating a kernel spec file that tells JupyterLab how to initiate communication with the interpreter."
  },
  {
    "question": "Where are kernel spec files saved?",
    "answer": "Kernel spec files are saved in a subfolder of `~/.local/share/jupyter/kernels`."
  },
  {
    "question": "What are the prerequisites for configuring a Julia kernel?",
    "answer": "You need a Python virtual environment and a `kernels` folder. Also, the configuration must be done in an SSH remote shell session on a login node because Julia package installation requires internet access."
  },
  {
    "question": "How do you load the Julia module when configuring a Julia kernel?",
    "answer": "Run `module load julia` within your activated Python virtual environment."
  },
  {
    "question": "How do you install IJulia for the Julia kernel?",
    "answer": "After loading the Julia module, run `echo -e 'using Pkg\\nPkg.add(\"IJulia\")' | julia`."
  },
  {
    "question": "What is an important step after installing IJulia for the Julia kernel?",
    "answer": "Start or restart a new JupyterLab session before using the Julia kernel."
  },
  {
    "question": "How do you install additional Julia packages after the kernel is set up?",
    "answer": "First, ensure the same Julia module is loaded (e.g., `module load julia`). Then, use the Julia package manager, for example, `echo -e 'using Pkg\\nPkg.add(\"Glob\")' | julia` for the `Glob` package. This must be done from a login node."
  },
  {
    "question": "What are the initial steps for configuring a Python kernel in a new virtual environment?",
    "answer": "The initial steps include: starting from a clean Bash environment (if using Jupyter Terminal), loading a Python module, creating a new Python virtual environment, and activating it."
  },
  {
    "question": "How do you create the common `kernels` folder for JupyterLab?",
    "answer": "Run `mkdir -p ~/.local/share/jupyter/kernels` in your activated Python virtual environment."
  },
  {
    "question": "How do you install the `ipykernel` library for a Python kernel?",
    "answer": "Run `pip install --no-index ipykernel` in your activated Python virtual environment."
  },
  {
    "question": "How do you generate the kernel spec file for a Python kernel?",
    "answer": "Run `python -m ipykernel install --user --name <unique_name> --display-name \"Python 3.x Kernel\"`, replacing `<unique_name>` with a unique identifier."
  },
  {
    "question": "What should you do after installing a new Python kernel?",
    "answer": "Start or restart a new JupyterLab session before using the Python kernel."
  },
  {
    "question": "How do you install more Python libraries for an existing Python kernel?",
    "answer": "Activate the Python virtual environment and use `pip install --no-index <library_name>`. For example, `pip install --no-index numpy`."
  },
  {
    "question": "What are the prerequisites for configuring an R kernel?",
    "answer": "You need a Python virtual environment and a `kernels` folder. Also, the configuration must be done in an SSH remote shell session on a login node because R package installation requires access to CRAN."
  },
  {
    "question": "How do you load an R module when configuring an R kernel?",
    "answer": "Run `module load r/4.1` within your activated Python virtual environment (or desired R version)."
  },
  {
    "question": "How do you install the R kernel dependencies (`crayon`, `pbdZMQ`, `devtools`)?",
    "answer": "After loading an R module, open the R shell with `R --no-save` and then run `install.packages(c('crayon', 'pbdZMQ', 'devtools'), repos='http://cran.us.r-project.org')`."
  },
  {
    "question": "How do you install the R kernel itself?",
    "answer": "In the R shell, after installing dependencies, run `devtools::install_github(paste0('IRkernel/', c('repr', 'IRdisplay', 'IRkernel')))`."
  },
  {
    "question": "How do you install the R kernel spec file?",
    "answer": "In the R shell, after installing the R kernel, run `IRkernel::installspec()`."
  },
  {
    "question": "Can R packages be installed from Jupyter notebooks?",
    "answer": "No, R packages cannot be installed from notebooks because there is no access to CRAN."
  },
  {
    "question": "How do you install additional R packages from a login node?",
    "answer": "Load the R module (e.g., `module load r/4.1`), then start the R shell with `R --no-save` and use `install.packages('<package_name>', repos='http://cran.us.r-project.org')`."
  }
]