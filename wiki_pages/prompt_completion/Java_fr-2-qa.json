[
  {
    "question": "What common error messages indicate insufficient memory for a Java Runtime Environment to continue?",
    "answer": "Error messages such as \"Could not reserve enough space for object heap\" or \"There is insufficient memory for the Java Runtime Environment to continue\" often indicate insufficient memory."
  },
  {
    "question": "How can you explicitly set the initial and maximum heap size for a Java instance?",
    "answer": "You can explicitly control these parameters using commands like `java -Xms256m -Xmx4g -version` or `java -XX:InitialHeapSize=256m -XX:MaxHeapSize=4g -version`."
  },
  {
    "question": "How do you view all the command-line options that a Java instance will execute?",
    "answer": "To view all command-line options, use the `-XX:+PrintCommandLineFlags` indicator, for example: `java -Xms256m -Xmx4g -XX:+PrintCommandLineFlags -version`."
  },
  {
    "question": "What is an alternative way to configure Java execution options instead of specifying them on the command line?",
    "answer": "You can use the environment variable `JAVA_TOOL_OPTIONS` to configure execution options, for example: `export JAVA_TOOL_OPTIONS=\"-Xms256m -Xmx2g\"`."
  },
  {
    "question": "When is using the `JAVA_TOOL_OPTIONS` environment variable particularly useful?",
    "answer": "It is useful when multiple calls are launched or when a program is called by another Java program."
  },
  {
    "question": "How can you confirm that `JAVA_TOOL_OPTIONS` have been taken into account during execution?",
    "answer": "At execution, the program will emit a diagnostic message similar to \"Picked up JAVA_TOOL_OPTIONS\", indicating that the options have been considered."
  },
  {
    "question": "What is the recommended task limit for memory allocation relative to the `-Xmx` option in Java?",
    "answer": "It is recommended that the limit per task be set to 1 or 2GB more than the value of the `-Xmx` option, as the Java instance itself reserves memory for usage."
  },
  {
    "question": "What is the purpose of Java's automatic Garbage Collection (GC) process?",
    "answer": "Java's automatic Garbage Collection identifies variables with invalid values and returns their associated memory to the operating system."
  },
  {
    "question": "What is the default behavior for Garbage Collection in a Java instance regarding threads?",
    "answer": "By default, a Java instance uses a parallel GC and determines a number of GC threads equal to the number of CPU cores of the node, regardless of whether the Java task is multi-threaded or not."
  },
  {
    "question": "How does the number of Garbage Collection threads affect memory consumption?",
    "answer": "Each GC thread consumes memory, and the amount of memory consumed by GC threads is proportional to the quantity of physical memory."
  },
  {
    "question": "What is the strong recommendation for configuring the number of parallel Garbage Collection threads?",
    "answer": "It is strongly recommended to set the number of GC threads equal to the number of CPU cores you request from the scheduler in the submission script, for example, using `-XX:ParallelGCThreads=12`."
  },
  {
    "question": "How can you enable sequential Garbage Collection in Java?",
    "answer": "You can enable sequential GC using the option `-XX:+UseSerialGC`."
  },
  {
    "question": "What does the `volatile` keyword signify for a variable in Java?",
    "answer": "For a Java variable with the `volatile` attribute, its value is always read directly from main memory and always written directly to main memory, making any modification visible to all other threads."
  },
  {
    "question": "Is the meaning of the `volatile` keyword the same in Java as in C/C++?",
    "answer": "No, the meaning of the `volatile` keyword in Java is very different from its meaning in C/C++."
  },
  {
    "question": "Is `volatile` always sufficient to prevent race conditions in Java?",
    "answer": "No, in some contexts, `volatile` is not sufficient to prevent race conditions, and `synchronized` is necessary to maintain program consistency."
  },
  {
    "question": "Which book is recommended for understanding and mastering concurrent programming with Java Threads?",
    "answer": "The book \"Java Threads: Understanding and Mastering Concurrent Programming, 3rd edition\" by Scott Oaks and Henry Wong, O'Reilly, 2012, is recommended."
  }
]