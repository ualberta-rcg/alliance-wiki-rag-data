[
  {
    "question": "What PyTorch class is used for multi-GPU data parallelism in the `pytorch-ddp-test.py` script?",
    "answer": "`torch.nn.parallel.DistributedDataParallel` is used to wrap the model for multi-GPU data parallelism."
  },
  {
    "question": "What components are used to prepare training data in the `pytorch-ddp-test.py` script?",
    "answer": "Training data is prepared using `torchvision.transforms`, `torchvision.datasets.CIFAR10`, `torch.utils.data.distributed.DistributedSampler`, and `torch.utils.data.DataLoader`."
  },
  {
    "question": "Which loss function and optimizer are employed in the `pytorch-ddp-test.py` script?",
    "answer": "`nn.CrossEntropyLoss().cuda()` is used as the loss function, and `optim.SGD` is used as the optimizer."
  },
  {
    "question": "What is the main advantage of using PyTorch Lightning for deep learning tasks?",
    "answer": "PyTorch Lightning provides interfaces to PyTorch to make many common, code-heavy tasks, including training on multiple GPUs, more straightforward."
  },
  {
    "question": "How many GPUs are requested by the `pytorch-ddp-test-pl.sh` SLURM script?",
    "answer": "The script requests 2 GPUs using `--gres=gpu:2`."
  },
  {
    "question": "What command is used to install PyTorch Lightning and torchvision within the `pytorch-ddp-test-pl.sh` script?",
    "answer": "`pip install torchvision pytorch-lightning --no-index` is used after activating the virtual environment."
  },
  {
    "question": "What is the base class for models defined using PyTorch Lightning?",
    "answer": "Models defined with PyTorch Lightning inherit from `pl.LightningModule`."
  },
  {
    "question": "How is the optimizer configured within a PyTorch Lightning model?",
    "answer": "The optimizer is configured in the `configure_optimizers` method of the `pl.LightningModule`."
  },
  {
    "question": "What parameters are used to initialize a PyTorch Lightning `Trainer` for distributed data parallel (DDP) GPU training?",
    "answer": "The `Trainer` is initialized with `accelerator=\"gpu\"`, `devices`, `num_nodes`, and `strategy='ddp'`."
  },
  {
    "question": "How are input and target tensors moved to a CUDA device in the `train` function of `pytorch-ddp-test.py`?",
    "answer": "Inputs and targets are moved to the CUDA device by calling the `.cuda()` method on them (e.g., `inputs = inputs.cuda()`)."
  },
  {
    "question": "What command is used to compile the PyTorch model (`net`) for performance in `pytorch-ddp-test.py`?",
    "answer": "The model is compiled using `net = torch.compile(Net())`."
  },
  {
    "question": "What is the default batch size value specified in the `argparse` for `pytorch-ddp-test-pl.py`?",
    "answer": "The default batch size specified is `768`."
  }
]