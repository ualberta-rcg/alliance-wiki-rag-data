[
  {
    "question": "What are the two main forms of scaling discussed in parallel programming?",
    "answer": "The two main forms of scaling discussed are strong scaling and weak scaling."
  },
  {
    "question": "Which type of scaling is typically assumed when the term 'scaling' is used without qualification?",
    "answer": "When the term 'scaling' is used without any qualification, strong scaling is normally what is meant."
  },
  {
    "question": "When should strong scaling be applied?",
    "answer": "Strong scaling applies when you wish to perform simulations of the same size as before, but more quickly."
  },
  {
    "question": "When is weak scaling more important or applicable?",
    "answer": "Weak scaling may be more important if you wish to simulate larger or more detailed models and are willing to wait just as long as before for better results."
  },
  {
    "question": "How is strong scaling defined for a scalability analysis?",
    "answer": "In strong scaling, the problem used for the scalability analysis is fixed, while the number of CPU cores increases."
  },
  {
    "question": "What is considered ideal linear scaling in strong scaling?",
    "answer": "Ideally, linear scaling means the decrease in the program's run time is the reciprocal of the number of cores added compared to that used for the reference calculation."
  },
  {
    "question": "How is efficiency calculated for strong scaling, given a reference run time at two cores?",
    "answer": "Efficiency is calculated by dividing the reference run time at two cores by the run time at 'n' cores, then dividing that result by 'n/2', and finally multiplying by one hundred to get a percentage."
  },
  {
    "question": "What does a 100% efficiency indicate in strong scaling?",
    "answer": "A 100% efficiency measures the degree to which parallel performance scales linearly, meaning doubling the number of cores halves the run time."
  },
  {
    "question": "What is 'superlinear scaling' and what causes it?",
    "answer": "Superlinear scaling occurs when greater than 100% efficiency is achieved, which is rare but usually due to a CPU cache functioning more effectively as each CPU core has less to do."
  },
  {
    "question": "What is considered a good efficiency target in strong scaling?",
    "answer": "An efficiency of 75% or more is considered good in strong scaling."
  },
  {
    "question": "Based on the strong scaling example provided, what is the recommended number of CPU cores?",
    "answer": "For the strong scaling example provided, it is advised to submit jobs using 16 CPU cores, as improvement beyond that would not be a good use of resources despite continued runtime decrease."
  },
  {
    "question": "How many data points are recommended for a strong scalability analysis?",
    "answer": "At least five or six values are recommended for a strong scalability analysis, and the analysis should not be pursued beyond the point where the program runs more slowly with added cores."
  },
  {
    "question": "How is weak scaling defined?",
    "answer": "In weak scaling, the problem size is increased in proportion to the increase in the number of CPU cores so that, ideally, the program's run time will always remain the same."
  },
  {
    "question": "How is 'problem size' defined in the context of weak scaling?",
    "answer": "The definition of 'problem size' depends on the nature of the problem; for example, it might be the number of atoms in a molecular simulation or the number of cells/nodes in a fluid dynamics simulation."
  },
  {
    "question": "How is efficiency calculated for weak scaling?",
    "answer": "For weak scaling, efficiency is calculated by dividing the reference run time by the run time at 'n' cores and then multiplying by one hundred to obtain a percentage."
  },
  {
    "question": "What is the desired efficiency goal for weak scaling?",
    "answer": "The goal for weak scaling is to achieve an efficiency of at least 75%."
  },
  {
    "question": "For what types of applications is weak scaling especially relevant?",
    "answer": "Weak scaling is especially pertinent for applications that are memory-bound and for parallel programs designed to privilege communications between nearest neighbors."
  },
  {
    "question": "Which types of applications may show poor performance in a weak scalability analysis?",
    "answer": "Applications that perform a lot of nonlocal communication, such as a fast Fourier transform, may exhibit poor performance in a weak scalability analysis."
  }
]