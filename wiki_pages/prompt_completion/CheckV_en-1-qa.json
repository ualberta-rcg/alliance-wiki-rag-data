[
  {
    "question": "What is CheckV?",
    "answer": "CheckV is a fully automated command-line pipeline for assessing the quality of single-contig viral genomes."
  },
  {
    "question": "What are the capabilities of CheckV?",
    "answer": "CheckV can identify host contamination for integrated proviruses, estimate completeness for genome fragments, and identify closed genomes."
  },
  {
    "question": "How can I find information about available software on the clusters?",
    "answer": "You can find all information about available software on the [[Available software]] page."
  },
  {
    "question": "How do I search for an available software module?",
    "answer": "You can search for a module by using the command `module spider nameOfYourSoftware`."
  },
  {
    "question": "Can I search for a module without its full name?",
    "answer": "Yes, you can search by putting the name in between double quotes \"\" if you do not have the full name."
  },
  {
    "question": "Is the `module spider` command case-sensitive?",
    "answer": "No, the `module spider` search is not sensitive to the case."
  },
  {
    "question": "How do I find module dependencies?",
    "answer": "You can add the version number after the software name, like `module spider nameOfYourSoftware/10.2`, to get details about modules you might need to load before or with your software (dependencies)."
  },
  {
    "question": "Why would `module spider` not find CheckV?",
    "answer": "CheckV is a Python wheel, so `module spider` would not return any output for it."
  },
  {
    "question": "How are Python modules provided on the clusters?",
    "answer": "Python modules are provided as binary wheels."
  },
  {
    "question": "How do I find available Python wheels?",
    "answer": "You can find available Python wheels by typing `avail_wheels CheckV`."
  },
  {
    "question": "Is the `avail_wheels` command case-sensitive?",
    "answer": "No, the `avail_wheels` command is insensitive to the case, similar to `module spider`."
  },
  {
    "question": "How can I list all available versions of a Python wheel?",
    "answer": "You can add `--all-version` to the `avail_wheels` command to list all available versions, e.g., `avail_wheels CheckV --all-version`."
  },
  {
    "question": "What should I do if the software I want to use is not available on the clusters?",
    "answer": "First steps would be to have a look at the documentation of the software and follow the installation steps from its development page."
  },
  {
    "question": "Are Conda environments usable on the clusters?",
    "answer": "No, you cannot use Conda environments on the clusters."
  },
  {
    "question": "Where can I find instructions to install software locally in my account?",
    "answer": "There is a wiki page that explains how you can install software locally in your account at [[Installing software in your home directory]]."
  },
  {
    "question": "Who can I contact for help with software installation on the clusters?",
    "answer": "You can email the [[Technical support]] to get help with installation in your account or on the clusters."
  },
  {
    "question": "Where can I search for Python wheels?",
    "answer": "You can search for Python wheels on the [https://pypi.org/ PyPI] website."
  },
  {
    "question": "How do I install a Python wheel into my virtual environment from the web?",
    "answer": "You can install a wheel using the command: `pip install nameOfTheWheel`."
  },
  {
    "question": "How can I install a Python wheel from the cluster's wheelhouse?",
    "answer": "To install a wheel from our wheelhouse, you need to add the `--no-index` parameter to the `pip install` command, e.g., `pip install nameOfTheWheel --no-index`."
  },
  {
    "question": "What is the first step in the software installation process?",
    "answer": "The first step is to load the necessary modules."
  },
  {
    "question": "What modules are loaded for CheckV installation?",
    "answer": "The modules loaded for CheckV installation are `gcc hmmer/3.3.2 prodigal-gv/2.6.3 diamond/2.0.4 python/3.10`."
  },
  {
    "question": "How do I create a virtual environment?",
    "answer": "You can create a virtual environment using `virtualenv ~/CheckV_env`."
  },
  {
    "question": "How do I activate a virtual environment?",
    "answer": "You activate a virtual environment using `source ~/CheckV_env/bin/activate`."
  },
  {
    "question": "Why is it important to upgrade `pip` in the environment?",
    "answer": "This step is important if you are using a Python version less than 3.10.2."
  },
  {
    "question": "How do I upgrade `pip` in my virtual environment?",
    "answer": "You can upgrade `pip` using the command `pip install --no-index --upgrade pip`."
  },
  {
    "question": "What is the preferred method for installing a Python wheel for CheckV?",
    "answer": "The preferred method is to install a wheel from the wheelhouse using `pip install --no-index checkv`."
  },
  {
    "question": "What is a limitation of installing a wheel from the web inside a virtual environment?",
    "answer": "If you install a wheel from the web inside your virtual environment, you will not be able to use a requirement file."
  },
  {
    "question": "How do I validate the CheckV installation?",
    "answer": "You can validate the installation by running `python -c 'import checkv'` and `checkv --help`."
  },
  {
    "question": "How do I freeze the environment and generate a requirements file?",
    "answer": "You can freeze the environment and generate a requirements file using `pip freeze > checkv-1.0.1-requirements.txt`."
  },
  {
    "question": "When can a requirement file be used for installation?",
    "answer": "A requirement file can only be used with installation options 4.1 (wheelhouse) and 4.3 (web install outside venv)."
  },
  {
    "question": "What is the first step for using CheckV with databases?",
    "answer": "You must pre-download the database before submitting your job."
  },
  {
    "question": "Where is it recommended to download databases for intensive read/write operations?",
    "answer": "It is usually recommended to download databases in your scratch storage space."
  },
  {
    "question": "What command is used to download the CheckV database?",
    "answer": "The command to download the CheckV database is `checkv download_database $SCRATCH/`."
  },
  {
    "question": "How can users update the CheckV database using their own genomes?",
    "answer": "Users can update the database using `checkv update_database /path/to/checkv-db /path/to/updated-checkv-db genomes.fna`."
  },
  {
    "question": "Where can users find archives of previous CheckV database versions?",
    "answer": "An archive of all previous database versions can be found at [[https://portal.nersc.gov/CheckV/]]."
  },
  {
    "question": "How do you manually build a DIAMOND database for an archived CheckV database?",
    "answer": "You can build it manually by first downloading and extracting the archived database, then navigating to its `genome_db` directory and running `diamond makedb --in checkv_reps.faa --db checkv_reps`."
  },
  {
    "question": "Where can I find a sequence test dataset for CheckV?",
    "answer": "The data set is available at [https://bitbucket.org/berkeleylab/checkv/src/master/test/]."
  },
  {
    "question": "How do I download the CheckV sequence test dataset?",
    "answer": "You can download it with the command `wget https://bitbucket.org/berkeleylab/checkv/raw/3f185b5841e8c109848cd0b001df7117fe795c50/test/test_sequences.fna`."
  },
  {
    "question": "What is the first step for running a job on the clusters?",
    "answer": "The first step for running your job is to use an interactive session."
  },
  {
    "question": "Where can I find more information about SBATCH parameters?",
    "answer": "You can refer to the [https://slurm.schedmd.com/sbatch.html Slurm SBATCH command page] and the [[Running jobs]] wiki page."
  },
  {
    "question": "What is the first thing to do when analyzing a software command line for HPC usage?",
    "answer": "The first thing to do is to analyze the proposed command line and look in the help menu for information about threading or parameters that help set up HPC usage."
  },
  {
    "question": "What is the proposed command line for a full CheckV pipeline analysis?",
    "answer": "The proposed command line is `checkv end_to_end input_file.fna output_directory -t 16`."
  },
  {
    "question": "How do I access the help menu for the `checkv end_to_end` program?",
    "answer": "You can access the help menu by running `checkv end_to_end --help`."
  },
  {
    "question": "What does the `-t` parameter in `checkv end_to_end` specify?",
    "answer": "The `-t` parameter specifies the number of threads to use for Prodigal and DIAMOND."
  },
  {
    "question": "What programs does CheckV use that are multithreaded?",
    "answer": "CheckV uses Prodigal and DIAMOND, which are programs written with multithreaded code."
  },
  {
    "question": "What command should be used to launch an interactive session for CheckV as a first trial?",
    "answer": "The command is `salloc --time=1:0:0 --mem=2G --cpus-per-task=16 --account=def-someuser`."
  },
  {
    "question": "What is the recommended runtime for an interactive job?",
    "answer": "The recommended runtime for an interactive job is typically 1 or 2 hours, as it's meant for exploring command lines or debugging, not long-running scripts."
  },
  {
    "question": "What is the objective when setting memory for an interactive job?",
    "answer": "The objective is to start low (e.g., 2G) and increase if needed."
  },
  {
    "question": "What is the recommended approach for setting CPU cores for an interactive job?",
    "answer": "The recommended approach is to start from lower and go to higher, for example, starting with 16 tasks as suggested by CheckV's command line."
  },
  {
    "question": "When should necessary modules be loaded relative to activating the virtual environment?",
    "answer": "It is important to load necessary modules before activating your virtual environment."
  },
  {
    "question": "How do I execute the CheckV command within an interactive session using a test dataset?",
    "answer": "You execute the command `checkv end_to_end test_sequences.fna $SCRATCH/checkv_output -t ${SLURM_CPUS_PER_TASK:-1} -d $SCRATCH/checkv-db-v1.5`."
  }
]