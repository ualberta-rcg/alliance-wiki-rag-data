[
  {
    "question": "What is the nature of the OpenACC `parallel loop` directive?",
    "answer": "The `parallel loop` directive is prescriptive, meaning the compiler is forced to execute the loop in parallel."
  },
  {
    "question": "What clause is implicitly included with the `parallel loop` directive?",
    "answer": "The `independent` clause is implicit within a `parallel loop` zone."
  },
  {
    "question": "Which clauses are needed with `parallel loop` to manage data flow in a parallel zone?",
    "answer": "The `private` and `reduction` clauses are needed to manage data flow within a parallel zone when using `parallel loop`."
  },
  {
    "question": "What is the function of the `private` clause in OpenACC?",
    "answer": "With the `private` clause, a copy of the variable is made for each iteration of the loop, ensuring its value is independent of other iterations."
  },
  {
    "question": "What does the `reduction` clause do in OpenACC, and with what operations can it be used?",
    "answer": "The `reduction` clause takes the values of a variable from each iteration and reduces them to a single unique value. It can be used with operations like addition (+), multiplication (*), maximum (max), and minimum (min)."
  },
  {
    "question": "Why are `private` and `reduction` clauses not required with the `kernels` directive?",
    "answer": "These clauses are not necessary with the `kernels` directive because the compiler automatically handles the data flow management."
  },
  {
    "question": "What are the programmer's responsibilities when using `parallel loop`?",
    "answer": "When using `parallel loop`, the programmer is responsible for the integrity of the parallelized code and for identifying parallelization opportunities the compiler might miss. Its operation is similar to OpenMP."
  },
  {
    "question": "What are the compiler's responsibilities when using the `kernels` directive?",
    "answer": "With the `kernels` directive, the compiler is responsible for analyzing the code, guaranteeing its integrity, applying a single directive to large code portions, and optimizing the code freely."
  },
  {
    "question": "Are both `parallel loop` and `kernels` approaches valid, and how does their performance compare?",
    "answer": "Both `parallel loop` and `kernels` approaches are valid, and their performance is comparable."
  },
  {
    "question": "What OpenACC compiler flags should be added to the Makefile for the exercise?",
    "answer": "The flags `-acc -gpu=managed` and `-Minfo=accel` should be added to the Makefile for the compiler."
  }
]