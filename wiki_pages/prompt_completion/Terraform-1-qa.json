[
  {
    "question": "What is Terraform used for?",
    "answer": "Terraform is a tool for defining and provisioning data centre infrastructure, including virtual machines."
  },
  {
    "question": "What is the infrastructure-as-code model in Terraform?",
    "answer": "Terraform's infrastructure-as-code model allows one to maintain OpenStack resources as a collection of definitions that can be easily updated using favourite text editors, shared among members of a group, and stored in version control."
  },
  {
    "question": "What is the purpose of this tutorial page regarding Terraform?",
    "answer": "This page introduces Terraform and demonstrates its use on OpenStack clouds, specifically setting up a local workspace and creating a VM with a floating IP and attached volume."
  },
  {
    "question": "What are the necessary preparations before starting with Terraform?",
    "answer": "Before starting with Terraform, you need access to an OpenStack tenant with available resources, Terraform itself, and a few things configured on your workstation or laptop."
  },
  {
    "question": "Where can I find information about getting an OpenStack cloud project?",
    "answer": "For access to the cloud, you can refer to the 'Getting a Cloud project' section on the wiki."
  },
  {
    "question": "What should someone do if they are new to OpenStack before using Terraform?",
    "answer": "If you've never used OpenStack before, you should familiarize yourself with it by first creating a VM, attaching a volume, associating a floating IP, and ensuring you can log in to the VM afterwards."
  },
  {
    "question": "What assumption does this tutorial make about SSH keys?",
    "answer": "This tutorial assumes you already have an SSH key pair created and the public key stored with OpenStack."
  },
  {
    "question": "Which guide is recommended for users unfamiliar with basic OpenStack VM creation tasks?",
    "answer": "The 'Cloud Quick Start' guide will help users who don\u2019t yet know how to create VMs, attach volumes, or associate floating IPs."
  },
  {
    "question": "Where can the latest Terraform client be downloaded from?",
    "answer": "The latest Terraform client can be downloaded from the Terraform downloads page."
  },
  {
    "question": "Which version of Terraform is this guide based on?",
    "answer": "This guide is based on Terraform 0.12."
  },
  {
    "question": "What are the two primary ways to provide OpenStack credentials in a command-line environment for Terraform?",
    "answer": "OpenStack credentials can be provided in a command-line environment via environment variables or in a configuration file."
  },
  {
    "question": "How can you download OpenStack credentials from the OpenStack web interface?",
    "answer": "Once logged into the OpenStack web interface, click on 'API Access' in the navigation bar, and from the 'Download OpenStack RC File' drop-down menu, you can download a `clouds.yaml` file or an RC file."
  },
  {
    "question": "What is an OpenStack RC file and how is it used?",
    "answer": "An OpenStack RC file is a series of shell commands that export environment variables to your current shell session. It must be sourced (e.g., `$ source openrc.sh`) in the context of the current session and will prompt for your OpenStack password."
  },
  {
    "question": "What information is stored in environment variables after sourcing an OpenStack RC file?",
    "answer": "After sourcing an RC file, environment variables prefixed by `OS_`, such as `OS_AUTH_URL`, will store your OpenStack password and necessary information about you, your tenant, and the cloud you\u2019re connecting to."
  },
  {
    "question": "What is the alternative method to using an RC file for OpenStack credentials in Terraform?",
    "answer": "The other method is to create a configuration in `$HOME/.config/openstack/clouds.yaml`."
  },
  {
    "question": "How do you specify which OpenStack cloud to use with CLI tools when using a `clouds.yaml` file?",
    "answer": "To use CLI tools with `clouds.yaml`, you create an environment variable `$OS_CLOUD` with the name of the cloud you want to use, for example, `$ export OS_CLOUD=arbutus`."
  },
  {
    "question": "Why is it useful to have a terminal window open running the OpenStack CLI?",
    "answer": "It is helpful to have a terminal window open running the OpenStack CLI because it provides a handy reference for looking up flavour and image IDs and for verifying the actions performed by Terraform."
  },
  {
    "question": "Can OpenStack Horizon be used to directly look up flavour IDs?",
    "answer": "No, Horizon can be used for looking up images and general verification, but it is not possible to directly lookup flavour IDs."
  },
  {
    "question": "How is the OpenStack CLI client typically installed?",
    "answer": "The OpenStack CLI (OSC) is a Python client which can be best installed through Python Pip."
  },
  {
    "question": "What is the initial step for creating a Terraform workspace?",
    "answer": "The initial step for creating a Terraform workspace is to create a directory for your Terraform configuration and state files."
  }
]