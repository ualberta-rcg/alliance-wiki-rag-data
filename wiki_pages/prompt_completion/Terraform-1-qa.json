[
  {
    "question": "What is Terraform?",
    "answer": "Terraform is a tool for defining and provisioning data centre infrastructure, including virtual machines."
  },
  {
    "question": "Why is Terraform gaining popularity within the Alliance Federation?",
    "answer": "Terraform is seeing growing use within the Alliance Federation because its infrastructure-as-code model allows one to maintain OpenStack resources as a collection of definitions."
  },
  {
    "question": "What are the benefits of Terraform's infrastructure-as-code model?",
    "answer": "The infrastructure-as-code model allows OpenStack resource definitions to be easily updated using text editors, shared among group members, and stored in version control."
  },
  {
    "question": "What is the primary goal of this tutorial page?",
    "answer": "This page introduces Terraform and demonstrates its use on OpenStack clouds by setting up a local workspace and creating a VM with a floating IP and attached volume."
  },
  {
    "question": "What are the necessary preparations before starting with Terraform?",
    "answer": "Before starting with Terraform, you need access to an OpenStack tenant with available resources, Terraform itself, and a few things configured on your workstation or laptop."
  },
  {
    "question": "Where can I find information on getting an OpenStack cloud project?",
    "answer": "For access to the cloud, you can refer to the 'Getting a Cloud project' section on their wiki, specifically [[Cloud#Getting_a_Cloud_project]]."
  },
  {
    "question": "What should someone do if they are new to OpenStack before using Terraform?",
    "answer": "If you've never used OpenStack before, you should familiarize yourself with it first by creating a VM, attaching a volume, associating a floating IP, and ensuring you can log in to the VM afterwards."
  },
  {
    "question": "What does this tutorial assume regarding SSH key pairs for OpenStack?",
    "answer": "This tutorial assumes you already have an SSH key pair created and the public key stored with OpenStack."
  },
  {
    "question": "Where can I download the latest Terraform client?",
    "answer": "You can find the latest Terraform client on the Terraform downloads page at https://www.terraform.io/downloads.html."
  },
  {
    "question": "Which version of Terraform is this guide based on?",
    "answer": "This guide is based on Terraform 0.12."
  },
  {
    "question": "What are the two ways to provide OpenStack credentials in a command-line environment?",
    "answer": "You can provide OpenStack credentials in a command-line environment via environment variables or in a configuration file."
  },
  {
    "question": "How can I download OpenStack credentials from the web interface?",
    "answer": "Once logged into the OpenStack web interface, click on 'API Access' in the navigation bar, then use the 'Download OpenStack RC File' drop-down menu."
  },
  {
    "question": "What types of credential files can be downloaded from the OpenStack web interface?",
    "answer": "You can download a `clouds.yaml` file or an RC file."
  },
  {
    "question": "How is an RC file used to provide OpenStack credentials?",
    "answer": "An RC file is a series of shell commands that export environment variables. It must be sourced in the context of the current session, for example, by running `$ source openrc.sh`."
  },
  {
    "question": "What information is stored in environment variables after sourcing an RC file?",
    "answer": "After sourcing an RC file, your OpenStack password and necessary information about you, your tenant, and the cloud will be stored in environment variables prefixed by `OS_`, such as `$OS_AUTH_URL`."
  },
  {
    "question": "What is the alternative method for providing OpenStack credentials using a configuration file?",
    "answer": "The other method is to create a configuration file named `clouds.yaml` in `$HOME/.config/openstack/`."
  },
  {
    "question": "What is recommended when using `clouds.yaml`, especially with multiple OpenStack clouds?",
    "answer": "It is recommended to change the name given to the cloud in the downloaded `clouds.yaml` file to something meaningful, especially if you use more than one OpenStack cloud."
  },
  {
    "question": "How do you specify which cloud to use when using the `clouds.yaml` configuration?",
    "answer": "To use the CLI tools with `clouds.yaml`, simply create an environment variable `$OS_CLOUD` with the name of the cloud you want to use, e.g., `$ export OS_CLOUD=arbutus`."
  },
  {
    "question": "Why is it helpful to have an OpenStack CLI terminal window open when working with Terraform?",
    "answer": "It provides a handy reference for building specifications, allowing you to look up flavour and image IDs, and verify actions performed by Terraform."
  },
  {
    "question": "What is the OpenStack CLI?",
    "answer": "The OpenStack CLI (OSC) is a Python client that can be installed through Python Pip and is available for multiple OSes and distributions."
  },
  {
    "question": "What is the first step in setting up a Terraform workspace?",
    "answer": "First, create a directory for your Terraform configuration and state files; this will serve as your home base for the guide."
  }
]