[
  {
    "question": "What is OpenACC primarily used for?",
    "answer": "OpenACC makes it relatively easy to offload vectorized code to accelerators such as GPUs."
  },
  {
    "question": "How does OpenACC differ from CUDA and OpenCL in terms of kernel coding?",
    "answer": "Unlike CUDA and OpenCL where kernels need to be coded explicitly, OpenACC minimizes the amount of modifications to do on a serial or OpenMP code."
  },
  {
    "question": "How is OpenACC code processed to run on accelerators?",
    "answer": "The compiler converts the OpenACC code into a binary executable that can make use of accelerators."
  },
  {
    "question": "How does the performance of OpenACC code compare to CUDA code?",
    "answer": "The performance of OpenACC codes can be similar to the one of a CUDA code, except that OpenACC requires less code development."
  },
  {
    "question": "How does OpenACC convert a for loop into parallel code for an accelerator?",
    "answer": "OpenACC can convert a `for` loop into parallel code that would run on an accelerator using compiler directives `#pragma acc ...`."
  },
  {
    "question": "Where should OpenACC `pragma` directives be placed?",
    "answer": "Compiler directives `#pragma acc ...` should be placed before structured blocks of code like, for example, a `for` loop."
  },
  {
    "question": "Where can one find a description of all supported OpenACC `pragma` directives?",
    "answer": "All supported `pragma` directives are described in the OpenACC specification."
  },
  {
    "question": "Which programming languages can OpenACC be used in?",
    "answer": "OpenACC can be used in Fortran, C, and C++."
  },
  {
    "question": "What is the purpose of the provided C and C++ code examples?",
    "answer": "The code examples illustrate a simple program that computes a decimal approximation to \u03c0 based on a definite integral which is equal to arctan(1), i.e. \u03c0/4."
  },
  {
    "question": "What are the specific OpenACC directives used in the C and C++ example code for calculating pi?",
    "answer": "The example code uses `#pragma acc parallel vector_length(vl)` and `#pragma acc loop reduction(+:pi)`."
  },
  {
    "question": "What value is `N` set to in the C/C++ OpenACC pi calculation example?",
    "answer": "`N` is set to 2,000,000,000 in the C/C++ OpenACC pi calculation example."
  },
  {
    "question": "Which compilers are mentioned as supporting OpenACC?",
    "answer": "PGI and GCC compilers are mentioned as supporting OpenACC."
  },
  {
    "question": "What PGI module and minimum version are required for OpenACC?",
    "answer": "Module `pgi`, any version from 13.10 is mentioned."
  },
  {
    "question": "What GCC module and minimum version are required for OpenACC?",
    "answer": "Module `gcc`, any version from 9.3.0 is mentioned."
  },
  {
    "question": "Do newer versions of PGI and GCC support modern GPU capabilities?",
    "answer": "Yes, newer versions of both PGI and GCC support newest GPU capabilities."
  },
  {
    "question": "What is an example compilation command for an OpenACC C program using GCC?",
    "answer": "An example compilation command is `gcc -fopenacc -march=native -O3 pi.c -o pi`."
  },
  {
    "question": "Where can users find a tutorial for OpenACC?",
    "answer": "Users can find a tutorial at [[OpenACC_Tutorial]]."
  },
  {
    "question": "Where can the OpenACC official documentation be found?",
    "answer": "The OpenACC official documentation - Specification 3.1 (PDF) is available at https://www.openacc.org/sites/default/files/inline-images/Specification/OpenACC-3.1-final.pdf."
  }
]