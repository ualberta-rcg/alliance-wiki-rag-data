[
  {
    "question": "\u00c0 quoi sert le fichier 'requirements.txt' pour un environnement Python ?",
    "answer": "Le fichier 'requirements.txt' permet de s'assurer que votre environnement Python puisse \u00eatre reproduit pour d'autres t\u00e2ches."
  },
  {
    "question": "Que faire si les paquets Python requis ne sont pas disponibles dans les wheels fournis ?",
    "answer": "Si les paquets Python ne sont pas disponibles dans les wheels fournis, vous pouvez les pr\u00e9t\u00e9l\u00e9charger. Si vous estimez que les wheels devraient \u00eatre disponibles, vous pouvez en faire la demande au soutien technique."
  },
  {
    "question": "Comment cr\u00e9er et utiliser un environnement virtuel pour des scripts Python ex\u00e9cut\u00e9s sur plusieurs n\u0153uds ?",
    "answer": "Pour utiliser plusieurs n\u0153uds, chaque n\u0153ud doit avoir son propre environnement activ\u00e9. Il faut d'abord cr\u00e9er l'environnement virtuel pour chacun des n\u0153uds allou\u00e9s dans le script de soumission de la t\u00e2che, puis activer l'environnement virtuel du n\u0153ud principal, et enfin ex\u00e9cuter le script avec la commande srun python myscript.py."
  },
  {
    "question": "Quelle est la commande pour cr\u00e9er un environnement virtuel pour chaque n\u0153ud dans un script de soumission de t\u00e2che multi-n\u0153uds ?",
    "answer": "Dans le script de soumission de la t\u00e2che, utilisez un bloc srun comme ceci : `srun --ntasks $SLURM_NNODES --tasks-per-node=1 bash << EOF virtualenv --no-download $SLURM_TMPDIR/env source $SLURM_TMPDIR/env/bin/activate pip install --no-index --upgrade pip pip install --no-index -r requirements.txt EOF`."
  },
  {
    "question": "Comment activer l'environnement virtuel sur le n\u0153ud principal dans une configuration multi-n\u0153uds ?",
    "answer": "Activez l'environnement virtuel du n\u0153ud principal avec la commande `source $SLURM_TMPDIR/env/bin/activate;`."
  },
  {
    "question": "O\u00f9 peut-on trouver la liste des wheels Python disponibles ?",
    "answer": "Les wheels Python disponibles sont list\u00e9s sur la page [[Available Python wheels/fr|Wheels Python]] ou peuvent \u00eatre trouv\u00e9s en utilisant la commande `avail_wheels` sur la grappe."
  },
  {
    "question": "Quel est le comportement par d\u00e9faut de la commande 'avail_wheels' ?",
    "answer": "Par d\u00e9faut, la commande `avail_wheels` montre uniquement la plus r\u00e9cente version d'un paquet (sauf si une version particuli\u00e8re est sp\u00e9cifi\u00e9e), les versions compatibles avec le module Python charg\u00e9 ou l'environnement virtuel activ\u00e9, et les versions compatibles avec l'architecture CPU et l'environnement logiciel utilis\u00e9."
  },
  {
    "question": "Comment lister les wheels qui contiennent 'cdf' dans leur nom avec la commande 'avail_wheels' ?",
    "answer": "Pour lister les wheels contenant 'cdf' (insensible \u00e0 la casse) dans leur nom, lancez la commande `avail_wheels \"*cdf*\"`."
  },
  {
    "question": "Comment obtenir la liste des wheels disponibles pour un paquet sp\u00e9cifique comme NumPy ?",
    "answer": "Vous pouvez utiliser la commande `avail_wheels numpy`."
  }
]