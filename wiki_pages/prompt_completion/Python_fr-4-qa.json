[
  {
    "question": "What is the purpose of the `requirements.txt` file in the context of Python environments?",
    "answer": "The `requirements.txt` file ensures that your Python environment can be reproduced for other tasks."
  },
  {
    "question": "What should I do if a required Python package is not available in the provided wheels?",
    "answer": "If a required package is not available in the provided Python wheels, you can pre-download it."
  },
  {
    "question": "Who should I contact if I believe a specific Python wheel should be made available?",
    "answer": "You should contact technical support if you believe a specific Python wheel should be provided."
  },
  {
    "question": "How do you set up virtual environments for Python scripts that utilize multiple nodes?",
    "answer": "For Python scripts using multiple nodes, each node must have its own activated virtual environment."
  },
  {
    "question": "What are the steps to create and activate a virtual environment for a multi-node task?",
    "answer": "First, create the virtual environment for each allocated node within your task submission script using `srun --ntasks $SLURM_NNODES --tasks-per-node=1 bash << EOF...EOF`. Then, activate the virtual environment on the main node with `source $SLURM_TMPDIR/env/bin/activate;`, and finally, execute your script using `srun python myscript.py;`."
  },
  {
    "question": "Where can I find a list of available Python wheels?",
    "answer": "Available Python wheels are listed on the 'Wheels Python' page or can be found using the `avail_wheels` command on the cluster."
  },
  {
    "question": "What information does the `avail_wheels` command display by default?",
    "answer": "By default, `avail_wheels` shows only the most recent version of a specific package (unless a particular version is specified), versions compatible with the loaded Python module or active virtual environment, and versions compatible with your current CPU architecture and software environment (StdEnv)."
  },
  {
    "question": "How can I list Python wheels that contain 'cdf' in their name (case-insensitive) using `avail_wheels`?",
    "answer": "To list wheels containing 'cdf' in their name, use the command `avail_wheels \"*cdf*\"`."
  },
  {
    "question": "How do I list Python wheels for a specific package, such as NumPy, using `avail_wheels`?",
    "answer": "You can list wheels for a specific package by using its exact name, for example, `avail_wheels numpy`."
  },
  {
    "question": "How do I list a specific version of a package with `avail_wheels`, for instance, NumPy version 1.23?",
    "answer": "You can use the command `avail_wheels numpy==1.23` or `avail_wheels numpy --version 1.23` to list a specific version."
  },
  {
    "question": "What operators can be used with `avail_wheels` to specify package versions?",
    "answer": "You can use pip-like operators with `avail_wheels` for version specification, including `==`, `<`, `>`, `~=`, `<=`, `>=`, and `!=`."
  },
  {
    "question": "How can I list all available versions of a package using `avail_wheels`?",
    "answer": "To list all available versions of a package, use the `--all-version` option with `avail_wheels`, for example, `avail_wheels \"*cdf*\" --all-version`."
  }
]