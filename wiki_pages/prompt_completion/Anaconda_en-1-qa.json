[
  {
    "question": "What is Anaconda?",
    "answer": "Anaconda is a Python distribution."
  },
  {
    "question": "Are users allowed to install Anaconda on the clusters?",
    "answer": "No, users are asked not to install Anaconda on the clusters."
  },
  {
    "question": "What alternatives are recommended instead of Anaconda for managing Python on clusters?",
    "answer": "Users should consider a virtual environment or an Apptainer container."
  },
  {
    "question": "What is Anaconda primarily useful for on a personal computer?",
    "answer": "Anaconda is useful for simplifying the management of Python and scientific libraries on a personal computer."
  },
  {
    "question": "Who is responsible for managing Python libraries and dependencies on Alliance-supported clusters?",
    "answer": "The staff should manage these libraries and dependencies on Alliance-supported clusters to ensure compatibility and optimal performance."
  },
  {
    "question": "Why is installing Anaconda on clusters not recommended regarding existing software?",
    "answer": "Anaconda often installs software (like compilers and scientific libraries) that already exist on clusters as modules, with a configuration that is not optimal."
  },
  {
    "question": "Why are Anaconda's binaries not suitable for the processor architecture on the clusters?",
    "answer": "Anaconda installs binaries which are not optimized for the processor architecture on the clusters."
  },
  {
    "question": "What problem does Anaconda have with system libraries?",
    "answer": "Anaconda makes incorrect assumptions about the location of various system libraries."
  },
  {
    "question": "Where does Anaconda install itself, and what is its impact on a user's home directory quota?",
    "answer": "Anaconda uses the $HOME directory for its installation, writing an enormous number of files, which can absorb almost half of your quota for the number of files in your home directory."
  },
  {
    "question": "How does Anaconda's package installation speed compare to Python wheels?",
    "answer": "Anaconda is slower than the installation of packages via Python wheels."
  },
  {
    "question": "What file does Anaconda modify that can lead to conflicts?",
    "answer": "Anaconda modifies the $HOME/.bashrc file, which can easily cause conflicts."
  },
  {
    "question": "What functionality does a virtual environment offer for Python use on the clusters?",
    "answer": "A virtual environment offers all the functionality needed to use Python on the clusters."
  },
  {
    "question": "How can you list application dependencies when transitioning from Conda to a virtual environment?",
    "answer": "You can run 'pip show <package_name>', check for a 'requirements.txt' file, or check the 'install_requires' variable of the 'setup.py' file."
  },
  {
    "question": "What types of dependencies should be identified when converting from Conda to a virtual environment?",
    "answer": "You should identify which dependencies are Python modules and which are libraries provided by Anaconda."
  },
  {
    "question": "Should users install libraries like CUDA and CuDNN on the clusters when transitioning from Anaconda?",
    "answer": "No, users should not install libraries like CUDA and CuDNN themselves on the clusters, as they are already installed."
  },
  {
    "question": "What kind of dependencies should be removed from the list when moving to a virtual environment?",
    "answer": "Everything which is not a Python module (e.g., 'cudatoolkit' and 'cudnn') should be removed from the list of dependencies."
  },
  {
    "question": "What is the final step after refining dependencies when transitioning to a virtual environment?",
    "answer": "The final step is to use a virtual environment in which you will install your dependencies."
  },
  {
    "question": "What should users do if their software doesn't run after converting to a virtual environment?",
    "answer": "Users should contact technical support if their software doesn't run."
  },
  {
    "question": "When is Apptainer recommended for managing software environments?",
    "answer": "Apptainer is recommended when the complexity of a program's dependencies requires controlling the entire software environment."
  },
  {
    "question": "Can Docker images be used with Apptainer?",
    "answer": "Yes, a Docker image can be converted into an Apptainer image."
  },
  {
    "question": "What is the main drawback of using Apptainer?",
    "answer": "The only disadvantage of Apptainer is its consumption of disk space."
  },
  {
    "question": "How can research groups manage disk space efficiently when using multiple Apptainer images?",
    "answer": "If a research group plans on using several images, it would be wise to collect all of them together in a single directory of the group's project space to avoid duplication."
  },
  {
    "question": "What are the issues with installing R via a Conda recipe on the clusters?",
    "answer": "A Conda recipe forces the installation of R, which does not perform nearly as well as the module version (using Intel MKL), does not work well, and can cause jobs to die and waste resources."
  }
]