[
  {
    "question": "What type of Keras model is constructed in the `tensorflow-multiworker.py` script?",
    "answer": "A `tf.keras.Sequential` model is constructed."
  },
  {
    "question": "What are the initial layers of the Keras model defined in `tensorflow-multiworker.py`?",
    "answer": "The initial layers include `tf.keras.layers.Conv2D(32, (3, 3), padding='same', input_shape=(32,32,3))`, `tf.keras.layers.Activation('relu')`, `tf.keras.layers.Conv2D(32, (3, 3))`, `tf.keras.layers.Activation('relu')`, `tf.keras.layers.MaxPooling2D(pool_size=(2, 2))`, and `tf.keras.layers.Dropout(0.25)`."
  },
  {
    "question": "How is the Keras model compiled in the multi-worker example?",
    "answer": "The model is compiled with `loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)`, `optimizer=tf.keras.optimizers.SGD(learning_rate=args.lr)`, and `metrics=['accuracy']`."
  },
  {
    "question": "What dataset is used in the `tensorflow-multiworker.py` example?",
    "answer": "The CIFAR10 dataset, loaded using `tf.keras.datasets.cifar10.load_data()`, is used."
  },
  {
    "question": "How is the CIFAR10 dataset prepared for training in the example script?",
    "answer": "The dataset is prepared using `tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(args.batch_size)`."
  },
  {
    "question": "How many epochs does the model train for in the `tensorflow-multiworker.py` example?",
    "answer": "The model trains for 2 epochs using `model.fit(dataset, epochs=2)`."
  },
  {
    "question": "What is the purpose of creating model checkpoints during training?",
    "answer": "Model checkpoints are snapshots of your model at a given point during training, saved to disk. They are useful for breaking long jobs into shorter ones, getting allocated on the cluster more quickly, and avoiding losing progress due to errors or node failures."
  },
  {
    "question": "How can you create checkpoints when training a Keras model?",
    "answer": "To create a checkpoint when training with Keras, you should use the `callbacks` parameter of the `model.fit()` method, such as `callbacks = [tf.keras.callbacks.ModelCheckpoint(filepath=\"./ckpt\",save_freq=\"epoch\")]`."
  },
  {
    "question": "Where can I find more information about creating model checkpoints with Keras?",
    "answer": "You can refer to the official TensorFlow documentation on `tf.keras.callbacks.ModelCheckpoint`."
  },
  {
    "question": "What error might occur if you are using the scikit-image library with TensorFlow?",
    "answer": "You may encounter the error: `OMP: Error #15: Initializing libiomp5.so, but found libiomp5.so already initialized.`"
  },
  {
    "question": "Why does the `OMP: Error #15` occur when using scikit-image with TensorFlow?",
    "answer": "This error occurs because the TensorFlow library attempts to load a bundled version of OMP, which conflicts with the system's version."
  },
  {
    "question": "What is the workaround for the `OMP: Error #15: Initializing libiomp5.so` issue?",
    "answer": "The workaround involves changing to your virtual environment directory (`cd tf_skimage_venv`), exporting `LIBIOMP_PATH` by locating the system's `libiomp5.so`, and then creating a symbolic link to use the system-wide `libiomp5.so` within the TensorFlow library installation."
  }
]