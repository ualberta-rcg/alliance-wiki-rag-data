[
  {
    "question": "What is MrBayes used for?",
    "answer": "MrBayes is a program for Bayesian inference and model choice across a wide range of phylogenetic and evolutionary models."
  },
  {
    "question": "What methods does MrBayes use to estimate model parameters?",
    "answer": "MrBayes uses Markov chain Monte Carlo (MCMC) methods to estimate the posterior distribution of model parameters."
  },
  {
    "question": "How can you find available MrBayes modules?",
    "answer": "You can find available MrBayes modules by running the command `module spider mrbayes`."
  },
  {
    "question": "Where can one find more information about using module commands?",
    "answer": "More information on finding and selecting versions of MrBayes using `module` commands can be found in the 'Using modules' documentation."
  },
  {
    "question": "How many CPU cores does the sequential MrBayes job script use?",
    "answer": "The sequential MrBayes job script uses only one CPU core, specified by `--cpus-per-task=1`."
  },
  {
    "question": "What input file is used in the sequential MrBayes example?",
    "answer": "The sequential MrBayes example uses `primates.nex`, which is distributed with MrBayes."
  },
  {
    "question": "What command is used to load the MrBayes module for the sequential example?",
    "answer": "The command `module load mrbayes/3.2.7` is used to load the MrBayes module."
  },
  {
    "question": "How do you submit a sequential MrBayes job script named `submit-mrbayes-seq.sh`?",
    "answer": "The sequential job script can be submitted with the command `sbatch submit-mrbayes-seq.sh`."
  },
  {
    "question": "Can MrBayes be run on multiple cores, nodes, or GPUs?",
    "answer": "Yes, MrBayes can be run on multiple cores, on multiple nodes, and on GPUs."
  },
  {
    "question": "How many CPU cores does the MPI parallel MrBayes job script use?",
    "answer": "The MPI parallel MrBayes job script uses 8 CPU cores in total, specified by `--ntasks=8`."
  },
  {
    "question": "What input file is used in the MPI parallel MrBayes example?",
    "answer": "The MPI parallel MrBayes example uses `primates.nex`, distributed with MrBayes."
  },
  {
    "question": "How do you submit an MPI parallel MrBayes job script named `submit-mrbayes-parallel.sh`?",
    "answer": "The MPI parallel job script can be submitted with the command `sbatch submit-mrbayes-parallel.sh`."
  },
  {
    "question": "What Slurm parameter is used to request a GPU for a MrBayes job?",
    "answer": "The Slurm parameter `--gpus=1` is used to request a GPU for a MrBayes job."
  },
  {
    "question": "What modules need to be loaded for a GPU-accelerated MrBayes job?",
    "answer": "For a GPU-accelerated MrBayes job, `gcc`, `cuda/12`, and `mrbayes/3.2.7` modules need to be loaded."
  },
  {
    "question": "How do you submit a GPU MrBayes job script named `submit-mrbayes-gpu.sh`?",
    "answer": "The GPU job script can be submitted with the command `sbatch submit-mrbayes-gpu.sh`."
  },
  {
    "question": "Why is checkpointing suggested for very long MrBayes runs?",
    "answer": "Checkpointing is suggested for very long MrBayes runs because long jobs are more likely to be interrupted by hardware failure or maintenance outage."
  },
  {
    "question": "How does MrBayes handle saving progress for long runs?",
    "answer": "MrBayes has a mechanism for creating checkpoints, allowing progress to be saved from one job and continued in a subsequent job."
  },
  {
    "question": "What is the key difference between `job1.nex` and `job2.nex` when splitting a calculation into two Slurm jobs for checkpointing?",
    "answer": "The key difference is the presence of the `append` keyword in `job2.nex`, which allows it to continue from the state saved by `job1.nex`."
  },
  {
    "question": "What are the `mcmc` parameters for `job1.nex` in the checkpointing example?",
    "answer": "The `mcmc` parameters for `job1.nex` are `ngen=10000000 nruns=2 temp=0.02 mcmcdiag=yes samplefreq=1000 stoprule=yes stopval=0.005 relburnin=yes burninfrac=0.1 printfreq=1000 checkfreq=1000;`."
  },
  {
    "question": "What are the `mcmc` parameters for `job2.nex` in the checkpointing example, specifically noting the append option?",
    "answer": "The `mcmc` parameters for `job2.nex` are `ngen=20000000 nruns=2 temp=0.02 mcmcdiag=yes samplefreq=1000 stoprule=yes stopval=0.005 relburnin=yes burninfrac=0.1 printfreq=1000 append=yes checkfreq=1000;`, with `append=yes` enabling continuation from a previous run."
  },
  {
    "question": "How is the checkpointing job script `submit-mrbayes-cp.sh` structured to run two Slurm jobs consecutively?",
    "answer": "The checkpointing job script is structured as a job array using `--array=1-2%1`, which launches two Slurm jobs one after the other, using the `$SLURM_ARRAY_TASK_ID` variable to select `job1.nex` or `job2.nex`."
  },
  {
    "question": "How do you submit the checkpointing job script named `submit-mrbayes-cp.sh`?",
    "answer": "The checkpointing job script can be submitted with the command `sbatch submit-mrbayes-cp.sh`."
  },
  {
    "question": "What command is used to execute MrBayes within the job scripts, e.g., for sequential, parallel, or GPU runs?",
    "answer": "The command `srun mb primates.nex` (or `srun mb job${SLURM_ARRAY_TASK_ID}.nex` for checkpointing) is used to execute MrBayes."
  }
]