[
  {
    "question": "What is Qiskit?",
    "answer": "Qiskit is an open-source quantum computing library developed in Python by IBM."
  },
  {
    "question": "What can Qiskit be used for?",
    "answer": "Qiskit allows you to build, simulate, and run quantum circuits."
  },
  {
    "question": "What are some other quantum computing libraries similar to Qiskit?",
    "answer": "PennyLane and Snowflurry are similar quantum computing libraries."
  },
  {
    "question": "What are the first steps to install Qiskit?",
    "answer": "First, load the Qiskit dependencies using `module load StdEnv/2023 gcc python/3.11 symengine/0.11.2`, then create and activate a Python virtual environment."
  },
  {
    "question": "How do you create and activate a Python virtual environment for Qiskit?",
    "answer": "Use the command `virtualenv --no-download --clear ~/ENV && source ~/ENV/bin/activate`."
  },
  {
    "question": "How do you install a specific version of Qiskit and qiskit_aer?",
    "answer": "To install a specific version, use `pip install --no-index qiskit==X.Y.Z qiskit_aer==X.Y.Z`, replacing `X.Y.Z` with the version number (e.g., `1.4.0`). Also, run `pip install --no-index --upgrade pip` first."
  },
  {
    "question": "How can you install the most recent version of Qiskit and qiskit_aer available on clusters?",
    "answer": "To install the most recent version, do not specify a version number, using `pip install --no-index qiskit qiskit_aer` after upgrading pip."
  },
  {
    "question": "How can other Qiskit software packages be added?",
    "answer": "You can add other Qiskit software using the syntax `qiskit_package==X.Y.Z`, where `qiskit_package` is the software name, for example `qiskit-finance`."
  },
  {
    "question": "How do you validate a Qiskit installation?",
    "answer": "Validate the installation by running `python -c 'import qiskit'` in your activated virtual environment."
  },
  {
    "question": "What is the command to freeze the Qiskit environment and its dependencies?",
    "answer": "Freeze the environment using the command `pip freeze --local > ~/qiskit_requirements.txt`."
  },
  {
    "question": "What are the typical SLURM directives specified in a script for running Qiskit on a cluster?",
    "answer": "Typical SLURM directives include `--account=def-someuser`, `--time=00:15:00`, `--cpus-per-task=1`, and `--mem-per-cpu=1G`."
  },
  {
    "question": "How are module dependencies loaded in a cluster script for Qiskit?",
    "answer": "Module dependencies are loaded using `module load StdEnv/2023 gcc python/3.11 symengine/0.11.2`."
  },
  {
    "question": "How is a virtual environment generated and activated for Qiskit in a cluster script?",
    "answer": "A virtual environment is generated in `$SLURM_TMPDIR` using `virtualenv --no-download ${SLURM_TMPDIR}/env` and then activated with `source ${SLURM_TMPDIR}/env/bin/activate`."
  },
  {
    "question": "How are Qiskit and its dependencies installed within a cluster script?",
    "answer": "They are installed using `pip install --no-index --upgrade pip` followed by `pip install --no-index --requirement ~/qiskit_requirements.txt`."
  },
  {
    "question": "How do you run a Qiskit program named 'qiskit_example.py' within a cluster script?",
    "answer": "You run the program using `python qiskit_example.py`."
  },
  {
    "question": "Which Qiskit modules are imported for the Bell states use case?",
    "answer": "The imported modules are `AerSimulator` from `qiskit_aer`, and `QuantumCircuit`, `transpile` from `qiskit`, along with `plot_histogram` from `qiskit.visualization`."
  },
  {
    "question": "How do you define a quantum circuit with two qubits and two classical bits in Qiskit?",
    "answer": "A quantum circuit with two qubits and two classical bits is defined using `circuit = QuantumCircuit(2,2)`."
  },
  {
    "question": "How do you apply a Hadamard gate to the first qubit and a CNOT gate between the first and second qubits in Qiskit?",
    "answer": "Apply a Hadamard gate with `circuit.h(0)` and a CNOT gate with `circuit.cx(0,1)`."
  },
  {
    "question": "How do you measure all qubits in a Qiskit circuit?",
    "answer": "All qubits can be measured using `circuit.measure_all()`."
  },
  {
    "question": "Which simulator is used by default in the Qiskit Bell states use case?",
    "answer": "The `AerSimulator` is used as the default simulator."
  },
  {
    "question": "How do you run a Qiskit simulation with `AerSimulator` for 1000 shots?",
    "answer": "You instantiate the simulator `simulator = AerSimulator()` and then run it with `result = simulator.run(circuit, shots=1000).result()`."
  },
  {
    "question": "How do you get the measurement counts from a Qiskit simulation result?",
    "answer": "The measurement counts are obtained using `counts = result.get_counts()`."
  },
  {
    "question": "How can the results of a Qiskit simulation be visualized as a histogram?",
    "answer": "The results can be displayed as a histogram using the command `plot_histogram(counts)`."
  }
]