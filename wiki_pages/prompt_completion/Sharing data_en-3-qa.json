[
  {
    "question": "What happens to the group ownership of a new file created in a directory with the Set Group ID (setGID) bit enabled?",
    "answer": "If the setGID bit is enabled for a directory, new files created within that directory will be created with the same group ownership as the parent directory."
  },
  {
    "question": "What happens to a new directory created inside a directory where the setGID bit is enabled?",
    "answer": "If a directory is created inside one with the setGID bit enabled, it will inherit the same group as the parent folder and also have its own setGID bit enabled."
  },
  {
    "question": "In the `ls -l` output for a directory with setGID enabled, what is the difference between a lowercase 's' and an uppercase 'S' in the group permissions field?",
    "answer": "A lowercase 's' (e.g., `drwxrwsr-x`) indicates that the setGID is enabled and the group also has execute permission. An uppercase 'S' (e.g., `drwxrS---`) indicates that the setGID is enabled, but the execute permission has been removed for the group, which can lead to access problems."
  },
  {
    "question": "Is the Set User ID (setUID) bit functional on the clusters?",
    "answer": "No, the setUID bit is completely disabled on the clusters for security reasons and will not work."
  },
  {
    "question": "What mechanism defines the default filesystem permissions for new files?",
    "answer": "Default filesystem permissions are defined by the `umask`."
  },
  {
    "question": "How can you check the current `umask` value in your session?",
    "answer": "You can display the current `umask` value in your session by running the command `umask -S`."
  },
  {
    "question": "If `umask -S` shows `u=rwx,g=rx,o=`, what does this mean for newly created files?",
    "answer": "This means that, by default, new files you create can be read, written, and executed by yourself (owner), read and executed by members of the file's group, and cannot be accessed by other people."
  },
  {
    "question": "Does changing the `umask` affect existing files?",
    "answer": "No, the `umask` only applies to new files; changing it does not alter the access permissions of existing files."
  },
  {
    "question": "How can you set a custom `umask` value for your session or permanently?",
    "answer": "You can set your own `umask` by calling the command `umask <value>` either in a session or by adding it to your `.bashrc` file."
  },
  {
    "question": "Which `umask` value in octal notation makes files readable, writable, and executable only by the owner?",
    "answer": "The `umask` value `077` makes files readable, writable, and executable by the owner only (`u=rwx,g=,o=`)."
  },
  {
    "question": "What `umask` value should be used to allow files to be readable and executable by the owner and group, but writable only by the owner?",
    "answer": "The `umask` value `027` achieves this: `u=rwx,g=rx,o=`."
  },
  {
    "question": "What `umask` value provides full read, write, and execute permissions to both the owner and the group, while denying access to others?",
    "answer": "The `umask` value `007` provides `u=rwx,g=rwx,o=` permissions."
  },
  {
    "question": "Which `umask` value allows files to be readable and executable by everyone, but restricts write access to the owner only?",
    "answer": "The `umask` value `022` allows files to be readable and executable by everyone, but writable only by the owner (`u=rwx,g=rx,o=rx`)."
  },
  {
    "question": "What `umask` value allows files to be readable and executable by everyone, but restricts write access to the owner and the group?",
    "answer": "The `umask` value `002` allows files to be readable and executable by everyone, but writable only by the owner and the group (`u=rwx,g=rwx,o=rx`)."
  },
  {
    "question": "Besides the `umask`, what other factors determine who can access a file?",
    "answer": "Other factors include having execute permission on all parent directories in the path to the file, being a member of the file's group for group permissions, explicit changes made with `chmod` after creation, and Access Control Lists (ACLs)."
  }
]