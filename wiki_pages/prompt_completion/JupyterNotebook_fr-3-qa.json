[
  {
    "question": "How do you connect to Jupyter Notebook from a Linux or macOS X workstation?",
    "answer": "You need to create an SSH tunnel between the cluster and your workstation using `sshuttle`. Open a new terminal and run `sshuttle --dns -Nr <username>@<cluster>.alliancecan.ca`, replacing `<username>` and `<cluster>` with your details, then copy-paste the provided URL into your browser."
  },
  {
    "question": "What Python package is recommended for creating an SSH tunnel on Linux or macOS X?",
    "answer": "The Python package `sshuttle` is recommended."
  },
  {
    "question": "How do you connect to Jupyter Notebook from a Windows workstation using MobaXTerm?",
    "answer": "First, launch Jupyter Notebook in a MobaXTerm terminal (session 1) to get the server URL (hostname:port and token). Then, open a second MobaXTerm terminal (session 2) and run `ssh -L 8888:<hostname:port> <username>@<cluster>.alliancecan.ca`. Finally, in your browser, go to `http://localhost:8888/?token=<jeton>`, replacing `<jeton>` with the token from session 1."
  },
  {
    "question": "What tool can be used to create an SSH tunnel on Windows?",
    "answer": "MobaXTerm can be used to create an SSH tunnel on Windows."
  },
  {
    "question": "How do you shut down the Jupyter Notebook server before its execution time ends?",
    "answer": "To shut down the Jupyter Notebook server, press CTRL-C twice in the terminal where the interactive task was launched."
  },
  {
    "question": "How do you close an SSH tunnel created with MobaXTerm?",
    "answer": "If the tunnel was created with MobaXTerm, press CTRL-D in session 2 (the terminal used for the tunnel)."
  },
  {
    "question": "What is the purpose of adding kernels to Jupyter Notebook?",
    "answer": "It is possible to add kernels for other programming languages or for Python versions different from the one Jupyter Notebook is running in."
  },
  {
    "question": "What are the two main steps for installing a new kernel in Jupyter Notebook?",
    "answer": "The two main steps are: 1. Installation of packages allowing the interpreter to communicate with Jupyter Notebook. 2. Creation of the kernel configuration file so Jupyter Notebook can create a communication channel with the interpreter."
  },
  {
    "question": "Where should kernel configuration files be created?",
    "answer": "Each kernel configuration file must be created in its own subdirectory within the `~/.local/share/jupyter/kernels` path in your home directory."
  },
  {
    "question": "What is the command to create the necessary directory for kernel configuration files?",
    "answer": "The command is `mkdir -p ~/.local/share/jupyter/kernels`."
  },
  {
    "question": "What are the steps to install a Julia kernel for Jupyter Notebook?",
    "answer": "First, load the Julia module (`module load julia`). Then, activate the Jupyter Notebook virtual environment (`source $HOME/jupyter_py3/bin/activate`). Finally, install IJulia by running `echo 'Pkg.add(\"IJulia\")' | julia`."
  }
]