[
  {
    "question": "How can users request the installation of academic software by Alliance staff?",
    "answer": "Users can email Alliance support staff, provide them with a URL to the software, and ask them to install the package. It will be made available via a `module load` command if license terms and technical requirements are met."
  },
  {
    "question": "Are users allowed to install software in their personal directories?",
    "answer": "Yes, users are permitted to install software in their own home space or project space if they wish."
  },
  {
    "question": "What are common reasons for a user to install software in their own space?",
    "answer": "Users might choose to install software in their own space if they plan to make modifications to the code or if they wish to evaluate it quickly."
  },
  {
    "question": "What is the primary step to take before installing any software?",
    "answer": "Always read the installation instructions that accompany the software."
  },
  {
    "question": "What is a very common instruction pattern for software installation?",
    "answer": "A very common instruction pattern is `configure; make; make install`."
  },
  {
    "question": "What are some variations of the `configure; make; make install` installation pattern?",
    "answer": "Variations include `cmake .` replacing `./configure`, and `sudo make install` replacing `make install`."
  },
  {
    "question": "Why might `make install` fail during software installation?",
    "answer": "`make install` might fail because the package expects to write to `/usr/local` or some other shared area in the file system."
  },
  {
    "question": "Why does `sudo make install` always fail?",
    "answer": "`sudo make install` will always fail because `sudo` is a request for \"root\" or administrator privileges, which users do not possess."
  },
  {
    "question": "How can `make install` failures due to shared directory write attempts be resolved?",
    "answer": "The usual solution is to supply a `--prefix` flag at the `configure` step to direct the installation to a directory of your choice, for example, `./configure --prefix=/my/project/directory/some-package && make && make install`."
  },
  {
    "question": "Who should be contacted if other errors arise during software installation?",
    "answer": "If other errors arise, contact support at `support@computecanada.ca`."
  },
  {
    "question": "What is the simplest way to use a library on an Alliance system?",
    "answer": "The simplest way to make use of a library on an Alliance system is to first load the corresponding module using `module load library_name/x.y.z`."
  },
  {
    "question": "How do you include a loaded library in the link phase of a build process using `gcc`?",
    "answer": "With the module loaded, you can modify the link phase of your build process to include the library, for example, `gcc -o my_prog file1.o file2.o -lnetcdf`."
  },
  {
    "question": "What characters prefix the library name in a link line?",
    "answer": "The link line needs to contain `-l` prefixed to the library name."
  },
  {
    "question": "When is it necessary to load a library module?",
    "answer": "You need to load the library module when you wish to run the software, not only during the building of it."
  },
  {
    "question": "Which environment variables are set when a library module is loaded, and what do they point to?",
    "answer": "Loading a library module will set environment variables `CPATH` and `LIBRARY_PATH`, pointing to the location of the library itself and its header files."
  },
  {
    "question": "How do `CPATH` and `LIBRARY_PATH` simplify linking against libraries?",
    "answer": "Most compilers automatically try the directories listed in `CPATH` and `LIBRARY_PATH` during compilation and linking phases, allowing you to easily link against the library without explicitly specifying its location via `-I` and `-L` options."
  },
  {
    "question": "Can explicit library location options (`-I` and `-L`) be omitted in make- or config- files?",
    "answer": "Yes, if your make- or config- file calls for an explicit location of the library to pass to the compiler via `-I` and `-L`, you can usually omit the location of the library and leave these lines blank."
  },
  {
    "question": "In which specific case might it be necessary to explicitly specify a library's location even when its module is loaded?",
    "answer": "In some cases, particularly with `cmake`, it may be necessary to specify explicitly the location of the library provided by the module."
  },
  {
    "question": "What is the recommended method for explicitly specifying a library's location when using `cmake`?",
    "answer": "The preferred and most robust way is to use an EasyBuild environment variable, such as `EBROOT...`, instead of manually typing a path. For example, `-DGSL_DIR=$EBROOTGSL` for the GSL library."
  },
  {
    "question": "What is the construction pattern for EasyBuild environment variables?",
    "answer": "EasyBuild environment variables adhere to the pattern `EBROOT` followed by the name of the package, for example `EBROOTGCC`."
  }
]