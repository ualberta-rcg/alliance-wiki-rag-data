[
  {
    "question": "What is MrBayes?",
    "answer": "MrBayes est un programme d'inf\u00e9rence bay\u00e9sienne et de choix de mod\u00e8les sur une large gamme de mod\u00e8les phylog\u00e9n\u00e9tiques et \u00e9volutifs."
  },
  {
    "question": "How does MrBayes estimate the posterior distribution of model parameters?",
    "answer": "MrBayes utilise les m\u00e9thodes de Monte Carlo par cha\u00eene de Markov (MCMC) pour estimer la distribution a posteriori des param\u00e8tres du mod\u00e8le."
  },
  {
    "question": "How can I find available MrBayes modules?",
    "answer": "You can find available MrBayes modules by running the command `module spider mrbayes`."
  },
  {
    "question": "How do you submit a sequential MrBayes task?",
    "answer": "You can submit the sequential script `submit-mrbayes-seq.sh` using the command `sbatch submit-mrbayes-seq.sh`."
  },
  {
    "question": "What CPU resource does the sequential MrBayes script typically request?",
    "answer": "The sequential MrBayes script typically requests one (1) CPU core using `--cpus-per-task=1`."
  },
  {
    "question": "What is the name of the input file used in the sequential MrBayes example?",
    "answer": "The input file used in the sequential MrBayes example is `primates.nex`, which is provided with MrBayes."
  },
  {
    "question": "Does MrBayes support parallel execution?",
    "answer": "Yes, MrBayes allows for parallel execution, including the use of GPUs and multiple cores across multiple nodes."
  },
  {
    "question": "How many CPU cores does the MPI parallel MrBayes script request?",
    "answer": "The MPI parallel MrBayes script requests a total of eight (8) CPU cores using `--ntasks=8`."
  },
  {
    "question": "What command is used to submit an MPI parallel MrBayes task?",
    "answer": "The command to submit the MPI parallel MrBayes task is `sbatch submit-mrbayes-parallel.sh`."
  },
  {
    "question": "How can MrBayes utilize GPUs?",
    "answer": "MrBayes allows the use of GPUs for parallel processing."
  },
  {
    "question": "What resources does the MrBayes GPU script request?",
    "answer": "The MrBayes GPU script requests one (1) GPU (`--gpus=1`) and one (1) CPU core (`--cpus-per-task=1`)."
  },
  {
    "question": "Which modules need to be loaded for a GPU MrBayes job?",
    "answer": "For a GPU MrBayes job, you need to load `gcc`, `cuda/12`, and `mrbayes/3.2.7`."
  },
  {
    "question": "How do you submit a MrBayes job that uses a GPU?",
    "answer": "You submit the `submit-mrbayes-gpu.sh` script using `sbatch submit-mrbayes-gpu.sh`."
  },
  {
    "question": "Why is it recommended to split long-running MrBayes tasks into smaller ones?",
    "answer": "It is recommended to split long-running MrBayes tasks into smaller ones because they are more susceptible to being interrupted by hardware failures or maintenance work."
  },
  {
    "question": "What mechanism does MrBayes offer for managing long-running tasks?",
    "answer": "MrBayes offers a mechanism to create checkpoints, which allow you to save the result of a task and continue the work with another task."
  },
  {
    "question": "How does the `append` command relate to MrBayes checkpoints?",
    "answer": "The `append=yes` command in the `mcmc` block of a MrBayes input file allows a subsequent job to continue calculations from a previously saved checkpoint."
  },
  {
    "question": "How is a checkpointed MrBayes job submitted using a task array?",
    "answer": "A checkpointed MrBayes job using a task array is submitted with `sbatch submit-mrbayes-cp.sh`, where the script uses the `--array` parameter and the `SLURM_ARRAY_TASK_ID` variable."
  }
]