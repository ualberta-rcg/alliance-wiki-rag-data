[
  {
    "question": "What is an alternative method to install PennyLane if I have a requirements file?",
    "answer": "You can load the `python/3.11` module and then execute `pip install --no-index -r pennylane-reqs.txt`."
  },
  {
    "question": "What are the common SBATCH directives used when running a PennyLane job on a cluster?",
    "answer": "Common SBATCH directives include `--account` (to specify your account name), `--time` (to set the job's time limit), `--cpus-per-task` (for the number of CPUs per task), and `--mem-per-cpu` (for memory per CPU)."
  },
  {
    "question": "Which modules should be loaded in a cluster script to run PennyLane?",
    "answer": "You should load `StdEnv/2023`, `gcc`, and `python/3.11`."
  },
  {
    "question": "How do you create and activate a virtual environment for PennyLane within a SLURM script on a cluster?",
    "answer": "The virtual environment can be created in `$SLURM_TMPDIR` using `virtualenv --no-download ${SLURM_TMPDIR}/env`, and then activated with `source ${SLURM_TMPDIR}/env/bin/activate`."
  },
  {
    "question": "How are PennyLane and its dependencies installed within a cluster script?",
    "answer": "First, upgrade pip with `pip install --no-index --upgrade pip`, then install PennyLane and its dependencies using `pip install --no-index --requirement ~/pennylane_requirements.txt`."
  },
  {
    "question": "After setting up the environment and installing PennyLane, how is a PennyLane program executed in a cluster script?",
    "answer": "You execute your PennyLane program using `python pennylane_example.py`."
  },
  {
    "question": "What is the next step after creating the `script.sh` file for a PennyLane job on a cluster?",
    "answer": "You can then submit your task to the scheduler (l'ordonnanceur)."
  },
  {
    "question": "What is the first step when following the PennyLane example for generating Bell states?",
    "answer": "The first step is to create the virtual environment as described previously."
  },
  {
    "question": "How do you import the PennyLane library in a Python script?",
    "answer": "You import PennyLane using `import pennylane as qml`."
  },
  {
    "question": "How is a quantum circuit defined in PennyLane to generate the first Bell state?",
    "answer": "A Python function `bell_circuit()` is defined, which applies a `qml.Hadamard` gate to wire 0 and a `qml.CNOT` gate to wires [0, 1]."
  },
  {
    "question": "Which quantum simulator and how many wires are used in the Bell state example?",
    "answer": "The `default.qubit` simulator is used with 2 wires."
  },
  {
    "question": "How is the `generate_bell_state` QNode defined in the example?",
    "answer": "The `generate_bell_state` function is decorated with `@qml.qnode(dev)`, where `dev` is the quantum device (simulator)."
  },
  {
    "question": "What is the expected output when generating and printing the first Bell state using the provided PennyLane example code?",
    "answer": "The expected output is `[0.70710678+0.j 0. +0.j 0. +0.j 0.70710678+0.j]`."
  },
  {
    "question": "Where can I find the official PennyLane website?",
    "answer": "The official PennyLane website is at [https://pennylane.ai](https://pennylane.ai)."
  },
  {
    "question": "Where is PennyLane's documentation hosted on GitHub?",
    "answer": "The PennyLane documentation on GitHub can be found at [https://github.com/PennyLaneAI/pennylane](https://github.com/PennyLaneAI/pennylane)."
  },
  {
    "question": "What is the GitHub repository for PennyLane-CalculQuebec?",
    "answer": "The GitHub repository for PennyLane-CalculQuebec is [https://github.com/calculquebec/pennylane-snowflurry](https://github.com/calculquebec/pennylane-snowflurry)."
  }
]