[
  {
    "question": "What Gurobi version is specified in the `script-facility.sh` example?",
    "answer": "The `script-facility.sh` example specifies Gurobi version 11.0.1."
  },
  {
    "question": "Which Standard Environment (StdEnv) is loaded for Gurobi 11.0.1 in the `script-facility.sh` example?",
    "answer": "The `script-facility.sh` example loads `StdEnv/2023` for Gurobi 11.0.1."
  },
  {
    "question": "How many CPUs are requested per task in the `script-facility.sh` Slurm example?",
    "answer": "The `script-facility.sh` example requests 4 CPUs per task (`#SBATCH --cpus-per-task=4`)."
  },
  {
    "question": "How is the 'Threads' parameter dynamically configured for Gurobi within the `script-facility.sh` Slurm script?",
    "answer": "The 'Threads' parameter is dynamically set by writing `echo \"Threads ${SLURM_CPUS_ON_NODE:-1}\" > gurobi.env` to create a `gurobi.env` file, which uses the number of cores allocated to the job."
  },
  {
    "question": "What Python example does the `script-facility.sh` run using `gurobi.sh`?",
    "answer": "The `script-facility.sh` runs the `facility.py` example located at `${GUROBI_HOME}/examples/python/facility.py`."
  },
  {
    "question": "Why is it necessary to use a Python virtual environment with Gurobi if you want to use other Python packages like NumPy or Pandas?",
    "answer": "Gurobi's own Python version does not include 3rd-party Python packages, so a virtual environment is needed to install `gurobipy` alongside packages like NumPy, Matplotlib, or Pandas."
  },
  {
    "question": "What Python versions are supported by Gurobi 8.1.1 when `StdEnv/2016` is loaded?",
    "answer": "Gurobi 8.1.1 with `StdEnv/2016` supports Python versions 2.7, 3.5, 3.6, and 3.7."
  },
  {
    "question": "Which Python versions are supported by Gurobi 9.5.2 under `StdEnv/2020`?",
    "answer": "Gurobi 9.5.2 with `StdEnv/2020` supports Python versions 2.7, 3.7, 3.8, 3.9, and 3.10."
  },
  {
    "question": "What Python versions are supported by Gurobi 10.0.3 with `StdEnv/2023`?",
    "answer": "Gurobi 10.0.3 with `StdEnv/2023` supports Python versions 3.7, 3.8, 3.9, 3.10, and 3.11."
  },
  {
    "question": "Which Python version is supported by Gurobi 11.0.1 when using `StdEnv/2023`?",
    "answer": "Gurobi 11.0.1 with `StdEnv/2023` supports Python version 3.11."
  },
  {
    "question": "What is the deprecated method for installing Gurobi for Python, especially for Gurobi 11 versions and newer?",
    "answer": "The previously recommended method for installing Gurobi for Python using `setup.py` has been deprecated for Gurobi 11 versions and newer."
  },
  {
    "question": "For which Gurobi versions is the `setup.py` method still considered usable for Python installation?",
    "answer": "The `setup.py` method for installing Gurobi for Python is only usable with Gurobi 10 versions and older."
  },
  {
    "question": "What modules need to be loaded to prepare for creating a Python virtual environment for Gurobi 10.0.3 and older versions?",
    "answer": "You need to load `gurobi/10.0.3` and `python` modules to prepare for creating a Python virtual environment for Gurobi 10.0.3 and older versions."
  },
  {
    "question": "How do you create a virtual Python environment named `env_gurobi` without downloading packages for Gurobi 10.0.3 and older installations?",
    "answer": "You create it using the command `virtualenv --no-download ~/env_gurobi`."
  },
  {
    "question": "What command is used to activate a virtual Python environment named `env_gurobi`?",
    "answer": "The command to activate a virtual Python environment named `env_gurobi` is `source ~/env_gurobi/bin/activate`."
  },
  {
    "question": "How do you install additional Python packages like `pandas` into a Gurobi virtual environment (for Gurobi 10.0.3 and older versions)?",
    "answer": "You install packages like `pandas` using the command `pip install --no-index pandas` within the activated virtual environment."
  },
  {
    "question": "Why does attempting to install `gurobipy` directly under `$EBROOTGUROBI` using `python setup.py install` fail with `StdEnv/2023` for Gurobi 10.0.3 and older versions?",
    "answer": "It fails due to a 'Read-only file system' error, specifically `error: could not create 'gurobipy.egg-info'`, preventing installation directly under `$EBROOTGUROBI`."
  },
  {
    "question": "What is the correct procedure to install `gurobipy` into a virtual environment for Gurobi 10.0.3 (and older) when using `StdEnv/2023` or newer?",
    "answer": "You must first create a temporary directory (e.g., `/tmp/$USER`), copy `$EBROOTGUROBI/{lib,setup.py}` to it, navigate into that directory (`cd /tmp/$USER`), and then run `python setup.py install`."
  }
]