[
  {
    "question": "Why is it necessary to configure a Julia kernel on a login node?",
    "answer": "The installation of Julia packages requires internet access, which necessitates configuration on a login node via SSH."
  },
  {
    "question": "What are the prerequisites for configuring a Julia kernel?",
    "answer": "An activated Python virtual environment and a 'kernels' directory are required, as detailed in the Python kernel section."
  },
  {
    "question": "How do you load the Julia module to configure a Julia kernel?",
    "answer": "Run `module load julia`."
  },
  {
    "question": "What command is used to install IJulia?",
    "answer": "Execute `echo -e 'using Pkg\\nPkg.add(\"IJulia\")' | julia`."
  },
  {
    "question": "What critical step should be taken before using a newly configured Julia kernel?",
    "answer": "You must start or restart a new JupyterLab session."
  },
  {
    "question": "Where can one find additional documentation for IJulia?",
    "answer": "Refer to the IJulia documentation available at `https://github.com/JuliaLang/IJulia.jl`."
  },
  {
    "question": "How do you install additional Julia packages, such as 'Glob'?",
    "answer": "Ensure the Julia module is loaded with `module load julia`, then run `echo -e 'using Pkg\\nPkg.add(\"Glob\")' | julia` from a login node."
  },
  {
    "question": "Can the Python virtual environment be deactivated when installing other Julia packages?",
    "answer": "Yes, the Python virtual environment can remain deactivated during the installation of additional Julia packages."
  },
  {
    "question": "What is the initial step if you don't have a Python virtual environment when configuring a Python kernel?",
    "answer": "Create one and then activate it."
  },
  {
    "question": "How do you start a clean Bash environment if using JupyterHub Terminal to configure a Python kernel?",
    "answer": "Use the command `env -i HOME=$HOME bash -l`."
  },
  {
    "question": "How do you load a Python module?",
    "answer": "Run `module load python`."
  },
  {
    "question": "How do you create a new Python virtual environment named 'jupyter_py3' without downloading packages?",
    "answer": "Execute `virtualenv --no-download $HOME/jupyter_py3`."
  },
  {
    "question": "How do you activate a Python virtual environment located at `$HOME/jupyter_py3`?",
    "answer": "Run `source $HOME/jupyter_py3/bin/activate`."
  },
  {
    "question": "What command creates the common 'kernels' directory for all kernels?",
    "answer": "Use `mkdir -p ~/.local/share/jupyter/kernels`."
  },
  {
    "question": "How do you install the `ipykernel` library?",
    "answer": "Run `pip install --no-index ipykernel`."
  },
  {
    "question": "How do you generate the kernel specification file for a Python kernel?",
    "answer": "Execute `python -m ipykernel install --user --name <unique_name> --display-name \"Python 3.x Kernel\"`, replacing `<unique_name>` with a specific name."
  },
  {
    "question": "What must be done before using a newly configured Python kernel?",
    "answer": "You need to start or restart a new JupyterLab session."
  },
  {
    "question": "Where can I find more information about IPython kernels?",
    "answer": "Consult the IPython kernel documentation at `http://ipython.readthedocs.io/en/stable/install/kernel_install.html`."
  },
  {
    "question": "How do you install an additional Python library like `numpy` in an activated virtual environment?",
    "answer": "Run `pip install --no-index numpy`."
  },
  {
    "question": "What are the prerequisites for configuring an R kernel?",
    "answer": "An activated Python virtual environment, a 'kernels' directory (as described in the Python kernel section), and internet access to CRAN are required."
  },
  {
    "question": "Why does R kernel configuration need to occur on a login node?",
    "answer": "Installation of R packages requires access to CRAN, making a login node necessary for configuration."
  },
  {
    "question": "How do you load an R module, specifically version 4.1, for kernel configuration?",
    "answer": "Use the command `module load r/4.1`."
  },
  {
    "question": "How do you install the R kernel dependencies `crayon`, `pbdZMQ`, and `devtools`?",
    "answer": "Start the R interpreter with `R --no-save` and then run `install.packages(c('crayon', 'pbdZMQ', 'devtools'), repos='http://cran.us.r-project.org')`."
  },
  {
    "question": "Approximately how long might it take to install the R kernel dependencies?",
    "answer": "It could take up to 10 minutes."
  },
  {
    "question": "How do you install the R kernel itself?",
    "answer": "In the R interpreter, after installing dependencies, run `devtools::install_github(paste0('IRkernel/', c('repr', 'IRdisplay', 'IRkernel')))`."
  },
  {
    "question": "What command installs the R kernel specification file?",
    "answer": "In the R interpreter, run `IRkernel::installspec()`."
  },
  {
    "question": "What is an important action before using a newly installed R kernel?",
    "answer": "You must start or restart a new JupyterLab session."
  },
  {
    "question": "Where can one find documentation for the IRkernel?",
    "answer": "Refer to the IRkernel documentation at `https://irkernel.github.io/docs/`."
  },
  {
    "question": "Is it possible to install R packages directly from Jupyter notebooks?",
    "answer": "No, because there is no access to CRAN from notebooks."
  },
  {
    "question": "How do you install additional R packages like `doParallel`?",
    "answer": "Ensure the R module is loaded (`module load r/4.1`), then start R (`R --no-save`) and run `install.packages('doParallel', repos='http://cran.us.r-project.org')` from a login node."
  },
  {
    "question": "For longer tasks, how should Jupyter notebooks be executed?",
    "answer": "Notebooks should be executed by submitting a non-interactive task using `sbatch`."
  },
  {
    "question": "What is the general process to run notebooks as Python scripts for extended analyses?",
    "answer": "Convert the notebook to a Python script, create a submission script, and then submit the job using `sbatch`."
  },
  {
    "question": "Which Python package is needed to convert notebooks to Python scripts?",
    "answer": "The `nbconvert` package is required."
  },
  {
    "question": "How do you install `nbconvert` in a virtual environment on a login node?",
    "answer": "Run `pip install --no-index nbconvert`."
  },
  {
    "question": "What command converts a Jupyter notebook file named `mynotebook.ipynb` into a Python script?",
    "answer": "Use `jupyter nbconvert --to python mynotebook.ipynb`."
  },
  {
    "question": "How is a converted notebook (e.g., `mynotebook.py`) executed within a job submission script?",
    "answer": "Include the line `python mynotebook.py` in your bash submission script."
  },
  {
    "question": "How do you submit a non-interactive job script named `my-submit.sh`?",
    "answer": "Execute `sbatch my-submit.sh`."
  }
]