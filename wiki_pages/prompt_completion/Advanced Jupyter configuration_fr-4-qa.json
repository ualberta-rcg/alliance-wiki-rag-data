[
  {
    "question": "Where should the Julia kernel be configured, and why?",
    "answer": "The Julia kernel configuration, including package installation, must be done on a login node at the command prompt via SSH because it requires internet access."
  },
  {
    "question": "How do you install the IJulia package for a Julia kernel?",
    "answer": "After loading the Julia module (`module load julia`) and ensuring the Python virtual environment is available and active, execute `echo -e 'using Pkg\\nPkg.add(\"IJulia\")' | julia`."
  },
  {
    "question": "What is an important step after configuring the Julia kernel before using it?",
    "answer": "Before using the Julia kernel, you must start or restart a new JupyterLab session."
  },
  {
    "question": "How do you install additional Julia packages once the kernel is set up?",
    "answer": "Additional Julia packages, like `Glob`, are installed from a login node (with the Python virtual environment potentially deactivated) by ensuring the Julia module is loaded (`module load julia`) and then running `echo -e 'using Pkg\\nPkg.add(\"Glob\")' | julia`."
  },
  {
    "question": "Is a Python virtual environment a prerequisite for configuring Julia or R kernels?",
    "answer": "Yes, both Julia and R kernel configurations depend on having a Python virtual environment and a `kernels` directory. The initial steps for the Python kernel setup can be followed for these dependencies."
  },
  {
    "question": "Why and how would you start a clean Bash environment when setting up a Python kernel?",
    "answer": "If you are using the Jupyter Terminal via JupyterHub to create and configure the Python kernel, you should start from a clean Bash environment by running `env -i HOME=$HOME bash -l`."
  },
  {
    "question": "Which command is used to load the Python module before creating a virtual environment?",
    "answer": "Use `module load python`."
  },
  {
    "question": "How do you create a new Python virtual environment for JupyterLab?",
    "answer": "Run `virtualenv --no-download $HOME/jupyter_py3`."
  },
  {
    "question": "What command activates the new Python virtual environment?",
    "answer": "Activate it using `source $HOME/jupyter_py3/bin/activate`."
  },
  {
    "question": "How do you create the common `kernels` directory needed for all Jupyter kernels?",
    "answer": "Execute `mkdir -p ~/.local/share/jupyter/kernels`."
  },
  {
    "question": "What Python library needs to be installed to support the Python kernel?",
    "answer": "Install `ipykernel` by running `pip install --no-index ipykernel`."
  },
  {
    "question": "How do you generate the kernel specification file for a Python kernel?",
    "answer": "Run `python -m ipykernel install --user --name <unique_name> --display-name \"Python 3.x Kernel\"`, replacing `<unique_name>` with a specific name for your kernel."
  },
  {
    "question": "What is a necessary step after configuring the Python kernel?",
    "answer": "Before using the Python kernel, you must start or restart a new JupyterLab session."
  },
  {
    "question": "How do you install additional Python libraries like `numpy` into an existing virtual environment for use with a Python kernel?",
    "answer": "With the virtual environment activated, run `pip install --no-index numpy`. If using Jupyter Terminal via JupyterHub, ensure the environment is in a clean Bash session."
  },
  {
    "question": "Where must the R kernel be configured, and why?",
    "answer": "The R kernel configuration must be done at the command prompt on a login node via SSH because it requires access to CRAN for package installation."
  },
  {
    "question": "Which command loads the R module before configuring an R kernel?",
    "answer": "Load the R module using `module load r/4.1`."
  },
  {
    "question": "How do you install the R kernel dependencies such as `crayon`, `pbdZMQ`, and `devtools`?",
    "answer": "Start an R session with `R --no-save` and then run `install.packages(c('crayon', 'pbdZMQ', 'devtools'), repos='http://cran.us.r-project.org')` inside the R interpreter. This process could take up to 10 minutes."
  },
  {
    "question": "What command is used to install the R kernel itself after its dependencies are met?",
    "answer": "Inside the R interpreter, run `devtools::install_github(paste0('IRkernel/', c('repr', 'IRdisplay', 'IRkernel'))) `."
  },
  {
    "question": "How do you install the specification file for the R kernel?",
    "answer": "Inside the R interpreter, execute `IRkernel::installspec()`."
  },
  {
    "question": "What is crucial to do after installing the R kernel?",
    "answer": "Before using the R kernel, you must start or restart a new JupyterLab session."
  },
  {
    "question": "Can additional R packages be installed from Jupyter notebooks, and if not, how should it be done?",
    "answer": "No, R packages cannot be installed from notebooks due to lack of CRAN access. They must be installed from a login node by loading the R module (`module load r/4.1`), starting an R interpreter (`R --no-save`), and then using `install.packages()` (e.g., `install.packages('doParallel', repos='http://cran.us.r-project.org')`)."
  },
  {
    "question": "When should notebooks be converted and run as Python scripts?",
    "answer": "Notebooks should be converted and run as Python scripts for longer tasks or analyses that require submission as a non-interactive job using `sbatch`."
  },
  {
    "question": "How do you install `nbconvert` to convert Jupyter notebooks to Python scripts?",
    "answer": "In an activated virtual environment on a login node, run `pip install --no-index nbconvert`."
  },
  {
    "question": "What command converts a Jupyter notebook file (e.g., `mynotebook.ipynb`) into a Python script?",
    "answer": "Use `jupyter nbconvert --to python mynotebook.ipynb`."
  },
  {
    "question": "How should a converted Python notebook script be executed within a submission script?",
    "answer": "The script should be executed using `python mynotebook.py`."
  },
  {
    "question": "How do you submit a non-interactive task (e.g., a Python script converted from a notebook)?",
    "answer": "Submit the task with `sbatch my-submit.sh`, where `my-submit.sh` is your submission script."
  }
]