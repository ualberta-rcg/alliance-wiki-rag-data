[
  {
    "question": "How do you specify the local installation directory for Rmpi packages?",
    "answer": "You can specify the local installation directory by running `mkdir -p ~/local/R_libs/` followed by `export R_LIBS=~/local/R_libs/`."
  },
  {
    "question": "What is the command to install the Rmpi package after setting up the environment?",
    "answer": "The command to install Rmpi is `R CMD INSTALL --configure-args=\"--with-Rmpi-include=$EBROOTOPENMPI/include --with-Rmpi-libpath=$EBROOTOPENMPI/lib --with-Rmpi-type='OPENMPI' \" Rmpi_0.6-9.2.tar.gz`."
  },
  {
    "question": "What should be done if the Rmpi package fails to install?",
    "answer": "If Rmpi fails to install, carefully read the error message to identify and load any required additional modules to ensure successful installation."
  },
  {
    "question": "What is an example R script (`test.R`) for demonstrating Rmpi functionality?",
    "answer": "An example `test.R` script includes `library(\"Rmpi\")`, `mpi.universe.size()`, `mpi.spawn.Rslaves()`, `mpi.remote.exec()` for communication, and concludes with `mpi.close.Rslaves()` and `mpi.quit()` to manage MPI processes."
  },
  {
    "question": "What are the key components of a job submission script (`job.sh`) for running an Rmpi application?",
    "answer": "A job submission script for Rmpi includes SLURM directives like `#SBATCH --account`, `#SBATCH --ntasks`, `#SBATCH --mem-per-cpu`, and `#SBATCH --time`. It then loads `gcc`, `r`, and `openmpi` modules, sets `export R_LIBS=~/local/R_libs/`, and executes the R script using `mpirun -np 1 R CMD BATCH test.R test.txt`."
  },
  {
    "question": "How do you submit an Rmpi job using a SLURM scheduler?",
    "answer": "An Rmpi job is submitted to a SLURM scheduler using the command `sbatch job.sh`."
  }
]