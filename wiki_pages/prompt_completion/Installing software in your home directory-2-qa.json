[
  {
    "question": "Where can I find more information about BLAS/LAPACK and MKL?",
    "answer": "You can refer to the dedicated page on BLAS and LAPACK."
  },
  {
    "question": "Can I install software using `apt-get` or `yum` commands?",
    "answer": "If software instructions include `apt-get` or `yum`, it is unlikely that you will be able to install it using those instructions."
  },
  {
    "question": "What should I do if software instructions suggest using `apt-get` or `yum`?",
    "answer": "You should look for instructions that say 'to build from source', or contact support for assistance."
  },
  {
    "question": "How do I install Python, R, or Perl packages in my environment?",
    "answer": "Python, R, and Perl have package managers that can easily install almost any desired extension in your home directory. You should check the language's specific page for availability and detailed guidance."
  },
  {
    "question": "Where can I check if a Python, R, or Perl package is already available on the systems?",
    "answer": "You should see the page for each specific language to find out if the package you're looking for is already available on their systems."
  },
  {
    "question": "What kind of errors might I encounter when installing pre-compiled binaries in my home directory?",
    "answer": "Pre-compiled binaries installed in your home directory may fail with errors such as `/lib64/libc.so.6: version 'GLIBC_2.18' not found`."
  },
  {
    "question": "How can I resolve issues with pre-compiled binaries that report missing GLIBC versions?",
    "answer": "Such binaries can often be patched using the `setrpaths.sh` script."
  },
  {
    "question": "What is the syntax for using the `setrpaths.sh` script?",
    "answer": "The syntax is `setrpaths.sh --path path [--add_origin]`, where `path` refers to the directory where the software was installed."
  },
  {
    "question": "What is the function of the `setrpaths.sh` script?",
    "answer": "The `setrpaths.sh` script ensures that binaries use the correct interpreter and search for their dynamically linked libraries in the correct folder."
  },
  {
    "question": "When should I use the `--add_origin` option with `setrpaths.sh`?",
    "answer": "The `--add_origin` option adds `$ORIGIN` to the RUNPATH, which is sometimes helpful if a library cannot find other libraries in the same folder as itself."
  },
  {
    "question": "Can `setrpaths.sh` patch shared objects within archive files?",
    "answer": "Yes, `setrpaths.sh` can extract, patch, and update shared objects contained within archive files like Java (`.jar`) files or Python wheels (`.whl`) files."
  },
  {
    "question": "How is software primarily distributed on the new Alliance clusters?",
    "answer": "Almost all software used on the new clusters is distributed centrally using the CVMFS file system."
  },
  {
    "question": "Where is software typically installed on the new Alliance clusters?",
    "answer": "Software is installed somewhere under `/cvmfs/soft.computecanada.ca`, and is identical on all new clusters, rather than in typical Linux distribution paths like `/usr/bin`."
  },
  {
    "question": "What module provides the core of the Alliance software stack?",
    "answer": "The core of the software stack is provided by the `gentoo//2020` module, which is loaded by default."
  },
  {
    "question": "What is the location of the `gentoo//2020` software stack?",
    "answer": "The `gentoo//2020` stack is located at `/cvmfs/soft.computecanada.ca/gentoo/2020/usr`."
  },
  {
    "question": "Which environment variable should be used to refer to the `gentoo//2020` path?",
    "answer": "The environment variable `$EBROOTGENTOO` should be used to refer to this path."
  },
  {
    "question": "What types of packages are available under the `gentoo//2020` location?",
    "answer": "All common packages typically included with Linux distributions, such as `make`, `ls`, `cat`, and `grep`, can be found under the `gentoo//2020` location."
  },
  {
    "question": "How do compilers and linkers automatically find header files and libraries?",
    "answer": "The compiler and linker will automatically look for header files and libraries in the right location via the environment variables `$CPATH` and `$LIBRARY_PATH`, respectively."
  },
  {
    "question": "What happens if software is hard-coded to look for files under `/usr`?",
    "answer": "If software is hard-coded to look under `/usr`, compilation will typically fail and needs to be explicitly told about `$EBROOTGENTOO`."
  },
  {
    "question": "How can I resolve compilation issues when software expects files in `/usr`?",
    "answer": "You may need to adjust a Makefile, specify a `--with-` flag for the configure script, or edit a configuration file to explicitly tell the software about `$EBROOTGENTOO`."
  },
  {
    "question": "How do I find the location of header files and libraries for modules other than `gentoo`?",
    "answer": "Other modules provide an environment variable that starts with `EBROOT` and ends with the capitalized module name (e.g., `$EBROOTHDF5` for HDF5, with header files in `$EBROOTHDF5/include` and library files in `$EBROOTHDF5/lib`)."
  },
  {
    "question": "What should I do if a required header file or library is not available through `gentoo` or any other module?",
    "answer": "You should let support know, as it can most likely be easily added to the existing stack."
  }
]