[
  {
    "question": "What is Dedalus?",
    "answer": "Dedalus is a flexible development environment designed to solve partial differential equations using modern spectral methods."
  },
  {
    "question": "How can I check the available versions of Dedalus on the clusters?",
    "answer": "To know the available versions, execute the command `avail_wheels dedalus`."
  },
  {
    "question": "What Python versions are Dedalus 3.0.2 wheels available for?",
    "answer": "Dedalus 3.0.2 wheels are available for Python 3.11 (cp311) and Python 3.10 (cp310) architectures on x86-64-v3."
  },
  {
    "question": "What modules are required to run Dedalus in a Python virtual environment?",
    "answer": "The required modules are `StdEnv/2023`, `gcc`, `openmpi`, `mpi4py/3.1.4`, `fftw-mpi/3.3.10`, `hdf5-mpi/1.14.2`, and `python/3.11`."
  },
  {
    "question": "How do you load the necessary modules for Dedalus?",
    "answer": "You load the modules using the command: `module load StdEnv/2023 gcc openmpi mpi4py/3.1.4 fftw-mpi/3.3.10 hdf5-mpi/1.14.2 python/3.11`."
  },
  {
    "question": "How do you create a Python virtual environment for Dedalus?",
    "answer": "To create a virtual environment, use the command `virtualenv --no-download ~/dedalus_env`."
  },
  {
    "question": "How do you activate a created Dedalus virtual environment?",
    "answer": "Activate the virtual environment with the command `source ~/dedalus_env/bin/activate`."
  },
  {
    "question": "How do you install a specific version of Dedalus and its dependencies in a virtual environment?",
    "answer": "First, update pip with `pip install --no-index --upgrade pip`, then install Dedalus using `pip install --no-index dedalus==X.Y.Z`, replacing `X.Y.Z` with your chosen version (e.g., 3.0.2)."
  },
  {
    "question": "What happens if you install Dedalus without specifying a version number?",
    "answer": "If no version number is specified during the installation command, the most recent version of Dedalus will be installed."
  },
  {
    "question": "How can you validate a Dedalus installation within an activated virtual environment?",
    "answer": "To validate the installation, run the Python command: `python -c 'import dedalus'`."
  },
  {
    "question": "How do you freeze the installed packages and dependencies of a Dedalus virtual environment into a requirements file?",
    "answer": "To freeze the environment, use `pip freeze --local > ~/dedalus-3.0.2-requirements.txt`."
  },
  {
    "question": "How do you remove a local Dedalus virtual environment?",
    "answer": "First, deactivate the environment using `deactivate`, then remove its directory with `rm -r ~/dedalus_env`."
  },
  {
    "question": "In what modes can Dedalus be executed on clusters?",
    "answer": "Dedalus can be executed in distributed mode on multiple nodes or cores."
  },
  {
    "question": "Where can users find more information about running MPI tasks or controlling MPI scheduling with Dedalus?",
    "answer": "More information is available under 'T\u00e2che MPI' and 'Contr\u00f4le de l'ordonnancement avec MPI'."
  },
  {
    "question": "What is the purpose of the `submit-dedalus-distributed.sh` script?",
    "answer": "The `submit-dedalus-distributed.sh` script is used to prepare and submit a Dedalus job for execution in distributed mode across multiple cores or nodes."
  },
  {
    "question": "Which SBATCH parameters are configured in the distributed Dedalus submission script?",
    "answer": "The configured SBATCH parameters include `--account`, `--time`, `--ntasks`, and `--mem-per-cpu`."
  },
  {
    "question": "How is the virtual environment created and activated on each allocated node within the distributed Dedalus job script?",
    "answer": "The script uses `srun --ntasks $SLURM_NNODES --tasks-per-node=1 bash << EOF ... EOF` to create (`virtualenv --no-download $SLURM_TMPDIR/env`) and activate the virtual environment on each allocated node."
  },
  {
    "question": "How are Dedalus and its dependencies installed on each allocated node in the distributed job script?",
    "answer": "`pip install --no-index --upgrade pip` and `pip install --no-index -r dedalus-3.0.2-requirements.txt` are executed within the `srun` block on each allocated node."
  },
  {
    "question": "How is the virtual environment activated specifically for the main node in the distributed execution script?",
    "answer": "The command `source $SLURM_TMPDIR/env/bin/activate;` is used outside the `srun` block to activate the environment on the main node."
  },
  {
    "question": "What value is `OMP_NUM_THREADS` set to in the distributed Dedalus submission script?",
    "answer": "`OMP_NUM_THREADS` is set to `1`."
  },
  {
    "question": "How is the user's Python script executed in a distributed Dedalus job?",
    "answer": "The Python script is executed using `srun python $SCRATCH/myscript.py;`."
  },
  {
    "question": "What is the purpose of the `submit-dedalus-whole-nodes.sh` script?",
    "answer": "The `submit-dedalus-whole-nodes.sh` script is used to prepare and submit a Dedalus job designed to run on N whole nodes."
  },
  {
    "question": "What are the specific SBATCH parameters used when running Dedalus on whole nodes?",
    "answer": "Specific SBATCH parameters include `--account`, `--time`, `--nodes` (e.g., 2), `--ntasks-per-node` (e.g., 4), and `--mem-per-cpu`."
  },
  {
    "question": "What is an important step to perform before submitting a Dedalus job to the scheduler?",
    "answer": "Before submitting the job, it is important to test the script for possible errors, typically by performing a quick interactive task."
  },
  {
    "question": "How do you submit a prepared Dedalus job script to the scheduler?",
    "answer": "To submit the job, use the command `sbatch submit-dedalus.sh`."
  }
]