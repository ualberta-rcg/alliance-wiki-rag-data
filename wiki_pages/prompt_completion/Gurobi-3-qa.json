[
  {
    "question": "What is the purpose of the `script-facility.sh` example for Gurobi Python jobs?",
    "answer": "The `script-facility.sh` example demonstrates a Slurm script for solving a simple facility location model using Gurobi Python, showing how to set the threads parameter equal to the number of allocated cores by dynamically generating a `gurobi.env` file."
  },
  {
    "question": "Which Gurobi version is loaded in the `script-facility.sh` example?",
    "answer": "Gurobi version 11.0.1 is loaded in the `script-facility.sh` example."
  },
  {
    "question": "How does the `script-facility.sh` script configure the Gurobi `Threads` parameter?",
    "answer": "The `script-facility.sh` script configures the Gurobi `Threads` parameter by using the command `echo \"Threads ${SLURM_CPUS_ON_NODE:-1}\" > gurobi.env`, which dynamically sets it based on the number of allocated CPUs."
  },
  {
    "question": "What standard environment (StdEnv) is loaded for Gurobi 11.0.1 in the `script-facility.sh` example?",
    "answer": "`StdEnv/2023` is loaded for Gurobi 11.0.1 in the `script-facility.sh` example."
  },
  {
    "question": "Why would a user need to create a Python virtual environment when using Gurobi?",
    "answer": "A user needs to create a Python virtual environment to use Gurobi alongside popular third-party Python packages like NumPy, Matplotlib, and Pandas, as Gurobi's own Python version does not include these packages."
  },
  {
    "question": "How can one determine the Python versions supported by various Gurobi versions and StdEnv combinations?",
    "answer": "You can determine supported Python versions by loading the desired `StdEnv` and Gurobi modules, then navigating to `$EBROOTGUROBI/lib` and listing the `python*` directories."
  },
  {
    "question": "What Python version is supported by Gurobi 11.0.1 when loading `StdEnv/2023`?",
    "answer": "Gurobi 11.0.1 loaded with `StdEnv/2023` supports Python 3.11."
  },
  {
    "question": "What was the previous method for installing Gurobi for Python, and for which Gurobi versions is it still applicable?",
    "answer": "The previously recommended method for installing Gurobi for Python was using `setup.py`, and it is only usable with Gurobi 10 versions and older."
  },
  {
    "question": "What is the new recommended approach for installing Gurobi for Python with Gurobi 11 versions and newer?",
    "answer": "For Gurobi 11 versions and newer, the new approach involves downloading a compatible binary wheel from `pypi.org` and converting it into a format usable with a new installation command."
  },
  {
    "question": "What are the initial steps to create and activate a Python virtual environment for Gurobi 10.0.3 (and older) using `StdEnv/2023`?",
    "answer": "First, load the modules `gurobi/10.0.3` and `python`. Then, run `virtualenv --no-download ~/env_gurobi` to create the environment, and `source ~/env_gurobi/bin/activate` to activate it."
  },
  {
    "question": "How do you install additional Python packages like `pandas` into a Gurobi virtual environment (for Gurobi 10.0.3 and older) after activation?",
    "answer": "After activating the virtual environment, you can install packages like `pandas` using the command `pip install --no-index pandas`."
  },
  {
    "question": "Why does attempting to install `gurobipy` directly under `$EBROOTGUROBI` using `python setup.py install` fail with `StdEnv/2023` for Gurobi 10.0.3 and older?",
    "answer": "It fails because `$EBROOTGUROBI` is a read-only file system in `StdEnv/2023`, leading to a fatal error like \"error: could not create 'gurobipy.egg-info': Read-only file system\"."
  },
  {
    "question": "What is the workaround for installing `gurobipy` for Gurobi 10.0.3 (and older) in `StdEnv/2023` when direct installation under `$EBROOTGUROBI` is not possible?",
    "answer": "The workaround is to copy the required files (`lib` and `setup.py`) from `$EBROOTGUROBI` to a writable location (e.g., `/tmp/$USER`), change into that directory, and then run `python setup.py install`."
  }
]