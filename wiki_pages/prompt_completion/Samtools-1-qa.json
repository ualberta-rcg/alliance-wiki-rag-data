[
  {
    "question": "What is Samtools?",
    "answer": "Samtools is a suite of programs for interacting with high-throughput sequencing data."
  },
  {
    "question": "What other tools are closely related to Samtools?",
    "answer": "Samtools is closely related to BCFtools and HTSlib."
  },
  {
    "question": "Where can primary documentation for Samtools, BCFtools, and HTSlib be found?",
    "answer": "Primary documentation for all three packages can be found at https://www.htslib.org/."
  },
  {
    "question": "What are the main functions of Samtools?",
    "answer": "Samtools is for reading, writing, editing, indexing, and viewing files in SAM, BAM, or CRAM format."
  },
  {
    "question": "What is BCFtools used for?",
    "answer": "BCFtools is for reading and writing files in BCF2, VCF, and gVCF format, and for calling, filtering, and summarizing SNP and short indel sequence variants."
  },
  {
    "question": "What is HTSlib?",
    "answer": "HTSlib is a C-language library for reading and writing high-throughput sequencing data, used by both Samtools and BCFtools."
  },
  {
    "question": "Does this page cover all features of Samtools?",
    "answer": "No, this page does not cover all features of Samtools; for a complete list, refer to http://www.htslib.org/doc/samtools.html."
  },
  {
    "question": "How do you load the default version of Samtools?",
    "answer": "To load the default version of Samtools, use the command `module load samtools`."
  },
  {
    "question": "What version of Samtools is shown in the example?",
    "answer": "The example shows Samtools version 1.20, using htslib 1.20."
  },
  {
    "question": "What formats does SAMtools provide tools for manipulating alignments in?",
    "answer": "SAMtools provides tools for manipulating alignments in SAM and BAM formats."
  },
  {
    "question": "What does SAM stand for?",
    "answer": "SAM stands for \"Sequence Alignment/Map\"."
  },
  {
    "question": "What are BAM files?",
    "answer": "BAM files are compressed, binary versions of SAM files that are much smaller in size and ideal for storing large nucleotide sequence alignments."
  },
  {
    "question": "What does the 'B' in BAM stand for?",
    "answer": "The 'B' in BAM stands for \"binary\"."
  },
  {
    "question": "What is CRAM format and what is its advantage?",
    "answer": "CRAM is a more recent format for the same type of data as SAM/BAM, offering still greater compression."
  },
  {
    "question": "What should you verify in a SAM file before converting it to a BAM file?",
    "answer": "Prior to converting, verify if your SAM file carries a header section with the character \u201c@\u201d."
  },
  {
    "question": "How can you inspect the header section of a SAM file?",
    "answer": "You can inspect the header section of a SAM file using the `samtools view -H my_sample.sam` command."
  },
  {
    "question": "How do you convert a SAM file to a BAM file if it contains a header?",
    "answer": "If a SAM file contains a header, you can convert it using `samtools view -bo my_sample.bam my_sample.sam` or `samtools view -b my_sample.sam -o my_sample.bam`."
  },
  {
    "question": "How do you convert a SAM file to a BAM file if headers are absent?",
    "answer": "If headers are absent, you can use the reference FASTA file to map the reads and convert to BAM using `samtools view -bt ref_seq.fa -o my_sample.bam my_sample.sam`."
  },
  {
    "question": "Why would you need to sort and index BAM files?",
    "answer": "You may have to sort and index BAM files for many downstream applications."
  },
  {
    "question": "How do you sort a BAM file?",
    "answer": "You can sort a BAM file using the command `samtools sort my_sample.bam -o my_sample_sorted.bam`."
  },
  {
    "question": "How do you index a sorted BAM file?",
    "answer": "You can index a sorted BAM file using the command `samtools index my_sample_sorted.bam`."
  },
  {
    "question": "How can you convert a SAM file directly to a sorted BAM file using a shell pipe?",
    "answer": "You can convert a SAM file directly to a sorted BAM file using the shell pipe command: `samtools view -b my_sample.sam | samtools sort -o my_sample_sorted.bam`."
  },
  {
    "question": "What is a common prerequisite for processes like variant calling or feature counting?",
    "answer": "A sorted BAM file, together with its index file with extension `.bai`, is a common prerequisite for many other processes such as variant calling, feature counting, etc."
  },
  {
    "question": "What is a good way to handle multiple SAM files for processing?",
    "answer": "A job script with a loop is a good way to handle multiple SAM files."
  },
  {
    "question": "How can Samtools improve efficiency by using multiple cores?",
    "answer": "Samtools can take advantage of multiple cores (multithreading) if given the `-@` flag."
  },
  {
    "question": "What flag enables multithreading in Samtools?",
    "answer": "The `-@` flag enables multithreading in Samtools."
  },
  {
    "question": "How can GNU parallel be used to process multiple files concurrently with Samtools?",
    "answer": "GNU parallel can be used to process multiple files concurrently by piping the output of `find` to `parallel` to execute Samtools commands on each file."
  },
  {
    "question": "What does the provided `samtools_gnuparallel.sh` script do?",
    "answer": "The `samtools_gnuparallel.sh` script executes `view` and `sort` on four SAM files concurrently using GNU parallel."
  },
  {
    "question": "How can you modify the `samtools_gnuparallel.sh` script to process more input files concurrently?",
    "answer": "To process more input files concurrently with the `samtools_gnuparallel.sh` script, you would modify the `--cpus-per-task` request."
  }
]