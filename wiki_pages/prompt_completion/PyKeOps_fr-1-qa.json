[
  {
    "question": "What is the purpose of the KeOps library?",
    "answer": "The KeOps library allows for the calculation of reductions of large arrays whose entries are mathematical formulas or neural networks."
  },
  {
    "question": "Which programming languages and libraries can KeOps be used with?",
    "answer": "KeOps can be used with Python (NumPy, PyTorch), MATLAB, and R."
  },
  {
    "question": "How can you list the available PyKeOps versions on the clusters?",
    "answer": "You can list the available PyKeOps versions by launching the command `avail_wheels pykeops`."
  },
  {
    "question": "What is the listed version of pykeops available on the clusters?",
    "answer": "The listed version of pykeops is 2.2.3."
  },
  {
    "question": "What modules need to be loaded before installing PyKeOps in a Python virtual environment?",
    "answer": "You need to load `StdEnv/2023` and `python/3.11` modules using `module load StdEnv/2023 python/3.11`."
  },
  {
    "question": "How do you create and activate a Python virtual environment for PyKeOps?",
    "answer": "Create it with `virtualenv --no-download ~/pykeops_env` and activate it with `source ~/pykeops_env/bin/activate`."
  },
  {
    "question": "How do you install a specific version of PyKeOps in a virtual environment?",
    "answer": "First, upgrade pip with `pip install --no-index --upgrade pip`, then install PyKeOps with `pip install --no-index pykeops==X.Y.Z`, replacing `X.Y.Z` with the version number."
  },
  {
    "question": "How do you install the latest version of PyKeOps in a virtual environment?",
    "answer": "First, upgrade pip with `pip install --no-index --upgrade pip`, then install PyKeOps with `pip install --no-index pykeops` (without specifying a version number)."
  },
  {
    "question": "How can you validate the PyKeOps installation in a virtual environment?",
    "answer": "Run the command `python -c 'import pykeops; pykeops.test_numpy_bindings()'` to validate the installation."
  },
  {
    "question": "How do you freeze the environment and its requirements for PyKeOps?",
    "answer": "Use `pip freeze --local > ~/pykeops-2.2.3-requirements.txt` to freeze the environment and its requirements."
  },
  {
    "question": "How do you delete a local PyKeOps virtual environment?",
    "answer": "Deactivate the environment and remove its directory using `deactivate && rm -r ~/pykeops_env`."
  },
  {
    "question": "What computational resources can PyKeOps be executed on?",
    "answer": "PyKeOps can be executed on a CPU or a GPU."
  },
  {
    "question": "What modules are required for running PyKeOps on a CPU within a Slurm job?",
    "answer": "The modules `StdEnv/2023` and `python/3.11` are required for CPU execution."
  },
  {
    "question": "What modules are required for running PyKeOps on a GPU within a Slurm job, and which one is critical?",
    "answer": "The modules `StdEnv/2023`, `python/3.11`, `cuda/12`, and `custom-ctypes` are required. The `custom-ctypes` module is critical."
  },
  {
    "question": "How is the virtual environment created on a compute node for PyKeOps execution?",
    "answer": "The virtual environment is created using `virtualenv --no-download $SLURM_TMPDIR/env` and activated with `source $SLURM_TMPDIR/env/bin/activate`."
  },
  {
    "question": "How do you install PyKeOps and its dependencies on a compute node using a requirements file?",
    "answer": "First, upgrade pip with `pip install --no-index --upgrade pip`, then install dependencies with `pip install --no-index -r pykeops-2.2.3-requirements.txt`."
  },
  {
    "question": "How do you test an execution script for errors before submitting it?",
    "answer": "You can test the script with an interactive job."
  },
  {
    "question": "How do you submit a PyKeOps job to the scheduler?",
    "answer": "Submit the job using the command `sbatch submit-keops.sh`."
  }
]