[
  {
    "question": "What is GLOST?",
    "answer": "GLOST, the Greedy Launcher Of Small Tasks, is a tool for running many sequential jobs of short or variable duration, or for doing parameter sweeps."
  },
  {
    "question": "How does GLOST compare to GNU Parallel or job arrays?",
    "answer": "GLOST works like GNU parallel or job arrays but with a simpler syntax."
  },
  {
    "question": "What wrapper does GLOST use?",
    "answer": "GLOST uses a wrapper called `glost_launch`."
  },
  {
    "question": "Which MPI commands does GLOST utilize?",
    "answer": "GLOST uses MPI commands such as `srun`, `mpiexec`, and `mpirun`."
  },
  {
    "question": "How are jobs grouped for GLOST?",
    "answer": "Jobs are grouped into one text file, typically named `list_glost_tasks.txt`, which is used as an argument for `glost_launch`."
  },
  {
    "question": "When can GLOST be used?",
    "answer": "GLOST can be used for a large number of serial jobs with comparative runtime, a large number of short serial jobs, or serial jobs with different parameters (parameter sweeps)."
  },
  {
    "question": "What is the main idea behind using GLOST?",
    "answer": "The idea behind using GLOST is to bundle serial jobs and run them as an MPI job, which can use multiple cores (one or more nodes)."
  },
  {
    "question": "How does GLOST impact the job queue and scheduler?",
    "answer": "Using GLOST reduces considerably the number of jobs on the queue, and therefore, reduces the stress on the scheduler."
  },
  {
    "question": "What is an alternative software package to GLOST and what are its advantages?",
    "answer": "META is an alternative software package. Its advantages include significantly shorter queue wait times, smaller overheads (fewer wasted CPU cycles), a convenient mechanism for re-submitting failed computations, and support for all kinds of jobs (serial, multi-threaded, MPI, GPU, or hybrid)."
  },
  {
    "question": "Why is bundling serial jobs with GLOST advantageous for the scheduler?",
    "answer": "Submitting a large number of serial jobs at once can slow down the scheduler. GLOST bundles these tasks into an MPI job, reducing the number of jobs on the queue and preventing stress on the Slurm scheduler."
  },
  {
    "question": "What is the user's experience when managing jobs with GLOST?",
    "answer": "Using GLOST, the user will submit and handle few MPI jobs rather than hundreds or thousands of serial jobs."
  },
  {
    "question": "What MPI implementation does GLOST use?",
    "answer": "GLOST uses OpenMPI to run a set of serial tasks as an MPI job."
  },
  {
    "question": "How do you check for installed GLOST modules?",
    "answer": "To see the current installed modules on our systems, use `module spider glost`."
  },
  {
    "question": "What modules must be loaded to use GLOST?",
    "answer": "To use GLOST, you must make sure to load OpenMPI and GLOST modules."
  },
  {
    "question": "If OpenMPI is already loaded in the environment, how can GLOST be activated?",
    "answer": "If there is already an OpenMPI module in your environment, adding `module load glost` to your list of modules needed for your application is sufficient to activate GLOST."
  },
  {
    "question": "How can you verify that the GLOST module is loaded?",
    "answer": "Use `module list` to make sure that the GLOST module is loaded along with other modules before submitting your job."
  }
]