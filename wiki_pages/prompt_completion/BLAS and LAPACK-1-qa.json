[
  {
    "question": "What are BLAS and LAPACK?",
    "answer": "BLAS (Basic Linear Algebra Subprogram) and LAPACK (Linear Algebra PACK) are two commonly used libraries in advanced research computing, primarily for vector and matrix operations. They also define a standard programming interface."
  },
  {
    "question": "What is the purpose of the programming interface defined by BLAS and LAPACK?",
    "answer": "A programming interface in this context is a set of function definitions that can be called to accomplish specific computations, such as the dot product of two vectors or the matrix product of two hermitian matrices."
  },
  {
    "question": "Do BLAS and LAPACK have multiple implementations?",
    "answer": "Yes, there exist a large number of implementations of these two standards beyond the reference implementation by Netlib."
  },
  {
    "question": "How does hardware affect the performance of BLAS and LAPACK implementations?",
    "answer": "The performance of these implementations can vary widely depending on the hardware that is running them."
  },
  {
    "question": "Which BLAS/LAPACK implementation is generally best for Intel processors?",
    "answer": "The Intel Math Kernel Library (Intel MKL) implementation performs best in most situations on Intel processors."
  },
  {
    "question": "Is Intel MKL an open-source implementation?",
    "answer": "No, Intel MKL is a proprietary implementation."
  },
  {
    "question": "When might OpenBLAS be preferred over Intel MKL?",
    "answer": "OpenBLAS is an open-source implementation, and it may be preferred in situations where an open-source solution is required."
  },
  {
    "question": "Which BLAS/LAPACK implementation performs better on AMD processors?",
    "answer": "BLIS is an open-source implementation that performs better on AMD processors."
  },
  {
    "question": "Are gotoblas and ATLAS BLAS still actively maintained?",
    "answer": "No, gotoblas and ATLAS BLAS are no longer maintained projects."
  },
  {
    "question": "What problem does FlexiBLAS solve?",
    "answer": "FlexiBLAS solves the problem of needing to recompile software to test different BLAS/LAPACK implementations, which is a common issue when creating a portable software environment for multiple clusters."
  },
  {
    "question": "What is FlexiBLAS?",
    "answer": "FlexiBLAS is an abstraction layer that enables swapping BLAS and LAPACK implementations at runtime instead of compile time."
  },
  {
    "question": "What was the previous recommendation for BLAS/LAPACK implementation and why?",
    "answer": "For the past few years, Intel MKL was recommended as a reference implementation because the clusters only had Intel processors."
  },
  {
    "question": "Why did the recommendation for BLAS/LAPACK implementations change?",
    "answer": "The recommendation changed with the arrival of Narval, which is built with AMD processors."
  },
  {
    "question": "What is the current recommendation for compiling code when it comes to BLAS/LAPACK?",
    "answer": "The current recommendation is to use FlexiBLAS when compiling code."
  },
  {
    "question": "How is the FlexiBLAS module configured to ensure optimal performance on different processors?",
    "answer": "The FlexiBLAS module is configured to use Intel MKL on Intel processors and BLIS on AMD processors, which usually offers optimal performance."
  },
  {
    "question": "How can one compile against FlexiBLAS if a build system doesn't recognize it by default?",
    "answer": "One can generally fix this by setting the linking options to use `-lflexiblas` for both BLAS and LAPACK, typically found in a Makefile or passed as parameters to `configure` or `cmake`."
  },
  {
    "question": "Which versions of CMake can automatically find FlexiBLAS?",
    "answer": "Versions 3.19 and higher of CMake can find FlexiBLAS automatically."
  },
  {
    "question": "Which CMake modules should be loaded to use a compatible version for FlexiBLAS auto-detection?",
    "answer": "To use a compatible CMake version, one must load either the `cmake/3.20.1` or `cmake/3.21.4` modules."
  },
  {
    "question": "What is the primary advantage of using FlexiBLAS?",
    "answer": "The main benefit of using FlexiBLAS is the ability to change the BLAS/LAPACK implementation backend at run time."
  },
  {
    "question": "How do you change the BLAS/LAPACK implementation at runtime when using FlexiBLAS?",
    "answer": "The implementation backend can be changed at runtime by setting the environment variable `FLEXIBLAS`."
  },
  {
    "question": "What are the currently available implementations via the FLEXIBLAS environment variable?",
    "answer": "At the time of writing, four implementations are available: `netlib`, `blis`, `imkl`, and `openblas`."
  },
  {
    "question": "How can you get a complete list of available FlexiBLAS implementations?",
    "answer": "The full list of available implementations can be obtained by running the command `flexiblas list`."
  },
  {
    "question": "What is the default FlexiBLAS setting on Narval?",
    "answer": "On Narval, `FLEXIBLAS=blis` is set to use BLIS by default."
  },
  {
    "question": "What is the default FlexiBLAS setting on clusters other than Narval?",
    "answer": "On other clusters, `FLEXIBLAS` is left undefined, which defaults to using Intel MKL."
  },
  {
    "question": "Is it still possible to use Intel MKL directly, even if FlexiBLAS is recommended?",
    "answer": "Yes, it is still possible to use Intel MKL directly, even though FlexiBLAS is recommended."
  },
  {
    "question": "How do you use Intel MKL directly with Intel compilers?",
    "answer": "When using Intel compilers (e.g., `ifort`, `icc`, `icpc`), replace `-lblas` and `-llapack` in compiler and linker options with either `-mkl=sequential` (no internal threading) or `-mkl` (with internal threading)."
  },
  {
    "question": "What is the difference between using `-mkl=sequential` and `-mkl` when linking with Intel MKL directly?",
    "answer": "`--mkl=sequential` will not use internal threading, while `-mkl` will use internal threading."
  }
]