[
  {
    "question": "What does the command `chmod g+r file.txt` do?",
    "answer": "It grants read permission to all members of the group that owns `file.txt`."
  },
  {
    "question": "What is the purpose of the command `chmod o-x script.py`?",
    "answer": "It removes the execute permission for `script.py` for all users except the owner and the group."
  },
  {
    "question": "In `chmod` commands, what does the category `a` represent?",
    "answer": "The category `a` (all) signifies all users on the cluster (owner, group, and others)."
  },
  {
    "question": "How can you allow all users on the cluster to read a file named `file.txt`?",
    "answer": "You can use the command `chmod a+r file.txt`."
  },
  {
    "question": "How are permissions for a user category represented in octal notation?",
    "answer": "Permissions are represented by three bits interpreted as a number from 0 to 7 using the formula `(read_bit)*4 + (write_bit)*2 + (execute_bit)*1`."
  },
  {
    "question": "What octal value would represent read and write permissions for the owner, and read-only permissions for the group and others?",
    "answer": "The octal value would be 644."
  },
  {
    "question": "What permissions are required for a directory to access files within it?",
    "answer": "You must have read and execute permissions (5 or 7 in octal notation) for the directory."
  },
  {
    "question": "How do you modify file permissions using `chmod` with octal notation?",
    "answer": "You use the command `chmod` followed by the octal value, for example, `chmod 770 name_of_file`."
  },
  {
    "question": "What does the command `chmod 770 name_of_file` achieve?",
    "answer": "It grants read, write, and execute permissions to all users of your group for `name_of_file`."
  },
  {
    "question": "Who is allowed to modify the permissions of a file or directory?",
    "answer": "Only the owner of the file or directory can modify its permissions."
  },
  {
    "question": "Which command is used to change the group associated with a file or directory?",
    "answer": "The `chgrp` command is used to modify the group."
  },
  {
    "question": "What is the purpose of the sticky bit in Unix file systems, especially for shared directories?",
    "answer": "The sticky bit prevents files and directories from being deleted or renamed by any user other than their owner, even in shared directories."
  },
  {
    "question": "What happens if a shared directory with read and write permissions does not have the sticky bit enabled?",
    "answer": "Users with read and write permissions for that directory can rename or delete any files within it, regardless of their ownership."
  },
  {
    "question": "How do you set the sticky bit on a directory using symbolic `chmod` notation?",
    "answer": "Use the command `chmod +t <directory name>`."
  },
  {
    "question": "How do you set the sticky bit on a directory using octal `chmod` notation?",
    "answer": "Use the command `chmod 1774 <directory name>`."
  },
  {
    "question": "How is the sticky bit indicated in the output of `ls -l`?",
    "answer": "The sticky bit is represented by the letter `t` (or `T`) at the end of the permission field, such as `drwxrws--T`."
  },
  {
    "question": "How do you deactivate the sticky bit on a directory using symbolic `chmod` notation?",
    "answer": "Use the command `chmod -t <directory name>`."
  },
  {
    "question": "How do you deactivate the sticky bit on a directory using octal `chmod` notation?",
    "answer": "Use the command `chmod 0774 <directory name>`."
  },
  {
    "question": "What is the main advantage of activating the `setGID` bit for a directory?",
    "answer": "When the `setGID` bit is activated for a directory, new files and subdirectories created within it automatically inherit the group of the parent directory."
  },
  {
    "question": "Why is the `setGID` bit particularly important for `/project` spaces on clusters like Cedar and Graham?",
    "answer": "It is very important because storage quotas are tallied by group, ensuring proper group association for newly created files."
  },
  {
    "question": "How can you activate the `setGID` permission for a parent directory?",
    "answer": "You can activate it using the command `chmod g+s <directory name>`."
  },
  {
    "question": "How does the `setGID` bit appear in the `ls -l` output for a directory?",
    "answer": "The `x` permission for the group category changes to an `s`, like `drwxrws---`."
  },
  {
    "question": "What distinguishes an uppercase 'S' from a lowercase 's' when observing the `setGID` bit in `ls -l` output?",
    "answer": "A lowercase 's' indicates that `setGID` is active and the execute permission is also present for the group. An uppercase 'S' indicates that `setGID` is active, but the execute permission has been removed for the group."
  },
  {
    "question": "What potential problems can arise from an uppercase 'S' for the `setGID` bit?",
    "answer": "An uppercase 'S' can lead to unexpected permission issues, such as other members of the group being unable to access files within the directory."
  }
]