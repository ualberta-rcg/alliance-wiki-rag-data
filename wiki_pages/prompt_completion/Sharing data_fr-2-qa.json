[
  {
    "question": "How do you grant read permission to all members of a file's group in Unix-like systems?",
    "answer": "Use the command `chmod g+r file.txt`."
  },
  {
    "question": "What command is used to remove execute permission for all 'other' users from a script?",
    "answer": "Use the command `chmod o-x script.py`."
  },
  {
    "question": "What does the 'a' category signify when setting file permissions with `chmod`?",
    "answer": "The 'a' category signifies 'all' users, which includes the owner, group, and others."
  },
  {
    "question": "How can you allow all users on the cluster to read a specific file?",
    "answer": "Use the command `chmod a+r file.txt`."
  },
  {
    "question": "How are Unix file permissions represented using octal notation?",
    "answer": "Permissions for a user category are represented by three bits (read, write, execute) interpreted as a digit from 0 to 7 using the formula (read_bit)*4 + (write_bit)*2 + (execute_bit)*1."
  },
  {
    "question": "What octal value corresponds to owner having read and write permissions, and group and others having only read permission?",
    "answer": "The octal value 644, where 6 (4+2+0) is for the owner, 4 (4+0+0) for the group, and 4 (4+0+0) for others."
  },
  {
    "question": "What type of permissions are required for parent directories to access a file within them?",
    "answer": "You must have read and execute permissions (5 or 7 in octal notation) for all directories in the path leading to the file."
  },
  {
    "question": "What command allows you to modify permissions using octal notation?",
    "answer": "The `chmod` command is used with the octal value, for example, `chmod 770 name_of_file`."
  },
  {
    "question": "How can you grant read, write, and execute permissions to all users in your group for a specific file?",
    "answer": "Use the command `chmod 770 name_of_file`."
  },
  {
    "question": "Who is allowed to change the permissions of a file or directory?",
    "answer": "Only the owner of the file or directory can modify its associated permissions."
  },
  {
    "question": "What command is used to change the group ownership of a file or directory?",
    "answer": "The `chgrp` command is used to modify the group."
  },
  {
    "question": "What is the purpose of the 'sticky bit' in Unix file systems?",
    "answer": "The sticky bit prevents files and directories from being deleted or renamed by any user other than their owner, even if other users have write permissions for the directory."
  },
  {
    "question": "How do you set the sticky bit on a directory, along with rwxrwxr-- permissions?",
    "answer": "You can use `chmod +t <directory name>` or, in octal notation, `chmod 1774 <directory name>`."
  },
  {
    "question": "How is the sticky bit displayed in the `ls -l` command output?",
    "answer": "The sticky bit is represented by the letter 't' (or 'T') at the end of the permissions field in `ls -l` output, like `drwxrws--T`."
  },
  {
    "question": "How do you deactivate the sticky bit on a directory?",
    "answer": "You can deactivate it using `chmod -t <directory name>` or, in octal, `chmod 0774 <directory name>`."
  },
  {
    "question": "What is the function of the `setGID` bit for a directory?",
    "answer": "If the `setGID` bit is activated for a directory, new files and subdirectories created within it automatically inherit the group ownership of that parent directory."
  },
  {
    "question": "How do you activate the `setGID` permission on a directory?",
    "answer": "You activate it using the command `chmod g+s dirTest`."
  },
  {
    "question": "How does the `ls -l` output change when `setGID` is activated on a directory?",
    "answer": "The 'x' (execute) permission for the group will change to an 's', indicating that `setGID` is active (e.g., `drwxrws---`)."
  },
  {
    "question": "What happens when a new subdirectory is created under a directory with `setGID` activated?",
    "answer": "The new subdirectory will be associated with the same group as its parent directory, and its `setGID` bit will also be activated."
  },
  {
    "question": "What is the meaning of 'S' (capital S) in the `ls -l` output for `setGID`?",
    "answer": "A capital 'S' indicates that the `setGID` bit is active, but the execute permission for the group has been removed from the directory."
  },
  {
    "question": "Is the `setUID` bit functional on the computing clusters mentioned?",
    "answer": "No, the `setUID` bit is deactivated on these clusters for security reasons."
  },
  {
    "question": "How are default file system permissions defined in Linux?",
    "answer": "Default file system permissions are defined by the `umask` attribute."
  },
  {
    "question": "How can you display the current `umask` value in your session symbolically?",
    "answer": "You can display it by launching `umask -S`."
  },
  {
    "question": "What does the `umask -S` output `u=rwx,g=rx,o=` mean for new files?",
    "answer": "It means that by default, new files can be read, modified, and executed by the owner; read and executed by group members; and other users have no access."
  },
  {
    "question": "Does changing the `umask` value affect existing files?",
    "answer": "No, the `umask` attribute only applies to new files; changing it does not change permissions for existing ones."
  },
  {
    "question": "How can you set your `umask` attribute using an octal value?",
    "answer": "You can set it with the command `umask <value>`, where `<value>` is an octal number."
  },
  {
    "question": "What `umask` value restricts file access to the owner only (read, write, execute)?",
    "answer": "A `umask` value of `077` will make files readable, modifiable, and executable by the owner only."
  },
  {
    "question": "What `umask` value allows the owner and group to read, write, and execute files, but denies others any access?",
    "answer": "A `umask` value of `007` allows the owner and group to read, modify, and execute files."
  },
  {
    "question": "What are some additional conditions that determine file access, besides standard permissions?",
    "answer": "Additional conditions include the user needing execute permission for all parent directories in the path, being a member of the file's group, and Access Control Lists (ACLs)."
  },
  {
    "question": "How can you change permissions of existing files to match new default permissions (e.g., group can read/execute, others no access)?",
    "answer": "For a single file, use `chmod g-w,o-rx <file>`. To do it recursively for a directory, use `chmod -R g-w,o-rx <directory>`."
  }
]