[
  {
    "question": "What is the primary purpose of specifying `-D_GLIBCXX_USE_CXX11_ABI=0` when compiling C++ code?",
    "answer": "To link correctly with binaries that were compiled using an older Application Binary Interface (ABI), it is necessary to specify `-D_GLIBCXX_USE_CXX11_ABI=0` during the compilation of C++ code."
  },
  {
    "question": "Which version of GCC is required to execute the `make` example demonstrating ABI differences?",
    "answer": "Before running `make` for the example, a GCC module version 5.1 or higher must be loaded."
  },
  {
    "question": "How is the `main-cxx11-oldabi.o` object file compiled in the provided example's Makefile?",
    "answer": "The `main-cxx11-oldabi.o` object file is compiled with the command: `$(CXX) -c -o $@ -std=c++11 -D_GLIBCXX_USE_CXX11_ABI=0 $<`."
  },
  {
    "question": "What does the `diff-cxx98` target aim to show regarding C++ ABIs?",
    "answer": "The `diff-cxx98` target shows the difference between the old and new C++ ABIs when compiling with `-std=c++98`, by comparing the symbol files `main-cxx98-oldabi.o.symbols` and `main-cxx98-newabi.o.symbols`."
  },
  {
    "question": "Does using only `-std=c++98` or `-std=c++11` (without `_GLIBCXX_USE_CXX11_ABI`) result in different ABIs by default?",
    "answer": "No, if only `-std=c++98` or `-std=c++11` is used without explicitly setting `_GLIBCXX_USE_CXX11_ABI`, the compiler will use its default (most recent) ABI, and thus, the ABIs will not differ."
  },
  {
    "question": "What compilation option explicitly controls whether the old or new ABI is used for `std::string` and other library types?",
    "answer": "The compilation option `_GLIBCXX_USE_CXX11_ABI` controls whether the old ABI (when set to `0`) or the new ABI (when set to `1`) is used, regardless of whether `-std=c++98` or `-std=c++11` is specified."
  },
  {
    "question": "Can you provide an example of a symbol name difference observed between the old and new C++ ABIs for a basic string constructor?",
    "answer": "Yes, for a basic string constructor, the old ABI might produce a symbol like `_ZNSsC1EPKcRKSaIcE`, while the new ABI produces `_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_`."
  }
]