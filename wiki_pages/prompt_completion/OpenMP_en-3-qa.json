[
  {
    "question": "What is the purpose of the OMP_STACKSIZE environment variable?",
    "answer": "The OMP_STACKSIZE environment variable specifies the size of the stack for each thread created by the OpenMP runtime."
  },
  {
    "question": "What is the default value for OMP_STACKSIZE if it is not explicitly set?",
    "answer": "If OMP_STACKSIZE is not set, its implied value will be 4M."
  },
  {
    "question": "What can happen if an OpenMP program does not have enough stack memory?",
    "answer": "If OpenMP code does not have enough stack memory, it might crash with a segmentation fault error message."
  },
  {
    "question": "Does OMP_STACKSIZE apply to the main OpenMP thread?",
    "answer": "No, the main OpenMP thread gets its stack size from the execution shell, while OMP_STACKSIZE applies to each additional thread created at runtime."
  },
  {
    "question": "Where can I find an exhaustive list of environment variables for Intel compilers?",
    "answer": "For an exhaustive list of environment variables for Intel compilers, you can refer to the web site at http://software.intel.com/sites/products/documentation/doclib/stdxe/2013/composerxe/compiler/cpp-lin/GUID-E1EC94AE-A13D-463E-B3C3-6D7A7205F5A1.htm."
  },
  {
    "question": "Where can I find an exhaustive list of environment variables for GNU compilers?",
    "answer": "For an exhaustive list of environment variables for GNU compilers, you can refer to the web site at http://gcc.gnu.org/onlinedocs/libgomp/Environment-Variables.html."
  },
  {
    "question": "What prefix do environment variables specific to the Intel compiler start with?",
    "answer": "Environment variables specific to the Intel compiler start with KMP_."
  },
  {
    "question": "What prefix do environment variables specific to the GNU compiler start with?",
    "answer": "Environment variables specific to the GNU compiler start with GOMP_."
  },
  {
    "question": "Which environment variables are important for optimal memory access performance regarding OpenMP threads?",
    "answer": "For optimal performance regarding memory access, it is important to set the OMP_PROC_BIND variable as well as the affinity variables, KMP_AFFINITY for Intel, and GOMP_CPU_AFFINITY for GNU compilers."
  },
  {
    "question": "Why is it important to set thread affinity variables like OMP_PROC_BIND, KMP_AFFINITY, and GOMP_CPU_AFFINITY?",
    "answer": "Setting these affinity variables prevents the movement of OpenMP threads between processors by the operating system, which is particularly important in a NUMA architecture found in most modern computers."
  },
  {
    "question": "How do you compile the C 'Hello world' OpenMP example using GCC?",
    "answer": "The C 'Hello world' OpenMP example can be compiled using GCC with the command: `gcc -O3 -fopenmp ompHello.c -o ompHello`."
  },
  {
    "question": "How do you run the C 'Hello world' OpenMP example with 4 threads?",
    "answer": "To run the C 'Hello world' OpenMP example with 4 threads, first set the environment variable `export OMP_NUM_THREADS=4`, then execute the compiled program `./ompHello`."
  },
  {
    "question": "How do you compile the Fortran 90 'Hello world' OpenMP example using GFortran?",
    "answer": "The Fortran 90 'Hello world' OpenMP example can be compiled using GFortran with the command: `gfortran -O3 -fopenmp ompHello.f90 -o fomphello`."
  },
  {
    "question": "How do you run the Fortran 90 'Hello world' OpenMP example with 4 threads?",
    "answer": "To run the Fortran 90 'Hello world' OpenMP example with 4 threads, first set the environment variable `export OMP_NUM_THREADS=4`, then execute the compiled program `./fomphello`."
  },
  {
    "question": "Where can one find a comprehensive tutorial on OpenMP?",
    "answer": "Lawrence Livermore National Labs has a comprehensive tutorial on OpenMP available at https://computing.llnl.gov/tutorials/openMP."
  },
  {
    "question": "Where does OpenMP.org publish the formal OpenMP specifications?",
    "answer": "OpenMP.org publishes the formal specifications at http://www.openmp.org/specifications/."
  },
  {
    "question": "Where can one find reference cards for OpenMP C/C++ and Fortran interfaces?",
    "answer": "Handy reference cards for the OpenMP C/C++ interface (http://www.openmp.org/wp-content/uploads/OpenMP-4.0-C.pdf) and Fortran interface (http://www.openmp.org/wp-content/uploads/OpenMP-4.0-Fortran.pdf) are available from OpenMP.org."
  },
  {
    "question": "Where can one find examples of OpenMP usage?",
    "answer": "Examples of OpenMP usage are published by OpenMP.org at http://www.openmp.org/wp-content/uploads/openmp-examples-4.0.2.pdf."
  }
]