[
  {
    "question": "What is GAMESS?",
    "answer": "GAMESS (General Atomic and Molecular Electronic Structure System) is an *ab initio* quantum chemistry software package."
  },
  {
    "question": "What is the first step when preparing to submit a GAMESS job?",
    "answer": "The first step is to prepare a GAMESS input file that contains the molecular geometry and the calculation to be performed."
  },
  {
    "question": "Where can I find documentation on the GAMESS input file format and keywords?",
    "answer": "Consult the GAMESS documentation at [http://www.msg.ameslab.gov/gamess/documentation.html], specifically section 2 of the GAMESS Manual [http://www.msg.ameslab.gov/gamess/GAMESS_Manual/input.pdf]."
  },
  {
    "question": "What files are required in the same directory for a GAMESS job submission?",
    "answer": "Both the GAMESS input file (e.g., 'name.inp') and a job script specifying the required computing resources must be in the same directory."
  },
  {
    "question": "How do you submit a GAMESS job to the scheduler?",
    "answer": "A GAMESS job is submitted to the scheduler using the command `sbatch gamess_job.sh`."
  },
  {
    "question": "What Slurm parameter in the job script specifies the number of CPUs for a task?",
    "answer": "The `#SBATCH --cpus-per-task` parameter specifies the number of CPUs (e.g., `#SBATCH --cpus-per-task=1`)."
  },
  {
    "question": "What Slurm parameter in the job script specifies the memory per CPU?",
    "answer": "The `#SBATCH --mem-per-cpu` parameter specifies the memory per CPU in MB (e.g., `#SBATCH --mem-per-cpu=4000M`)."
  },
  {
    "question": "What Slurm parameter in the job script specifies the time limit for a job?",
    "answer": "The `#SBATCH --time` parameter specifies the time limit in DD-HH:MM format (e.g., `#SBATCH --time=0-00:30`)."
  },
  {
    "question": "How is the GAMESS module loaded within the job script?",
    "answer": "The `module load gamess-us/20170420-R1` command is used to load the GAMESS module."
  },
  {
    "question": "What command executes the GAMESS input file and redirects its output in the job script?",
    "answer": "The command `rungms name.inp &> name.out` executes the GAMESS input file ('name.inp') and redirects its output to 'name.out'."
  },
  {
    "question": "Where are GAMESS temporary binary (scratch) files stored by default?",
    "answer": "By default, GAMESS temporary binary files are stored on the local disk of the compute node, specifically in `$SLURM_TMPDIR`."
  },
  {
    "question": "What happens to the data in `$SLURM_TMPDIR` after a job completes?",
    "answer": "The data in `$SLURM_TMPDIR` will be deleted when the job is finished."
  },
  {
    "question": "When should `/scratch` be used for GAMESS temporary binary files instead of the local disk?",
    "answer": "If the local disk space (`$SLURM_TMPDIR`) is insufficient, `/scratch` should be used by setting the `SCR` environment variable."
  },
  {
    "question": "Which environment variable controls the location of GAMESS temporary binary files?",
    "answer": "The `SCR` environment variable controls the location of GAMESS temporary binary files."
  },
  {
    "question": "Where are GAMESS supplementary output files copied to by default?",
    "answer": "By default, GAMESS supplementary output files are copied to the user's `$SCRATCH` directory, which is the default location for the `USERSCR` environment variable."
  },
  {
    "question": "Which environment variable designates the location for GAMESS supplementary output files?",
    "answer": "The `USERSCR` environment variable designates the location for GAMESS supplementary output files."
  },
  {
    "question": "What Slurm parameter determines the number of CPUs available for a GAMESS calculation?",
    "answer": "The `--cpus-per-task` parameter defines the number of CPUs available for the calculation."
  },
  {
    "question": "Why can GAMESS only use CPU cores on the same compute node for parallelization?",
    "answer": "Because parallelization in GAMESS is done via sockets, it can only use CPU cores that are located on the same compute node."
  },
  {
    "question": "What is the maximum number of CPU cores per node on Graham for a GAMESS task?",
    "answer": "The maximum number of CPU cores per node on Graham for a task is 32."
  },
  {
    "question": "Are quantum chemistry calculations efficient with a large number of CPUs?",
    "answer": "Quantum chemistry calculations are generally not efficient with a large number of CPUs and do not scale as well as classical molecular mechanics."
  },
  {
    "question": "What factors influence the effective number of CPUs that can be used for GAMESS calculations?",
    "answer": "The effective number of CPUs depends on the theoretical level, the quantity of atoms, and the number of basis functions."
  },
  {
    "question": "How can one determine a reasonable number of CPUs for a GAMESS calculation?",
    "answer": "By executing a 'scalability test,' which involves comparing execution times with different numbers of CPUs using the same input file."
  },
  {
    "question": "What is an ideal outcome for a scalability test?",
    "answer": "Ideally, the execution time should decrease by half when twice as many CPUs are used."
  },
  {
    "question": "Can increasing the number of CPUs sometimes lead to longer execution times for certain GAMESS calculations?",
    "answer": "Yes, it is possible for some calculations to take more time with a higher number of CPUs."
  }
]