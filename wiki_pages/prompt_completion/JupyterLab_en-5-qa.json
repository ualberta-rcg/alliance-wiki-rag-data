[
  {
    "question": "What are some of the scientific Python packages that require the `scipy-stack` module if used in a notebook?",
    "answer": "Some scientific Python packages listed are `matplotlib`, `numpy`, `pandas`, and `scipy`. Other notable packages include `Cycler`, `futures`, `jupyter_client`, `jupyter_core`, `mpmath`, `pathlib2`, `pexpect`, `pickleshare`, `ptyprocess`, `pyzmq`, `simplegeneric`, `sympy`, `tornado`, and `traitlets`."
  },
  {
    "question": "How can a user see all included extensions for the `scipy-stack` module?",
    "answer": "To see all included extensions, a user can click on the `scipy-stack` module within the JupyterLab 'Softwares' tool."
  },
  {
    "question": "How can additional Python packages be installed directly within a JupyterLab notebook cell?",
    "answer": "Additional Python packages can be installed by running a command like `pip install --no-index package-name` in a notebook cell."
  },
  {
    "question": "Is it necessary to restart the notebook's kernel after installing certain packages?",
    "answer": "Yes, for some packages (like `plotly`), it may be necessary to restart the notebook's kernel before importing the package."
  },
  {
    "question": "Are Python packages installed in the default Python kernel environment permanent?",
    "answer": "No, the installation of packages in the default Python kernel environment is temporary and will need to be reinstalled in subsequent JupyterLab sessions."
  },
  {
    "question": "How can a user configure a persistent Python environment for package installations?",
    "answer": "For a persistent Python environment, a user must configure a custom Python kernel."
  },
  {
    "question": "What are the steps to open an existing Python notebook file (`.ipynb`) in JupyterLab?",
    "answer": "To open an existing Python notebook, go to the 'File Browser', browse to the location of the `.ipynb` file, and double-click on it. This will open the notebook in a new JupyterLab tab and start an IPython kernel."
  },
  {
    "question": "How do you open a new Python notebook in the current directory of the File Browser?",
    "answer": "To open a new Python notebook, click on the 'Python 3.x' launcher under the 'Notebook' section. This will open a new Python 3 notebook in a new JupyterLab tab and start a new IPython kernel."
  },
  {
    "question": "What is the first step to run a Jupyter notebook as a Python script?",
    "answer": "The first step is to install `nbconvert` from the console or a new notebook cell using the command `!pip install --no-index nbconvert`."
  },
  {
    "question": "How do you convert a Jupyter notebook named `my-current-notebook.ipynb` into a Python script?",
    "answer": "A Jupyter notebook can be converted to a Python script by running the command `!jupyter nbconvert --to python my-current-notebook.ipynb`."
  },
  {
    "question": "After converting a notebook to a Python script, how can it be run non-interactively using a submission script?",
    "answer": "In your non-interactive submission script, you can run the converted notebook using `python my-current-notebook.py`, and then submit the job with `sbatch my-submit.sh`."
  }
]