[
  {
    "question": "Which core scientific Python packages are part of the `scipy-stack` module?",
    "answer": "The core scientific Python packages specifically mentioned as being part of the `scipy-stack` module are `matplotlib`, `numpy`, `pandas`, and `scipy`."
  },
  {
    "question": "Beyond the core scientific libraries, what are some other notable Python packages included in the `scipy-stack` module?",
    "answer": "Other notable packages included in the `scipy-stack` module are `Cycler`, `futures`, `jupyter_client`, `jupyter_core`, `mpmath`, `pathlib2`, `pexpect`, `pickleshare`, `ptyprocess`, `pyzmq`, `simplegeneric`, `sympy`, `tornado`, and `traitlets`."
  },
  {
    "question": "Where should a user load the `scipy-stack` module from within JupyterLab?",
    "answer": "Users must load the `scipy-stack` module from the JupyterLab *Softwares* tool before opening a notebook that requires these packages."
  },
  {
    "question": "How can a user install additional Python packages like `numpy` directly within a notebook cell?",
    "answer": "A user can install additional Python packages by running the command `pip install --no-index package-name` (e.g., `pip install --no-index numpy`) inside a cell of their notebook."
  },
  {
    "question": "What action might be required after installing certain Python packages, such as `plotly`, in a notebook?",
    "answer": "For some packages (like `plotly`), you may need to restart the notebook's kernel before importing the package after installation."
  },
  {
    "question": "Is the installation of packages in the default Python kernel environment permanent?",
    "answer": "No, the installation of packages in the default Python kernel environment is temporary to the lifetime of the JupyterLab session, meaning you will have to reinstall them the next time you start a new JupyterLab session."
  },
  {
    "question": "How can a user achieve a persistent Python environment for their notebooks?",
    "answer": "For a persistent Python environment, a user must configure a custom Python kernel."
  },
  {
    "question": "What are the steps to open an existing Python notebook (`.ipynb` file) in JupyterLab?",
    "answer": "To open an existing Python notebook, you should go back to the *File Browser*, browse to the location of the `*.ipynb` file, and double-click on it. This will open the Python notebook in a new JupyterLab tab, and an IPython kernel will start running in the background."
  },
  {
    "question": "How does a user open a new Python notebook in the current *File Browser* directory?",
    "answer": "To open a new Python notebook in the current *File Browser* directory, click on the *Python 3.x* launcher under the *Notebook* section, which will open a new Python 3 notebook in a new JupyterLab tab with a new IPython kernel running."
  },
  {
    "question": "What is the first step required to run a Jupyter notebook as a Python script?",
    "answer": "The first step is to install `nbconvert` from the console or in a new notebook cell by running `!pip install --no-index nbconvert`."
  },
  {
    "question": "How do you convert a Jupyter notebook file (e.g., `my-current-notebook.ipynb`) into a Python script?",
    "answer": "You can convert your notebook to a Python script by running the command `!jupyter nbconvert --to python my-current-notebook.ipynb`."
  },
  {
    "question": "How is a converted Python notebook script (e.g., `my-current-notebook.py`) typically executed within a non-interactive submission script?",
    "answer": "In your submission script, you run your converted notebook with the command `python my-current-notebook.py`."
  }
]