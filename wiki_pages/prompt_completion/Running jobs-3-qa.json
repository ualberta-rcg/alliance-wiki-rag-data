[
  {
    "question": "Which environment variables can be set to consistently use one account for all jobs?",
    "answer": "You can set `SLURM_ACCOUNT`, `SBATCH_ACCOUNT`, and `SALLOC_ACCOUNT` in your `~/.bashrc` file."
  },
  {
    "question": "What is the purpose of the `SBATCH_ACCOUNT` environment variable?",
    "answer": "Slurm will use the value of `SBATCH_ACCOUNT` in place of the `--account` directive in the job script."
  },
  {
    "question": "What is the priority order if an account name is supplied via an environment variable and also within the job script?",
    "answer": "The environment variable takes priority. To override it, you must supply the account name as a command-line argument to `sbatch`."
  },
  {
    "question": "How does `SLURM_ACCOUNT` relate to `SBATCH_ACCOUNT`?",
    "answer": "`SLURM_ACCOUNT` plays the same role as `SBATCH_ACCOUNT`, but for the `srun` command instead of `sbatch`."
  },
  {
    "question": "What is `SALLOC_ACCOUNT` used for?",
    "answer": "`SALLOC_ACCOUNT` serves the same purpose as `SBATCH_ACCOUNT` and `SLURM_ACCOUNT`, but for the `salloc` command."
  },
  {
    "question": "What is a serial job?",
    "answer": "A serial job is a job which requests only a single core and is considered the simplest type of job."
  },
  {
    "question": "What is an array job?",
    "answer": "An array job, also known as a task array, is a method to submit a whole set of jobs with one command."
  },
  {
    "question": "How are individual jobs in an array job distinguished?",
    "answer": "Individual jobs in an array are distinguished by an environment variable, `$SLURM_ARRAY_TASK_ID`, which is set to a different value for each instance of the job."
  },
  {
    "question": "How many tasks will be created by an array job script with `#SBATCH --array=1-10`?",
    "answer": "This will create 10 tasks, with values of `$SLURM_ARRAY_TASK_ID` ranging from 1 to 10."
  },
  {
    "question": "Where can users find more documentation for Slurm job arrays?",
    "answer": "More examples can be found in [[Job arrays]], and detailed documentation is available on the [https://slurm.schedmd.com/job_array.html Job Array Support] page."
  },
  {
    "question": "What is a threaded or OpenMP job?",
    "answer": "A threaded or OpenMP job launches a single process with multiple CPU cores, for example, eight CPU cores."
  },
  {
    "question": "What is required for an application to use OpenMP?",
    "answer": "For an application to use OpenMP, it must be compiled with the appropriate flag, such as `gcc -fopenmp ...` or `icc -openmp ...`."
  },
  {
    "question": "How is the number of OpenMP threads typically set in a Slurm script?",
    "answer": "The number of OpenMP threads is typically set by exporting the `OMP_NUM_THREADS` environment variable to `$SLURM_CPUS_PER_TASK`."
  },
  {
    "question": "Where can I find more information on writing and running parallel programs with OpenMP?",
    "answer": "More information is available on the [[OpenMP]] page."
  },
  {
    "question": "What is an MPI job?",
    "answer": "An MPI job launches multiple MPI processes, potentially across multiple nodes."
  },
  {
    "question": "What resources are requested in the example MPI job script?",
    "answer": "The example MPI job script requests four MPI processes, each with 1024 MB of memory, and a run time limit of 5 minutes, on a single node."
  },
  {
    "question": "Where can users find more information about advanced MPI scheduling and hybrid MPI/threaded jobs?",
    "answer": "More information can be found on the [[Advanced MPI scheduling]] page."
  },
  {
    "question": "Where can users find information and examples for requesting GPU resources?",
    "answer": "Users should refer to the [[Using GPUs with Slurm]] page for discussions and examples."
  },
  {
    "question": "What are interactive jobs useful for?",
    "answer": "Interactive jobs are useful for data exploration at the command line, interactive console tools like R and iPython, and significant software development, debugging, or compiling."
  },
  {
    "question": "How do you start an interactive session on a compute node?",
    "answer": "You can start an interactive session on a compute node using the `salloc` command."
  },
  {
    "question": "What is an example command for starting an interactive job requesting one CPU core and 3 GB of memory for an hour?",
    "answer": "An example command is `salloc --time=1:0:0 --mem-per-cpu=3G --ntasks=1 --account=def-someuser`."
  }
]