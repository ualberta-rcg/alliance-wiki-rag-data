[
  {
    "question": "What are the learning objectives related to profiling code?",
    "answer": "The learning objectives are to understand what a profiler is, how to use the NVPROF profiler, comprehend code performance, and know how to focus efforts and rewrite time-consuming routines."
  },
  {
    "question": "Why is it necessary to profile code?",
    "answer": "Profiling code is the only way to understand how time is spent at critical points (hotspots), comprehend code performance, and learn how to better utilize development time."
  },
  {
    "question": "Why is it important to identify critical points (hotspots) in code?",
    "answer": "According to Amdahl's Law, parallelizing the routines that consume the most execution time (hotspots) produces the greatest impact."
  },
  {
    "question": "From where can the example code for this exercise be obtained?",
    "answer": "The code comes from the Git repository: https://github.com/calculquebec/cq-formation."
  },
  {
    "question": "How do you prepare the code for the profiling exercise?",
    "answer": "Download and extract the package from https://github.com/calculquebec/cq-formation-openacc/archive/refs/heads/main.zip, then navigate to the 'cpp' or 'f90' directory. The goal is to compile and link the code to obtain an executable for profiling."
  },
  {
    "question": "Which compilers offer the most advanced support for OpenACC?",
    "answer": "Compilers from Cray and NVIDIA (via its HPC SDK, previously Portland Group) offer the most advanced support for OpenACC."
  },
  {
    "question": "Which versions of GNU compilers support OpenACC 2.x?",
    "answer": "As of July 2022, GCC versions 10, 11, and 12 support OpenACC version 2.6, with support improving since GCC version 6."
  },
  {
    "question": "Which version of NVIDIA HPC SDK is used in this tutorial?",
    "answer": "Version 22.7 of NVIDIA HPC SDK is used in this tutorial."
  },
  {
    "question": "Are NVIDIA compilers free for academic research?",
    "answer": "Yes, NVIDIA compilers are free for academic research purposes."
  },
  {
    "question": "What command is used to load the `nvhpc/22.7` module?",
    "answer": "The command `module load nvhpc/22.7` is used."
  },
  {
    "question": "What executable is created after running the `make` command?",
    "answer": "The executable `cg.x` is created."
  },
  {
    "question": "What are the minimum resource requirements for testing the `cg.x` executable?",
    "answer": "The test environment should have 4GB of available memory and at least two (2) CPU cores, as the executable uses approximately 3GB of memory and nearly 100% of one CPU core."
  },
  {
    "question": "What two profilers are used in this tutorial?",
    "answer": "The tutorial uses NVPROF from NVIDIA, a command-line profiler, and NVVP (NVIDIA Visual Profiler), a multiplatform analysis tool."
  },
  {
    "question": "Which profiler is used first for analyzing the `cg.x` executable?",
    "answer": "The `nvprof` profiler is used first because `cg.x` does not yet utilize the GPU."
  },
  {
    "question": "How do you load the CUDA module to use `nvprof`?",
    "answer": "The command `module load cuda/11.7` is used to load the CUDA module."
  },
  {
    "question": "What arguments are needed to profile a pure CPU executable using `nvprof`?",
    "answer": "The arguments `--cpu-profiling on` must be added to the command line to profile a pure CPU executable with `nvprof`."
  }
]