[
  {
    "question": "What is Julia?",
    "answer": "Julia is a programming language designed for performance, ease of use, and portability."
  },
  {
    "question": "How is Julia typically made available on Alliance clusters?",
    "answer": "Julia is available as a module on the Alliance clusters."
  },
  {
    "question": "Where are Julia packages installed by default when added to a project for the first time?",
    "answer": "Packages are downloaded, installed in `~/.julia`, and precompiled the first time they are added to a Julia project."
  },
  {
    "question": "Can different Julia projects share packages or use different versions of the same package?",
    "answer": "Yes, the data in `~/.julia` will be reused for the same package across different projects. Also, different versions of the same package can coexist in `~/.julia` and be added to different projects."
  },
  {
    "question": "How do Julia projects compare to Python's virtual environments?",
    "answer": "Compared to Python, Julia projects replace \"virtual environments\" while avoiding code duplication."
  },
  {
    "question": "How are binary dependencies handled in Julia 1.6 and later versions?",
    "answer": "From Julia 1.6 onwards, Julia packages include their binary dependencies, so there is no need to load any software module for them."
  },
  {
    "question": "What issues might arise with Julia 1.5 and earlier versions when a package depends on system-provided binaries?",
    "answer": "With Julia 1.5 and earlier, users may encounter problems if a package relies on system-provided binaries, as Julia's attempts to install dependencies via `yum` or `apt` (with `sudo`) will not work on Alliance clusters."
  },
  {
    "question": "What is the recommended procedure to install a Julia 1.5 or earlier package like JLD that depends on HDF5 on Alliance clusters?",
    "answer": "The recommended procedure involves loading the `gcc`, `hdf5`, and `julia/1.4.1` modules, then inside Julia, using `Libdl` to push `ENV[\"HDF5_DIR\"] * \"/lib\"` to `Libdl.DL_LOAD_PATH`, and finally adding the package using `Pkg.add(\"JLD\")`."
  },
  {
    "question": "Why is it important to extend `Libdl.DL_LOAD_PATH` for older Julia packages like JLD, even on systems where it might seem to work without it?",
    "answer": "Extending `Libdl.DL_LOAD_PATH` using the environment variable defined by the module (e.g., `HDF5_DIR`) is considered best practice because it ensures uniform functionality across all systems, preventing failures on clusters like Cedar that do not have HDF5 installed system-wide."
  },
  {
    "question": "Which package is recommended over JLD for HDF5 interactions in Julia, and why?",
    "answer": "JLD2 is recommended over JLD because it has superseded JLD and no longer relies on a system-installed HDF5 library, making it more portable."
  },
  {
    "question": "What specific issue occurs when installing Julia packages on the Narval cluster?",
    "answer": "On the Narval cluster, Julia sometimes crashes with a segmentation fault during the precompilation step when installing packages in `/home` directories, due to a bug in the filesystem software."
  },
  {
    "question": "What is the workaround for the package installation issue on the Narval cluster?",
    "answer": "Until the bug is resolved, users should use an alternate location, such as `/project`, for their Julia \"depot\" on Narval."
  },
  {
    "question": "Why is installing Julia packages in the home directory potentially problematic?",
    "answer": "Installing Julia packages in the home directory can create a large number of files (e.g., Gadfly.jl creates about 37,000 files), which can lead to exceeding the user's home directory quota."
  },
  {
    "question": "How can users change their Julia depot path to avoid home directory quota issues?",
    "answer": "Users can store their personal Julia depot in a different location, such as their project space, by setting the `JULIA_DEPOT_PATH` environment variable in their `~/.bashrc` file."
  },
  {
    "question": "Provide an example of how a user 'alice' in project 'def-bob' would change her Julia depot path.",
    "answer": "Alice would add `export JULIA_DEPOT_PATH=\"/project/def-bob/alice/julia:$JULIA_DEPOT_PATH\"` to her `~/.bashrc` file."
  },
  {
    "question": "What happens to the `~/.julia` directory if the `JULIA_DEPOT_PATH` environment variable is changed?",
    "answer": "The new directory will be used preferentially, but files in `~/.julia` will still be considered, and `~/.julia` will still be used for some files like command history."
  },
  {
    "question": "What is recommended to do with an existing `~/.julia` depot when changing the depot path to a new location?",
    "answer": "It is better to remove the existing `~/.julia` depot first using `rm -rf $HOME/.julia`."
  }
]