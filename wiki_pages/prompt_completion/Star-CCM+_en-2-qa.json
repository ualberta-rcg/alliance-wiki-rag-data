[
  {
    "question": "What is the default Slurm account specified in the `starccm_job.sh` scripts across different clusters?",
    "answer": "The default Slurm account specified is `def-group`."
  },
  {
    "question": "What is the default time limit set for STAR-CCM+ jobs in the provided Slurm scripts?",
    "answer": "The default time limit is `00-01:00`."
  },
  {
    "question": "How many nodes are generally requested in the STAR-CCM+ Slurm job scripts?",
    "answer": "Generally, `1` node is requested."
  },
  {
    "question": "How much memory is typically requested per node in the STAR-CCM+ Slurm job scripts?",
    "answer": "Typically, `0` (indicating all memory per node) is requested."
  },
  {
    "question": "What value is set for `ntasks-per-node` in the STAR-CCM+ Slurm job scripts?",
    "answer": "`ntasks-per-node` is set to `1`."
  },
  {
    "question": "What variable is used to specify the input simulation filename in the STAR-CCM+ Slurm scripts?",
    "answer": "`SIM_FILE` is used, typically set to `mysample.sim`."
  },
  {
    "question": "How is an input Java filename specified in the STAR-CCM+ Slurm scripts?",
    "answer": "The `JAVA_FILE` variable can be uncommented and set, for example, to `mymacros.java`."
  },
  {
    "question": "How is the Siemens Power on Demand (PoD) Key specified in the STAR-CCM+ Slurm scripts?",
    "answer": "It is specified using the `LM_PROJECT` environment variable, such as `LM_PROJECT='my22digitpodkey'`."
  },
  {
    "question": "What Python script is used to generate the `machinefile` for STAR-CCM+ jobs?",
    "answer": "`slurm_hl2hl.py --format STAR-CCM+` is used to generate the machinefile in `$SLURM_TMPDIR`."
  },
  {
    "question": "How is the total number of cores (`NCORE`) calculated in the STAR-CCM+ Slurm scripts?",
    "answer": "`NCORE` is calculated as `SLURM_NNODES * SLURM_CPUS_PER_TASK * SLURM_NTASKS_PER_NODE`."
  },
  {
    "question": "What is the `cpus-per-task` setting for STAR-CCM+ jobs on Fir/Rorqual/Nibi clusters?",
    "answer": "`cpus-per-task` is set to `192`."
  },
  {
    "question": "Which environment modules are loaded for STAR-CCM+ on Fir/Rorqual/Nibi clusters?",
    "answer": "`StdEnv/2023` and `starccm-mixed/20.04.007` modules are loaded."
  },
  {
    "question": "How is the license server port identified and its reachability verified within the Fir/Rorqual/Nibi Slurm script?",
    "answer": "The port is identified by `port=$(cat $CDLMD_LICENSE_FILE | grep -Eo '[0-9]+$')` and reachability is verified using `nmap $server -Pn -p $port`."
  },
  {
    "question": "What is the command line for running STAR-CCM+ with a Siemens PoD license on Fir/Rorqual/Nibi clusters?",
    "answer": "The command is `starccm+ -jvmargs -Xmx4G -jvmargs -Djava.io.tmpdir=$SLURM_TMPDIR -batch -power -podkey $LM_PROJECT -np $NCORE -nbuserdir $SLURM_TMPDIR -machinefile $SLURM_TMPDIR/machinefile $JAVA_FILE $SIM_FILE -mpi intel -fabric psm2`."
  },
  {
    "question": "What is the command line for running STAR-CCM+ with an institutional license on Fir/Rorqual/Nibi clusters?",
    "answer": "The command is `starccm+ -jvmargs -Xmx4G -jvmargs -Djava.io.tmpdir=$SLURM_TMPDIR -batch -np $NCORE -nbuserdir $SLURM_TMPDIR -machinefile $SLURM_TMPDIR/machinefile $JAVA_FILE $SIM_FILE -mpi intel -fabric psm2`."
  },
  {
    "question": "What is the `cpus-per-task` setting for STAR-CCM+ jobs on the Narval cluster?",
    "answer": "`cpus-per-task` is set to `64`."
  },
  {
    "question": "Which environment modules are loaded for STAR-CCM+ on the Narval cluster?",
    "answer": "`StdEnv/2023` and `starccm-mixed/20.04.007` modules are loaded."
  },
  {
    "question": "What MPI implementation is used for STAR-CCM+ jobs on the Narval cluster?",
    "answer": "`openmpi` is used."
  },
  {
    "question": "What is the command line for running STAR-CCM+ with a Siemens PoD license on the Narval cluster?",
    "answer": "The command is `starccm+ -jvmargs -Xmx4G -jvmargs -Djava.io.tmpdir=$SLURM_TMPDIR -batch -power -podkey $LM_PROJECT -np $NCORE -nbuserdir $SLURM_TMPDIR -machinefile $SLURM_TMPDIR/machinefile $JAVA_FILE $SIM_FILE -mpi openmpi`."
  },
  {
    "question": "What is the command line for running STAR-CCM+ with an institutional license on the Narval cluster?",
    "answer": "The command is `starccm+ -jvmargs -Xmx4G -jvmargs -Djava.io.tmpdir=$SLURM_TMPDIR -batch -np $NCORE -nbuserdir $SLURM_TMPDIR -machinefile $SLURM_TMPDIR/machinefile $JAVA_FILE $SIM_FILE -mpi openmpi`."
  },
  {
    "question": "What is the `cpus-per-task` setting for STAR-CCM+ jobs on the Trillium cluster?",
    "answer": "`cpus-per-task` is set to `192`."
  },
  {
    "question": "Which environment modules are loaded for STAR-CCM+ on the Trillium cluster?",
    "answer": "`CCEnv`, `StdEnv/2023`, and `starccm-mixed/20.04.007` modules are loaded."
  },
  {
    "question": "What are the specific license server variables defined in the Trillium Slurm script?",
    "answer": "`FLEXPORT=1999`, `VENDPORT=2099`, and `LICSERVER=flex.cd-adapco.com` are defined."
  },
  {
    "question": "How is the `CDLMD_LICENSE_FILE` environment variable set for STAR-CCM+ jobs on Trillium, when not using `~/.licenses/starccm.lic`?",
    "answer": "It is set as `export CDLMD_LICENSE_FILE=\"$FLEXPORT@127.0.0.1\"`."
  },
  {
    "question": "What command is used to establish an SSH tunnel for license server ports on Trillium?",
    "answer": "`ssh nia-gw -L $FLEXPORT:$LICSERVER:$FLEXPORT -L $VENDPORT:$LICSERVER:$VENDPORT -N -f` is used."
  },
  {
    "question": "What mechanism is implemented in the Trillium script to handle potential STAR-CCM+ license failures during startup?",
    "answer": "A `while` loop retries the STAR-CCM+ command up to 5 times if the exit status is not 0."
  },
  {
    "question": "What is the command line for running STAR-CCM+ with a Siemens PoD license on Trillium?",
    "answer": "The command is `starccm+ -jvmargs -Xmx4G -jvmargs -Djava.io.tmpdir=$SLURM_TMPDIR -batch -power -podkey $LM_PROJECT -np $NCORE -nbuserdir $SLURM_TMPDIR -machinefile $SLURM_TMPDIR/machinefile $JAVA_FILE $SIM_FILE`."
  },
  {
    "question": "What is the command line for running STAR-CCM+ with an institutional license on Trillium?",
    "answer": "The command is `starccm+ -jvmargs -Xmx4G -jvmargs -Djava.io.tmpdir=$SLURM_TMPDIR -batch -np $NCORE -nbuserdir $SLURM_TMPDIR -machinefile $SLURM_TMPDIR/machinefile $JAVA_FILE $SIM_FILE`."
  }
]