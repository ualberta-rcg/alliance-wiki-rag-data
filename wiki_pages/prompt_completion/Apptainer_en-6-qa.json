[
  {
    "question": "How do you build an Apptainer SIF file image from a Docker image?",
    "answer": "To build an Apptainer SIF file image from a Docker image like busybox, use the `apptainer build` command: `apptainer build bb.sif docker://busybox`."
  },
  {
    "question": "How do you build a sandbox directory image with Apptainer?",
    "answer": "To build a 'sandbox' directory instead of an SIF file, use the `--sandbox` or `-s` option followed by the directory name. For example, `apptainer build --sandbox bb.dir docker://busybox`."
  },
  {
    "question": "What are the main differences between an Apptainer SIF file image and a sandbox directory image?",
    "answer": "A SIF file is contained in a single file, compressed, and read-only with higher disk access speeds. A sandbox image is placed in a directory, uncompressed, can be read-write, may contain thousands of files, and consumes significant disk space and file count quotas."
  },
  {
    "question": "Why is it recommended to use a SIF file over a sandbox directory if read-write access to the underlying image is not normally required?",
    "answer": "Using a SIF file is recommended because it offers higher disk access speeds to content, remains read-only for consistency, and consumes only one file count quota instead of thousands of files that a sandbox directory might use."
  },
  {
    "question": "What package manager is recommended for Conda use within Apptainer containers in the provided tutorial?",
    "answer": "The tutorial recommends using the `micromamba` package manager instead of Conda."
  },
  {
    "question": "What are the three steps to create an Apptainer image with a Conda environment?",
    "answer": "The three steps are: 1) Create an `environment.yml` file describing the Conda environment. 2) Create an `image.def` (Apptainer image definition file). 3) Build the Apptainer image using the definition file with `module load apptainer` and `apptainer build image.sif image.def`."
  },
  {
    "question": "What is the purpose of the `%files` section in an Apptainer `image.def` file when creating a Conda environment?",
    "answer": "The `%files` section is used to copy files, such as the `environment.yml` file, from the host system into the container during the build process."
  },
  {
    "question": "How do you test if an Apptainer image containing a Conda environment with `multiqc` installed is working correctly?",
    "answer": "You can test it by running `apptainer run image.sif multiqc --help` which should output the help message for `MultiQC` if it's installed correctly."
  },
  {
    "question": "What are the requirements for building an Apptainer container from a Dockerfile on a local system?",
    "answer": "This process requires Docker and Apptainer to be installed on a system where you have appropriate privileges, such as `sudo` or root access, or membership in the `docker` group, and potentially `sudo`, root, or `--fakeroot` access for Apptainer."
  },
  {
    "question": "What is the command sequence to create an Apptainer SIF file from a Dockerfile?",
    "answer": "The command sequence is: `docker build -f Dockerfile -t your-tag-name`, then `docker save your-tag-name -o your-tarball-name.tar`, followed by `docker image rm your-tag-name`, then `apptainer build --fakeroot your-sif-name.sif docker-archive://your-tarball-name.tar`, and finally `rm your-tarball-name.tar`."
  },
  {
    "question": "How can you list the files currently stored in Apptainer's cache directory?",
    "answer": "To see where Apptainer's cached files are, you can run the command `apptainer cache list`."
  },
  {
    "question": "How do you clean or remove files from Apptainer's cache directory?",
    "answer": "To remove files from Apptainer's cache directory, run the command `apptainer cache clean`."
  }
]