[
  {
    "question": "What is Terraform?",
    "answer": "Terraform is a tool used for defining and provisioning data center infrastructure, including virtual machines."
  },
  {
    "question": "Why is Terraform becoming popular, particularly within the Alliance Federation?",
    "answer": "Terraform's infrastructure-as-code model allows for maintaining OpenStack resources as a collection of definitions that can be easily updated with text editors, shared among group members, and stored in version control."
  },
  {
    "question": "What is the primary goal of this Terraform tutorial?",
    "answer": "This tutorial introduces Terraform, demonstrates its use on OpenStack clouds, guides on setting up a local workspace, and shows how to create a VM with a floating IP and an attached volume."
  },
  {
    "question": "What are the essential requirements before beginning with Terraform?",
    "answer": "Before starting with Terraform, you need access to an OpenStack tenant with available resources, Terraform itself, and a few configurations set up on your workstation or laptop."
  },
  {
    "question": "What prior OpenStack experience is recommended for this tutorial?",
    "answer": "If you've never used OpenStack, you should first familiarize yourself by creating a VM, attaching a volume, associating a floating IP, and ensuring you can log in to the VM. The tutorial also assumes you have an SSH key pair created and its public key stored with OpenStack."
  },
  {
    "question": "Where can users find the Terraform client for download?",
    "answer": "The latest Terraform client can be downloaded from the Terraform downloads page at https://www.terraform.io/downloads.html."
  },
  {
    "question": "Which version of Terraform is this guide based on?",
    "answer": "This guide is based on Terraform 0.12."
  },
  {
    "question": "What are the two main ways to provide OpenStack credentials in a command-line environment for Terraform?",
    "answer": "OpenStack credentials can be provided either via environment variables or in a configuration file."
  },
  {
    "question": "How can one download OpenStack credentials from the web interface?",
    "answer": "After logging into the OpenStack web interface, click on 'API Access' in the navigation bar, then use the 'Download OpenStack RC File' drop-down menu to download either a `clouds.yaml` file or an RC file."
  },
  {
    "question": "How do you activate an OpenStack RC file in a shell session?",
    "answer": "An OpenStack RC file must be sourced in the context of the current shell session, for example, by running `source openrc.sh`. It will then prompt for your OpenStack password."
  },
  {
    "question": "How can the `clouds.yaml` configuration file be used with OpenStack CLI tools and Terraform?",
    "answer": "Place the `clouds.yaml` file in `$HOME/.config/openstack/clouds.yaml`. To use it, set the `OS_CLOUD` environment variable to the name of the cloud defined in the file, for example, `export OS_CLOUD=arbutus`."
  },
  {
    "question": "Why is it beneficial to have an OpenStack CLI terminal window open when working with Terraform?",
    "answer": "An OpenStack CLI terminal window provides a handy reference for looking up flavour and image IDs, and it's useful for verifying actions performed by Terraform."
  },
  {
    "question": "Can OpenStack Horizon (web interface) be used to directly look up flavour IDs?",
    "answer": "No, Horizon can be used for looking up images and verifying general effects, but it is not possible to directly look up flavour IDs."
  },
  {
    "question": "How is the OpenStack CLI typically installed?",
    "answer": "The OpenStack CLI (OSC) is a Python client that can be best installed through Python Pip."
  },
  {
    "question": "What is the initial step for setting up a Terraform workspace?",
    "answer": "The initial step is to create a directory for your Terraform configuration and state files, which will serve as the home base for the guide."
  },
  {
    "question": "What is the function of defining a 'provider' in Terraform?",
    "answer": "Defining a provider tells Terraform which cloud (e.g., OpenStack) to use and how to interact with it. Upon initialization, the relevant provider plugin is installed, and credentials are used for subsequent operations."
  },
  {
    "question": "In what ways can OpenStack connection and credential information be provided to Terraform?",
    "answer": "OpenStack connection and credential information can be supplied to Terraform in the specification itself, through environment variables, or by using a combination of both."
  }
]