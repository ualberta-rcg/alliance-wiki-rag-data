[
  {
    "question": "What is Terraform?",
    "answer": "Terraform is a tool for defining and provisioning data centre infrastructure, including virtual machines."
  },
  {
    "question": "What model does Terraform use for infrastructure management?",
    "answer": "Terraform uses an infrastructure-as-code model."
  },
  {
    "question": "What benefits does Terraform's infrastructure-as-code model offer for OpenStack resources?",
    "answer": "Terraform's infrastructure-as-code model allows one to maintain OpenStack resources as a collection of definitions which can be easily updated using text editors, shared among members of a group, and stored in version control."
  },
  {
    "question": "What are the main objectives of this tutorial page?",
    "answer": "This tutorial introduces Terraform, demonstrates its use on OpenStack clouds, sets up a local workspace, and guides through creating a VM with a floating IP and an attached volume."
  },
  {
    "question": "What are the prerequisites for starting with Terraform according to this guide?",
    "answer": "Before starting with Terraform, you need access to an OpenStack tenant with available resources, Terraform itself, and a few things configured on your workstation or laptop."
  },
  {
    "question": "What should users do to familiarize themselves with OpenStack if they are new to it?",
    "answer": "If you've never used OpenStack before, you should familiarize yourself with it by creating a VM, attaching a volume, associating a floating IP, and ensuring you can log in to the VM afterwards."
  },
  {
    "question": "What assumption does this tutorial make about SSH keys?",
    "answer": "This tutorial assumes you already have an SSH key pair created and the public key stored with OpenStack."
  },
  {
    "question": "Where can the latest Terraform client be downloaded?",
    "answer": "The latest Terraform client can be downloaded from the Terraform downloads page (https://www.terraform.io/downloads.html)."
  },
  {
    "question": "Which version of Terraform is this guide based on?",
    "answer": "This guide is based on Terraform 0.12."
  },
  {
    "question": "What are the two ways to provide OpenStack credentials in a command-line environment?",
    "answer": "OpenStack credentials can be provided via environment variables or in a configuration file."
  },
  {
    "question": "How can you download OpenStack RC files or `clouds.yaml` from the OpenStack web interface?",
    "answer": "Once logged in to the OpenStack web interface, click on 'API Access' in the navigation bar, and from the 'Download OpenStack RC File' drop-down menu, you can download a `clouds.yaml` file or an RC file."
  },
  {
    "question": "How do you use an OpenStack RC file to configure your shell session?",
    "answer": "An OpenStack RC file is a series of shell commands that must be sourced in the context of your current shell session using `$ source openrc.sh`. It will then prompt you for your OpenStack password and store necessary information in `OS_` prefixed environment variables."
  },
  {
    "question": "How can `clouds.yaml` be used to configure OpenStack credentials?",
    "answer": "To use `clouds.yaml`, create it in `$HOME/.config/openstack/clouds.yaml` (or move a downloaded one there), optionally rename the cloud, and then create an environment variable `$OS_CLOUD` with the name of the cloud you want to use (e.g., `export OS_CLOUD=arbutus`)."
  },
  {
    "question": "Why is it recommended to have an OpenStack CLI terminal window open when working with Terraform?",
    "answer": "It is helpful to have an OpenStack CLI terminal window open because it provides a handy reference for specifications like flavour and image IDs, and is useful for verifying the actions performed by Terraform."
  },
  {
    "question": "How is the OpenStack CLI typically installed?",
    "answer": "The OpenStack CLI (OSC) is a Python client which can be best installed through Python Pip."
  },
  {
    "question": "What is the purpose of a Terraform workspace?",
    "answer": "A Terraform workspace is a directory created for your Terraform configuration and state files, serving as your home base for managing infrastructure."
  },
  {
    "question": "What is the initial step to tell Terraform to use OpenStack?",
    "answer": "The initial step is to describe the 'provider', which tells Terraform to use OpenStack and specifies how to connect to it."
  },
  {
    "question": "What happens when the OpenStack provider is initialized in Terraform?",
    "answer": "On initialization, the most recent version of the OpenStack provider plugin will be installed in the working directory, and the included credentials will be used for subsequent Terraform operations to connect to the specified cloud."
  }
]