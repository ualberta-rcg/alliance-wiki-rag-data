[
  {
    "question": "What is TensorFlow?",
    "answer": "TensorFlow is an open-source software library for Machine Intelligence."
  },
  {
    "question": "What should I do if I'm porting a TensorFlow program to an Alliance cluster?",
    "answer": "You should follow the tutorial on machine learning."
  },
  {
    "question": "Where are custom Python wheels for TensorFlow stored?",
    "answer": "Custom Python wheels are stored in `/cvmfs/soft.computecanada.ca/custom/python/wheelhouse/`."
  },
  {
    "question": "How is TensorFlow typically installed on an Alliance cluster?",
    "answer": "TensorFlow is installed in your /home directory using Alliance's prebuilt Python wheels, using the `pip` command into a Python virtual environment."
  },
  {
    "question": "What are the steps to install TensorFlow 2.x in a virtual environment?",
    "answer": "First, load the `python/3` module. Then, create a new Python virtual environment using `virtualenv --no-download tensorflow`. Activate it with `source tensorflow/bin/activate`, and finally, install TensorFlow using `pip install --no-index tensorflow`."
  },
  {
    "question": "What module is typically loaded for TensorFlow 2.x installation?",
    "answer": "The `python/3` module is loaded. Other modules like CUDA may also be required in some cases."
  },
  {
    "question": "How do you create a new Python virtual environment for TensorFlow?",
    "answer": "Use the command `virtualenv --no-download tensorflow`."
  },
  {
    "question": "How do you activate a Python virtual environment named 'tensorflow'?",
    "answer": "Use the command `source tensorflow/bin/activate`."
  },
  {
    "question": "What are the steps to install TensorFlow 1.x (TF 1.x) in a virtual environment?",
    "answer": "Load modules `StdEnv/2018` and `python/3`. Create a new Python virtual environment with `virtualenv --no-download tensorflow`. Activate it with `source tensorflow/bin/activate`. Then, install either `tensorflow_cpu==1.15.0` or `tensorflow_gpu==1.15.0` using pip, depending on your GPU needs."
  },
  {
    "question": "What specific modules are required for installing TensorFlow 1.x?",
    "answer": "TensorFlow 1.x requires `StdEnv/2018` and `python/3` modules."
  },
  {
    "question": "Is TensorFlow 1.x available on the Narval cluster?",
    "answer": "No, TensorFlow 1.x is not available on Narval because `StdEnv/2018` is not available on that cluster."
  },
  {
    "question": "How do you install the CPU-only version of TensorFlow 1.x?",
    "answer": "After activating your virtual environment, use the command `pip install --no-index tensorflow_cpu==1.15.0`."
  },
  {
    "question": "How do you install the GPU version of TensorFlow 1.x?",
    "answer": "After activating your virtual environment, use the command `pip install --no-index tensorflow_gpu==1.15.0`."
  },
  {
    "question": "What TensorFlow package should be avoided when installing TF 1.x and why?",
    "answer": "Do not install the `tensorflow` package (without `_cpu` or `_gpu` suffixes) as it has compatibility issues with other libraries."
  },
  {
    "question": "What are the initial requirements for using TensorFlow in R?",
    "answer": "First, you need to create a Python virtual environment and install TensorFlow in it by following the general installation instructions."
  },
  {
    "question": "What modules must be loaded to use TensorFlow with R?",
    "answer": "You need to load the `gcc` and `r` modules."
  },
  {
    "question": "How do you launch R after preparing the TensorFlow virtual environment?",
    "answer": "After activating your Python virtual environment (`source tensorflow/bin/activate`), launch R by typing `R`."
  },
  {
    "question": "How do you install the necessary R packages for TensorFlow within R?",
    "answer": "In R, run `install.packages('devtools', repos='https://cloud.r-project.org')` followed by `devtools::install_github('rstudio/tensorflow')`."
  },
  {
    "question": "Should `install_tensorflow()` be called from within R after manual installation?",
    "answer": "No, you should not call `install_tensorflow()` in R, as TensorFlow has already been installed in your virtual environment with `pip`."
  },
  {
    "question": "How do you ensure R uses the TensorFlow installed in your virtual environment?",
    "answer": "After activating the environment, execute `library(tensorflow)` and `use_virtualenv(Sys.getenv('VIRTUAL_ENV'))` in R."
  },
  {
    "question": "How do you submit a TensorFlow job that uses a GPU?",
    "answer": "You can submit a TensorFlow job using `sbatch tensorflow-test.sh` after completing the setup."
  },
  {
    "question": "What are the typical SBATCH directives in a GPU TensorFlow job script (`tensorflow-test.sh`)?",
    "answer": "Common SBATCH directives include `--gres=gpu:1`, `--cpus-per-task=6`, `--mem=32000M`, `--time=0-03:00`, and `--output=%N-%j.out`."
  },
  {
    "question": "What modules are loaded in the `tensorflow-test.sh` script for a GPU job?",
    "answer": "The `cuda` and `cudnn` modules are loaded."
  },
  {
    "question": "What is an example of a simple Python script for a TensorFlow 2.x GPU job?",
    "answer": "A simple script `tensorflow-test.py` for TF 2.x would import `tensorflow as tf`, define `tf.constant` nodes like `node1` and `node2`, and then print them and their sum."
  },
  {
    "question": "What is an example of a simple Python script for a TensorFlow 1.x GPU job?",
    "answer": "A simple script `tensorflow-test.py` for TF 1.x would import `tensorflow as tf`, define `tf.constant` nodes, print them, create a `tf.Session()` named `sess`, and then print the sum using `sess.run(node1 + node2)`."
  },
  {
    "question": "What kind of output is expected from a successful TensorFlow 2.x GPU job?",
    "answer": "The output file (`node_id-job_id.out`) will show TensorFlow log messages regarding GPU device creation (e.g., 'Creating TensorFlow device (/gpu:0) -> (device: 0, name: Tesla P100-PCIE-12GB)') followed by `tf.Tensor` objects and their sum (e.g., `tf.Tensor(7.0, shape=(), dtype=float32)`)."
  },
  {
    "question": "What kind of output is expected from a successful TensorFlow 1.x GPU job?",
    "answer": "The output file (`node_id-job_id.out`) will show TensorFlow log messages regarding GPU device creation, followed by tensor objects (e.g., `Tensor(\"Const:0\", shape=(), dtype=float32)`) and then the numerical result of their sum (e.g., `7.0`)."
  },
  {
    "question": "Can TensorFlow run on all types of GPU nodes?",
    "answer": "Yes, TensorFlow can run on all GPU node types."
  },
  {
    "question": "What is TensorBoard?",
    "answer": "TensorBoard is a suite of visualization tools included with TensorFlow."
  },
  {
    "question": "How does TensorBoard function?",
    "answer": "TensorBoard operates by reading TensorFlow events and model files."
  },
  {
    "question": "Where is the recommended place to execute TensorBoard, and why?",
    "answer": "Users are strongly encouraged to execute TensorBoard in the same job as the TensorFlow process, rather than on a login node, because it requires significant processing power."
  },
  {
    "question": "How do you launch TensorBoard in the background within a job script?",
    "answer": "You launch TensorBoard before your Python script, appending an ampersand (`&`) to the call, for example: `tensorboard --logdir=/tmp/your_log_dir --host 0.0.0.0 --load_fast false & python train.py`."
  },
  {
    "question": "How do you find the hostname of the compute node running a TensorBoard server?",
    "answer": "Use the `sq` command to list your jobs, then find your job and note the value in the 'NODELIST' column."
  },
  {
    "question": "What command is used on a local computer to connect to a TensorBoard server running on a compute node?",
    "answer": "The command is `ssh -N -f -L localhost:6006:computenode:6006 userid@cluster.computecanada.ca`, with placeholders for `computenode`, `userid`, and `cluster`."
  },
  {
    "question": "What should you do if TensorBoard uses a different port than 6006?",
    "answer": "If port 6006 is already in use, TensorBoard will use another port (e.g., 6007, 6008), and you should adjust the `ssh -L` command accordingly."
  },
  {
    "question": "How do you access the TensorBoard interface in a web browser once the SSH tunnel is established?",
    "answer": "Navigate to `http://localhost:6006` in your web browser."
  }
]