[
  {
    "question": "What are the prerequisites for getting started with MonarQ?",
    "answer": "You need to have access to MonarQ and your login credentials (username, API token)."
  },
  {
    "question": "Who should be contacted for questions regarding MonarQ access and login?",
    "answer": "For any questions, you should write to quantique@calculquebec.ca."
  },
  {
    "question": "What is the first step to using MonarQ?",
    "answer": "The first step is to connect to Narval."
  },
  {
    "question": "Where is MonarQ accessible from?",
    "answer": "MonarQ is only accessible from Narval, a Calcul Qu\u00e9bec cluster."
  },
  {
    "question": "What is the connection node for Narval?",
    "answer": "The connection node for Narval is narval.alliancecan.ca."
  },
  {
    "question": "Where can I find help for connecting to Narval?",
    "answer": "For help concerning the connection to Narval, consult the [[SSH/fr|SSH]] page."
  },
  {
    "question": "What is the second step in getting started with MonarQ after connecting to Narval?",
    "answer": "The second step is to create the environment by setting up a Python virtual environment (3.11 or later)."
  },
  {
    "question": "Why do I need to create a Python virtual environment?",
    "answer": "You need to create a Python virtual environment to use PennyLane and the PennyLane-CalculQu\u00e9bec plugin."
  },
  {
    "question": "Are PennyLane and PennyLane-CalculQu\u00e9bec already installed on Narval?",
    "answer": "Yes, PennyLane and PennyLane-CalculQu\u00e9bec are already installed on Narval, so you only need to import the software libraries you wish to use."
  },
  {
    "question": "What commands are used to set up the Python virtual environment for MonarQ?",
    "answer": "The commands are: `module load python/3.11`, `virtualenv --no-download --clear ~/ENV && source ~/ENV/bin/activate`, `pip install --no-index --upgrade pip`, `pip install --no-index --upgrade pennylane-calculquebec`, and `python -c \"import pennylane; import pennylane_calculquebec\"`."
  },
  {
    "question": "What is the third step for using MonarQ?",
    "answer": "The third step is to configure your credentials on MonarQ and define MonarQ as a device."
  },
  {
    "question": "How do you configure your credentials and define MonarQ as a device in Python?",
    "answer": "You open a Python file, import `pennylane` and `MonarqClient`, then create a client with your host, username, access token, and project, and finally create a PennyLane device with your client, specifying the number of qubits (wires) and samples (shots)."
  },
  {
    "question": "What is the host for MonarQ when creating a client?",
    "answer": "The host for MonarQ is monarq.calculquebec.ca."
  },
  {
    "question": "Where can the access token for MonarQ be found?",
    "answer": "Your access token is available from the Thunderhead portal."
  },
  {
    "question": "What is the fourth step in the MonarQ usage process?",
    "answer": "The fourth step is to create your quantum circuit within the same Python file."
  },
  {
    "question": "What is the final step to execute a circuit on MonarQ?",
    "answer": "The final step is to execute your circuit from the scheduler using the `sbatch` command."
  },
  {
    "question": "How do you submit a job to the scheduler?",
    "answer": "You use the `sbatch` command, for example: `sbatch simple_job.sh`."
  },
  {
    "question": "What are the typical contents of a Slurm script for running a MonarQ circuit?",
    "answer": "A Slurm script typically includes `#SBATCH --time`, `#SBATCH --account`, `#SBATCH --cpus-per-task`, `#SBATCH --mem-per-cpu` directives, followed by `python my_circuit.py` to execute the Python script."
  },
  {
    "question": "Where are the results of a MonarQ circuit execution written?",
    "answer": "The result of the circuit is written into a file whose name starts with 'slurm-', followed by the task ID and the suffix '.out', for example `slurm-123456.out`."
  },
  {
    "question": "What format does the circuit result take in the output file?",
    "answer": "The circuit result is found in the output file as a dictionary, for example: `{'000': 496, '001': 0, '010': 0, '011': 0, '100': 0, '101': 0, '110': 0, '111': 504}`."
  },
  {
    "question": "Where can users find more information on submitting tasks on Narval?",
    "answer": "For more information on how to submit tasks on Narval, see [[Running_jobs/fr|Ex\u00e9cuter des t\u00e2ches]]."
  }
]