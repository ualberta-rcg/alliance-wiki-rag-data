[
  {
    "question": "How can you explicitly specify that loop iterations are independent using an OpenACC directive?",
    "answer": "You can explicitly specify that loop iterations are independent by using `#pragma acc loop independent` within an OpenACC `kernels` block."
  },
  {
    "question": "What is the recommended method to fix false aliasing in C/C++ OpenACC applications, specifically for pointers?",
    "answer": "The recommended method is to declare the pointers as restricted using the `__restrict` keyword (e.g., `double *__restrict Acoefs=A.coefs;`)."
  },
  {
    "question": "What compiler flags are used with `nvc++` to enable OpenACC, compile for an accelerator with managed memory, and receive accelerator-specific feedback?",
    "answer": "The flags are `-fast -Minfo=accel -acc -gpu=managed`."
  },
  {
    "question": "What was the initial performance outcome when porting the matrix-vector product to OpenACC with `kernels` and `__restrict`?",
    "answer": "The OpenACC version resulted in a slowdown by a factor of almost 4, with a total time of 115.068931s compared to the original 29.894881s."
  },
  {
    "question": "Did the OpenACC ported code produce correct results despite the performance slowdown?",
    "answer": "Yes, the results produced by the OpenACC version were correct."
  },
  {
    "question": "Which graphical tool is available for profiling OpenACC and CUDA C/C++ applications?",
    "answer": "The NVIDIA Visual Profiler (NVVP) is a graphical tool available for profiling OpenACC and CUDA C/C++ applications."
  },
  {
    "question": "What is a prerequisite for the NVIDIA Visual Profiler to show any results?",
    "answer": "The executable being profiled must be actively using the GPU; otherwise, the profiler will yield no results."
  },
  {
    "question": "How do you launch the NVIDIA Visual Profiler from the command line after loading the necessary modules?",
    "answer": "After loading `cuda/11.7` and `java/1.8` modules, you launch it using the command `nvvp &`."
  },
  {
    "question": "What common performance bottleneck did the NVIDIA Visual Profiler identify in the example OpenACC application?",
    "answer": "The profiler indicated that almost all of the runtime was spent transferring data between the host and the device."
  },
  {
    "question": "What is the OpenACC `parallel loop` directive?",
    "answer": "The `parallel loop` directive is a prescriptive OpenACC directive that instructs the compiler to perform a specified loop in parallel."
  },
  {
    "question": "What is an implicit characteristic of the `independent` clause when using a `parallel loop` directive?",
    "answer": "The `independent` clause is implicit within a `parallel loop` region because it is a prescriptive directive, forcing the compiler to parallelize."
  },
  {
    "question": "Why do `private` and `reduction` clauses often need to be explicitly used with `parallel loop` directives, but not with `kernels` directives?",
    "answer": "These clauses are explicitly required with `parallel loop` because it is prescriptive and assumes programmer responsibility, whereas the `kernels` directive is descriptive and handles such data management automatically."
  },
  {
    "question": "What is the purpose of the `private` clause in a `parallel loop` directive?",
    "answer": "The `private` clause creates a separate copy of a variable for each loop iteration, ensuring its value is independent across iterations."
  },
  {
    "question": "What is the function of the `reduction` clause in a `parallel loop` directive?",
    "answer": "The `reduction` clause causes the values of a variable from each iteration to be combined (reduced) into a single value, supporting operations like addition, multiplication, maximum, or minimum."
  },
  {
    "question": "Can the `parallel loop` and `kernels` directives achieve similar performance levels?",
    "answer": "Yes, both approaches are equally valid and can perform equally well."
  },
  {
    "question": "What are the programmer's responsibilities when using the `parallel loop` directive?",
    "answer": "When using `parallel loop`, it is the programmer's responsibility to ensure that the parallelization is safe."
  }
]