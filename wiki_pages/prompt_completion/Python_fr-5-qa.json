[
  {
    "question": "How can I list a specific version of a package using `avail_wheels`?",
    "answer": "You can use `avail_wheels numpy==1.23` or `avail_wheels numpy --version 1.23` to list a particular version."
  },
  {
    "question": "What operators can be used with `avail_wheels` for version filtering?",
    "answer": "You can use operators like `==`, `<`, `>`, `~=`, `<=`, `>=`, and `!=` for version filtering."
  },
  {
    "question": "How do I list versions of a package older than a specific version?",
    "answer": "To list previous versions, use a command like `avail_wheels 'numpy<1.23'`."
  },
  {
    "question": "How can I list all available versions of a package using `avail_wheels`?",
    "answer": "Use the `--all-version` option, for example: `avail_wheels \"*cdf*\" --all-version`."
  },
  {
    "question": "How do I list wheels available for a particular Python version?",
    "answer": "You can specify the Python version using the `--python` flag, for example: `avail_wheels 'numpy<1.23' --python 3.9`."
  },
  {
    "question": "What does `cp39` signify in the `python` column when using `avail_wheels`?",
    "answer": "`cp39` in the `python` column indicates that the wheel is available for `cpython 3.9`."
  },
  {
    "question": "How can I check if the available wheels include packages listed in a `requirements.txt` file?",
    "answer": "Run `avail_wheels -r requirements.txt` to see if the packages specified in your requirements file are available as wheels."
  },
  {
    "question": "How do I list packages from a `requirements.txt` file that are *not* available as wheels?",
    "answer": "Use the command `avail_wheels -r requirements.txt --not-available`."
  },
  {
    "question": "What is the procedure for pre-downloading a Python package like `tensorboardX` on a connection node?",
    "answer": "First, run `pip download --no-deps tensorboardX` to download the package file (e.g., `tensorboardX-1.9-py2.py3-none-any.whl`) to your working directory."
  },
  {
    "question": "How do I install a Python package that I have pre-downloaded?",
    "answer": "To install a pre-downloaded package, use the file path in the `pip install` command, for example: `pip install tensorboardX-1.9-py2.py3-none-any.whl`."
  },
  {
    "question": "What should I do if a downloaded wheel file ends with `linux_x86_64` or `manylinux*_x86_64`?",
    "answer": "If a downloaded wheel file ends with `linux_x86_64` or `manylinux*_x86_64`, it might not work correctly. You should contact technical support to have them compile and make the wheel available on the supercomputers."
  }
]