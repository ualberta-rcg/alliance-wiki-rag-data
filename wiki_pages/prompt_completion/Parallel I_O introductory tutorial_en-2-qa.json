[
  {
    "question": "How do parallel filesystems improve performance on national systems?",
    "answer": "Parallel filesystems improve performance by striping files across multiple drives, meaning a file does not reside on a single hard drive but multiple drives. This allows one drive to perform a read operation while another sends data back to the program."
  },
  {
    "question": "How do parallel file systems manage concurrent access to the same file?",
    "answer": "Parallel file systems use locks to manage concurrent file access. Files are broken into 'lock' units and scattered across multiple hard drives, and client nodes obtain locks on these units before performing I/O."
  },
  {
    "question": "What kind of data storage are parallel filesystems optimized for?",
    "answer": "Parallel filesystems are optimized for storing large shared files that can be efficiently accessed by many computing nodes."
  },
  {
    "question": "What type of file storage leads to poor performance on parallel filesystems?",
    "answer": "Parallel filesystems show very poor performance when storing many small size files, especially with many small reads/writes (high IOPs)."
  },
  {
    "question": "Why is it recommended not to generate millions of small files on parallel filesystems?",
    "answer": "Generating millions of small files leads to poor performance on parallel filesystems due to high I/O operations per second (IOPs) for small reads/writes."
  },
  {
    "question": "What critical factors affect the performance of a parallel filesystem?",
    "answer": "Critical factors affecting performance include how data is read/written, the file format used, the number of files in a directory, and how often commands like `ls` are executed."
  },
  {
    "question": "How can heavy I/O activities on a parallel filesystem impact other users?",
    "answer": "Heavy I/O activities can make the system slower for everyone, potentially hurting process communications (like MPI) and even preventing basic directory commands like `ls`."
  },
  {
    "question": "What are the inherent limitations of file systems?",
    "answer": "File systems are limited in terms of bandwidth, IOPs (Input/Output operations per second), the maximum number of files, and available storage space."
  },
  {
    "question": "What is the first recommended best practice for I/O?",
    "answer": "The first recommended best practice for I/O is to make a plan for your data needs, considering how much data will be generated, how much needs to be saved, and where it will be stored, while taking into account file system quotas and expiry policies."
  },
  {
    "question": "Which filesystem commands should users minimize, especially in large directories?",
    "answer": "Users should minimize the use of filesystem commands like `ls` and `du`, particularly in large directories."
  },
  {
    "question": "How can users regularly check their disk usage?",
    "answer": "Users can regularly check their disk usage with the `quota` command."
  },
  {
    "question": "What are warning signs that indicate potential I/O issues or a need for better data management?",
    "answer": "Warning signs include having more than 100,000 files in your space or an average data file size less than 100 MB for large output."
  },
  {
    "question": "What 'housekeeping' practices are recommended for managing files and quotas?",
    "answer": "Recommended 'housekeeping' practices include regularly using `gzip` and `tar` to compress and group multiple files, and deleting unnecessary files to maintain a reasonable number of files and stay within quota limits."
  },
  {
    "question": "What does ASCII stand for, and what kind of format is it?",
    "answer": "ASCII stands for 'American Standard Code for Information Interchange' and it is a human-readable text file format."
  },
  {
    "question": "What are the advantages (pros) of using ASCII data format?",
    "answer": "The pros of using ASCII data format are that it is human-readable and portable (architecture independent)."
  },
  {
    "question": "What are the disadvantages (cons) of using ASCII data format?",
    "answer": "The cons of using ASCII data format include inefficient storage (e.g., 13 bytes per single precision float, 22 bytes per double precision, plus delimiters) and it is expensive for read/write operations."
  },
  {
    "question": "How can ASCII format implementation be identified in C or FORTRAN code?",
    "answer": "In C code, `fprintf()` indicates ASCII implementation, while in FORTRAN code, `open` command with `form='formatted'` or `write(6,*)` suggests ASCII format."
  }
]