[
  {
    "question": "What is a module in the context of servers?",
    "answer": "A module is a configuration file containing instructions to modify your software environment, making an application or library available in the user's session."
  },
  {
    "question": "What is the main benefit of modular architecture for software?",
    "answer": "This modular architecture allows multiple versions of the same application to be installed without conflict."
  },
  {
    "question": "Which tool manages modules on new servers?",
    "answer": "For new servers, modules are managed by the Lmod tool, developed at TACC."
  },
  {
    "question": "What older module management tool does Lmod replace?",
    "answer": "Lmod replaces 'Environment Modules', which is used on most older servers."
  },
  {
    "question": "What information does a modulefile typically contain?",
    "answer": "A modulefile typically contains instructions that modify or initialize environment variables like PATH and LD_LIBRARY_PATH to use different installed software."
  },
  {
    "question": "Does loading a module execute the software it refers to?",
    "answer": "No, simply loading a module does not execute the software in question."
  },
  {
    "question": "How can you view details about a specific module?",
    "answer": "You can see details for the module by typing the command 'module show <nom de module>'."
  },
  {
    "question": "What is the general syntax for the 'module' command?",
    "answer": "The normal syntax is 'module commande [autres options]'."
  },
  {
    "question": "How do you get a list of available subcommands for 'module'?",
    "answer": "To know the list of available subcommands, use 'module help'."
  },
  {
    "question": "What does the 'module spider' subcommand do?",
    "answer": "The 'spider' subcommand displays all modules found in the current standard software environment and traverses the complete hierarchy to show all modules."
  },
  {
    "question": "How can you list all available versions of a specific application using 'module spider'?",
    "answer": "You can list all available versions of an application by specifying its name, for example, with 'module spider openmpi'."
  },
  {
    "question": "How do you display module options for a specific application version using 'module spider'?",
    "answer": "If you specify the application name with its version number, like 'module spider openmpi/4.0.3', it will display the list of module options to load for that version."
  },
  {
    "question": "What is the purpose of the 'module avail' subcommand?",
    "answer": "The 'module avail' subcommand is used to list the modules that you can load."
  },
  {
    "question": "How can you list available modules for a particular library or tool?",
    "answer": "You can get a list of modules available for a particular library or tool with 'module avail openmpi'."
  },
  {
    "question": "Why might 'module avail' not show all modules?",
    "answer": "'module avail' may not list certain modules that are incompatible with the modules you have already loaded."
  },
  {
    "question": "Which command should be used to see modules that are incompatible with currently loaded modules?",
    "answer": "To see the list of modules other than those loaded and available to you, use the 'spider' subcommand."
  },
  {
    "question": "What does the 'module list' subcommand do?",
    "answer": "The 'list' subcommand displays the modules currently loaded in your environment."
  },
  {
    "question": "How do you load a specific module?",
    "answer": "The 'load' subcommand allows you to load a given module, for example, 'module load gcc/9.3' to load GCC version 9.3."
  },
  {
    "question": "Can multiple modules be loaded with a single command?",
    "answer": "Yes, you can load more than one module with the same command, for example, 'module load gcc/9.3 openmpi/4.0'."
  },
  {
    "question": "What happens if you load a module that is incompatible with an already loaded module?",
    "answer": "If you load a module that is incompatible with one already loaded, Lmod will indicate that it has replaced the old module with the new one."
  },
  {
    "question": "How do you remove a module from your environment?",
    "answer": "The 'unload' subcommand removes a module from your environment, for example, 'module unload gcc/9.3'."
  },
  {
    "question": "What happens to dependent modules if a loaded module is unloaded?",
    "answer": "If certain modules depended on the unloaded module, Lmod will indicate that they have been deactivated."
  },
  {
    "question": "What does the 'module purge' subcommand do?",
    "answer": "The 'purge' subcommand allows you to remove all modules you have loaded at once."
  },
  {
    "question": "Are all modules removed by 'module purge'?",
    "answer": "No, some modules marked as 'sticky' (permanent) by system administrators will not be removed."
  },
  {
    "question": "What is the function of the 'module show', 'module help', and 'module whatis' subcommands?",
    "answer": "These subcommands provide additional information about a given module: 'show' displays the entire module, 'help' displays a help message, and 'whatis' shows a description of the module."
  },
  {
    "question": "How can you search for a keyword across all modules?",
    "answer": "The 'apropos' or 'keyword' subcommands allow you to search for a keyword across all modules."
  },
  {
    "question": "Is it recommended to automatically load modules in your .bashrc file?",
    "answer": "No, it is strongly discouraged to automatically load modules in your .bashrc."
  },
  {
    "question": "When is it recommended to load modules?",
    "answer": "It is recommended to load the necessary modules as needed, for example, in your job scripts."
  },
  {
    "question": "What is the preferred method for loading a large number of modules?",
    "answer": "To facilitate loading a large number of modules, it is preferable to use a module collection."
  },
  {
    "question": "How do you create a collection of modules with Lmod?",
    "answer": "First, load the required modules (e.g., 'module load gcc/9.3 openmpi/4.0.3 mkl'), then use the 'save' command with a chosen name, such as 'module save mes_modules'."
  },
  {
    "question": "How do you restore a saved module collection?",
    "answer": "You can restore a module collection in a later session or task with the command 'module restore mes_modules'."
  },
  {
    "question": "What are hidden modules?",
    "answer": "Hidden modules are typically modules that you do not need to load manually, as they are loaded automatically as needed."
  },
  {
    "question": "Why is a module hierarchy used?",
    "answer": "A module hierarchy is used to solve the problem of managing a large number of combinations of different module versions, allowing for simpler load commands."
  },
  {
    "question": "What is a disadvantage of using a module hierarchy?",
    "answer": "The disadvantage is that 'module avail' only displays modules compatible with 'parent' modules, as modules can have the same name."
  },
  {
    "question": "How does the module system handle automatic replacement of modules?",
    "answer": "When the module system detects two modules of the same family or two versions of the same module, the 'module load' command automatically replaces the original module with the new one."
  },
  {
    "question": "What happens to dependent modules when a module in a hierarchy is replaced?",
    "answer": "If the replaced module is a node in the module hierarchy, dependent modules will be reloaded if a compatible version exists, or deactivated otherwise."
  },
  {
    "question": "Where can users find instructions for creating modules?",
    "answer": "For instructions on how to create modules, users should refer to the official documentation."
  },
  {
    "question": "What commands should be executed to use modules with ZSH or KSH shells?",
    "answer": "To use modules with ZSH or KSH shells, execute 'zsh -l' or 'ksh -l' respectively."
  }
]