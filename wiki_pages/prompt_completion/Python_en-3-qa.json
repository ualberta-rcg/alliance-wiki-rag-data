[
  {
    "question": "How can you list currently available Python wheels on the cluster?",
    "answer": "You can list currently available wheels by running the command `avail_wheels` on the cluster or by checking the 'Available Python wheels' page."
  },
  {
    "question": "What are the default behaviors of the `avail_wheels` command?",
    "answer": "By default, `avail_wheels` will only show the latest version of a specific package, only show versions compatible with the loaded Python module or activated virtual environment, and only show versions compatible with the current CPU architecture and software environment (StdEnv)."
  },
  {
    "question": "How do you list Python wheels containing 'cdf' (case insensitive) in their name?",
    "answer": "To list wheels containing 'cdf' in their name, use the command `avail_wheels \"*cdf*\"`."
  },
  {
    "question": "How can you list available wheels for a specific package name, such as `numpy`?",
    "answer": "You can list wheels for an exact package name using `avail_wheels numpy`."
  },
  {
    "question": "How do you list a specific version of a package, for example, `numpy==1.23`?",
    "answer": "To list a specific version, you can use `avail_wheels numpy==1.23` or `avail_wheels numpy --version 1.23`."
  },
  {
    "question": "What operators can be used with `avail_wheels` to specify package versions?",
    "answer": "You can use operators like `==`, `<`, `>`, `~=`, `<=`, `>=`, and `!=` for specifying package versions with `avail_wheels`."
  },
  {
    "question": "How can you list all available versions of a package using `avail_wheels`?",
    "answer": "To list all available versions of packages containing a specific string, for instance 'cdf', use the command `avail_wheels \"*cdf*\" --all-version`."
  },
  {
    "question": "How do you filter available wheels by a specific Python version, like Python 3.9?",
    "answer": "You can list wheels for a specific Python version using `avail_wheels 'numpy<1.23' --python 3.9`."
  },
  {
    "question": "What does 'cp39' in the 'python' column of `avail_wheels` output signify?",
    "answer": "The 'cp39' in the 'python' column indicates that the wheel is available for CPython 3.9."
  },
  {
    "question": "How can you list available wheels based on a `requirements.txt` file?",
    "answer": "You can list available wheels based on a `requirements.txt` file using the command `avail_wheels -r requirements.txt`."
  },
  {
    "question": "How do you display wheels from a `requirements.txt` file that are not available?",
    "answer": "To display wheels that are not available from a `requirements.txt` file, use `avail_wheels -r requirements.txt --not-available`."
  },
  {
    "question": "What is the command to pre-download a Python package like `tensorboardX` on a login node without its dependencies?",
    "answer": "To pre-download a package without its dependencies, run `pip download --no-deps tensorboardX`."
  },
  {
    "question": "How do you install a pre-downloaded Python wheel file, such as `tensorboardX-1.9-py2.py3-none-any.whl`?",
    "answer": "To install a pre-downloaded wheel file, use `pip install tensorboardX-1.9-py2.py3-none-any.whl`."
  },
  {
    "question": "What should you do if a pre-downloaded wheel's filename does not end with `none-any` (e.g., ends with `linux_x86_64`)?",
    "answer": "If a pre-downloaded wheel's filename does not end with `none-any`, it might not function correctly, and you should contact Technical support to request that they compile and make the wheel available on the systems."
  },
  {
    "question": "Which Python module is commonly used for parallel programming on a single compute node?",
    "answer": "The `multiprocessing` module is commonly used for parallel programming on a single compute node."
  },
  {
    "question": "What class within the `multiprocessing` module is particularly useful for controlling processes and applying calculations to multiple data?",
    "answer": "The `Pool` class within the `multiprocessing` module is of particular interest as it allows controlling the number of processes and applying calculations to multiple data."
  },
  {
    "question": "Why is it important to use the correct number of allocated cores when running parallel Python jobs on a cluster?",
    "answer": "Using the correct number of allocated cores is crucial because launching more processes than cores requested will slow down calculations and potentially overload the node, while launching fewer processes wastes resources and leaves cores idle."
  },
  {
    "question": "How can a Python script running in a Slurm job determine the number of CPU cores allocated to it?",
    "answer": "A Python script can determine the number of CPU cores allocated by reading the `SLURM_CPUS_PER_TASK` environment variable, for example: `ncpus = int(os.environ.get('SLURM_CPUS_PER_TASK',default=1))`."
  }
]