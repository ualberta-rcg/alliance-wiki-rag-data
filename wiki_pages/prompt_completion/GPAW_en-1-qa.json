[
  {
    "question": "What is GPAW?",
    "answer": "GPAW is a density-functional theory (DFT) Python code based on the projector-augmented wave (PAW) method and the atomic simulation environment (ASE)."
  },
  {
    "question": "What methods does GPAW utilize?",
    "answer": "GPAW is based on the projector-augmented wave (PAW) method and the atomic simulation environment (ASE)."
  },
  {
    "question": "Why are precompiled Python wheels provided for GPAW?",
    "answer": "Precompiled Python wheels are provided for GPAW so it can be installed into a virtual Python environment."
  },
  {
    "question": "How do you check which versions of GPAW are available?",
    "answer": "You can check available GPAW versions by running the command `avail_wheels gpaw`."
  },
  {
    "question": "How can you load a specific Python module, such as Python 3.10, for a GPAW virtual environment?",
    "answer": "You can load a Python module using the command `module load python/3.10`."
  },
  {
    "question": "What command is used to create a new virtual environment for GPAW without downloading packages?",
    "answer": "A new virtual environment can be created with `virtualenv --no-download venv_gpaw`."
  },
  {
    "question": "How do you activate a GPAW virtual environment named `venv_gpaw`?",
    "answer": "To activate the virtual environment, use the command `source venv_gpaw/bin/activate`."
  },
  {
    "question": "What command is used to install GPAW into an activated virtual environment?",
    "answer": "You install GPAW by running `pip install --no-index gpaw` within the activated virtual environment."
  },
  {
    "question": "How do you download and install GPAW data into the SCRATCH filesystem?",
    "answer": "You download and install GPAW data by executing `gpaw install-data $SCRATCH`."
  },
  {
    "question": "What is the typical installation directory for GPAW setups?",
    "answer": "GPAW setups are typically installed into `/scratch/name/gpaw-setups-0.9.20000`."
  },
  {
    "question": "How do you set the `GPAW_SETUP_PATH` environment variable to point to the installed data directory?",
    "answer": "You set the `GPAW_SETUP_PATH` using the command `export GPAW_SETUP_PATH=$SCRATCH/gpaw-setups-0.9.20000`."
  },
  {
    "question": "How do you run a basic test calculation for GPAW?",
    "answer": "A basic GPAW test calculation can be run using `gpaw test`."
  },
  {
    "question": "How can you perform a parallel test calculation with GPAW using 4 cores?",
    "answer": "A parallel test calculation with 4 cores can be run using the command `gpaw -P 4 test`."
  },
  {
    "question": "Where are the results of the last GPAW test calculation saved?",
    "answer": "The results of the last GPAW test calculation are saved in the file `test.txt` in the current directory."
  },
  {
    "question": "What is the purpose of the provided example GPAW jobscript?",
    "answer": "The example jobscript is for hybrid (OpenMP and MPI) parallelization of GPAW."
  },
  {
    "question": "What SLURM parameters are configured in the example GPAW jobscript?",
    "answer": "The jobscript configures `--ntasks=8`, `--cpus-per-task=4`, `--mem-per-cpu=4000M`, and `--time=0-01:00`."
  },
  {
    "question": "How is the `OMP_NUM_THREADS` environment variable determined in the example jobscript?",
    "answer": "`OMP_NUM_THREADS` is set to the value of `SLURM_CPUS_PER_TASK` if available, otherwise it defaults to 1."
  },
  {
    "question": "Which software modules are loaded in the example GPAW jobscript?",
    "answer": "The jobscript loads `gcc/9.3.0` and `openmpi/4.0.3`."
  },
  {
    "question": "How many total CPUs does the example GPAW jobscript configuration utilize?",
    "answer": "The example jobscript uses a total of 32 CPUs (8 MPI-ranks * 4 OpenMP threads per rank)."
  },
  {
    "question": "What is the recommendation for adjusting `ntasks` and `cpus-per-task` in a GPAW jobscript?",
    "answer": "It is recommended to adjust `ntasks` and `cpus-per-task` so their product matches the number of cores of a whole node (e.g., 32, 40, 48, or 64 depending on the cluster)."
  },
  {
    "question": "Why is it important to load specific `gcc` and `openmpi` modules in the jobscript?",
    "answer": "Loading specific `gcc/9.3.0` and `openmpi/4.0.3` modules ensures that the exact MPI library used for the job matches the one used for building the GPAW wheels."
  }
]