[
  {
    "question": "When is it useful to modify the JULIA_THREAD_SLEEP_THRESHOLD variable?",
    "answer": "It can be useful to modify this variable when multiple threads frequently contend for a shared resource, as it might be preferable to eliminate spinning threads more quickly."
  },
  {
    "question": "What is the impact of spinning threads in a high-contention scenario?",
    "answer": "In a context of strong contention, spinning threads would only increase the load on the CPUs."
  },
  {
    "question": "What effect does setting the JULIA_THREAD_SLEEP_THRESHOLD to infinite have?",
    "answer": "When a resource is rarely solicited, a low latency can occur if threads are prevented from sleeping by setting the threshold to infinite."
  },
  {
    "question": "When should JULIA_THREAD_SLEEP_THRESHOLD values be configured?",
    "answer": "These values should only be configured after profiling potential concurrency problems."
  },
  {
    "question": "What should users consult before modifying default configurations for Julia's threading?",
    "answer": "Given that Julia and particularly its Base.Threads evolve very rapidly, users should always consult the documentation to ensure that modifying the default configuration will have the desired result."
  },
  {
    "question": "What is the standard programming interface for using GPUs with Julia?",
    "answer": "The standard programming interface for working with GPUs in Julia is the CUDA.jl package."
  },
  {
    "question": "How do you install the CUDA.jl package?",
    "answer": "First, load the necessary modules (`module load cuda/11.4 julia/1.8.1`), then start Julia and run `import Pkg; Pkg.add(\"CUDA\")`."
  },
  {
    "question": "What potential issue might arise during CUDA.jl installation related to the CUDA toolkit?",
    "answer": "It is possible that the CUDA toolkit downloaded during installation may not work with the installed CUDA driver."
  },
  {
    "question": "How can you configure Julia to use the local CUDA toolkit to avoid compatibility issues for recent CUDA versions?",
    "answer": "To configure Julia to use the local CUDA toolkit, load the appropriate `cuda` module, then in Julia, use `using CUDA` and `CUDA.set_runtime_version!(v\"version_of_cuda\", local_toolkit=true)`, replacing \"version_of_cuda\" with the actual version (e.g., 12.2 for `cuda/12.2`)."
  },
  {
    "question": "How do you configure Julia to use the local CUDA toolkit for older CUDA versions?",
    "answer": "For older CUDA versions, load the appropriate `cuda` module, then in Julia, use `using CUDA` and `CUDA.set_runtime_version!(\"local\")`."
  },
  {
    "question": "How do you verify the CUDA version after configuring Julia to use the local toolkit?",
    "answer": "After restarting Julia, run `julia> CUDA.versioninfo()` to verify the CUDA version."
  },
  {
    "question": "How can you test if the CUDA.jl installation is working correctly?",
    "answer": "To test the installation, you can create a CuArray and perform an operation on it, for example: `julia> a = CuArray([1,2,3]); a.+=1`."
  },
  {
    "question": "Where can users find more information about Julia?",
    "answer": "Users can find more information in webinars produced by SHARCNET."
  },
  {
    "question": "What are the titles and durations of the SHARCNET webinars on Julia?",
    "answer": "The webinars are: \"Julia: A first perspective\" (47 minutes), \"Julia: A second perspective\" (57 minutes), and \"Julia: A third perspective - parallel computing explained\" (65 minutes)."
  },
  {
    "question": "Is there an upcoming webinar about Julia parallel computing?",
    "answer": "Yes, \"Julia: Parallel computing revisited\" is currently in preparation."
  }
]