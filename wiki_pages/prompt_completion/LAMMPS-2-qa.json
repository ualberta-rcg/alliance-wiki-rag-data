[
  {
    "question": "How can I check which packages are enabled or disabled for a specific LAMMPS module?",
    "answer": "After loading a particular LAMMPS module, you can run `cat ${EBROOTLAMMPS}/list-packages.txt` to see a list of supported and not supported packages."
  },
  {
    "question": "What should I do if the `list-packages.txt` file is not found for a LAMMPS module?",
    "answer": "If `list-packages.txt` is not found, you can examine the EasyBuild recipe file, `$EBROOTLAMMPS/easybuild/LAMMPS*.eb`, where the list of enabled packages will appear in the `general_packages` block."
  },
  {
    "question": "What is the name of the example LAMMPS input file provided in the documentation?",
    "answer": "The example LAMMPS input file is named `lammps.in`."
  },
  {
    "question": "What kind of simulation is configured in the `lammps.in` example file?",
    "answer": "The `lammps.in` example file sets up a 3d Lennard-Jones melt simulation."
  },
  {
    "question": "What are the SLURM directives for the example serial job script (`run_lmp_serial.sh`)?",
    "answer": "The serial job script includes `#SBATCH --ntasks=1`, `#SBATCH --mem-per-cpu=2500M`, and `#SBATCH --time=0-00:30`."
  },
  {
    "question": "How is the LAMMPS executable called in the example serial job script?",
    "answer": "In the example serial job script, LAMMPS is executed using `lmp < lammps.in > lammps_output.txt`."
  },
  {
    "question": "What are the SLURM directives for the example MPI job script (`run_lmp_mpi.sh`)?",
    "answer": "The MPI job script includes `#SBATCH --ntasks=4`, `#SBATCH --mem-per-cpu=2500M`, and `#SBATCH --time=0-00:30`."
  },
  {
    "question": "How is the LAMMPS executable called in the example MPI job script?",
    "answer": "In the example MPI job script, LAMMPS is executed using `srun lmp < lammps.in > lammps_output.txt`."
  },
  {
    "question": "Where is most of the CPU time typically spent during molecular dynamics simulations with LAMMPS?",
    "answer": "Most of the CPU time for molecular dynamics simulations is spent in computing the pair interactions between particles."
  },
  {
    "question": "How does LAMMPS distribute computational work among available processors?",
    "answer": "LAMMPS uses domain decomposition to split the work among available processors by assigning a part of the simulation box to each processor."
  },
  {
    "question": "What effect does increasing the number of processors have on communication time in LAMMPS for a given number of particles?",
    "answer": "For a given number of particles, increasing the number of processors leads to increased communication time, which can eventually result in low CPU efficiency."
  },
  {
    "question": "What is recommended to optimize LAMMPS performance before running extensive simulations?",
    "answer": "It is recommended to run short tests using different numbers of cores to find a suitable number of cores that will approximately maximize the simulation's efficiency."
  },
  {
    "question": "In the example of a 4000-particle system using 12 MPI tasks, what percentages of time were spent on pair interactions and communications?",
    "answer": "In that example, 46.45% of the time was spent computing pair interactions, and 44.5% was spent in communications between processors."
  },
  {
    "question": "According to the performance table, what percentage of time is spent on pair interactions and communication for a 2048-atom system using 1 core?",
    "answer": "For a 2048-atom system using 1 core, 73.68% of the time is spent on Pairs and 1.36% on Comm (communication)."
  },
  {
    "question": "How do 'Pairs' and 'Comm' percentages change for a 13500-atom system when increasing from 1 to 16 cores, based on the provided table?",
    "answer": "For a 13500-atom system, 'Pairs' percentage decreases from 73.72% (1 core) to 56.41% (16 cores), while 'Comm' percentage increases from 1.29% (1 core) to 20.38% (16 cores)."
  }
]