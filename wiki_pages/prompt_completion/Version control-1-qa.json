[
  {
    "question": "What is considered a cornerstone of application development?",
    "answer": "Source code management is one of the cornerstones of application development."
  },
  {
    "question": "What are the two general approaches to managing source code for a project?",
    "answer": "You could make multiple backup copies, send code by email, and manually track versions, or use a revision control system specifically designed for this process."
  },
  {
    "question": "Why is using a revision control system a more rational approach than manual methods?",
    "answer": "A revision control system is specifically created to make the process of managing source code as painless as possible, avoiding issues like remembering versions or reconciling modifications."
  },
  {
    "question": "Are revision control tools used only for major applications?",
    "answer": "No, all significant applications and libraries are developed using such tools, and they are even more important for academic research."
  },
  {
    "question": "Why are revision control tools particularly important for academic research?",
    "answer": "For academic research, these tools are essential because traceability is necessary to ensure that a given set of results can be reproduced."
  },
  {
    "question": "What is a common metaphor for revision control management tools?",
    "answer": "A good metaphor is that revision control management tools are the programmer's equivalent to the experimentalist's lab notebook."
  },
  {
    "question": "What are the primary advantages of using revision control tools?",
    "answer": "They permit easier collaboration, eliminate the risk of accidental modification deletion, save a history of all changes, and facilitate documentation of changes."
  },
  {
    "question": "How do revision control tools help with collaboration?",
    "answer": "They eliminate the risk that a collaborator might delete your modifications or vice versa without leaving a trace, making it easier to work together."
  },
  {
    "question": "In what way do revision control tools function like a 'time machine'?",
    "answer": "They save the history of all modifications, allowing you to reinitialize your project to an earlier version to reproduce results, for example."
  },
  {
    "question": "What is the basic principle behind how source code management tools function?",
    "answer": "They function using a basic principle of separating local modifications made by a user in their local directory and what is called the repository."
  },
  {
    "question": "What is a 'repository' in the context of source code management?",
    "answer": "The repository contains, in a structured manner, the history of all of the modifications made by all of a project's contributors."
  },
  {
    "question": "How does software development change when using a source code management tool?",
    "answer": "Rather than simply saving modifications to the local disk, contributors must submit (commit) them to the repository to make them available to other developers."
  },
  {
    "question": "What does it mean to 'commit' modifications in a source code management system?",
    "answer": "To 'commit' modifications means to submit your changes to the repository, making them available to other developers."
  },
  {
    "question": "What operations do developers perform to ensure they are using the latest version of a file?",
    "answer": "Developers need to retrieve the latest version from the repository using operations like 'checkout' or 'update' before making their own modifications."
  },
  {
    "question": "What happens if multiple programmers modify the same source code file simultaneously?",
    "answer": "The source code management tool may report a conflict during the submission of the rival modifications or automatically resolve the conflict if possible."
  },
  {
    "question": "How are principal revision control tools categorized?",
    "answer": "They are divided into two 'families' or 'generations'."
  },
  {
    "question": "What are some examples of first-generation revision control tools?",
    "answer": "First-generation tools include CVS and SVN."
  },
  {
    "question": "What is a key characteristic of first-generation revision control tools?",
    "answer": "They use a single central repository where all modifications are controlled and retrieved from."
  },
  {
    "question": "What are some examples of second-generation revision control tools?",
    "answer": "Second-generation tools include Git, Mercurial, and Bazaar."
  },
  {
    "question": "What is a key characteristic of second-generation revision control tools regarding repositories?",
    "answer": "They use local repositories, allowing development work to be done independent of any remote server."
  },
  {
    "question": "What is an advantage of second-generation tools using local repositories?",
    "answer": "The 'commit' and 'checkout' operations can be much faster and perform more complex operations due to local repositories."
  },
  {
    "question": "What advanced development model do Git and Mercurial offer?",
    "answer": "Git and Mercurial offer advanced management of branched development."
  },
  {
    "question": "Describe the branched development model.",
    "answer": "In a branched development model, each new feature corresponds to a branch of the development tree. The production version is the principal branch, and new features are developed in parallel on separate branches until they are ready to be merged or abandoned."
  },
  {
    "question": "For what kind of projects is the branched development model particularly well adapted?",
    "answer": "This development model is particularly well adapted to very large projects involving several programmers."
  },
  {
    "question": "What are the two steps required to submit modifications to an external repository using second-generation tools?",
    "answer": "First, modifications are submitted to the local repository ('commit'), then they are pushed ('push') to the external repository."
  },
  {
    "question": "How do you retrieve modifications from an external repository using second-generation tools?",
    "answer": "You must first obtain them ('pull' or 'get') to import them into the local repository, then update your working version ('update' or 'checkout')."
  },
  {
    "question": "What determines the choice of a version control tool when contributing to an existing project?",
    "answer": "If you want to contribute to an existing project, you must use the tool chosen by the initial development team."
  },
  {
    "question": "What factors influence the choice of a version control tool for a new project?",
    "answer": "The choice will depend on the breadth of your project, including the number of contributors and whether it will remain private or involve external collaborators."
  },
  {
    "question": "When is a first-generation tool like SVN sufficient for a new project?",
    "answer": "A first-generation tool like SVN can be sufficient for a project with only a few contributors, which will remain private, and for which you simply need a history of modifications."
  },
  {
    "question": "When should one consider a second-generation tool such as Git or Mercurial for a new project?",
    "answer": "If your project is larger, with external collaborators, you should consider a second-generation tool like Git or Mercurial."
  }
]