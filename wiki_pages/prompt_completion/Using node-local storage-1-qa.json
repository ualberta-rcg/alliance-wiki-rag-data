[
  {
    "question": "What is SLURM_TMPDIR?",
    "answer": "SLURM_TMPDIR is an environment variable containing the full path name of a temporary directory created by Slurm on each node assigned to a job."
  },
  {
    "question": "When is the SLURM_TMPDIR directory created?",
    "answer": "Slurm creates a temporary directory and sets the SLURM_TMPDIR environment variable when it starts a job on each assigned node."
  },
  {
    "question": "Why is I/O to SLURM_TMPDIR generally faster than I/O to network storage?",
    "answer": "SLURM_TMPDIR resides on local disk, making I/O to it almost always faster than I/O to network storage like /project, /scratch, or /home."
  },
  {
    "question": "For what type of I/O transactions is SLURM_TMPDIR particularly beneficial?",
    "answer": "Local disk, and thus SLURM_TMPDIR, is better for frequent small I/O transactions than network storage."
  },
  {
    "question": "What is a primary benefit of using SLURM_TMPDIR for jobs with heavy I/O?",
    "answer": "Any job doing a lot of input and output may run more quickly if it uses $SLURM_TMPDIR instead of network storage."
  },
  {
    "question": "What makes SLURM_TMPDIR more challenging to use compared to network storage?",
    "answer": "Its temporary nature requires input to be copied from network storage to $SLURM_TMPDIR before use, and output copied back to network storage before the job ends to preserve it."
  },
  {
    "question": "How do you copy input data from network storage to SLURM_TMPDIR for a job?",
    "answer": "In the simplest case, you can use `cp` or `rsync`, for example: `cp /project/def-someone/you/input.files.* $SLURM_TMPDIR/`."
  },
  {
    "question": "When might a simple `cp` or `rsync` command be insufficient for copying data to SLURM_TMPDIR?",
    "answer": "A simple `cp` may not work if the input is too large, or if it must be read by processes on different nodes (multinode jobs)."
  },
  {
    "question": "Why is it recommended to create Python virtual environments inside jobs using SLURM_TMPDIR?",
    "answer": "Python virtual environments generate a large number of small I/O transactions, and using SLURM_TMPDIR for their creation and use can improve performance."
  },
  {
    "question": "What must be done with output data from SLURM_TMPDIR before a job ends?",
    "answer": "Output data must be copied from SLURM_TMPDIR back to some permanent storage before the job ends."
  },
  {
    "question": "What happens to output data in SLURM_TMPDIR if a job times out without being copied back?",
    "answer": "If a job times out, the last few lines of the job script (which would typically handle copying output) might not be executed, potentially leading to loss of data."
  },
  {
    "question": "What are three ways to mitigate the risk of losing output from SLURM_TMPDIR if a job times out?",
    "answer": "You can request enough runtime, write checkpoints directly to network storage, or implement a signal trapping function."
  },
  {
    "question": "What is the purpose of a signal trapping function in the context of SLURM_TMPDIR output?",
    "answer": "A signal trapping function arranges for Slurm to send a signal before runtime expires, prompting the job to copy its output from SLURM_TMPDIR back to network storage."
  },
  {
    "question": "When might using a signal trapping function be beneficial?",
    "answer": "It can be useful if your runtime estimate is uncertain, or if you are chaining together several Slurm jobs for a long calculation."
  },
  {
    "question": "How do you implement a signal trapping function?",
    "answer": "You need to write a shell function to perform the copying and use the `trap` shell command to associate that function with the signal."
  },
  {
    "question": "What are the limitations of using a signal trapping function to preserve SLURM_TMPDIR contents?",
    "answer": "This method will not preserve the contents of SLURM_TMPDIR in the case of a node failure or certain malfunctions of the network file system."
  },
  {
    "question": "How do you copy files to SLURM_TMPDIR on every node for a multinode job?",
    "answer": "You can use the command: `srun --ntasks=$SLURM_NNODES --ntasks-per-node=1 cp file [files...] $SLURM_TMPDIR`."
  },
  {
    "question": "How do you extract a ZIP archive to SLURM_TMPDIR across all nodes in a multinode job?",
    "answer": "Use the command: `srun --ntasks=$SLURM_NNODES --ntasks-per-node=1 unzip archive.zip -d $SLURM_TMPDIR`."
  },
  {
    "question": "How do you extract a Tarball archive to SLURM_TMPDIR across all nodes in a multinode job?",
    "answer": "Use the command: `srun --ntasks=$SLURM_NNODES --ntasks-per-node=1 tar -xvf archive.tar.gz -C $SLURM_TMPDIR`."
  }
]