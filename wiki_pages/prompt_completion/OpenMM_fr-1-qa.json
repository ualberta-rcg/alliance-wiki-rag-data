[
  {
    "question": "What is OpenMM?",
    "answer": "OpenMM is a toolkit designed for molecular simulation."
  },
  {
    "question": "How can OpenMM be utilized?",
    "answer": "OpenMM can be used as a standalone application for simulations or as a library called from your own code."
  },
  {
    "question": "What makes OpenMM a unique package?",
    "answer": "OpenMM is a unique package due to its high flexibility with custom force fields and resolution (or integration) algorithms, its openness, and its excellent performance, especially with recent GPUs."
  },
  {
    "question": "Which OpenMM module version is used in the example for AMBER topologies?",
    "answer": "The example uses the openmm/7.7.0 module."
  },
  {
    "question": "How do you prepare and activate a Python virtual environment for the OpenMM example?",
    "answer": "First, load the python module using `module load python`, then create the virtual environment with `virtualenv $HOME/env-parmed`, and finally activate it using `source $HOME/env-parmed/bin/activate`."
  },
  {
    "question": "Which Python modules need to be installed for this OpenMM example?",
    "answer": "The Python modules ParmEd and netCDF4 need to be installed."
  },
  {
    "question": "How do you install ParmEd and netCDF4 in the virtual environment?",
    "answer": "You install them using the command `pip install --no-index parmed==3.4.3 netCDF4`."
  },
  {
    "question": "What is the purpose of the `submit_openmm.cuda.sh` script?",
    "answer": "The `submit_openmm.cuda.sh` script is for a simulation task that utilizes a GPU."
  },
  {
    "question": "What are the SBATCH directives specified in `submit_openmm.cuda.sh` for the simulation task?",
    "answer": "The SBATCH directives are `--cpus-per-task=1`, `--gpus=1`, `--mem-per-cpu=4000M`, and `--time=0-01:00:00`."
  },
  {
    "question": "Which modules are loaded within the `submit_openmm.cuda.sh` script?",
    "answer": "The script loads `StdEnv/2020`, `gcc/9.3.0`, `cuda/11.4`, `openmpi/4.0.3`, `python/3.8.10`, `openmm/7.7.0`, `netcdf/4.7.4`, `hdf5/1.10.6`, and `mpi4py/3.0.3`."
  },
  {
    "question": "What does the `openmm_input.py` script do?",
    "answer": "`openmm_input.py` is a Python script that loads Amber files, creates the OpenMM simulation system, configures the integration, and executes the dynamics."
  },
  {
    "question": "Who created the Molecular Dynamics Performance Guide?",
    "answer": "The Molecular Dynamics Performance Guide was created by an ACENET team."
  },
  {
    "question": "What information does the Molecular Dynamics Performance Guide provide?",
    "answer": "The guide describes the optimal conditions for running tasks on clusters with AMBER, GROMACS, and NAMD."
  },
  {
    "question": "How many CPUs does OpenMM require per GPU on the CUDA platform, and why?",
    "answer": "On the CUDA platform, OpenMM only needs one CPU per GPU because the CPUs are not used for calculations."
  },
  {
    "question": "Is it more efficient to use a single GPU or multiple GPUs for OpenMM simulations in a node?",
    "answer": "While OpenMM can use multiple GPUs in a node, it is more efficient to perform simulations with a single GPU."
  },
  {
    "question": "How does simulation speed with multiple GPUs behave on nodes with NvLink?",
    "answer": "On nodes with NvLink, where GPUs are directly connected, the simulation speed with multiple GPUs is slightly increased."
  },
  {
    "question": "How does simulation speed with multiple P100 GPUs increase without NvLink?",
    "answer": "Without NvLink, the simulation speed increases very little with P100 GPUs."
  },
  {
    "question": "Where can one find benchmarking trials for OpenMM on Narval and Cedar?",
    "answer": "Benchmarking trials for OpenMM on Narval and Cedar can be found on their respective performance guide pages."
  }
]