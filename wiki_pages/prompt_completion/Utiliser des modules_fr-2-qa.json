[
  {
    "question": "What happens if I try to load a module that is incompatible with an already loaded module?",
    "answer": "Lmod will indicate that it has replaced the old module with the new one. This often occurs with compilers and MPI implementations."
  },
  {
    "question": "How do I remove a specific module from my environment?",
    "answer": "Use the `module unload` subcommand, for example, `module unload gcc/9.3`."
  },
  {
    "question": "What happens to modules that depend on a module I unload?",
    "answer": "Lmod will indicate that those dependent modules have been deactivated."
  },
  {
    "question": "How can I remove all loaded modules at once?",
    "answer": "Use the `module purge` subcommand."
  },
  {
    "question": "Will `module purge` remove all modules, including permanent ones?",
    "answer": "No, some modules marked as 'sticky' (permanent) by system administrators will not be removed."
  },
  {
    "question": "Which subcommands provide additional information about a module?",
    "answer": "The `show`, `help`, and `whatis` subcommands provide additional information about a given module."
  },
  {
    "question": "What is the function of the `module show` command?",
    "answer": "The `module show` subcommand displays the entirety of a module."
  },
  {
    "question": "What does the `module help` command do?",
    "answer": "The `module help` subcommand displays a help message for a module."
  },
  {
    "question": "What information does `module whatis` provide?",
    "answer": "The `module whatis` subcommand shows a description of the module."
  },
  {
    "question": "How can I search for a keyword across all modules?",
    "answer": "You can use the `module apropos` or `module keyword` subcommands."
  },
  {
    "question": "Is it recommended to automatically load modules in `.bashrc`?",
    "answer": "No, it is discouraged; it is recommended to load modules as needed, for example, in task scripts."
  },
  {
    "question": "What is the recommended way to handle loading a large number of modules?",
    "answer": "It is preferable to use a module collection."
  },
  {
    "question": "How do I create a module collection with Lmod?",
    "answer": "First, load the required modules (e.g., `module load gcc/9.3 openmpi/4.0.3 mkl`), then use the `module save <collection_name>` command, such as `module save mes_modules`."
  },
  {
    "question": "How do I save a set of currently loaded modules into a collection?",
    "answer": "After loading the desired modules, use `module save` followed by a name for your collection, e.g., `module save mes_modules`."
  },
  {
    "question": "How can I restore a previously saved module collection?",
    "answer": "You can restore a module collection with the `module restore <collection_name>` command, for example, `module restore mes_modules`."
  },
  {
    "question": "What are hidden modules?",
    "answer": "Hidden modules are typically not meant to be loaded manually; they are loaded automatically as needed and can generally be ignored."
  },
  {
    "question": "What is the purpose of a module hierarchy?",
    "answer": "A module hierarchy is used to resolve the problem of managing a large number of module version combinations and their dependencies, simplifying the loading process."
  },
  {
    "question": "How does module hierarchy simplify loading modules with complex dependencies?",
    "answer": "It allows loading modules like `fftw/3.8` after its parent modules (e.g., `gcc/9.3 openmpi/4.0`), rather than needing complex, concatenated module names like `fftw/3.8_gcc9.3_openmpi4.0`."
  },
  {
    "question": "What is a disadvantage of using a module hierarchy?",
    "answer": "Only modules compatible with currently loaded 'parent' modules are displayed by `module avail`, meaning loading a parent is a prerequisite to access certain modules."
  },
  {
    "question": "How can I see all available modules in a hierarchy, regardless of currently loaded parents?",
    "answer": "Use the `module spider` command, which traverses the complete hierarchy and displays all modules."
  },
  {
    "question": "What happens if `module load` detects two modules of the same family or two versions of the same module?",
    "answer": "The `module load` command will automatically replace the original module with the one being loaded."
  },
  {
    "question": "When a module is replaced in a module hierarchy, what happens to its dependent modules?",
    "answer": "Dependent modules will be reloaded if a compatible version exists, or deactivated if not."
  },
  {
    "question": "Where can I find instructions for creating modules?",
    "answer": "Refer to the official documentation at `http://lmod.readthedocs.io/en/latest/015_writing_modules.html`."
  },
  {
    "question": "How do I enable module usage in the ZSH shell?",
    "answer": "Execute the command `zsh -l`."
  },
  {
    "question": "How do I enable module usage in the KSH shell?",
    "answer": "Execute the command `ksh -l`."
  }
]