[
  {
    "question": "Why are `private` and `reduction` clauses needed when using the `parallel loop` directive?",
    "answer": "These clauses are needed to manage the scope of data and control how data flows through a parallel region, which is the programmer's responsibility with `parallel loop`, unlike with `kernels` where the directive handles this automatically."
  },
  {
    "question": "What is the purpose of the `private` clause in OpenACC?",
    "answer": "With the `private` clause, a copy of the variable is made for each loop iteration, making the value of the variable independent from other iterations."
  },
  {
    "question": "What does the `reduction` clause do in OpenACC?",
    "answer": "With the `reduction` clause, the values of a variable in each iteration will be 'reduced' to a single value."
  },
  {
    "question": "What types of operations does the `reduction` clause support?",
    "answer": "It supports addition (+), multiplication (*), maximum (max), minimum (min), among other operations."
  },
  {
    "question": "Why were `private` and `reduction` clauses not required with the `kernels` directive?",
    "answer": "These clauses were not required with the `kernels` directive because the `kernels` directive handles this for you."
  },
  {
    "question": "In the matrix-vector multiplication example, how is the `reduction` clause used with `parallel loop`?",
    "answer": "The inner loop (for j=row_start; j<row_end; j++) uses `#pragma acc loop reduction(+:sum)` to handle the sum variable."
  },
  {
    "question": "What is the primary responsibility of the programmer when using the `parallel loop` directive?",
    "answer": "It is the programmer's responsibility to ensure that parallelism is safe."
  },
  {
    "question": "What is the primary responsibility of the compiler when using the `kernels` directive?",
    "answer": "It is the compiler's responsibility to analyze the code and determine what is safe to parallelize."
  },
  {
    "question": "Which OpenACC directive gives the compiler more room to optimize?",
    "answer": "The `kernels` directive gives the compiler more room to optimize."
  },
  {
    "question": "Which OpenACC directive is considered a straightforward path from OpenMP?",
    "answer": "The `parallel loop` directive is a straightforward path from OpenMP."
  },
  {
    "question": "Can `parallel loop` and `kernels` directives perform equally well?",
    "answer": "Both approaches are equally valid and can perform equally well."
  },
  {
    "question": "What compiler feedback is generated when compiling the matrix-vector product with the `parallel loop` directive and `reduction` clause?",
    "answer": "The compiler feedback shows 'Accelerator kernel generated', and for the inner loop, 'Sum reduction generated for sum' and 'Loop is parallelizable' along with 'Generating Tesla code'."
  }
]