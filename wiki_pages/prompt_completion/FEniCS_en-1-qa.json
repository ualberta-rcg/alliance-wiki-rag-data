[
  {
    "question": "What is FEniCS?",
    "answer": "FEniCS is a popular open-source computing platform for solving partial differential equations (PDEs)."
  },
  {
    "question": "What are the available installation options for FEniCS?",
    "answer": "FEniCS can be installed either in a virtual environment or by using a Singularity container."
  },
  {
    "question": "Which version of FEniCS do the virtual environment installation instructions cover?",
    "answer": "These instructions cover FEniCS version 2019.1.0."
  },
  {
    "question": "What environment is assumed for the virtual environment installation of FEniCS?",
    "answer": "The installation assumes StdEnv/2020 with OpenMPI and GCC 9.3.0."
  },
  {
    "question": "How do you execute the FEniCS installation script on a cluster?",
    "answer": "You can run the script by copying it to the cluster and executing `bash fenics-install.sh`."
  },
  {
    "question": "What is the default name of the FEniCS installation script?",
    "answer": "The script is named `fenics-install.sh`."
  },
  {
    "question": "What does the installation script warn the user about before proceeding?",
    "answer": "It warns that the FEniCS/DOLFIN install will wipe out the application directory (defaulting to `$HOME/fenics`)."
  },
  {
    "question": "How can a user abort the FEniCS installation if they don't want the directory wiped out?",
    "answer": "The user should press `CTRL-C` to abort when prompted by the warning."
  },
  {
    "question": "What are the steps to use FEniCS/DOLFIN after a successful installation in a virtual environment?",
    "answer": "To use FEniCS/DOLFIN, you need to `module load $MODULES`, `source $FENICS_INSTALL/bin/activate`, and `source $FENICS_INSTALL/share/dolfin/dolfin.conf`."
  },
  {
    "question": "What is the default installation directory for FEniCS when using the provided script?",
    "answer": "The default installation directory is `$HOME/fenics`."
  },
  {
    "question": "What Python version is explicitly loaded in the `fenics-install.sh` script?",
    "answer": "Python version 3.10.2 is explicitly loaded using `module load python/3.10.2`."
  },
  {
    "question": "List some of the modules that need to be loaded before compiling FEniCS 2019.1.0.",
    "answer": "Required modules include StdEnv/2020, gcc/9.3.0, hdf5-mpi/1.10.6, boost/1.72.0, eigen, python/3.10.2, scipy-stack/2023b, mpi4py/3.0.3, petsc/3.17.1, slepc/3.17.2, scotch/6.0.9, fftw-mpi/3.3.8, ipp/2020.1.217, swig, and flexiblas."
  },
  {
    "question": "How does the `fenics-install.sh` script prepare the FEniCS installation directory?",
    "answer": "It first removes any existing directory at `$FENICS_INSTALL` and then creates a new, empty directory at that location."
  },
  {
    "question": "Which FEniCS project components are cloned from Bitbucket during the installation?",
    "answer": "`fiat`, `dijitso`, `ufc` (from `ufc-deprecated`), `ufl`, `ffc`, `dolfin`, and `mshr` are cloned."
  },
  {
    "question": "What is the version of `pybind11` targeted for installation in the script?",
    "answer": "`pybind11` version 2.2.3 is targeted."
  },
  {
    "question": "What Python packages are installed via `pip3` during the `make_py_packages` step?",
    "answer": "`ply`, `numpy`, and then local installations of `fiat`, `dijitso`, `ufl`, and `ffc` are installed."
  },
  {
    "question": "What is the status of the 'FEniCS add-ons' section regarding StdEnv/2020?",
    "answer": "The 'FEniCS add-ons' section has not been updated to work with StdEnv/2020."
  },
  {
    "question": "What is the first step for installing FEniCS add-ons like `mshr`?",
    "answer": "First, you must install FEniCS following the main instructions provided earlier in the document."
  },
  {
    "question": "What command is used to clone the `mshr` repository?",
    "answer": "`git clone https://bitbucket.org/fenics-project/mshr.git` is used."
  },
  {
    "question": "What is the purpose of using a Singularity container for FEniCS?",
    "answer": "The Singularity recipe downloads the FEniCS Docker image, installs it, and downloads additional Python packages."
  },
  {
    "question": "Where must the Singularity container recipe be run?",
    "answer": "This recipe must be run on your own Linux machine with Singularity installed, where you have root access."
  },
  {
    "question": "How do you build a FEniCS image using the provided Singularity recipe?",
    "answer": "You run the command: `sudo singularity build FEniCS.simg FEniCS-ComputeCanada-Singularity-Recipe`."
  },
  {
    "question": "What is the name of the Singularity image file created by the build command?",
    "answer": "The image file created is `FEniCS.simg`."
  },
  {
    "question": "Where does the FEniCS Docker image place files inside the container?",
    "answer": "The FEniCS Docker image places a number of files in `/home/fenics` inside the container."
  },
  {
    "question": "What is the base Docker image used in the FEniCS Singularity recipe?",
    "answer": "The base Docker image is `quay.io/fenicsproject/stable:latest`."
  }
]