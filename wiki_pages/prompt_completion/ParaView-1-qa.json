[
  {
    "question": "What is the purpose of the 'Remote Render Threshold' setting in ParaView's preferences?",
    "answer": "The 'Remote Render Threshold' setting, located under ''Render View -> Remote/Parallel Rendering Options'', determines whether small rendering tasks are done on your local computer's GPU or shipped to the remote cluster."
  },
  {
    "question": "How does setting the 'Remote Render Threshold' to default (20MB) affect ParaView's rendering behavior?",
    "answer": "If the threshold is set to default (20MB) or similar, small rendering tasks will be handled by your computer's GPU, providing fast mouse-based rotation. However, anything modestly intensive (under 20MB) will be sent to the remote computer, potentially leading to slow visualization depending on your connection."
  },
  {
    "question": "What happens if you set the 'Remote Render Threshold' to 0MB in ParaView?",
    "answer": "Setting the 'Remote Render Threshold' to 0MB means all rendering, including rotations, will be processed remotely on the cluster resources. This is beneficial for large data processing but might reduce interactivity."
  },
  {
    "question": "What is an important compatibility requirement for establishing a ParaView client-server connection?",
    "answer": "ParaView requires that the local client and the remote host have the same major version to prevent incompatibility issues, which often manifest as a failed handshake during connection establishment."
  },
  {
    "question": "If the ParaView server on the cluster is version 5.13.1, what client version should be used on your computer?",
    "answer": "To connect to a ParaView server version 5.13.1 on the cluster, you need a client version 5.13.x on your computer."
  },
  {
    "question": "What rendering options are available for client-server visualization on Fir, Nibi, Rorqual, and Narval?",
    "answer": "On Fir, Nibi, Rorqual, and Narval, you can perform client-server rendering using both CPUs (software rendering) and GPUs (hardware acceleration)."
  },
  {
    "question": "What is the recommended approach for starting visualization on Fir, Nibi, Rorqual, and Narval, and why?",
    "answer": "It is strongly recommended to start with CPU-only visualization due to additional complications associated with GPU rendering."
  },
  {
    "question": "How can you estimate the number of CPU cores needed for rendering a dataset in ParaView on Fir, Nibi, Rorqual, or Narval?",
    "answer": "The easiest way to estimate the number of necessary cores is to take the amount of memory you anticipate needing for your rendering and divide it by approximately 3.5 GB/core."
  },
  {
    "question": "What is the memory allocation recommendation per core for software rendering on these clusters?",
    "answer": "Since software rendering is CPU-intensive, it is not recommended to allocate more than 4GB/core."
  },
  {
    "question": "What should you do if your ParaView server terminates while processing data?",
    "answer": "If your ParaView server is killed during data processing, you will need to increase the number of cores allocated for rendering."
  },
  {
    "question": "What are the benefits of using CPU-based visualization for interactive client-server ParaView rendering?",
    "answer": "CPU-based visualization offers performance similar to GPU-based rendering through modern libraries like OSPRay and OpenSWR. Additionally, the ParaView server uses MPI for parallel rendering of very large datasets across many CPU cores, either on a single node or scattered across multiple nodes."
  },
  {
    "question": "What is the first step to set up CPU-based client-server ParaView rendering on Fir or Nibi?",
    "answer": "First, install the same ParaView version on your computer as is available on the cluster you plan to use, then log into Fir or Nibi and initiate a serial CPU interactive job."
  },
  {
    "question": "What command is used to start a serial CPU interactive job with specific resource requests?",
    "answer": "The command is `salloc --time=1:00:0 --ntasks=1 --mem-per-cpu=3600 --account=def-someprof`."
  },
  {
    "question": "After starting an interactive job, how do you prepare the ParaView server on the cluster?",
    "answer": "At the prompt within your job, load the ParaView module (e.g., `module load paraview/5.13.1`) and then start the server using `pvserver --force-offscreen-rendering`."
  },
  {
    "question": "What information should you note after the ParaView server starts and is waiting for a client connection?",
    "answer": "You should make a note of the compute node name (e.g., 'fc30107' from 'Connection URL: cs://fc30107:11111') and the port number (usually 11111)."
  },
  {
    "question": "How do you establish an SSH tunnel from your local machine to the compute node for ParaView client-server connection?",
    "answer": "In a separate terminal on your computer (Mac/Linux), use the command `ssh <username>@fir.alliancecan.ca -L 11111:fc30107:11111`, replacing `<username>` and `fc30107` with your specific details."
  },
  {
    "question": "What steps are required to connect your local ParaView client to the remote server after setting up the SSH tunnel?",
    "answer": "Start ParaView on your computer, navigate to ''File -> Connect'' (or click the green ''Connect'' button). Then, click ''Add Server'', configure it with `name = fir`, `server type = Client/Server`, `host = localhost`, and `port = 11111`. Click ''Configure'', select ''Manual'', click ''Save'', and finally, select the server from the list and click ''Connect''."
  },
  {
    "question": "How do you confirm a successful connection between your ParaView client and the remote server?",
    "answer": "Upon a successful connection, the terminal window where the ParaView server was started will change its message from 'Accepting connection' to 'Client connected'."
  }
]