[
  {
    "question": "What is the main purpose of this document?",
    "answer": "This page describes remote visualization of your dataset residing on one of the Alliance's HPC clusters."
  },
  {
    "question": "What are the three main scenarios for remote visualization with ParaView on the clusters?",
    "answer": "The three main scenarios are small-scale interactive visualization, large-scale interactive visualization, and batch production visualization."
  },
  {
    "question": "When should I use small-scale interactive visualization?",
    "answer": "You should use small-scale interactive visualization if your dataset is only a few GBs (either the entire dataset or each timestep in a time-dependent simulation), allowing for interactive visualization using a small number of CPU cores."
  },
  {
    "question": "How is small-scale interactive visualization typically performed?",
    "answer": "In this workflow, you start a remote desktop session \u2014 through JupyterHub or Open OnDemand, depending on the cluster \u2014 and run ParaView interactively inside it."
  },
  {
    "question": "What is the recommended setup for interactively visualizing a larger dataset?",
    "answer": "For larger datasets, a client-server setup is recommended, where the ParaView client runs on your computer, and the server runs in parallel inside a Slurm job on the HPC cluster."
  },
  {
    "question": "How does the definition of a 'large' dataset vary between Trillium and other clusters for interactive visualization?",
    "answer": "On Trillium, a 'large' dataset should be 50\u2013100 GB to efficiently utilize whole-node jobs in multiples of 192 cores. On other clusters (Rorqual, Nibi, Fir, Narval), you can schedule by core, making it possible to visualize much smaller datasets."
  },
  {
    "question": "Why is JupyterHub or Open OnDemand generally recommended for smaller datasets over a client-server configuration?",
    "answer": "The client-server setup is more complex, so JupyterHub or Open OnDemand is generally recommended for smaller datasets before attempting a client-server configuration."
  },
  {
    "question": "What is the ideal approach for production visualizations, such as generating movie frames?",
    "answer": "Ideally, all production visualizations, like generating 1,000 frames for a movie, should be scripted and run as batch, off-screen jobs on the clusters, rendering directly to files without opening interactive windows."
  },
  {
    "question": "How can GUI workflows be utilized for batch production visualization?",
    "answer": "The GUI workflows described for interactive visualization can be used as interactive steps to set up your visualization and save it as a ParaView Python script, which can then be executed as a batch job on the cluster."
  },
  {
    "question": "Should H100 GPUs be used for visualization on the clusters?",
    "answer": "No, H100 GPUs should not be used for visualization on the clusters as they are not optimized for graphics rendering."
  },
  {
    "question": "What are the limitations of using H100 GPUs for graphics rendering?",
    "answer": "H100 cards utilize only 2 of their 66 on-board thread controllers when running OpenGL and Vulkan applications, resulting in roughly 3% GPU utilization, poor cluster utilization, and rendering speeds comparable to a mid-range laptop GPU."
  },
  {
    "question": "Can MIGs (static GPU partitions) run graphics APIs like OpenGL or Vulkan?",
    "answer": "No, MIGs (static GPU partitions) cannot run graphics APIs such as OpenGL or Vulkan."
  },
  {
    "question": "If GPU rendering is absolutely necessary, which GPUs are recommended?",
    "answer": "If GPU rendering is absolutely necessary (in very specific corner cases), Nibi's AMD MI300A nodes or older NVIDIA GPUs (e.g., T4) should be used where available."
  },
  {
    "question": "Which clusters use JupyterLab for small-scale interactive visualization?",
    "answer": "Fir, Rorqual, and Narval use JupyterLab for small-scale interactive visualization."
  },
  {
    "question": "Which clusters use Open OnDemand for small-scale interactive visualization?",
    "answer": "Nibi and Trillium use Open OnDemand for small-scale interactive visualization."
  },
  {
    "question": "What are the initial steps to launch a JupyterLab instance for single-core visualization on Fir, Rorqual, or Narval?",
    "answer": "You need to sign in to the specific JupyterHub portal (e.g., https://jupyterhub.fir.alliancecan.ca), and in the job submission form, select a CPU account, 'None' for GPU configuration, '1' for Number of Cores, set your required Time and Memory, and select 'JupyterLab' under User interface."
  },
  {
    "question": "What are the two methods to start ParaView after launching a JupyterLab instance for single-core visualization?",
    "answer": "One method is to load the 'boost/1.85.0' and 'paraview/6.0.0' modules, then click the 'ParaView VNC' button, and finally click the ParaView shortcut. The alternative is to click your preferred desktop button, open a terminal inside it, type `module load boost/1.85.0 paraview/6.0.0`, and then `paraview`."
  }
]