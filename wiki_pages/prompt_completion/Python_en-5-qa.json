[
  {
    "question": "What can cause an `AttributeError` like `module \u2018numpy\u2019 has no attribute \u2018bool\u2019`?",
    "answer": "This error typically occurs because attributes that were deprecated in Numpy v1.20 have since expired in v1.24, and your code is attempting to access one of these removed attributes."
  },
  {
    "question": "How can I fix an `AttributeError` related to deprecated Numpy attributes?",
    "answer": "You can solve this by installing an older, compatible version of Numpy. For example, run `pip install --no-index 'numpy<1.24'`."
  },
  {
    "question": "What are the common causes for a `ModuleNotFoundError: No module named 'X'`?",
    "answer": "Common causes include the package not being installed or not visible to the Python interpreter, the module's import name not matching the package's actual name, or a broken virtual environment."
  },
  {
    "question": "What should I avoid doing to prevent `ModuleNotFoundError` issues?",
    "answer": "To prevent `ModuleNotFoundError` issues, avoid modifying the `PYTHONPATH` or `PATH` environment variables, and do not load a module while a virtual environment is already activated."
  },
  {
    "question": "What steps should I take to troubleshoot a `ModuleNotFoundError`?",
    "answer": "First, ensure you haven't modified `PYTHONPATH` or `PATH` or loaded modules with an activated virtual environment. Then, check if the package is installed with `pip list`, double-check the module name for case and underscores, and verify the module is imported at the correct level. If still in doubt, create a new virtual environment."
  },
  {
    "question": "What causes the `ImportError: numpy.core.multiarray failed to import` error?",
    "answer": "This error is caused by an incompatible version of Numpy being installed or used, especially due to the ABI-breaking changes introduced with the release of Numpy 2.0."
  },
  {
    "question": "How do I resolve `ImportError: numpy.core.multiarray failed to import` if I am using Numpy 2.0 with a wheel built for an older version?",
    "answer": "You must install a compatible, lower version of Numpy. For example, if a wheel was built with version 1.x but you have 2.x, install with `pip install --no-index 'numpy<2.0'`."
  },
  {
    "question": "What does the message `Defaulting to user installation because normal site-packages is not writeable` mean?",
    "answer": "This message indicates `pip`'s default behavior when no virtual environment is found or activated, and `pip` lacks the necessary permissions to install packages in the standard site-packages location."
  },
  {
    "question": "Why are local installations (`--user`) problematic for Python packages?",
    "answer": "Local installations dump dependencies into a single shared space, which can lead to complex import issues, runtime problems with Python packages, or version conflicts, often resulting in 'dependency hell'."
  },
  {
    "question": "When does a local Python package installation typically occur?",
    "answer": "Local installations can happen unexpectedly due to virtual environment errors or permissions issues, or intentionally when a user explicitly uses the `pip install --user` command."
  },
  {
    "question": "What is the recommended approach for managing Python packages instead of local installations?",
    "answer": "Using a virtual environment is highly recommended for better isolation, reproducibility, and effective management of different package versions across your various projects."
  },
  {
    "question": "How do I remove local Python package installations from my system?",
    "answer": "To effectively remove local installations, run the command `rm -vr ~/.local/bin ~/.local/lib/python*`."
  },
  {
    "question": "What should be done after removing local Python installations?",
    "answer": "After removing local installations, you should start over by creating a clean, fresh new virtual environment."
  }
]