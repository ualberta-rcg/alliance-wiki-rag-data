[
  {
    "question": "What is R?",
    "answer": "R is a statistical computing and graphics tool. It's a programming language combined with a graphical environment, a debugger, access to system functions, and the ability to execute scripts."
  },
  {
    "question": "Is R suitable for high-performance computing?",
    "answer": "While R was not developed for high-performance computing, its popularity in various scientific disciplines makes it an essential tool on supercomputers for academic research. Some functionalities written in C, compiled, and parallelized by threads allow for reasonable performance on a single compute node."
  },
  {
    "question": "How can users customize their R configuration?",
    "answer": "Users can customize their R configuration by installing packages in their personal directory from the Comprehensive R Archive Network (CRAN)."
  },
  {
    "question": "Where can I find information on running R scripts with Compute Canada?",
    "answer": "You can find useful information in Julie Fortin's blog post titled 'How to run your R script with Compute Canada'."
  },
  {
    "question": "How do I see a list of available R module versions?",
    "answer": "You can consult the list of available R module versions by launching the command 'module spider r'."
  },
  {
    "question": "How do I load a specific R module, for example, R version 4.0.2 with gcc 9.3.0?",
    "answer": "To load a particular R module, use a variant of the command 'module load gcc/9.3.0 r/4.0.2'."
  },
  {
    "question": "How do I start the R interpreter?",
    "answer": "After loading an R module, you can start the interpreter by typing 'R' in the command line."
  },
  {
    "question": "How do you quit the R interpreter?",
    "answer": "You can quit the R interpreter by typing 'q()' and pressing Enter."
  },
  {
    "question": "How do I execute R scripts?",
    "answer": "To execute R scripts, use the command 'Rscript' followed by the file containing the R commands, for example, 'Rscript computation.R'."
  },
  {
    "question": "What automatic options does the `Rscript` command pass to the R interpreter for batch processing?",
    "answer": "The `Rscript` command automatically passes the options `--slave` and `--no-restore` to the R interpreter for batch processing."
  },
  {
    "question": "Why are `--no-save` options used in batch processing with Rscript?",
    "answer": "The `--no-save` option, which is part of the `--no-restore` flag, prevents the creation of unnecessary workspace files during batch processing."
  },
  {
    "question": "Where should R calculations longer than two or three minutes be executed?",
    "answer": "Calculations lasting longer than two or three minutes should not be executed by a compute node but should be submitted to the scheduler."
  },
  {
    "question": "How do I install R packages from CRAN?",
    "answer": "To install packages from CRAN, you can use `install.packages` in an interactive R session on a login node."
  },
  {
    "question": "Why can't R packages be installed on compute nodes in batch or interactive tasks?",
    "answer": "R packages cannot be installed on compute nodes in batch or interactive tasks because compute nodes on most clusters do not have internet access."
  },
  {
    "question": "What is recommended before installing R packages developed with GNU compilers?",
    "answer": "It is recommended to load a `gcc` module before installing R packages developed with GNU compilers and always use the same version of `gcc`."
  },
  {
    "question": "How do you install a specific R package like 'sp' from CRAN?",
    "answer": "You can install a package like 'sp' by running `install.packages('sp', repos='https://cloud.r-project.org/')` in an R session on a login node."
  },
  {
    "question": "What happens if the 'repos' argument is not specified when installing R packages?",
    "answer": "If the `repos` argument is not specified, you will be asked to select a mirror for the download. Ideally, this mirror should be geographically close to the cluster you are using."
  },
  {
    "question": "What environment variable might be required before installing certain R packages?",
    "answer": "Before installation, some packages require the `TMPDIR` environment variable to be defined."
  },
  {
    "question": "How can I set up a local R library for a specific R version?",
    "answer": "You can set up a local R library by creating a directory like `mkdir -p ~/.local/R/$EBVERSIONR/` and then exporting it with `export R_LIBS=~/.local/R/$EBVERSIONR/`."
  },
  {
    "question": "How do you install a package into a user's local R library after setting up the `R_LIBS` environment variable?",
    "answer": "After setting `R_LIBS`, you can install a package into your local library using `R -e 'install.packages(\"sp\", repos=\"https://cloud.r-project.org/\")'`."
  },
  {
    "question": "What should be included in a submission script to ensure local R libraries are used?",
    "answer": "In a submission script, you must load the desired R module and configure the local library directory with `export R_LIBS=~/.local/R/$EBVERSIONR/`."
  },
  {
    "question": "What should be done if an R package depends on other system libraries?",
    "answer": "If an R package uses libraries already installed on the clusters, you should load the appropriate module before installing the package, if it's in the list of available software."
  },
  {
    "question": "How can you check which modules are currently loaded?",
    "answer": "You can check which modules are currently loaded using the command 'module list'."
  },
  {
    "question": "What should you do if an R package installation fails?",
    "answer": "If an R package installation fails, pay attention to the error message, as it might indicate other required modules."
  }
]