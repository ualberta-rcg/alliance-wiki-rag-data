[
  {
    "question": "What is OpenMM?",
    "answer": "OpenMM is a toolkit for molecular simulation."
  },
  {
    "question": "How can OpenMM be used?",
    "answer": "It can be used either as a standalone application for running simulations or as a library called from your own code."
  },
  {
    "question": "What makes OpenMM unique among MD simulation packages?",
    "answer": "OpenMM provides a combination of extreme flexibility (through custom forces and integrators), openness, and high performance (especially on recent GPUs)."
  },
  {
    "question": "What version of the OpenMM module is this example for?",
    "answer": "This example is for the openmm/7.7.0 module."
  },
  {
    "question": "How do you create and activate a Python virtual environment for this OpenMM example?",
    "answer": "First, load the python module with 'module load python', then create the virtual environment using 'virtualenv $HOME/env-parmed', and finally activate it with 'source $HOME/env-parmed/bin/activate'."
  },
  {
    "question": "What Python modules should be installed after activating the virtual environment?",
    "answer": "ParmEd and netCDF4 Python modules should be installed."
  },
  {
    "question": "How are ParmEd and netCDF4 installed within the virtual environment?",
    "answer": "Run 'pip install --no-index parmed==3.4.3 netCDF4'."
  },
  {
    "question": "What is the name of the job script provided for a simulation using one GPU?",
    "answer": "The job script is named `submit_openmm.cuda.sh`."
  },
  {
    "question": "What resources are requested in the `submit_openmm.cuda.sh` job script?",
    "answer": "The script requests 1 CPU per task, 1 GPU, 4000M memory per CPU, and a time limit of 1 hour (0-01:00:00)."
  },
  {
    "question": "Which modules are loaded in the `submit_openmm.cuda.sh` script?",
    "answer": "The script loads StdEnv/2020, gcc/9.3.0, cuda/11.4, openmpi/4.0.3, python/3.8.10, openmm/7.7.0, netcdf/4.7.4, hdf5/1.10.6, and mpi4py/3.0.3."
  },
  {
    "question": "What is the function of the `openmm_input.py` script?",
    "answer": "`openmm_input.py` is a Python script responsible for loading Amber files, creating the OpenMM simulation system, setting up integration, and running dynamics."
  },
  {
    "question": "Where can an example of `openmm_input.py` be found?",
    "answer": "An example is available at https://mdbench.ace-net.ca/mdbench/idbenchmark/?q=129."
  },
  {
    "question": "Who created the Molecular Dynamics Performance Guide for Alliance clusters?",
    "answer": "A team at ACENET created the Molecular Dynamics Performance Guide for Alliance clusters."
  },
  {
    "question": "Which software packages does the Molecular Dynamics Performance Guide help determine optimal conditions for?",
    "answer": "It can help determine optimal conditions for AMBER, GROMACS, NAMD, and OpenMM jobs."
  },
  {
    "question": "How many CPUs per GPU does OpenMM on the CUDA platform require?",
    "answer": "OpenMM on the CUDA platform requires only one CPU per GPU."
  },
  {
    "question": "Why does OpenMM on CUDA platform require only one CPU per GPU?",
    "answer": "It requires only one CPU per GPU because it does not use CPUs for calculations."
  },
  {
    "question": "What is the most efficient way to run OpenMM simulations?",
    "answer": "The most efficient way to run OpenMM simulations is to use a single GPU, even though it can use several GPUs in one node."
  },
  {
    "question": "Under what conditions does OpenMM run slightly faster on multiple GPUs?",
    "answer": "OpenMM runs slightly faster on multiple GPUs on nodes with NvLink, where GPUs are connected directly."
  },
  {
    "question": "Is there a significant speedup for OpenMM simulations on P100 GPUs without NvLink?",
    "answer": "Without NvLink, there is very little speedup of simulations on P100 GPUs."
  }
]