[
  {
    "question": "What is the purpose of the 'Large-scale interactive' tab?",
    "answer": "This tab describes interactive client-server setup on all HPC clusters, where a client runs on your computer, and the server runs on the remote cluster."
  },
  {
    "question": "Which HPC clusters support the interactive client-server setup described in the 'Large-scale interactive' tab?",
    "answer": "Rorqual, Nibi, Fir, Trillium, and Narval support this setup."
  },
  {
    "question": "What is a critical requirement for ParaView client and server versions to ensure compatibility?",
    "answer": "ParaView requires the same major version on the local client and the remote host to prevent incompatibility."
  },
  {
    "question": "What happens if the ParaView client and server major versions do not match?",
    "answer": "Incompatibility typically shows as a failed handshake when establishing the client-server connection."
  },
  {
    "question": "If the ParaView server is version 6.0.0, what client version is needed?",
    "answer": "To use ParaView server version 6.0.0 on the cluster, you need client version 6.0.x on your computer."
  },
  {
    "question": "What is the 'Remote Render Threshold' setting in ParaView preferences?",
    "answer": "It is an important setting in ParaView's preferences under 'Render View -> Remote/Parallel Rendering Options' that determines where small rendering tasks are performed."
  },
  {
    "question": "What is the effect of setting 'Remote Render Threshold' to its default (20MB) or similar value?",
    "answer": "Small rendering will be done on your computer's GPU, making rotation with a mouse fast, but anything modestly intensive (under 20MB) will be shipped to your computer, potentially slowing down visualization depending on your connection."
  },
  {
    "question": "What happens if the 'Remote Render Threshold' is set to 0MB?",
    "answer": "All rendering, including rotation, will be remote, utilizing cluster resources for everything, which is good for large data processing but may reduce interactivity."
  },
  {
    "question": "Can ParaView perform rasterization and ray tracing on cluster CPUs?",
    "answer": "Yes, you can do both rasterization and ray tracing on cluster CPUs, allocating as many cores as necessary to your rendering."
  },
  {
    "question": "Which modern CPU-based libraries offer performance similar to GPU-based rendering?",
    "answer": "Modern CPU-based libraries such as OSPRay and OpenSWR offer performance quite similar to GPU-based rendering."
  },
  {
    "question": "How does the ParaView server handle very large datasets for parallel rendering?",
    "answer": "Since the ParaView server uses MPI for distributed-memory processing, for very large datasets one can do parallel rendering on a large number of CPU cores, either on a single node, or scattered across multiple nodes."
  },
  {
    "question": "How can one estimate the number of necessary cores for rendering a dataset?",
    "answer": "The easiest way to estimate the number of necessary cores is to look at the amount of memory that you think you will need for your rendering and divide it by ~3.5 GB/core."
  },
  {
    "question": "What is the recommended memory allocation per core for software rendering?",
    "answer": "Since software rendering is CPU-intensive, it is not recommended to allocate more than 4GB/core."
  },
  {
    "question": "How many cores would be required for a 40GB dataset just to hold the data?",
    "answer": "A 40GB dataset would require at least 12 cores just to hold the data (40GB / 3.5 GB/core \u2248 11.4 cores)."
  },
  {
    "question": "Why is it important to allocate additional memory for filters and data processing?",
    "answer": "It is important to allocate some memory for filters and data processing because some operations, like a structured to unstructured dataset conversion, can increase your memory footprint by approximately 3X."
  },
  {
    "question": "What should you do if your ParaView server gets killed when processing data?",
    "answer": "If your ParaView server gets killed when processing data, you will need to increase the number of cores."
  },
  {
    "question": "What is the scheduling requirement for ParaView visualization on Trillium?",
    "answer": "On Trillium, you must schedule on whole nodes, i.e., in multiples of 192 cores."
  },
  {
    "question": "What is the minimum number of cores required for ParaView visualization on Trillium?",
    "answer": "The minimum example on Trillium will require 192 cores."
  },
  {
    "question": "What is the first step in the large-scale interactive visualization workflow?",
    "answer": "First, install on your computer the same ParaView version as the one available on the cluster you will be using. Next, log into the cluster and start a parallel CPU interactive job."
  },
  {
    "question": "What command is used to start a parallel CPU interactive job on a cluster?",
    "answer": "The command is `salloc --time=1:00:0 --ntasks=... --mem-per-cpu=3600 --account=def-someprof`."
  },
  {
    "question": "What command should be used to start a parallel CPU interactive job on Trillium for visualization using one node?",
    "answer": "On Trillium, the command will be `salloc --time=1:00:0 --ntasks=192 --account=def-someprof`."
  },
  {
    "question": "What module must be loaded on Trillium before attempting to load `paraview/6.0.0`?",
    "answer": "On Trillium, you must load `StdEnv/2023` before attempting to load `paraview/6.0.0`."
  },
  {
    "question": "After loading the ParaView module, what command is used to start the ParaView server?",
    "answer": "The command is `srun pvserver --force-offscreen-rendering --opengl-window-backend OSMesa`."
  },
  {
    "question": "What output indicates that the ParaView server is ready to accept client connections?",
    "answer": "The server will display messages like 'Waiting for client...' and 'Accepting connection(s): fc30669:11111'."
  },
  {
    "question": "What information needs to be noted from the ParaView server output for establishing an SSH tunnel?",
    "answer": "You need to make a note of the node (e.g., fc30669) and the port (usually 11111)."
  },
  {
    "question": "How do you link a local port on your computer to a remote port on the compute node using SSH?",
    "answer": "In a terminal on your computer (Mac/Linux; Windows using a terminal emulator), use the command: `ssh <username>@fir.alliancecan.ca -L 11111:fc30669:11111` (replacing 'fir' and 'fc30669' with actual values)."
  },
  {
    "question": "After establishing the SSH tunnel, how do you configure the ParaView client to connect to the remote server?",
    "answer": "Start ParaView on your computer, go to 'File -> Connect' or click the green 'Connect' button, then click 'Add Server'. Set name = fir (or similar), server type = Client/Server, host = localhost, port = 11111. Click 'Configure', select 'Manual', and click 'Save'."
  },
  {
    "question": "What happens in the first terminal window (where the server is running) once the ParaView client successfully connects?",
    "answer": "The first terminal window, which previously read 'Accepting connection', will now read 'Client connected'."
  }
]