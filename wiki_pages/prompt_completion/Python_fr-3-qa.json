[
  {
    "question": "What is the recommended approach for creating a virtual environment on Trillium?",
    "answer": "On Trillium, it is recommended to create a virtual environment on a login node in /home and activate this environment (with `source`) in the job script."
  },
  {
    "question": "Why can launching Python software and loading libraries be slow on parallel file systems?",
    "answer": "Parallel file systems are very efficient for reading or writing large data portions, but not for intensive use of small files, which causes slowdowns when launching Python and loading a virtual environment."
  },
  {
    "question": "How can slowdowns for Python tasks on a single compute node be mitigated?",
    "answer": "To counter slowdowns, especially for Python tasks on a single compute node, you can create your virtual environment inside your task using the local disk of the compute node."
  },
  {
    "question": "Is it efficient to recreate a virtual environment for each task on a compute node?",
    "answer": "It can be more efficient and often faster to recreate your virtual environment for each task on the local disk of the compute node than to use the parallel file system, even if it seems unreasonable."
  },
  {
    "question": "Where should a virtualenv be created when a task utilizes multiple nodes?",
    "answer": "A virtualenv must be created locally on each of the nodes used by the task, as access to virtualenv is per node."
  },
  {
    "question": "Can you provide an example of a job script for creating a virtual environment within a task?",
    "answer": "An example script named `submit_venv.sh` would include commands like `module load python/3.11`, `virtualenv --no-download $SLURM_TMPDIR/env`, `source $SLURM_TMPDIR/env/bin/activate`, `pip install --no-index --upgrade pip`, and `pip install --no-index -r requirements.txt`, followed by the Python execution."
  },
  {
    "question": "What is the purpose of the `requirements.txt` file when creating a virtual environment inside a job?",
    "answer": "The `requirements.txt` file ensures that your environment can be reproduced for other tasks by listing all required packages and their specific versions."
  },
  {
    "question": "How do you create a `requirements.txt` file for a package like TensorFlow from a login node?",
    "answer": "To create a `requirements.txt` for TensorFlow, you would load `python/3.11`, create a temporary virtual environment (`virtualenv --no-download $ENVDIR`), activate it, upgrade pip, install tensorflow (`pip install --no-index tensorflow`), then use `pip freeze --local > requirements.txt` before deactivating and removing the temporary environment."
  },
  {
    "question": "What kind of content would typically be found in a `requirements.txt` file generated for TensorFlow?",
    "answer": "A `requirements.txt` file generated for TensorFlow would list various packages and their specific versions, such as `absl_py==1.2.0+computecanada`, `tensorflow==2.9.0+computecanada`, `numpy==1.23.0+computecanada`, etc."
  },
  {
    "question": "What condition must be met for the virtual environment creation directives to work for all required packages?",
    "answer": "The directives for creating virtual environments in tasks require that all packages you need are available in the Python wheels provided by the system."
  },
  {
    "question": "What should be done if a required package is not available as a pre-built wheel?",
    "answer": "If a required package is not available in the provided wheels, you can pre-download it following the 'Pr\u00e9t\u00e9l\u00e9charger des paquets' procedure, or make a request to technical support if you believe the wheel should be provided."
  }
]