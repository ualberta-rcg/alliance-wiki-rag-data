[
  {
    "question": "What is Apache MXNet?",
    "answer": "Apache MXNet is a deep learning framework designed for both efficiency and flexibility, allowing users to mix symbolic and imperative programming."
  },
  {
    "question": "What are the core features of MXNet's architecture?",
    "answer": "At its core, MXNet contains a dynamic dependency scheduler that automatically parallelizes symbolic and imperative operations, and a graph optimization layer for fast and memory-efficient symbolic execution. It is also portable, lightweight, and scalable to many GPUs and machines."
  },
  {
    "question": "How can you list available MXNet wheels?",
    "answer": "You can list available wheels using the `avail_wheels mxnet` command."
  },
  {
    "question": "What information is provided by the `avail_wheels` command for MXNet?",
    "answer": "The command provides the name, version, Python version (python), and architecture (arch) of the available MXNet wheels."
  },
  {
    "question": "What versions of MXNet 1.9.1 are listed as available in the wheels?",
    "answer": "MXNet 1.9.1 is listed as available for Python 3.9 (cp39), Python 3.8 (cp38), and Python 3.10 (cp310), all with `avx2` architecture."
  },
  {
    "question": "What are the first steps to set up a Python virtual environment for MXNet installation?",
    "answer": "First, load the Python 3.10 module using `module load python/3.10`, then create a virtual environment with `virtualenv --no-download ~/env`, and finally activate it with `source ~/env/bin/activate`."
  },
  {
    "question": "How do you install MXNet and its Python dependencies within an activated virtual environment?",
    "answer": "From the activated virtual environment, use the command `pip install --no-index mxnet`."
  },
  {
    "question": "How can an MXNet installation be validated?",
    "answer": "An MXNet installation can be validated by running the Python command `python -c \"import mxnet as mx;print((mx.nd.ones((2, 3))*2).asnumpy());\"`."
  },
  {
    "question": "What is the purpose of the `mxnet-conv-ex.py` script?",
    "answer": "The `mxnet-conv-ex.py` script demonstrates a single Convolution layer operation, including defining symbolic variables, creating a convolution layer, selecting the execution device (CPU or GPU), binding the model, initializing data, and performing a forward pass."
  },
  {
    "question": "How does the `mxnet-conv-ex.py` script determine whether to use a CPU or GPU for execution?",
    "answer": "It determines the device by checking `mx.context.num_gpus()`. If greater than 0, it uses `mx.gpu()`; otherwise, it defaults to `mx.cpu()`."
  },
  {
    "question": "What SLURM directives are included in the `mxnet-conv.sh` script for a CPU job?",
    "answer": "The CPU job script includes `#SBATCH --job-name`, `#SBATCH --account`, `#SBATCH --time`, `#SBATCH --cpus-per-task`, and `#SBATCH --mem`."
  },
  {
    "question": "How is MXNet installed within the `mxnet-conv.sh` submission script?",
    "answer": "MXNet is installed using `pip install --no-index mxnet==1.9.1` within the generated virtual environment in `${SLURM_TMPDIR}`."
  },
  {
    "question": "What is the key difference in SLURM directives between the CPU and GPU `mxnet-conv.sh` submission scripts?",
    "answer": "The GPU submission script includes an additional directive: `#SBATCH --gres=gpu:1`, which requests one GPU."
  },
  {
    "question": "How do you submit the `mxnet-conv.sh` job script to the scheduler?",
    "answer": "The job is submitted to the scheduler using the command `sbatch mxnet-conv.sh`."
  },
  {
    "question": "What parallel implementations does MXNet use for CPU-based operations?",
    "answer": "For CPU-based operations like matrix multiplication and convolution, MXNet uses OpenMP and MKLDNN for parallel implementations."
  },
  {
    "question": "What parallel implementations does MXNet use for GPU-based operations?",
    "answer": "For GPU-based operations, MXNet uses CUDA and CUDNN for parallel implementations."
  },
  {
    "question": "What is the recommendation for training small-scale deep learning models with MXNet?",
    "answer": "When training small-scale models, it is strongly recommended to use multiple CPUs instead of a GPU."
  },
  {
    "question": "Why should users avoid requesting a GPU for small MXNet models on HPC clusters?",
    "answer": "Requesting a GPU for small models can lead to inefficient use of its compute capabilities, block resources needed by other users for large-scale computations, and unnecessarily consume allocation, affecting job priority."
  },
  {
    "question": "How can the `mxnet-example.sh` script be modified to run an MXNet job using only the CPU?",
    "answer": "To run using only the CPU, the line `#SBATCH --gres=gpu:1` should be removed from the `mxnet-example.sh` script."
  },
  {
    "question": "What is the purpose of the `mxnet-example.py` script in the high-performance section?",
    "answer": "The `mxnet-example.py` script demonstrates training a Convolutional Neural Network (CNN) for CIFAR10 classification, showcasing how to set up a model, trainer, and data loader, and perform a training loop, adaptable for both CPU and GPU."
  },
  {
    "question": "What dataset is used in the `mxnet-example.py` script for the CNN training example?",
    "answer": "The `mxnet-example.py` script uses the CIFAR10 dataset for training the Convolutional Neural Network."
  }
]