[
  {
    "question": "What is ACPYPE?",
    "answer": "ACPYPE (AnteChamber PYthon Parser interfacE) is a Python tool that uses Antechamber to generate topologies for chemical compounds and interfaces with other Python applications like CCPN and ARIA."
  },
  {
    "question": "Which simulation software does ACPYPE generate topologies for?",
    "answer": "ACPYPE generates topologies for CNS/XPLOR, GROMACS, CHARMM, and AMBER."
  },
  {
    "question": "What force field is ACPYPE based on?",
    "answer": "ACPYPE is based on the General Amber Force Field (GAFF)."
  },
  {
    "question": "With which force fields should ACPYPE be used?",
    "answer": "ACPYPE should only be used with compatible forcefields like AMBER and its variants."
  },
  {
    "question": "How is ACPYPE distributed for installation?",
    "answer": "ACPYPE is provided as Python wheels for StdEnv/2020 and StdEnv/2023 environments."
  },
  {
    "question": "What is the recommended environment for installing ACPYPE?",
    "answer": "It is recommended to install ACPYPE into a Python virtual environment."
  },
  {
    "question": "What module must be loaded before installing and using ACPYPE?",
    "answer": "The `openbabel` module must be loaded before installing ACPYPE and anytime it's used."
  },
  {
    "question": "What are the steps to create a virtual environment and install ACPYPE?",
    "answer": "1. `module load python openbabel`\n2. `virtualenv ~/venv_acpype`\n3. `source ~/venv_acpype/bin/activate`\n4. `pip install --no-index acpype`"
  },
  {
    "question": "How do you activate the ACPYPE virtual environment?",
    "answer": "You activate it by running `source ~/venv_acpype/bin/activate`."
  },
  {
    "question": "How can I view the available options and usage for the `acpype` command?",
    "answer": "Run `acpype --help` to display the usage and options."
  },
  {
    "question": "What types of input does ACPYPE accept?",
    "answer": "ACPYPE accepts input files like `.pdb`, `.mdl`, `.mol2`, or a SMILES string using the `-i` option."
  },
  {
    "question": "What are the possible charge methods in ACPYPE and which is the default?",
    "answer": "The charge methods are `gas`, `bcc`, and `user`, with `bcc` being the default."
  },
  {
    "question": "Which atom types can be specified in ACPYPE?",
    "answer": "You can specify `gaff`, `amber`, `gaff2`, or `amber2` for atom types, with `gaff2` as the default."
  },
  {
    "question": "What output topologies can ACPYPE generate?",
    "answer": "ACPYPE can generate `all` (default), `gmx`, `cns`, or `charmm` topologies."
  },
  {
    "question": "What AMBER-specific files does ACPYPE produce?",
    "answer": "ACPYPE produces `root_AC.inpcrd`, `root_AC.prmtop`, `root_AC.lib`, and `root_AC.frcmod` for AMBER."
  },
  {
    "question": "What GROMACS-specific files does ACPYPE produce?",
    "answer": "ACPYPE produces `root_GMX.gro`, `root_GMX.top`, `root_GMX.itp`, `root_GMX_OPLS.itp`, `em.mdp`, and `md.mdp` for GROMACS."
  },
  {
    "question": "When should ACPYPE be run as a non-interactive job?",
    "answer": "ACPYPE should be run as a non-interactive job for larger molecules or when generating topologies for several molecules."
  },
  {
    "question": "How can you generate a mol2 file from a SMILES string using `obabel`?",
    "answer": "You can use the command `obabel -:\"SMILES_string\" -i smi -o mol2 -O output.mol2 -h --gen3d`."
  },
  {
    "question": "Is it permissible to run ACPYPE on a login node for small molecules?",
    "answer": "Yes, for small molecules, it's permissible as the QM calculation typically takes less than two minutes, but the number of threads should be limited."
  },
  {
    "question": "How should the number of threads be limited when running ACPYPE on a login node?",
    "answer": "By running ACPYPE with `OMP_NUM_THREADS=2 acpype ...` to restrict it to two threads."
  },
  {
    "question": "What command is used to run ACPYPE on an `atp.sdf` file, limiting it to two threads?",
    "answer": "The command is `OMP_NUM_THREADS=2 acpype -i atp.sdf`."
  },
  {
    "question": "What is created in the current directory after a successful ACPYPE run, for example with an 'atp.sdf' input?",
    "answer": "A new directory named after the input file's basename with '.acpype' appended, such as `atp.acpype/`, is created containing all generated files."
  }
]