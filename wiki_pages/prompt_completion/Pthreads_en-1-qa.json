[
  {
    "question": "What are pthreads?",
    "answer": "Pthreads, short for POSIX threads, represent one of the earliest parallelization techniques."
  },
  {
    "question": "What assumption does pthreads parallelization rely on?",
    "answer": "Pthreads parallelization relies on the assumption of a shared memory environment."
  },
  {
    "question": "Where are pthreads typically used?",
    "answer": "Pthreads are typically used only on a single node, with the number of active threads limited by the number of available CPU cores on that node."
  },
  {
    "question": "What is the primary target language for pthreads?",
    "answer": "In practice, the main target language for pthreads is C."
  },
  {
    "question": "What parallelization alternatives are suggested for Fortran and C++ programmers?",
    "answer": "For Fortran programs, OpenMP is suggested, while C++ programmers might prefer constructs in the Boost threading library or those part of the C++11 standard due to consistency with object-oriented design."
  },
  {
    "question": "How do pthreads relate to later shared memory parallelization approaches like OpenMP?",
    "answer": "Pthreads served as the basis for later approaches like OpenMP and can be considered a toolkit of threading primitives offering general and low-level parallelization."
  },
  {
    "question": "What is the essential model for pthreads?",
    "answer": "The essential model for pthreads involves the dynamic spawning of lightweight sub-processes (threads) that asynchronously carry out operations and then are extinguished by rejoining the program's master process."
  },
  {
    "question": "What is a challenge when sharing data among pthreads?",
    "answer": "Any modifications of shared data among pthreads must be managed with care to avoid race conditions."
  },
  {
    "question": "What is software scalability in the context of parallelization?",
    "answer": "Scalability refers to how well a program is able to run in parallel."
  },
  {
    "question": "What is recommended after parallelizing software and ensuring its correctness?",
    "answer": "It is recommended to perform a scaling analysis to understand the software's parallel performance."
  },
  {
    "question": "What header file is necessary to use pthreads functions in a C program?",
    "answer": "To use pthreads functions and data structures in a C program, you need to include the header file <tt>pthread.h</tt>."
  },
  {
    "question": "How do you compile a C program that uses the pthread library?",
    "answer": "You need to compile your program with a special flag, for example, `gcc -pthread -o test threads.c`, so that it is linked with the pthread library."
  },
  {
    "question": "What are the different ways to specify the number of threads to be used in a program?",
    "answer": "The number of threads can be set via a command-line argument, an environment variable, or hard-coded into the source file."
  },
  {
    "question": "Describe the programming model for parallelizing a serial program using pthreads.",
    "answer": "In this model, threads are created by a parent (which can be a master or worker thread), carry out some work, and then are reabsorbed or joined back into the parent."
  },
  {
    "question": "Which function is used to create new threads in pthreads?",
    "answer": "New threads are created with the function <tt>pthread_create</tt>."
  },
  {
    "question": "What are the four arguments of the `pthread_create` function?",
    "answer": "The four arguments are: the unique identifier for the newly created thread, the set of attributes for this thread, the C function (start routine) that the thread will execute, and the argument for the start routine."
  },
  {
    "question": "Is `pthread_create` a blocking or non-blocking function?",
    "answer": "`pthread_create` is a non-blocking function, meaning the master thread continues its execution after creating worker threads."
  },
  {
    "question": "What is the purpose of the `pthread_join` function?",
    "answer": "`pthread_join` is a blocking function where the master thread waits for worker threads to finish executing their assigned function and rejoin the master thread."
  },
  {
    "question": "What does the variation in output order from worker threads indicate?",
    "answer": "The variation in output order indicates that the worker threads are running asynchronously and compete for access to shared resources like standard output."
  },
  {
    "question": "What is the basic lifecycle of a POSIX thread?",
    "answer": "The basic lifecycle of a POSIX thread involves the master thread creating a thread by assigning it a function to run, then waiting for the thread to finish and join back into the execution of the master thread."
  }
]