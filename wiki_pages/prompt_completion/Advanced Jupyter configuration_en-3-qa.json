[
  {
    "question": "How do you extract the hostname:port and token for JupyterLab when connecting from Windows?",
    "answer": "The hostname:port and token can be extracted from the first provided HTTP address after JupyterLab is launched, for example, from `http://node_name.int.cluster.computecanada.ca:8888/lab?token=...`."
  },
  {
    "question": "What MobaXTerm command is used to create an SSH tunnel to connect to JupyterLab from Windows?",
    "answer": "Open a new Terminal tab in MobaXTerm and use the command `ssh -L 8888:<hostname:port> <username>@<cluster>.computecanada.ca`."
  },
  {
    "question": "After creating an SSH tunnel from Windows, how do you access JupyterLab in your web browser?",
    "answer": "Open your web browser and navigate to `http://localhost:8888/?token=<token>`, replacing `<token>` with the value extracted from the JupyterLab launch URL."
  },
  {
    "question": "How do you shut down the JupyterLab server before its walltime limit?",
    "answer": "Press `Ctrl-C` twice in the terminal where the interactive job that launched JupyterLab was initiated."
  },
  {
    "question": "How do you shut down an SSH tunnel created with MobaXterm?",
    "answer": "Press `Ctrl-D` to shut down the tunnel."
  },
  {
    "question": "Why would someone add kernels to JupyterLab?",
    "answer": "Kernels can be added to support other programming languages, different Python versions, or persistent virtual environments with specific packages and libraries."
  },
  {
    "question": "What are the two main steps for installing a new kernel in JupyterLab?",
    "answer": "The two steps are: 1) Installing the packages that enable the language interpreter to communicate with the Jupyter interface, and 2) Creating a kernel spec file (`~/.local/share/jupyter/kernels`) that tells JupyterLab how to start communication with the interpreter."
  },
  {
    "question": "Where is the kernel spec file saved?",
    "answer": "The kernel spec file is saved in a subfolder of `~/.local/share/jupyter/kernels`."
  },
  {
    "question": "What are the prerequisites for configuring a Julia kernel?",
    "answer": "A Python virtual environment, a `kernels` folder, and the configuration must be done in a remote shell session on a login node because Julia package installation requires internet access."
  },
  {
    "question": "How do you load the Julia module to configure a Julia kernel?",
    "answer": "Use the command `module load julia`."
  },
  {
    "question": "How do you install IJulia for the Julia kernel?",
    "answer": "Run `echo -e 'using Pkg\nPkg.add(\"IJulia\")' | julia` after loading the Julia module and activating the Python virtual environment."
  },
  {
    "question": "What action is required after installing a Julia kernel before using it?",
    "answer": "It is important to start or restart a new JupyterLab session."
  },
  {
    "question": "How do you install additional Julia packages once the kernel is configured?",
    "answer": "Ensure the Julia module is loaded and, from a login node, run `echo -e 'using Pkg\nPkg.add(\"Glob\")' | julia` (replacing 'Glob' with the desired package name)."
  },
  {
    "question": "What are the initial steps to configure a Python virtual environment for a custom Python kernel?",
    "answer": "The steps include: starting from a clean Bash environment (if using Jupyter Terminal), loading a Python module (`module load python`), creating a new Python virtual environment (`virtualenv --no-download $HOME/jupyter_py3`), and activating it (`source $HOME/jupyter_py3/bin/activate`)."
  },
  {
    "question": "How do you create the common 'kernels' folder for JupyterLab?",
    "answer": "Execute the command `mkdir -p ~/.local/share/jupyter/kernels`."
  },
  {
    "question": "How do you install the `ipykernel` library for a Python kernel?",
    "answer": "Use the command `pip install --no-index ipykernel` within the activated Python virtual environment."
  },
  {
    "question": "How do you generate the kernel spec file for a Python kernel?",
    "answer": "Run `python -m ipykernel install --user --name <unique_name> --display-name \"Python 3.x Kernel\"`, replacing `<unique_name>` with a unique identifier for your kernel."
  },
  {
    "question": "How do you install more Python libraries into a configured virtual environment for a Python kernel?",
    "answer": "Activate the Python virtual environment and run `pip install --no-index <library_name>`, for example, `pip install --no-index numpy`."
  },
  {
    "question": "What are the prerequisites for configuring an R kernel?",
    "answer": "A Python virtual environment, a `kernels` folder, and the configuration must be performed in a remote shell session on a login node to access CRAN for R package installation."
  },
  {
    "question": "How do you load an R module to configure an R kernel?",
    "answer": "Use the command `module load r/4.1`."
  },
  {
    "question": "How do you install the R kernel dependencies such as `crayon`, `pbdZMQ`, and `devtools`?",
    "answer": "Start an R shell with `R --no-save` and then run `install.packages(c('crayon', 'pbdZMQ', 'devtools'), repos='http://cran.us.r-project.org')`."
  },
  {
    "question": "How do you install the R kernel itself?",
    "answer": "From within the R shell, execute `devtools::install_github(paste0('IRkernel/', c('repr', 'IRdisplay', 'IRkernel')))`."
  },
  {
    "question": "How do you install the R kernel spec file?",
    "answer": "From within the R shell, execute `IRkernel::installspec()`."
  },
  {
    "question": "Can R packages be installed from notebooks?",
    "answer": "No, R packages cannot be installed directly from notebooks because there is no access to CRAN from that environment."
  },
  {
    "question": "How do you install additional R packages once the R kernel is configured?",
    "answer": "Load the R module, start an R shell with `R --no-save`, and then run `install.packages('<package_name>', repos='http://cran.us.r-project.org')` (e.g., `install.packages('doParallel', repos='http://cran.us.r-project.org')`) from a login node."
  }
]