[
  {
    "question": "What is the initial step to configure a Python kernel in a new virtual environment if using Jupyter Terminal?",
    "answer": "Start from a clean Bash environment by running `env -i HOME=$HOME bash -l`."
  },
  {
    "question": "How do you load a Python module when setting up a Python kernel?",
    "answer": "Load a Python module using the command `module load python`."
  },
  {
    "question": "How do you create a new Python virtual environment for a Jupyter kernel?",
    "answer": "Use the command `virtualenv --no-download $HOME/jupyter_py3` to create a new Python virtual environment."
  },
  {
    "question": "What command activates a newly created Python virtual environment for Jupyter?",
    "answer": "Activate it with `source $HOME/jupyter_py3/bin/activate`."
  },
  {
    "question": "How do you create the common kernels folder required by all kernels in Jupyter?",
    "answer": "Create the folder by running `mkdir -p ~/.local/share/jupyter/kernels`."
  },
  {
    "question": "What library needs to be installed to configure a Python kernel?",
    "answer": "The `ipykernel` library needs to be installed using `pip install --no-index ipykernel`."
  },
  {
    "question": "How do you generate the kernel spec file for a Python kernel?",
    "answer": "Run `python -m ipykernel install --user --name <unique_name> --display-name \"Python 3.x Kernel\"`, replacing `<unique_name>` with a unique identifier."
  },
  {
    "question": "What is important to do after installing a Python kernel before using it?",
    "answer": "Start or restart a new JupyterLab session."
  },
  {
    "question": "How do you install additional Python libraries, like numpy, into an activated Python virtual environment for Jupyter?",
    "answer": "Use `pip install --no-index numpy` (replacing 'numpy' with the desired library) within the activated virtual environment."
  },
  {
    "question": "What are the prerequisites for configuring an R kernel?",
    "answer": "A Python virtual environment and a `kernels` folder are needed, and the configuration must be done in a remote shell session on a login node due to CRAN access."
  },
  {
    "question": "How do you load an R module for configuring an R kernel?",
    "answer": "Load an R module using the command `module load r/4.1`."
  },
  {
    "question": "What R packages are required dependencies for the R kernel and how are they installed?",
    "answer": "The dependencies `crayon`, `pbdZMQ`, and `devtools` are installed by starting an R shell (`R --no-save`) and running `install.packages(c('crayon', 'pbdZMQ', 'devtools'), repos='http://cran.us.r-project.org')`."
  },
  {
    "question": "How do you install the R kernel itself?",
    "answer": "Within the R shell, run `devtools::install_github(paste0('IRkernel/', c('repr', 'IRdisplay', 'IRkernel')))`."
  },
  {
    "question": "How do you install the R kernel spec file?",
    "answer": "From the R shell, execute `IRkernel::installspec()`."
  },
  {
    "question": "Where should R packages be installed from when configuring an R kernel?",
    "answer": "R packages should be installed from a login node because there is no access to CRAN from notebooks."
  },
  {
    "question": "How can you install additional R packages, such as 'doParallel', for use with an R kernel?",
    "answer": "First, load the R module (`module load r/4.1`), then start an R shell (`R --no-save`) and run `install.packages('doParallel', repos='http://cran.us.r-project.org')`."
  },
  {
    "question": "Why would you convert a Jupyter notebook to a Python script?",
    "answer": "For longer analysis or runs, notebooks need to be converted to Python scripts to be submitted as non-interactive jobs."
  },
  {
    "question": "How do you install `nbconvert` to convert Jupyter notebooks to Python scripts?",
    "answer": "From a login node with an activated virtual environment, run `pip install --no-index nbconvert`."
  },
  {
    "question": "What command converts a Jupyter notebook file, like `mynotebook.ipynb`, into a Python script?",
    "answer": "Use `jupyter nbconvert --to python mynotebook.ipynb`."
  },
  {
    "question": "How do you execute a converted Python script (originally a Jupyter notebook) within a submission script?",
    "answer": "Include `python mynotebook.py` in your submission script."
  },
  {
    "question": "How do you submit a non-interactive job containing a converted Python script?",
    "answer": "Submit the job using `sbatch my-submit.sh` (where `my-submit.sh` is your submission script)."
  }
]