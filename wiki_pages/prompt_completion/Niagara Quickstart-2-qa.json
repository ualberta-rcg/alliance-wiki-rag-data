[
  {
    "question": "What is the purpose of the `module load <module-name>` command?",
    "answer": "The `module load <module-name>` command is used to make particular software available."
  },
  {
    "question": "How do you remove currently loaded software modules?",
    "answer": "To remove currently loaded modules, use the command `module purge`."
  },
  {
    "question": "How can you list all available software packages?",
    "answer": "You can list available software packages using `module spider` or `module spider <module-name>` for specific packages."
  },
  {
    "question": "Which command lists currently loaded software modules?",
    "answer": "The `module list` command shows a list of loaded modules."
  },
  {
    "question": "What environment variables do modules modify?",
    "answer": "Modules modify common environment variables like PATH and LD_LIBRARY_PATH, and also create a SCINET_MODULENAME_ROOT variable for accessing software directories like /include and /lib."
  },
  {
    "question": "Are there abbreviations for module commands?",
    "answer": "Yes, `ml` is an abbreviation for `module list`, and `ml <module-name>` is an abbreviation for `module load <module-name>`."
  },
  {
    "question": "What are the two main software stacks available on Niagara?",
    "answer": "The two main software stacks available on Niagara are the Niagara software stack (NiaEnv) and the standard Alliance software stack (CCEnv)."
  },
  {
    "question": "How do you load the Niagara software stack?",
    "answer": "The Niagara software stack is available by default, but if needed, it can be reloaded with `module load NiaEnv`."
  },
  {
    "question": "How do you load the Alliance software stack with AVX512 support?",
    "answer": "To load the Alliance software stack with AVX512 support, use `module load CCEnv arch/avx512`."
  },
  {
    "question": "Should modules be loaded in the `.bashrc` file?",
    "answer": "No, it is advised against loading modules in your `.bashrc` file as it can lead to very confusing behavior."
  },
  {
    "question": "Where should run-specific modules be loaded?",
    "answer": "Run-specific modules should be loaded inside your job submission script."
  },
  {
    "question": "Why is it recommended to be explicit about module versions?",
    "answer": "It is usually better to be explicit about module versions (e.g., `intel/2018.2` instead of `intel`) for future reproducibility."
  },
  {
    "question": "How do you resolve module dependencies?",
    "answer": "Module dependencies can be solved by using `module spider`."
  },
  {
    "question": "What compilers are available on Niagara for compiled software?",
    "answer": "The Intel compilers (`icc` for C, `icpc` for C++, `ifort` for Fortran) and the GNU compiler suite (`gcc`, `g++`, `gfortran`) are available."
  },
  {
    "question": "How can you make Intel compilers available?",
    "answer": "Loading an `intel` module makes the Intel compilers available."
  },
  {
    "question": "What open-source interpreted software is available on Niagara?",
    "answer": "Open-source interpreted, interactive software like Python, R, Julia, and Octave are available."
  },
  {
    "question": "Can users run commercial software on Niagara?",
    "answer": "Possibly, but users generally have to bring their own license for commercial software and may need to connect to an external license server using SSH tunneling."
  },
  {
    "question": "What types of commercial software are installed by default on Niagara?",
    "answer": "The only commercial software installed by default is software that benefits everyone, such as compilers, math libraries, and debuggers."
  },
  {
    "question": "Why does SciNet not provide licenses for all commercial software?",
    "answer": "SciNet has an extremely large and broad user base, so they cannot provide licenses for everyone's favorite software."
  },
  {
    "question": "What are the optimization flags for Intel compilers on Niagara?",
    "answer": "For Intel compilers, the optimization flags are `-O3 -xHost`."
  },
  {
    "question": "What optimization flags should be used with GCC on Niagara?",
    "answer": "If compiling with GCC, the optimization flags would be `-O3 -march=native`."
  },
  {
    "question": "Why is it important to test your code before submitting jobs?",
    "answer": "You should test your code to ensure it's correct and to understand the resources it needs before submitting it to the cluster."
  },
  {
    "question": "Where can small test jobs be run on Niagara?",
    "answer": "Small test jobs, running no more than a couple of minutes, taking at most 1-2GB of memory, and using no more than a couple of cores, can be run on the login nodes."
  },
  {
    "question": "How can you run the DDT debugger on the login nodes?",
    "answer": "You can run the DDT debugger on the login nodes after loading its module with `module load ddt`."
  },
  {
    "question": "How do you request an interactive debug job for short tests?",
    "answer": "Request an interactive debug job with the `debugjob N` command, where N is the number of nodes (N=1 for 1 hour, N=4 for 30 minutes)."
  },
  {
    "question": "How can you request an interactive job from the regular queue?",
    "answer": "You can request an interactive job from the regular queue using `salloc --nodes N --time=M:00:00`, where N is the number of nodes and M is the number of hours."
  }
]