[
  {
    "question": "What are MPI compiler wrappers?",
    "answer": "MPI library packages typically provide compiler wrappers, which are not compilers themselves but call other compilers while ensuring that the compiler receives MPI-specific flags."
  },
  {
    "question": "What is the purpose of MPI compiler wrappers?",
    "answer": "MPI compiler wrappers call other compilers and ensure that these compilers receive the specific flags required for MPI programming."
  },
  {
    "question": "Which MPI compiler wrapper is used for C?",
    "answer": "The `mpicc` wrapper is used for C programs."
  },
  {
    "question": "Which MPI compiler wrapper is used for C++?",
    "answer": "The `mpicxx` wrapper is used for C++ programs."
  },
  {
    "question": "Which MPI compiler wrappers are available for Fortran?",
    "answer": "For Fortran, `mpifort`, `mpif77`, and/or `mpif90` wrappers are available."
  },
  {
    "question": "What does the `--showme` option do for Open MPI compiler wrappers?",
    "answer": "For Open MPI, the `--showme` option prints the name of the compiler that will be called and the additional options that will be appended to the command."
  },
  {
    "question": "How do MPI compiler wrappers determine which compiler to use?",
    "answer": "MPI compiler wrappers will always use the compiler and its version that were loaded via the `module load` command."
  },
  {
    "question": "What output is generated by `mpicc -showme` when `intel/2020.1.217` and `openmpi/4.0.3` modules are loaded?",
    "answer": "When `intel/2020.1.217` and `openmpi/4.0.3` modules are loaded, `mpicc -showme` outputs `icc -I/cvmfs/.../intel2020/openmpi/4.0.3/include -L/cvmfs/.../intel2020/openmpi/4.0.3/lib -lmpi`."
  },
  {
    "question": "What output is generated by `mpicc -showme` when `gcc/9.3.0` and `openmpi/4.0.3` modules are loaded?",
    "answer": "When `gcc/9.3.0` and `openmpi/4.0.3` modules are loaded, `mpicc -showme` outputs `gcc -I/.../gcc9/openmpi/4.0.3/include -L/cvmfs/.../gcc9/openmpi/4.0.3/lib -lmpi`."
  },
  {
    "question": "What are some additional considerations for developing robust MPI applications, beyond basic design and syntax?",
    "answer": "Other considerations include `MPI_Send`/`MPI_Recv` variants, collective communication, communicators and topologies, unilateral communication and MPI-2 features, derived data types, performance, debugging, and the Boost MPI tutorial (in French)."
  },
  {
    "question": "Which recommended reading provides complete information on Fortran, C, and C++ interfaces with MPI?",
    "answer": "The book \"Using MPI: Portable Parallel Programming with the Message-Passing Interface\" by Gropp, Lusk, & Skjellum (2nd ed., 1999) offers complete information on Fortran, C, and C++ interfaces."
  },
  {
    "question": "Which recommended reading offers an MPI tutorial specifically with the C language?",
    "answer": "Peter S. Pacheco's \"Parallel Programming with MPI\" (1997) is a recommended tutorial using the C language."
  },
  {
    "question": "Where can one find an MPI tutorial from Lawrence Livermore National Labs?",
    "answer": "Blaise Barney's \"Message Passing Interface (MPI)\" tutorial from Lawrence Livermore National Labs is a recommended resource."
  },
  {
    "question": "What online resource is recommended for MPI tutorials?",
    "answer": "The website `mpitutorial.com` by Wes Kendall and others is a recommended online resource for MPI tutorials."
  },
  {
    "question": "Is there a recommended MPI training resource available in French?",
    "answer": "Yes, the \"Formation 'MPI'\" from the Institut du d\u00e9veloppement et des ressources en informatique scientifique (IDRIS) is a recommended MPI training resource in French."
  }
]