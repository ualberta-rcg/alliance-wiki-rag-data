[
  {
    "question": "What is GDB used for?",
    "answer": "GDB is a debugger used to investigate software problems."
  },
  {
    "question": "What does the acronym GDB stand for?",
    "answer": "GDB stands for 'GDB: The GNU Project Debugger'."
  },
  {
    "question": "What is the primary function of a debugger?",
    "answer": "A debugger makes it possible to quickly find the cause of a problem in a piece of software."
  },
  {
    "question": "What common software issue is GDB often used to resolve?",
    "answer": "GDB is often used to resolve segmentation faults."
  },
  {
    "question": "Which tool is recommended for resolving memory-related problems like memory leaks?",
    "answer": "Valgrind is recommended for problems relating to memory, such as a memory leak."
  },
  {
    "question": "How do you compile a program to include debugging symbols for GDB?",
    "answer": "You compile a program using the `-g` option (e.g., `g++ -g program.cpp -o program`) to include debugging symbols."
  },
  {
    "question": "How do you start a program within GDB?",
    "answer": "You can start GDB with the program using `gdb ./program` and then type `run` at the `(gdb)` prompt."
  },
  {
    "question": "What caused the segmentation fault in the provided C++ example program?",
    "answer": "The segmentation fault in the example program was caused by line 15, `cout << numbers[1000000] << endl;`, which tried to access an index (1000000) that was out of bounds for an array containing only 1000 elements."
  },
  {
    "question": "How can you activate the creation of core files for debugging?",
    "answer": "To activate the creation of core files, you must use the command `ulimit -c unlimited`."
  },
  {
    "question": "How do you use GDB to analyze a core file from a terminated program?",
    "answer": "You can analyze a core file by starting GDB with the program executable (e.g., `gdb -q ./program`) and then using the `core-file` command (e.g., `core-file core.18246`) to load the core dump."
  },
  {
    "question": "What information is needed to debug an already running process with GDB?",
    "answer": "To debug an already running process with GDB, you first need its process ID (PID)."
  },
  {
    "question": "How do you attach GDB to a running process?",
    "answer": "You can attach GDB to a running process by using the command `gdb attach <process_ID>`, for example, `gdb attach 12691`."
  }
]