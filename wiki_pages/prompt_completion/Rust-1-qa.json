[
  {
    "question": "What kind of programming language is Rust?",
    "answer": "Rust is a multi-paradigm, high-level, general-purpose programming language."
  },
  {
    "question": "What key aspects does Rust emphasize?",
    "answer": "Rust emphasizes performance, type safety, and concurrency."
  },
  {
    "question": "How does Rust ensure memory safety without a garbage collector?",
    "answer": "Rust enforces memory safety, meaning all references point to valid memory, without requiring a garbage collector or reference counting."
  },
  {
    "question": "How is the Rust compiler made available?",
    "answer": "The Rust compiler is available as a module."
  },
  {
    "question": "What command can be used to find information about the Rust module?",
    "answer": "You can use the command `module spider rust`."
  },
  {
    "question": "What is a package written in Rust called?",
    "answer": "A package written in Rust is called a 'crate'."
  },
  {
    "question": "What is the first step to install a Rust crate?",
    "answer": "The first step is to load the required modules using `module load rust`."
  },
  {
    "question": "How do you build and install a Rust crate locally?",
    "answer": "You build and install a crate locally using the command `cargo install ungoliant`."
  },
  {
    "question": "From which node type must a Rust crate be installed locally?",
    "answer": "Building and installing a crate locally must be done from a login node."
  },
  {
    "question": "How can you test a newly installed Rust binary like 'ungoliant'?",
    "answer": "You can test the binary by running `$HOME/.cargo/bin/ungoliant -h`."
  },
  {
    "question": "What command can be used to add the `.cargo/bin` directory to your PATH environment variable?",
    "answer": "You can add `.cargo/bin` to your `$PATH` with: `export PATH=\"$HOME/.cargo/bin:$PATH\"`."
  },
  {
    "question": "Why might someone need to use the Rust nightly compiler?",
    "answer": "The Rust nightly compiler may be required if certain crates use optimization features that are not yet stable and thus not included in the stable release."
  },
  {
    "question": "How do you install the Rust nightly compiler as a local module?",
    "answer": "You install it using the command `eb Rust-1.53.0.eb --try-software-version=nightly --disable-enforce-checksums`."
  },
  {
    "question": "What command loads the Rust nightly compiler after it's been installed locally?",
    "answer": "You load the local module using `module load rust/nightly`."
  }
]