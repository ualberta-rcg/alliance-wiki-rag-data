[
  {
    "question": "What kind of programming language is Rust?",
    "answer": "Rust is a multi-paradigm, high-level, general-purpose programming language."
  },
  {
    "question": "What does Rust emphasize?",
    "answer": "Rust emphasizes performance, type safety, and concurrency."
  },
  {
    "question": "How does Rust enforce memory safety?",
    "answer": "Rust enforces memory safety without requiring the use of a garbage collector or reference counting."
  },
  {
    "question": "Is the Rust compiler available as a module?",
    "answer": "Yes, the Rust compiler is available as a module."
  },
  {
    "question": "How can you find information about the Rust module?",
    "answer": "You can use the command `module spider rust`."
  },
  {
    "question": "What is a package written in Rust called?",
    "answer": "A package written in Rust is called a 'crate'."
  },
  {
    "question": "What is the first step to install a crate from Crates.io?",
    "answer": "The first step is to load the required modules using `module load rust`."
  },
  {
    "question": "Where must a crate be built and installed locally from Crates.io?",
    "answer": "It must be done from a login node."
  },
  {
    "question": "How do you install a crate named 'ungoliant' from Crates.io?",
    "answer": "You use the command `cargo install ungoliant`."
  },
  {
    "question": "How do you test the binary of an installed crate like 'ungoliant'?",
    "answer": "You can test it using `$HOME/.cargo/bin/ungoliant -h`."
  },
  {
    "question": "How can you add the `.cargo/bin` directory to your `$PATH`?",
    "answer": "You can add it with the command `export PATH=\"$HOME/.cargo/bin:$PATH\"`."
  },
  {
    "question": "What is the first step to install a crate from a Git repository?",
    "answer": "The first step is to load the required modules using `module load rust`."
  },
  {
    "question": "Where must a crate from a Git repository be built and installed locally?",
    "answer": "This must be done from a login node."
  },
  {
    "question": "How do you install a crate locally from a Git repository?",
    "answer": "You use the command `cargo install --git https://github.com/username/repo-name`."
  },
  {
    "question": "How do you test the binary after installing a crate from a Git repository?",
    "answer": "You can test it using `$HOME/.cargo/bin/<binname> -h`."
  },
  {
    "question": "Why might someone need the Rust nightly compiler?",
    "answer": "Someone might need the Rust nightly compiler because some optimization features are not yet stable in the stable release, but some crates make use of them."
  },
  {
    "question": "How do you install the Rust nightly compiler locally?",
    "answer": "You install it as a local module using `eb Rust-1.53.0.eb --try-software-version=nightly --disable-enforce-checksums`."
  },
  {
    "question": "How do you load the local Rust nightly module?",
    "answer": "You load it with the command `module load rust/nightly`."
  },
  {
    "question": "Why would you clean up Cargo cache and registry?",
    "answer": "Cargo cache and registry can consume a lot of space, so cleaning them up reclaims space."
  },
  {
    "question": "How do you reclaim space by removing the Cargo registry?",
    "answer": "You can reclaim space by removing the registry with `rm -r ~/.cargo/registry`."
  }
]