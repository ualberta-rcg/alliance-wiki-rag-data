[
  {
    "question": "What is the recommended workaround for META farms exceeding the 1000-job limit on clusters like Nibi and Rorqual?",
    "answer": "For farms with more than 1000 jobs, you should repeatedly execute `submit.run 1000` and then `resubmit.run 1000` as needed, ensuring each command is run only after the previous farm has finished."
  },
  {
    "question": "How can the resubmission process for particularly large META farms be automated?",
    "answer": "For very large farms, you can utilize the advanced feature 'Resubmitting failed cases automatically' to fully automate the farm resubmission steps."
  },
  {
    "question": "What is a crucial first step before submitting a large production run with META?",
    "answer": "Always start with a small test run to make sure everything works correctly before submitting a large production run."
  },
  {
    "question": "How can individual cases be tested in the META package?",
    "answer": "You can test individual cases by reserving an interactive node with `salloc`, navigating to the farm directory, and executing commands like `./single_case.sh table.dat 1` for specific cases."
  },
  {
    "question": "What efficiency considerations are important for META farms with over 10,000 cases?",
    "answer": "For farms with over 10,000 cases, it's crucial to minimize the number of files and directories created during execution to ensure it runs as efficiently as possible."
  },
  {
    "question": "How should output files be managed for optimal efficiency in large META farms?",
    "answer": "Instruct your code to append to existing files (one per metajob) instead of creating a separate file for each case, and ensure results from different metajobs are not mixed in a single output file."
  },
  {
    "question": "Should a separate subdirectory be created for each case to maximize efficiency in large META farms?",
    "answer": "No, while creating a separate subdirectory for each case is the default for safety, avoiding it can improve efficiency for very large farms."
  },
  {
    "question": "Can you provide an example of how `single_case.sh` can be optimized for a very large farm where the code appends to output files?",
    "answer": "An optimized `single_case.sh` could execute `/path/to/your/code $COMM -o output.$METAJOB_ID`, assuming the code accepts the output file name via `-o` and appends to it."
  },
  {
    "question": "Where can users find more advanced features and troubleshooting tips for META-Farm?",
    "answer": "Users can find more detailed discussion of advanced features and troubleshooting suggestions in 'META-Farm: Advanced features and troubleshooting'."
  },
  {
    "question": "Who should be contacted for additional help with the META package?",
    "answer": "For more help, contact technical support, mentioning the package name (META) and the name of the staff member who wrote the software (Sergey Mashchenko)."
  },
  {
    "question": "In META-Farm, what is defined as a 'case'?",
    "answer": "A 'case' is one independent computation, with `table.dat` listing one case per line."
  },
  {
    "question": "What does 'farming' (verb) mean in the context of META?",
    "answer": "'Farming' (verb) means running many jobs on a cluster to carry out independent (but related) computations of the same kind."
  },
  {
    "question": "What does 'farm' (noun) refer to in the META package?",
    "answer": "A 'farm' (noun) refers to the directory and files involved in running one instance of the META package."
  },
  {
    "question": "What is a 'metajob' in META-Farm?",
    "answer": "A 'metajob' is a job that can process multiple cases (independent computations) from `table.dat`."
  },
  {
    "question": "Describe 'META mode' in the context of the META package.",
    "answer": "'META mode' is the mode of operation of the package in which each job can process multiple cases from `table.dat`."
  },
  {
    "question": "What defines 'SIMPLE mode' in the META package?",
    "answer": "'SIMPLE mode' is the mode of operation of the package in which each job will process only one case from `table.dat`."
  }
]