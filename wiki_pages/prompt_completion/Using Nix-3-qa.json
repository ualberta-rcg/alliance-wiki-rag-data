[
  {
    "question": "What aliases are available for default Python versions in Nixpkgs?",
    "answer": "The aliases `python` and `python<major>` are provided for default `python<major><minor>` versions."
  },
  {
    "question": "What does `pythonPackages<major><minor>` refer to in Nixpkgs?",
    "answer": "`pythonPackages<major><minor>` is an alias for `python<major><minor>.pkgs`."
  },
  {
    "question": "How can you build your own Python packages using Nixpkgs?",
    "answer": "You can use the `python<major><minor>.pkgs.buildPythonPackage` function to build your own Python packages."
  },
  {
    "question": "What R-related attributes does Nixpkgs provide?",
    "answer": "Nixpkgs provides `R` (a composition providing R), `rstudio` (a composition providing RStudio), `rPackages` (the set of R packages), `rWrapper` (wraps R with `R_LIBS`), and `rstudioWrapper` (wraps RStudio with `R_LIBS`)."
  },
  {
    "question": "How do you examine the content of an R package like `exams` using Nix?",
    "answer": "You can use `nix build rPackages.exams -o exams` to build the package and then `cat exams/library/exams/NEWS` to view its content."
  },
  {
    "question": "How can a custom R environment be created with specific R libraries using a `.nix` file?",
    "answer": "A custom R environment can be created by overriding `rWrapper` in a `.nix` file, for example: `with import <nixpkgs> {}; rWrapper.override { packages = with rPackages; [ ... list of R packages ... ]; }`."
  },
  {
    "question": "What function is available for building custom R packages in Nixpkgs?",
    "answer": "The `rPackages.buildRPackage` function can be used to build your own R packages."
  },
  {
    "question": "What Haskell-related attributes are provided by Nixpkgs?",
    "answer": "Nixpkgs provides `haskell.compiler.ghc<major><minor><patch>` for the GHC compiler, `haskell.packages.ghc<major><minor><patch>` for the set of Haskell packages, `haskell.packages.ghc<major><minor><patch>.ghc.withPackages` for wrapping GHC with packages, and `haskell.packages.ghc<major><minor><patch>.ghc.withHoogle` for wrapping GHC with packages, Hoogle, and documentation indices."
  },
  {
    "question": "How can you run a program provided by a Haskell package, such as `pandoc` with GHC 8.6.4?",
    "answer": "You can run it directly using `nix run haskell.packages.ghc864.pandoc`."
  },
  {
    "question": "How do you create a GHC environment with a specific set of Haskell packages using a `.nix` file?",
    "answer": "You can define it in a `.nix` file using a structure like: `with import <nixpkgs> {}; haskell.packages.ghc864.ghc.withPackages (packages: with packages; [ ... list of Haskell packages ... ]);}`."
  },
  {
    "question": "What does the `haskellPackages` alias refer to?",
    "answer": "The alias `haskellPackages` gives a default `haskell.packages.ghc<major><minor><patch>` version."
  },
  {
    "question": "What is the purpose of `haskell.lib` in Nixpkgs?",
    "answer": "The attributes in `haskell.lib` contain useful attributes for tweaking Haskell packages, such as enabling profiling."
  },
  {
    "question": "Where can a user find a video tutorial on fixing broken Haskell packages?",
    "answer": "The upstream maintainer provides a useful YouTube video at `https://www.youtube.com/watch?v=KLhkAEk8I20` on how to fix broken Haskell packages."
  },
  {
    "question": "What Emacs-related attributes are available in Nixpkgs?",
    "answer": "Nixpkgs provides `emacs<major><minor>` for the Emacs editor, `emacs<major><minor>Packages` for the set of Emacs packages, and `emacs<major><minor>Packages.emacsWithPackages` for wrapping Emacs to enable packages."
  },
  {
    "question": "What suffix should be appended for older versions of Emacs packages in Nixpkgs?",
    "answer": "For older versions of Nixpkgs, an `Ng` suffix should be appended (e.g., `emacs25Ng` and `emacs25PackagesNg`)."
  },
  {
    "question": "How can you inspect the content of an Emacs package like `magit` for Emacs 25?",
    "answer": "You can build it with `nix build nixpkgs.emacs25Packages.magit -o magit` and then examine its files, for example `cat magit/share/emacs/site-lisp/elpa/magit*/AUTHORS.md`."
  },
  {
    "question": "How can a composition be created that provides Emacs with a specific set of Emacs packages enabled using a `.nix` file?",
    "answer": "You can use a `.nix` file with the format: `with import <nixpkgs> {}; emacs25Packages.emacsWithPackages (packages: with packages; [ ... list of emacs packages ... ]);}`."
  }
]