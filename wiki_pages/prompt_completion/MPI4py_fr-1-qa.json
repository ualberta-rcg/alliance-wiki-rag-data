[
  {
    "question": "What is MPI for Python?",
    "answer": "MPI for Python provides a Python interface for the MPI (Message Passing Interface) communication standard, enabling Python applications to use multiple processors on workstations, clusters, and supercomputers."
  },
  {
    "question": "How is `mpi4py` categorized in this environment?",
    "answer": "In this environment, `mpi4py` is a module and not a precompiled package (wheel) like most Python packages."
  },
  {
    "question": "How can I find the available versions of `mpi4py`?",
    "answer": "To find the available versions, use the command `module spider mpi4py`."
  },
  {
    "question": "How do I get more information about a specific `mpi4py` version?",
    "answer": "For more information on a particular version, use `module spider mpi4py/X.Y.Z`, replacing `X.Y.Z` with the version number, for example `4.0.0`."
  },
  {
    "question": "What is the first step to run an `mpi4py` 'Hello World' example?",
    "answer": "First, start a short interactive task using `salloc --account=<your account> --ntasks=5`."
  },
  {
    "question": "Which modules should be loaded for the 'Hello World' example?",
    "answer": "Load the `mpi4py/4.0.0` and `python/3.12` modules."
  },
  {
    "question": "How do you perform a 'Hello World' test with `mpi4py`?",
    "answer": "Run the command `srun python -m mpi4py.bench helloworld`."
  },
  {
    "question": "What does the 'Hello World' example output indicate about task distribution?",
    "answer": "In this example, two nodes (node1 and node3) were allocated and tasks were distributed across the available resources."
  },
  {
    "question": "What should I do with a Python virtual environment when `mpi4py` is a dependency of another package?",
    "answer": "Deactivate any active Python virtual environment using `test $VIRTUAL_ENV && deactivate` before loading the `mpi4py` module, then activate it again once the module is loaded."
  },
  {
    "question": "Which modules need to be loaded when `mpi4py` is a dependency for another package?",
    "answer": "Load the `mpi4py/4.0.0` and `python/3.12` modules."
  },
  {
    "question": "How can I check if the `mpi4py` module is visible to `pip`?",
    "answer": "Use the command `pip list | grep mpi4py` to verify visibility."
  },
  {
    "question": "How do I confirm that the loaded Python module has access to `mpi4py`?",
    "answer": "Run `python -c 'import mpi4py'` to confirm access; if no error occurs, everything is fine."
  },
  {
    "question": "What is the next step after verifying `mpi4py` when it's a dependency?",
    "answer": "After verification, create a virtual environment and install the necessary packages."
  },
  {
    "question": "Where can I find more information about executing MPI tasks?",
    "answer": "For more information, see 'MPI job' and 'Advanced MPI scheduling'."
  },
  {
    "question": "How do you prepare Python code to distribute a NumPy array using `mpi4py` on CPU?",
    "answer": "Prepare a Python code in a file named `mpi4py-np-bc.py` that imports `mpi4py.MPI` and `numpy`, then uses `comm.Bcast` to distribute an array from rank 0."
  },
  {
    "question": "On what tutorial is the `mpi4py` NumPy array distribution example based?",
    "answer": "This example is based on the `mpi4py` tutorial for running Python scripts with MPI."
  },
  {
    "question": "How do you prepare a SLURM script for a distributed `mpi4py` CPU task?",
    "answer": "Prepare a script named `submit-mpi4py-distributed.sh` with SBATCH directives for account, time, number of tasks, memory per CPU, module loads (StdEnv/2023, gcc, mpi4py/4.0.0, python/3.12), virtual environment creation, numpy installation, and running the Python script."
  },
  {
    "question": "How do you prepare a SLURM script for an `mpi4py` CPU task across whole nodes?",
    "answer": "Prepare a script named `submit-mpi4py-whole-nodes.sh` with SBATCH directives for account, time, number of nodes, tasks per node, memory per CPU, module loads (StdEnv/2023, gcc, openmpi, mpi4py/4.0.0, python/3.12), virtual environment creation, numpy installation, and running the Python script."
  },
  {
    "question": "What is an important step before submitting an `mpi4py` job?",
    "answer": "Before submitting the job, it is important to test the script for possible errors with a quick interactive task."
  },
  {
    "question": "How do you submit a distributed `mpi4py` CPU task?",
    "answer": "Submit your task using the command `sbatch submit-mpi4py-distributed.sh`."
  },
  {
    "question": "How do you download the `mpi4py` GPU example?",
    "answer": "On a login node, download the example from the `mpi4py` demos using `wget https://raw.githubusercontent.com/mpi4py/mpi4py/refs/heads/master/demo/cuda-aware-mpi/use_cupy.py`."
  },
  {
    "question": "How do you prepare a SLURM script for an `mpi4py` GPU task?",
    "answer": "Prepare a script named `submit-mpi4py-gpu.sh` with SBATCH directives for account, time, number of tasks, memory per CPU, GPUs, module loads (StdEnv/2023, gcc, cuda/12, mpi4py/4.0.0, python/3.11), virtual environment creation, cupy and numba installation, and running the Python script."
  },
  {
    "question": "How do you submit an `mpi4py` GPU task?",
    "answer": "Submit your task using the command `sbatch submit-mpi4py-gpu.sh`."
  },
  {
    "question": "What does the error message `ModuleNotFoundError: No module named 'mpi4py'` mean?",
    "answer": "This message can occur during import when `mpi4py` is not accessible."
  },
  {
    "question": "What are the suggested solutions for `ModuleNotFoundError: No module named 'mpi4py'` related to Python versions?",
    "answer": "Check compatible Python versions with `module spider mpi4py/X.Y.Z`, then verify `python -c 'import mpi4py'` works after loading a compatible version."
  },
  {
    "question": "What is a suggested solution for `ModuleNotFoundError: No module named 'mpi4py'` regarding virtual environments?",
    "answer": "Load the `mpi4py` module before activating your virtual environment."
  }
]