[
  {
    "question": "What are the two forms of scaling discussed in the document?",
    "answer": "The two forms of scaling discussed are strong scaling and weak scaling."
  },
  {
    "question": "What does the term 'scaling' usually refer to when used without qualification?",
    "answer": "When the term 'scaling' is used without any qualification, 'strong scaling' is normally what is meant."
  },
  {
    "question": "When should strong scaling be applied?",
    "answer": "Strong scaling applies if you wish to perform the same size of simulations as before, but more quickly."
  },
  {
    "question": "When is weak scaling more applicable?",
    "answer": "Weak scaling applies if you wish to simulate larger or more detailed models and are willing to wait just as long as before for better results."
  },
  {
    "question": "How is strong scaling defined for scalability analysis?",
    "answer": "In strong scaling, the problem to be used for the scalability analysis is fixed while the number of CPU cores increases."
  },
  {
    "question": "What is the ideal expectation for strong scaling?",
    "answer": "Ideally, the decrease in the program's run time compared to some reference value is the reciprocal of the number of cores added."
  },
  {
    "question": "How is efficiency calculated for strong scaling in the provided example?",
    "answer": "Efficiency for strong scaling is calculated by dividing the reference run time at two cores by the run time at 'n' cores, then dividing the result by 'n/2', and finally multiplying by a hundred to get a percentage."
  },
  {
    "question": "What is superlinear scaling and what causes it?",
    "answer": "Superlinear scaling occurs when efficiency is greater than 100% and is usually due to a CPU cache functioning more effectively as each CPU core has less to do."
  },
  {
    "question": "In the strong scaling example, why was the 128-core efficiency considered terrible?",
    "answer": "The 128-core efficiency was 18% and considered terrible because the test with 128 cores actually took longer (238 seconds) than with 64 cores (197 seconds)."
  },
  {
    "question": "What efficiency percentage is generally considered good for parallel program performance?",
    "answer": "An efficiency of 75% or more is considered good."
  },
  {
    "question": "Based on the strong scaling example, what is the optimal number of CPU cores recommended for job submission?",
    "answer": "Based on the strong scaling example, 16 CPU cores would be advised for job submission as it achieves a good efficiency of 76.6% and further improvements beyond this are not a good use of resources."
  },
  {
    "question": "How many data points are recommended for a scalability analysis?",
    "answer": "At least five or six data points are recommended for a scalability analysis."
  },
  {
    "question": "What should be done if a program runs more slowly with added cores during a strong scalability analysis?",
    "answer": "If the program runs more slowly with added cores, you should not pursue the analysis beyond that number of cores."
  },
  {
    "question": "How does weak scaling work?",
    "answer": "In weak scaling, the problem size is increased in proportion to the increase in the number of CPU cores."
  },
  {
    "question": "What is the ideal outcome for a program's run time in weak scaling?",
    "answer": "In an ideal situation of linear weak scaling, the program's run time will always remain the same."
  },
  {
    "question": "How can 'problem size' be defined in weak scaling for molecular or fluid dynamics simulations?",
    "answer": "In a molecular simulation, 'problem size' might be the number of atoms, and in a fluid dynamics simulation, it might be the number of cells or nodes in the mesh."
  },
  {
    "question": "What is the formula for calculating efficiency in weak scaling?",
    "answer": "The efficiency for weak scaling is calculated by dividing the reference run time by the run time at 'n' cores and then multiplying by a hundred to obtain a percentage."
  },
  {
    "question": "For which type of applications is weak scaling particularly relevant?",
    "answer": "Weak scaling tends to be especially pertinent for applications that are memory-bound."
  },
  {
    "question": "When is weak scaling usually good for a parallel program?",
    "answer": "Weak scaling is usually good if the parallel program has been designed to privilege communications between nearest neighbours."
  },
  {
    "question": "What kind of communication can lead to poor performance in a weak scalability analysis?",
    "answer": "An application which performs a lot of nonlocal communication (e.g., a fast Fourier transform) may exhibit poor performance in a weak scalability analysis."
  }
]