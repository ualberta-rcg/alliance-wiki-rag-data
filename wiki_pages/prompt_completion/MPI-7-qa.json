[
  {
    "question": "What is the purpose of the odd-even pairing communication strategy in MPI programs?",
    "answer": "The odd-even pairing strategy is a common solution to make MPI programs 'safe' by preventing deadlock, especially when relying on `MPI_Send` and `MPI_Recv` which might not be buffered by the library."
  },
  {
    "question": "How do even-ranked processes and odd-ranked processes differ in their communication order when using the odd-even pairing strategy?",
    "answer": "Even-ranked processes execute an `MPI_Send` followed by an `MPI_Recv`, while odd-ranked processes execute an `MPI_Recv` followed by an `MPI_Send`."
  },
  {
    "question": "How is the `sendto` rank calculated for a process in the safe 'Hello, World!' MPI example?",
    "answer": "The `sendto` rank is calculated as `(rank + 1) % size`, where `rank` is the current process's rank and `size` is the total number of processes."
  },
  {
    "question": "How is the `recvfrom` rank calculated for a process in the safe 'Hello, World!' MPI example?",
    "answer": "The `recvfrom` rank is calculated as `((rank + size) - 1) % size`, where `rank` is the current process's rank and `size` is the total number of processes."
  },
  {
    "question": "Does the odd-even pairing strategy still prevent deadlock if the total number of processors is odd?",
    "answer": "Yes, even if the number of processors is odd, the odd-even pairing ensures that sends and receives are properly paired, thus preventing deadlock. For instance, process 0 sends to process 1, which starts with a receive, guaranteeing that transaction's completion."
  },
  {
    "question": "How do you compile the C version of the `phello3.c` program?",
    "answer": "The C version of the `phello3.c` program can be compiled using `mpicc -Wall phello3.c -o phello3`."
  },
  {
    "question": "How would you run the compiled C `phello3` program with 16 processes?",
    "answer": "You would run the compiled C `phello3` program with 16 processes using the command `mpirun -np 16 ./phello3`."
  },
  {
    "question": "What is recommended for frequently occurring communication patterns in MPI?",
    "answer": "For frequently-occurring communication patterns, it is recommended to use the collective communication functions provided by MPI instead of implementing them manually with `MPI_Send` and `MPI_Recv`."
  }
]