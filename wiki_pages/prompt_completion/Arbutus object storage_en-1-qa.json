[
  {
    "question": "What is object storage?",
    "answer": "Object storage is a service that manages data as objects, differing from other storage architectures that use a file hierarchy."
  },
  {
    "question": "How does object storage differ from traditional storage regarding data modification?",
    "answer": "Unlike traditional storage where data can be edited in place, objects in object storage can be created, replaced, or deleted, but cannot be modified in place."
  },
  {
    "question": "Why has object storage become popular?",
    "answer": "Object storage has become popular due to its ability to handle large files and large numbers of files, and the prevalence of compatible tools."
  },
  {
    "question": "How is a unit of data managed in object storage?",
    "answer": "A unit of data, or object, is managed as a whole, and its information cannot be modified in place."
  },
  {
    "question": "Where are objects stored in an object store?",
    "answer": "Objects are stored in containers within the object store."
  },
  {
    "question": "What are the recommended uses for object storage?",
    "answer": "Object storage is best used for storing and exporting items that do not require hierarchical naming, are accessed mostly as a whole and are read-only, and have simplified access-control rules."
  },
  {
    "question": "What is the default object storage allocation for Arbutus projects?",
    "answer": "All Arbutus projects are allocated a default 1TB of object storage."
  },
  {
    "question": "How can an Arbutus project request more than the default 1TB of object storage?",
    "answer": "An additional 9TB can be requested through the Rapid Access Service, and more than 10TB must be requested and allocated under the annual Resource Allocation Competition."
  },
  {
    "question": "How is the management of object storage containers handled for an Arbutus project?",
    "answer": "Management of a project's object storage containers is self-service, unlike a cluster computing environment."
  },
  {
    "question": "Is the Arbutus object store backed up?",
    "answer": "The object store itself is not backed up, meaning users are responsible for operations such as backups."
  },
  {
    "question": "What protocols are offered for accessing the OpenStack Object Store via Arbutus?",
    "answer": "Arbutus offers access to the OpenStack Object Store via two different protocols: Swift or Amazon Simple Storage Service (S3)."
  },
  {
    "question": "Can object storage containers and objects created with Swift be accessed using S3, and vice versa?",
    "answer": "Yes, object storage containers and objects created with Swift or S3 can be accessed using both protocols."
  },
  {
    "question": "Which protocol is the default for Arbutus Object Store and why?",
    "answer": "Swift is the default and is simpler because you do not have to manage credentials yourself, as access is governed using your Arbutus account."
  },
  {
    "question": "When is it necessary to use S3 for managing object storage containers?",
    "answer": "When you want to manage your object storage containers using access policies, you must use S3, as Swift does not support access policies."
  },
  {
    "question": "What is a potential benefit of using S3 for object storage management?",
    "answer": "With S3, you can create and manage your own keys, which could be useful for creating a read-only user account for a specific application."
  },
  {
    "question": "What is required to manage your Arbutus Object Store?",
    "answer": "You will need your own storage access ID and secret key."
  },
  {
    "question": "How do you generate storage access ID and secret keys for the Arbutus Object Store?",
    "answer": "To generate these, use the OpenStack command line client with the command `openstack ec2 credentials create`."
  },
  {
    "question": "Can access policies for data containers be set via a web browser?",
    "answer": "No, setting access policies cannot be done via a web browser."
  },
  {
    "question": "How must access policies for data containers be set?",
    "answer": "Access policies must be done with a SWIFT or S3-compatible client."
  },
  {
    "question": "What are the ways to access your data containers in the Arbutus Object Store?",
    "answer": "You can use an S3-compatible client (e.g., s3cmd), Globus, or a browser via an HTTPS endpoint if object storage policies are set to public."
  },
  {
    "question": "What is the recommended tool for managing buckets and objects in the Arbutus Object Store?",
    "answer": "The recommended way to manage buckets and objects is by using the `s3cmd` tool, which is available in Linux."
  },
  {
    "question": "What is another interface for performing management tasks for object storage?",
    "answer": "You can use the 'Containers' section under the 'Object Store' tab in the Arbutus OpenStack Dashboard."
  },
  {
    "question": "What are data containers also known as in other object storage systems?",
    "answer": "Data containers are also known as buckets in other object storage systems."
  },
  {
    "question": "What management tasks can be performed using the Arbutus OpenStack Dashboard?",
    "answer": "Using the dashboard, you can create new data containers, upload files, and create directories."
  },
  {
    "question": "Who is responsible for managing data containers and their contents within an Arbutus cloud project?",
    "answer": "The user who creates the data containers is responsible for managing them and their contents, as they are owned by the creator and cannot be manipulated by others."
  },
  {
    "question": "What happens if you create a new container as 'Public'?",
    "answer": "If a new container is created as 'Public', anyone on the internet can read its contents by simply navigating to its HTTPS endpoint."
  },
  {
    "question": "What is an important naming rule for data containers on the Arbutus Object Store?",
    "answer": "Each data container on the Arbutus Object Store must have a unique name across all users."
  },
  {
    "question": "What is a useful rule of thumb for naming data containers to ensure uniqueness?",
    "answer": "It is useful to prefix data container names with your project name to avoid conflicts and refrain from using generic names like `test`."
  }
]