[
  {
    "question": "What is PGDBG?",
    "answer": "PGDBG is a powerful and simple tool designed for debugging both MPI-parallel and OpenMP thread-parallel Linux applications."
  },
  {
    "question": "What kind of applications can PGDBG debug?",
    "answer": "PGDBG can debug MPI-parallel and OpenMP thread-parallel Linux applications."
  },
  {
    "question": "Where is PGDBG included?",
    "answer": "It is included in the PGI compiler package."
  },
  {
    "question": "What type of debugging is PGDBG configured for?",
    "answer": "PGDBG is configured for OpenMP thread-parallel debugging."
  },
  {
    "question": "When might the GNU debugger (GDB) not be suitable for debugging?",
    "answer": "GDB is not handled very well by Fortran 90/95 programs."
  },
  {
    "question": "What types of codes is pgdbg more suited for?",
    "answer": "Pgdbg is more suited for Fortran 90/95 programs."
  },
  {
    "question": "Who developed the pgdbg debugger?",
    "answer": "The Portland Group developed the pgdbg debugger."
  },
  {
    "question": "In what modes is Pgdbg provided?",
    "answer": "Pgdbg is provided in two modes: a graphical mode with enabled X11 forwarding or a text mode."
  },
  {
    "question": "What are the two main steps for using PGDBG?",
    "answer": "Using PGDBG usually consists of two steps: Compilation (compile code with debugging enabled) and Execution and debugging (execute code and analyze results)."
  },
  {
    "question": "Before profiling with PGDBG, what needs to be done?",
    "answer": "The appropriate module needs to be loaded before profiling with PGDBG."
  },
  {
    "question": "How can you check which PGI compiler versions are available?",
    "answer": "You can run `module avail pgi` to see what versions are currently available with the compiler, MPI, and CUDA modules you have loaded."
  },
  {
    "question": "How do you get a comprehensive list of PGI modules?",
    "answer": "Run `module -r spider '.*pgi.*'` for a comprehensive list of PGI modules."
  },
  {
    "question": "What PGI versions were listed as available in December 2018?",
    "answer": "As of December 2018, `pgi/13.10` and `pgi/17.3` were listed."
  },
  {
    "question": "How do you load a specific PGI compiler version, such as 17.3?",
    "answer": "Use `module load pgi/version`; for example, `module load pgi/17.3`."
  },
  {
    "question": "What is required to debug code with pgdbg?",
    "answer": "To debug with pgdbg, you first need to compile your code with debugging information enabled."
  },
  {
    "question": "How do you enable debugging information when compiling with pgdbg?",
    "answer": "You enable debugging information by adding a debugging flag '-g' during compilation."
  },
  {
    "question": "Provide an example command for compiling a C program for debugging with pgdbg.",
    "answer": "An example command is `pgcc -g program.c -o program`."
  },
  {
    "question": "What is the debugger's default user interface?",
    "answer": "The debugger's default user interface is a graphical user interface (GUI)."
  },
  {
    "question": "How can you run pgdbg in text mode?",
    "answer": "You can run pgdbg in text mode by adding the extra option '-text', for example: `pgdbg -text program arg1 arg2`."
  },
  {
    "question": "What command needs to be executed in the PGDBG prompt before debugging?",
    "answer": "You need to execute `run` in the prompt before you can debug."
  },
  {
    "question": "How does PGDBG handle new threads during program execution?",
    "answer": "PGDBG automatically attaches to new threads as they are created during program execution."
  },
  {
    "question": "What is the 'current thread' in a PGDBG debug session?",
    "answer": "During a debug session, PGDBG operates in the context of a single thread at any one time, which is referred to as the current thread."
  },
  {
    "question": "How is the current thread chosen in PGDBG?",
    "answer": "The current thread is chosen by using the `thread` command."
  },
  {
    "question": "What command lists all threads currently employed by an active program in PGDBG?",
    "answer": "The `threads` command lists all threads currently employed by an active program."
  },
  {
    "question": "How do you switch the context to a thread with a specific ID, for example, ID 3?",
    "answer": "You use the command `thread 3` to switch the context to thread with ID 3."
  },
  {
    "question": "When does PGDBG start in graphical mode?",
    "answer": "If X11 forwarding has been set, PGDBG will start in graphical mode in a pop-up window."
  },
  {
    "question": "What are the main areas into which the PGDBG GUI is divided?",
    "answer": "The PGDBG GUI is divided into a menu bar, main toolbar, source window, program I/O window, and debug information tabs."
  },
  {
    "question": "What menus are contained in the main menu bar of the PGDBG GUI?",
    "answer": "The main menu bar contains File, Edit, View, Connections, Debug, and Help menus."
  },
  {
    "question": "What does the first drop-down list on the debugger's main toolbar display?",
    "answer": "The first drop-down list displays the current process or, in other words, the current thread."
  },
  {
    "question": "How is the first drop-down list on the toolbar used when multiple threads are available?",
    "answer": "When multiple threads are available, this drop-down list is used to specify which process or thread should be the current one."
  },
  {
    "question": "What does the 'Apply' drop-down list on the toolbar determine?",
    "answer": "The 'Apply' drop-down list determines the set of processes and threads to which action commands are applied."
  },
  {
    "question": "What does the 'Display' drop-down list on the toolbar determine?",
    "answer": "The 'Display' drop-down list determines the set of processes and threads to which data display commands are applied."
  },
  {
    "question": "What information does the 'File' drop-down list on the toolbar display?",
    "answer": "The 'File' drop-down list displays the source file that contains the current target location."
  },
  {
    "question": "What are the source window and debug information tabs referred to as?",
    "answer": "The source window and all debug information tabs are referred to as dockable tabs."
  },
  {
    "question": "How can dockable tabs be detached from the main window?",
    "answer": "Dockable tabs can be taken apart from the main window by double-clicking the tab."
  },
  {
    "question": "What does the source window show in the PGDBG GUI?",
    "answer": "The source window shows the source code for the current session."
  },
  {
    "question": "Where is program output displayed in the PGDBG GUI?",
    "answer": "Program output is displayed in the Program IO tab\u2019s central window."
  },
  {
    "question": "Where is program input entered in the PGDBG GUI?",
    "answer": "Program input is entered into the Program IO tab\u2019s Input field."
  },
  {
    "question": "Where are debug information tabs located in the debugger GUI?",
    "answer": "Debug information tabs take up the lower half of the debugger GUI."
  }
]