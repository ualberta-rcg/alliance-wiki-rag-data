[
  {
    "question": "What is the purpose of the \"Large-scale interactive\" tab in the documentation?",
    "answer": "This tab describes the interactive client-server setup for ParaView on all HPC clusters, where a ParaView client runs on your computer and the server runs on the remote cluster."
  },
  {
    "question": "Which HPC clusters support the large-scale interactive client-server ParaView setup?",
    "answer": "The large-scale interactive client-server ParaView setup is supported on Rorqual, Nibi, Fir, Trillium, and Narval."
  },
  {
    "question": "What is an important compatibility requirement for the ParaView client and server in a client-server setup?",
    "answer": "ParaView requires the same major version on the local client and the remote host. For example, to use ParaView server version 6.0.0 on the cluster, you need client version 6.0.x on your computer."
  },
  {
    "question": "Where can you find the \"Remote Render Threshold\" setting in ParaView and what does it control?",
    "answer": "The \"Remote Render Threshold\" setting is located in ParaView's preferences under `Render View -> Remote/Parallel Rendering Options`. It controls whether small rendering tasks (below the threshold) are done on your computer's GPU or shipped to the remote cluster for processing."
  },
  {
    "question": "How does setting the \"Remote Render Threshold\" to 0MB affect ParaView rendering?",
    "answer": "If set to 0MB, all rendering, including rotation, will be done remotely on the cluster resources. This is good for large data processing but might reduce interactivity."
  },
  {
    "question": "What rendering capabilities are available when using cluster CPUs for ParaView visualization?",
    "answer": "You can do both rasterization and ray tracing on cluster CPUs. Modern CPU-based libraries like OSPRay and OpenSWR offer performance similar to GPU-based rendering."
  },
  {
    "question": "How does the ParaView server handle very large datasets using distributed-memory processing?",
    "answer": "The ParaView server uses MPI for distributed-memory processing, enabling parallel rendering on a large number of CPU cores, either on a single node or scattered across multiple nodes."
  },
  {
    "question": "What is the easiest way to estimate the number of CPU cores needed for ParaView rendering based on dataset size?",
    "answer": "The easiest way is to estimate the memory required for your rendering and divide it by approximately 3.5 GB/core."
  },
  {
    "question": "What is the recommended maximum memory allocation per CPU core for software rendering in ParaView?",
    "answer": "It is not recommended to allocate more than 4GB/core, as software rendering is CPU-intensive."
  },
  {
    "question": "Why is it important to allocate additional memory for filters and data processing in ParaView?",
    "answer": "It's important because filters and data processing can significantly increase your memory footprint; for example, a structured to unstructured dataset conversion can increase memory usage by about 3X."
  },
  {
    "question": "What action should be taken if the ParaView server is killed during data processing?",
    "answer": "If the ParaView server is killed while processing data, you will need to increase the number of cores allocated."
  },
  {
    "question": "What is a specific core allocation requirement for ParaView visualization on the Trillium cluster?",
    "answer": "On Trillium, you must schedule on whole nodes, meaning in multiples of 192 cores. Therefore, the minimum visualization example on Trillium will require 192 cores."
  },
  {
    "question": "What is the initial step for setting up large-scale interactive ParaView visualization on an HPC cluster?",
    "answer": "First, install the same ParaView version on your computer as available on the cluster, then log into the cluster and start a parallel CPU interactive job."
  },
  {
    "question": "Provide an example `salloc` command for starting a parallel CPU interactive job for ParaView.",
    "answer": "A general `salloc` command would be: `salloc --time=1:00:0 --ntasks=... --mem-per-cpu=3600 --account=def-someprof`."
  },
  {
    "question": "How would you specifically start an `salloc` job for ParaView visualization on the Trillium cluster, assuming one node is used?",
    "answer": "The command would be: `salloc --time=1:00:0 --ntasks=192 --account=def-someprof`."
  },
  {
    "question": "What module must be loaded on Trillium before loading the `paraview/6.0.0` module?",
    "answer": "On Trillium, you must load `StdEnv/2023` before attempting to load `paraview/6.0.0`."
  },
  {
    "question": "What command sequence is used to load the ParaView module and start the server within a Slurm job?",
    "answer": "First, `module load paraview/6.0.0`, and then `srun pvserver --force-offscreen-rendering --opengl-window-backend OSMesa`."
  },
  {
    "question": "How do you set up an SSH tunnel from your local computer to the compute node for ParaView connectivity?",
    "answer": "In a terminal on your computer (Mac/Linux), use the command: `ssh <username>@fir.alliancecan.ca -L 11111:fc30669:11111`. Replace `fir.alliancecan.ca` with the actual cluster name and `fc30669` with the compute node name."
  },
  {
    "question": "What steps are required to configure the ParaView client on your computer to connect to the remote parallel server?",
    "answer": "Start ParaView on your computer, navigate to `File -> Connect` (or click the green `Connect` button). Click `Add Server`, set `name` (e.g., 'fir'), `server type = Client/Server`, `host = localhost`, `port = 11111`. Then click `Configure`, select `Manual`, and click `Save`. Finally, select the added server from the list and click `Connect`."
  },
  {
    "question": "How can you verify that your ParaView client has successfully connected to the remote server?",
    "answer": "The terminal window where the `pvserver` was started, which initially showed \"Accepting connection\", will change to display \"Client connected.\""
  },
  {
    "question": "What happens after successfully connecting the ParaView client to the remote server regarding file access?",
    "answer": "Once connected, you can open a file in ParaView, and it will point to the remote filesystem for visualization."
  }
]