[
  {
    "question": "How do you establish an SSH tunnel to connect a local ParaView client to a remote server on Fir or Nibi?",
    "answer": "Note the node and port (e.g., fc30107:11111) from the remote server. Then, in a separate terminal on your Mac/Linux computer (or a terminal emulator on Windows), bind your local port 11111 to the compute node's port using `ssh <username>@fir.alliancecan.ca -L 11111:fc30107:11111`."
  },
  {
    "question": "After setting up an SSH tunnel, how do you configure ParaView on your local computer to connect to the remote server?",
    "answer": "On your computer, start ParaView, go to 'File -> Connect' (or click the green 'Connect' button), and then click 'Add Server'. Set the parameters to `name = fir`, `server type = Client/Server`, `host = localhost`, `port = 11111`. Click 'Configure', select 'Manual', and click 'Save'. Finally, select the server from the list and click 'Connect'."
  },
  {
    "question": "What is the final step to visualize data once the ParaView client is connected to the remote server?",
    "answer": "Open a ParaView file; this action will direct you to the remote file system for data visualization."
  },
  {
    "question": "What is the function of the 'Remote Render Threshold' option in ParaView's preferences?",
    "answer": "The 'Remote Render Threshold' defines a data size limit. Small rendering tasks (e.g., below the default 20Mo) are handled by your local computer's GPU for quick interactive rotation. Any somewhat intensive task that is still below the threshold will also be handled by your local computer, and its visualization speed may depend on your connection."
  },
  {
    "question": "How does setting the 'Remote Render Threshold' to 0Mo affect ParaView rendering?",
    "answer": "Setting the 'Remote Render Threshold' to 0Mo forces all rendering tasks to be performed remotely by the cluster's resources, which is beneficial for intensive processing but can make interactive tasks less responsive."
  },
  {
    "question": "How do you launch a parallel task for multi-CPU rendering in ParaView?",
    "answer": "Launch a parallel task using a command such as `salloc --time=0:30:0 --ntasks=8 --mem-per-cpu=3600 --account=def-someprof`, remembering to specify the maximum real-time execution limit."
  },
  {
    "question": "How do you start the ParaView server for parallel rendering with multiple CPUs?",
    "answer": "First, load the ParaView module (`module load paraview/5.13.1`), then start the server using `srun pvserver --force-offscreen-rendering`."
  },
  {
    "question": "How can you verify that rendering is being performed in parallel when using ParaView?",
    "answer": "To verify parallel rendering, use the 'Process Id Scalars' filter and apply color based on 'process id'."
  },
  {
    "question": "How do you launch an interactive serial task with a GPU on Fir or Nibi for ParaView visualization?",
    "answer": "After installing the same ParaView version on your computer as on the cluster, connect to Fir or Nibi and launch an interactive serial task with a GPU using `salloc --time=1:00:0 --ntasks=1 --mem-per-cpu=3600 --gres=gpu:1 --account=def-someprof`."
  },
  {
    "question": "What steps are required to start the ParaView server for GPU-based visualization on a remote cluster node?",
    "answer": "At the prompt within your task, load the GPU+EGL module (`module load paraview/5.13.1`), then unset the `DISPLAY` variable to prevent ParaView from using the X11 rendering context (`unset DISPLAY`), and finally start the ParaView server by running `pvserver`."
  }
]