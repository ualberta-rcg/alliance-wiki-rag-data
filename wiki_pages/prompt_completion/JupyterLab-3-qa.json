[
  {
    "question": "What is ParaView?",
    "answer": "ParaView is a powerful open-source visualization software."
  },
  {
    "question": "How do you launch the ParaView graphical user interface in JupyterLab?",
    "answer": "Loading a `paraview` module will add a launcher to start the ParaView graphical user interface through a VNC session."
  },
  {
    "question": "Where can I find more details about using ParaView?",
    "answer": "More details on using ParaView can be found on its dedicated page, [[ParaView]]."
  },
  {
    "question": "What is QGIS?",
    "answer": "QGIS is a powerful open-source software for visualizing and processing geographic information systems (GIS) data."
  },
  {
    "question": "How do you launch the QGIS graphical user interface in JupyterLab?",
    "answer": "Loading a `qgis` module will add a launcher to start the QGIS graphical user interface through a VNC session."
  },
  {
    "question": "Where can I find more details about QGIS?",
    "answer": "More details on QGIS can be found on its dedicated page, [[QGIS]]."
  },
  {
    "question": "What is StarCCM+?",
    "answer": "Star-CCM+ is Siemens's commercial computational fluid dynamic simulation software."
  },
  {
    "question": "How do you launch StarCCM+ in JupyterLab?",
    "answer": "Loading one of the `starccm` or `starccm-mixed` modules will add a launcher to start the StarCCM+ graphical user interface through a VNC session."
  },
  {
    "question": "What is required to use the StarCCM+ software?",
    "answer": "To use StarCCM+, you will need to provide your own license, as it is a commercial package."
  },
  {
    "question": "Where can I find more details on using StarCCM+?",
    "answer": "More details on using StarCCM+ are available on its dedicated page, [[Star-CCM+]]."
  },
  {
    "question": "What action is required before opening a Python notebook that needs scientific packages?",
    "answer": "Before opening the notebook, you must load the `scipy-stack` module from the JupyterLab `Softwares` tool."
  },
  {
    "question": "Name some scientific Python packages included in the `scipy-stack` module.",
    "answer": "The `scipy-stack` module includes `ipython`, `ipython_genutils`, `ipykernel`, `ipyparallel`, `matplotlib`, `numpy`, `pandas`, `scipy`, `Cycler`, `futures`, `jupyter_client`, `jupyter_core`, `mpmath`, `pathlib2`, `pexpect`, `pickleshare`, `ptyprocess`, `pyzmq`, `simplegeneric`, `sympy`, `tornado`, and `traitlets`."
  },
  {
    "question": "How can you install additional Python packages directly within a notebook cell?",
    "answer": "You can install packages by running a command like `pip install --no-index package-name` inside a cell."
  },
  {
    "question": "What might be necessary after installing a package like `plotly` in a notebook cell?",
    "answer": "You may need to restart the notebook's kernel before importing the package."
  },
  {
    "question": "Are packages installed via `pip install --no-index` in a default Python kernel environment persistent?",
    "answer": "No, the installation of packages in the default Python kernel environment is temporary and will be lost when the JupyterLab session ends. You will have to reinstall them the next time you start a new session."
  },
  {
    "question": "How can one achieve a persistent Python environment in JupyterLab?",
    "answer": "For a persistent Python environment, you must configure a [[Advanced_Jupyter_configuration#Python_kernel|custom Python kernel]]."
  },
  {
    "question": "What are the steps to open an existing Python notebook in JupyterLab?",
    "answer": "To open an existing Python notebook, go to the `File Browser`, browse to the location of the `*.ipynb` file, and double-click on it. This will open the notebook in a new JupyterLab tab and start an IPython kernel."
  },
  {
    "question": "How do you open a new Python notebook in JupyterLab?",
    "answer": "To open a new Python notebook, click on the `Python 3.x` launcher under the `Notebook` section in the `File Browser`'s current directory. This will open a new notebook in a new JupyterLab tab and start an IPython kernel."
  },
  {
    "question": "How do you convert a Jupyter notebook to a Python script?",
    "answer": "First, install `nbconvert` by running `!pip install --no-index nbconvert` in a console or notebook cell, then convert the notebook using `!jupyter nbconvert --to python my-current-notebook.ipynb`."
  },
  {
    "question": "What command is used to convert a Jupyter notebook to a Python script?",
    "answer": "The command `!jupyter nbconvert --to python my-current-notebook.ipynb` is used to convert a Jupyter notebook to a Python script."
  },
  {
    "question": "How do you install `nbconvert` in a JupyterLab environment?",
    "answer": "You can install `nbconvert` by running `!pip install --no-index nbconvert` from the console or in a new notebook cell."
  },
  {
    "question": "How should a converted Python notebook script be run within a non-interactive submission script?",
    "answer": "In your submission script, run your converted notebook with `python my-current-notebook.py`."
  },
  {
    "question": "How do you submit a non-interactive job using a submission script?",
    "answer": "You submit a non-interactive job using `sbatch my-submit.sh`, assuming `my-submit.sh` is your submission script."
  }
]