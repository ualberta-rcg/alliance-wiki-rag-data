[
  {
    "question": "What is ParaView?",
    "answer": "ParaView is a powerful open-source visualization software."
  },
  {
    "question": "How do you launch the ParaView graphical user interface in JupyterLab?",
    "answer": "Loading a `paraview` module will add a launcher to start the graphical user interface through a VNC session."
  },
  {
    "question": "What is QGIS used for?",
    "answer": "QGIS is a powerful open-source software for visualizing and processing geographic information systems (GIS) data."
  },
  {
    "question": "How can you start the QGIS graphical user interface in JupyterLab?",
    "answer": "Loading a `qgis` module will add a launcher to start the QGIS graphical user interface through a VNC session."
  },
  {
    "question": "What kind of software is Star-CCM+?",
    "answer": "Star-CCM+ is a commercial computational fluid dynamic simulation software developed by Siemens."
  },
  {
    "question": "How do you launch Star-CCM+ in JupyterLab?",
    "answer": "It is available by loading one of the `starccm` or the `starccm-mixed` modules, which will add a launcher to start the StarCCM+ graphical user interface through a VNC session."
  },
  {
    "question": "What is required to use Star-CCM+?",
    "answer": "As a commercial package, you will need to provide your own license to use Star-CCM+."
  },
  {
    "question": "Which scientific Python packages are included when the `scipy-stack` module is loaded?",
    "answer": "The `scipy-stack` module includes packages such as `ipython`, `ipython_genutils`, `ipykernel`, `ipyparallel`, `matplotlib`, `numpy`, `pandas`, `scipy`, `Cycler`, `futures`, `jupyter_client`, `jupyter_core`, `mpmath`, `pathlib2`, `pexpect`, `pickleshare`, `ptyprocess`, `pyzmq`, `simplegeneric`, `sympy`, `tornado`, and `traitlets`."
  },
  {
    "question": "How do you load the `scipy-stack` module in JupyterLab?",
    "answer": "You must load the `scipy-stack` module from the JupyterLab 'Softwares' tool."
  },
  {
    "question": "How can you install additional Python packages within a notebook cell?",
    "answer": "You can install needed packages by running a command like `pip install --no-index package-name` inside a cell."
  },
  {
    "question": "Are Python packages installed using `pip install` in a notebook persistent across JupyterLab sessions?",
    "answer": "No, the installation of packages in the default Python kernel environment is temporary to the lifetime of the JupyterLab session; you will have to reinstall these packages the next time you start a new JupyterLab session. For persistence, a custom Python kernel must be configured."
  },
  {
    "question": "What steps are involved in opening an existing Python notebook in JupyterLab?",
    "answer": "To open an existing Python notebook, go to the 'File Browser', browse to the location of the `*.ipynb` file, and double-click it. This will open the notebook in a new JupyterLab tab and start an IPython kernel."
  },
  {
    "question": "How do you create a new Python notebook in JupyterLab?",
    "answer": "To open a new Python notebook in the current 'File Browser' directory, click on the 'Python 3.x' launcher under the 'Notebook' section. This will open a new Python 3 notebook in a new JupyterLab tab and start a new IPython kernel."
  },
  {
    "question": "How do you install `nbconvert` from the console or a notebook cell?",
    "answer": "You can install `nbconvert` by running `!pip install --no-index nbconvert` from the console or a new notebook cell."
  }
]