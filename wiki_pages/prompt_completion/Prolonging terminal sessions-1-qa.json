[
  {
    "question": "Why do users need to use SSH with clusters?",
    "answer": "Most users need to use SSH to connect to clusters for job submission and monitoring, editing files, and similar tasks."
  },
  {
    "question": "What is the purpose of this document page regarding SSH connections?",
    "answer": "This page proposes various techniques for keeping an SSH terminal session alive for extended periods, ranging from hours to days."
  },
  {
    "question": "What is a simple way to prolong an SSH connection?",
    "answer": "A simple solution is to modify the configuration of your SSH client."
  },
  {
    "question": "Where is the SSH client configuration file located on MacOS and Linux?",
    "answer": "On MacOS and Linux, the SSH client configuration file is found in `$HOME/.ssh/config`."
  },
  {
    "question": "Where is the SSH client configuration file located on Windows?",
    "answer": "On Windows, the SSH client configuration file is located in `C:\\Users\\<username>\\.ssh\\config`."
  },
  {
    "question": "What lines should be added to the SSH client configuration file to keep a connection alive?",
    "answer": "You should add the lines `Host *` and `ServerAliveInterval 240` to the SSH client configuration file."
  },
  {
    "question": "What does `ServerAliveInterval 240` do?",
    "answer": "This addition ensures the transmission of a sign-of-life signal over the SSH connection to any remote server every 240 seconds (four minutes), which helps keep the SSH connection alive even if idle for several hours."
  },
  {
    "question": "What are `tmux` and `screen`?",
    "answer": "`tmux` and `screen` are examples of terminal multiplexers, programs that allow you to detach your terminal session entirely."
  },
  {
    "question": "What is the main advantage of using a terminal multiplexer like `tmux` or `screen`?",
    "answer": "A terminal multiplexer allows you to detach your terminal session, keeping it running on its own, so you can log out, turn off your workstation, and reattach to your session later from where you left off."
  },
  {
    "question": "What happens to a `tmux` or `screen` session if its login node is rebooted?",
    "answer": "Login nodes may occasionally be rebooted, which will kill any detached terminal sessions on that node."
  },
  {
    "question": "What must you ensure to reattach to a `tmux` or `screen` session?",
    "answer": "You must ensure you're connected to the right login node, which means remembering which login node you were using when you started the session, as `tmux` or `screen` sessions are specific to a login node."
  },
  {
    "question": "What is `tmux`?",
    "answer": "`tmux` is a terminal multiplexer software that allows multiple virtual sessions within a single terminal session."
  },
  {
    "question": "Can you disconnect from an SSH session using `tmux` without interrupting its processes?",
    "answer": "Yes, `tmux` allows you to disconnect from an SSH session without interrupting its processes."
  },
  {
    "question": "How do you start a `tmux` server?",
    "answer": "You start a `tmux` server by typing the command `tmux`."
  },
  {
    "question": "What is the command to disconnect from a `tmux` server?",
    "answer": "To disconnect from a `tmux` server, use the command `Ctrl+B D`."
  },
  {
    "question": "How do you reconnect to a `tmux` server?",
    "answer": "You reconnect to a `tmux` server using the command `tmux a`."
  },
  {
    "question": "What is the key combination to create a new window in `tmux`?",
    "answer": "To create a new window in `tmux`, use the command `Ctrl+B C`."
  },
  {
    "question": "How do you navigate to the next window in `tmux`?",
    "answer": "To go to the next window in `tmux`, use the command `Ctrl+B N`."
  },
  {
    "question": "How do you enable 'copy' mode in `tmux`?",
    "answer": "To enable 'copy' mode in `tmux`, which allows scrolling with the mouse and Page-Up/Page-Down, use `Ctrl+B [`."
  },
  {
    "question": "How do you disable 'copy' mode in `tmux`?",
    "answer": "To disable 'copy' mode in `tmux`, press `Esc`."
  },
  {
    "question": "What error message might you get if you try to start `tmux` inside a job already submitted through `tmux`?",
    "answer": "You will get the `lost server` error message if you try to start `tmux` within a job submitted through `tmux`."
  },
  {
    "question": "Why does the `lost server` error occur when trying to use `tmux` nested within a `tmux` submitted job?",
    "answer": "This error happens because the `$TMUX` environment variable, which points to the `tmux` server, is propagated to the job, and its value is not valid for the nested `tmux` instance."
  },
  {
    "question": "How can you reset the `$TMUX` environment variable to resolve the `lost server` error?",
    "answer": "You can reset the `$TMUX` environment variable by using the command `unset TMUX`."
  },
  {
    "question": "Is nested use of `tmux` recommended?",
    "answer": "No, nested use of `tmux` is not recommended."
  },
  {
    "question": "What is the command sequence to create a new window in a *nested* `tmux` session?",
    "answer": "To create a new window in a nested `tmux` session, you have to hit `Ctrl+B` twice, followed by `C`, so `Ctrl+B Ctrl+B C`."
  },
  {
    "question": "What alternative is suggested if you are using `tmux` on a login node and need a terminal multiplexer inside a job?",
    "answer": "If you are using `tmux` on a login node, it is suggested to consider using GNU Screen inside your job instead of nested `tmux`."
  }
]