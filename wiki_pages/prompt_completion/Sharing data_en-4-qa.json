[
  {
    "question": "When did the default umask change on Cedar, B\u00e9luga, and Niagara clusters?",
    "answer": "The default `umask` on Cedar, B\u00e9luga, and Niagara clusters was changed on October 16th, 2019."
  },
  {
    "question": "Which clusters had their default umask updated in October 2019?",
    "answer": "The clusters that had their default `umask` updated were B\u00e9luga, Cedar, and Niagara."
  },
  {
    "question": "What was the default umask on B\u00e9luga and Cedar before and after the October 2019 change?",
    "answer": "Before the change, the `umask` on B\u00e9luga and Cedar was `002`. After the change, it became `027`."
  },
  {
    "question": "What was the default umask on Niagara before and after the October 2019 change?",
    "answer": "Before the change, the `umask` on Niagara was `022`. After the change, it became `027`."
  },
  {
    "question": "What is the consequence of the updated default umask on the affected clusters?",
    "answer": "The updated default `umask` enforces more restrictive permissions on newly created files."
  },
  {
    "question": "How can a user change their default umask for more permissive permissions?",
    "answer": "Users can change their default `umask` in their `.bashrc` file if they require more permissive permissions for their workflow."
  },
  {
    "question": "Does changing the default umask affect existing files?",
    "answer": "No, changing the `umask` only applies to new files and does not change the access permissions of existing files."
  },
  {
    "question": "How do you change the permissions of an existing file to match the new default permissions?",
    "answer": "To change permissions of an existing file, use the command `chmod g-w,o-rx <file>`."
  },
  {
    "question": "How do you recursively change the permissions of an entire directory to match the new default permissions?",
    "answer": "To recursively change permissions for a whole directory, use the command `chmod -R g-w,o-rx <directory>`."
  },
  {
    "question": "What are Access Control Lists (ACLs) used for?",
    "answer": "Access Control Lists (ACLs) enable permissions to be set on a user-by-user basis, offering more fine-grained control than traditional Unix permissions."
  },
  {
    "question": "What commands are used to manage Access Control Lists (ACLs)?",
    "answer": "The two commands used to manipulate ACLs are `getfacl` to see permissions and `setfacl` to alter them."
  },
  {
    "question": "How can you grant read and execute permission to a specific user named 'smithj' on a file named 'my_script.py' using ACLs?",
    "answer": "You can grant read and execute permission using the command: `setfacl -m u:smithj:rx my_script.py`."
  },
  {
    "question": "How do you grant read and write access to a single user for new files created in a subdirectory using ACLs?",
    "answer": "To set default access rules for new files in a subdirectory, use: `setfacl -d -m u:smithj:rwX /home/<user>/projects/def-<PI>/shared_data`."
  },
  {
    "question": "How do you grant read and write access to a single user for existing files in a subdirectory using ACLs?",
    "answer": "To set access rules for existing content in a subdirectory, use: `setfacl -R -m u:smithj:rwX /home/<user>/projects/def-<PI>/shared_data`."
  },
  {
    "question": "What does the 'X' attribute mean when used with `setfacl`?",
    "answer": "The 'X' attribute sets the execute permission only when the item is already executable (like a directory or an executable file), which is useful for browsing directories."
  },
  {
    "question": "What is a prerequisite for sharing a subdirectory with another user using ACLs?",
    "answer": "The directory you are sharing must be owned by you, and all parent directories in the path must allow execute permission to the user you are sharing with."
  }
]