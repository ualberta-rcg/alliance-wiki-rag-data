[
  {
    "question": "What are the advantages of using parallel I/O where N processes write to a single file?",
    "answer": "The advantages include having only one file (beneficial for visualization, data management, and storage), data being stored canonically, and avoiding post-processing, which can scale if implemented correctly."
  },
  {
    "question": "What are the disadvantages of using parallel I/O where N processes write to a single file?",
    "answer": "The main disadvantages are that uncoordinated I/O can swamp the filesystem due to file locks, and it requires more careful design and thought."
  },
  {
    "question": "What is Independent I/O?",
    "answer": "Independent I/O operations specify only what a single process will do."
  },
  {
    "question": "What is Collective I/O?",
    "answer": "Collective I/O is a coordinated access to storage by a group of processes, where functions are called by all processes participating in the I/O."
  },
  {
    "question": "Why is Collective I/O preferred for parallel I/O?",
    "answer": "Collective I/O allows the filesystem to gain more information about the overall access pattern, leading to more optimization in lower software layers and better performance."
  },
  {
    "question": "What standard is MPI-IO a part of?",
    "answer": "MPI-IO is part of the MPI-2 standard, introduced in 1996."
  },
  {
    "question": "Which high-end I/O libraries are built on top of MPI-IO?",
    "answer": "HDF5 (Hierarchical Data Format) and Parallel NetCDF (Network Common Data Format) are built on top of MPI-IO."
  },
  {
    "question": "What is MPI-IO good for?",
    "answer": "MPI-IO is good for writing a raw binary file."
  },
  {
    "question": "What MPI-IO implementation is common on HPC systems?",
    "answer": "ROMIO is the implementation of MPI-IO found in OpenMPI and MPICH2, which are common on HPC systems."
  },
  {
    "question": "How does MPI-IO relate to general MPI practices?",
    "answer": "MPI-IO exploits analogies with MPI; writing is similar to sending a message, reading is similar to receiving a message, and file access is grouped via a communicator for collective operations."
  },
  {
    "question": "What are the basic MPI-IO operations in C?",
    "answer": "The basic MPI-IO operations in C include `MPI_File_open`, `MPI_File_seek`, `MPI_File_set_view`, `MPI_File_read`, `MPI_File_write`, and `MPI_File_close`."
  },
  {
    "question": "What is the purpose of `MPI_File_seek`?",
    "answer": "`MPI_File_seek` is used to update an individual file pointer."
  },
  {
    "question": "What does `MPI_File_set_view` do?",
    "answer": "`MPI_File_set_view` changes a process's view of data in a file by assigning specific regions of the file to separate processes."
  },
  {
    "question": "What triplet is used to specify file views in `MPI_File_set_view`?",
    "answer": "File views are specified using a triplet consisting of `displacement`, `etype`, and `filetype`."
  },
  {
    "question": "In `MPI_File_set_view`, what does `displacement` represent?",
    "answer": "`displacement` is the number of bytes to skip from the start of the file."
  },
  {
    "question": "In `MPI_File_set_view`, what does `etype` represent?",
    "answer": "`etype` is the elementary datatype, which can be any basic or derived datatype."
  },
  {
    "question": "In `MPI_File_set_view`, what does `filetype` represent?",
    "answer": "`filetype` specifies which portion of the file is visible to the process."
  },
  {
    "question": "What are the requirements for opening a file using MPI-IO?",
    "answer": "Opening a file requires a communicator, the file name, a file handle for future reference, and a file access mode ('amode')."
  },
  {
    "question": "List some common file access modes ('amode') in MPI-IO.",
    "answer": "Common file access modes include `MPI_MODE_RDONLY` (read only), `MPI_MODE_RDWR` (read and write), `MPI_MODE_WRONLY` (write only), `MPI_MODE_CREATE` (create file if it doesn't exist), `MPI_MODE_EXCL` (error if creating an existing file), `MPI_MODE_DELETE_ON_CLOSE` (delete file on close), `MPI_MODE_UNIQUE_OPEN` (file not opened elsewhere), `MPI_MODE_SEQUENTIAL` (file accessed sequentially), and `MPI_MODE_APPEND` (position all file pointers to end)."
  },
  {
    "question": "How are multiple file access modes combined in MPI-IO?",
    "answer": "Multiple file access modes are combined using a bitwise OR operator ('|') in C or an addition operator ('+') in FORTRAN."
  },
  {
    "question": "What is generally set for the `info` argument when opening an MPI-IO file?",
    "answer": "The `info` argument is usually set to `MPI_INFO_NULL`."
  },
  {
    "question": "What are the characteristics of MPI-IO based on the summary?",
    "answer": "MPI-IO is part of the standard MPI-2 library, widely installed on HPC systems with modern MPI versions, and doesn't require additional libraries. However, it writes raw data, making it not portable across platforms, difficult to append new variables, and lacking data description."
  },
  {
    "question": "What does NetCDF stand for?",
    "answer": "NetCDF stands for Network Common Data Format."
  },
  {
    "question": "How does NetCDF address the limitations of MPI-IO?",
    "answer": "NetCDF covers up what MPI-IO cannot support by using MPI-IO under the hood but abstracting away explicit offset specifications, allowing users to simply specify arrays to store. It stores data as binary, is self-describing with metadata in the header, portable across architectures, and offers optional compression."
  },
  {
    "question": "What are some key features of NetCDF?",
    "answer": "NetCDF stores data as binary, is self-describing with metadata in the header, portable across different architectures, and supports optional compression. It also provides libraries for various languages and integrates with visualization packages like Paraview."
  },
  {
    "question": "What does HDF5 stand for?",
    "answer": "HDF5 stands for Hierarchical Data Format."
  },
  {
    "question": "How does HDF5 compare to NetCDF?",
    "answer": "HDF5 is similar to NetCDF, supporting self-describing file formats for large datasets and using MPI-IO under the hood. However, HDF5 is considered more general than NetCDF, offering an object-oriented description of datasets, groups, attributes, types, data spaces, and property lists, and can arrange file content into a Unix-like filesystem structure."
  },
  {
    "question": "What are the capabilities of HDF5?",
    "answer": "HDF5 is a self-describing file format for large datasets, uses MPI-IO, provides libraries for various languages, offers an object-oriented description of data (datasets, groups, attributes), allows file content to be arranged like a Unix filesystem, has queryable header information, and supports optional compression."
  }
]