[
  {
    "question": "What is the recommended approach for I/O with multiple processes in large parallel calculations?",
    "answer": "The best approach is to perform appropriate parallel I/O, where each participating process writes data simultaneously into a single file."
  },
  {
    "question": "What are the advantages of using parallel I/O where N processes write to a single file?",
    "answer": "The advantages include having only one file (good for visualization, data management, storage), data being stored canonically, and avoiding post-processing which can scale if done correctly."
  },
  {
    "question": "What is a major drawback of parallel I/O if not managed carefully?",
    "answer": "Uncoordinated I/O will swamp the filesystem due to file locks, and it requires more design and thought."
  },
  {
    "question": "What is the difference between Independent I/O and Collective I/O?",
    "answer": "Independent I/O operations specify only what a single process will do, whereas Collective I/O is coordinated access to storage by a group of processes."
  },
  {
    "question": "Why is Collective I/O preferred in parallel computing?",
    "answer": "Collective I/O allows the filesystem to know more about the access as a whole, leading to more optimization in lower software layers and better performance."
  },
  {
    "question": "Which parallel I/O standard is MPI-IO a part of?",
    "answer": "MPI-IO is a part of the MPI-2 standard (1996)."
  },
  {
    "question": "What kind of files is MPI-IO good for writing?",
    "answer": "MPI-IO is good for writing a raw binary file."
  },
  {
    "question": "Which high-end parallel I/O libraries are built on top of MPI-IO?",
    "answer": "HDF5 (Hierarchical Data Format), Parallel NetCDF (Network Common Data Format), and Adaptable IO System (ADIOS) are all built on top of MPI-IO."
  },
  {
    "question": "What is ROMIO?",
    "answer": "ROMIO is the implementation of MPI-IO in OpenMPI (default on our systems) and MPICH2."
  },
  {
    "question": "How does MPI-IO exploit analogies with MPI?",
    "answer": "MPI-IO exploits analogies with MPI by treating writing similar to sending a message and reading similar to receiving a message. File access is grouped via a communicator, enabling collective operations, and user-defined MPI datatypes are available for noncontiguous data layout."
  },
  {
    "question": "Name some basic MPI-IO operations in C.",
    "answer": "Basic MPI-IO operations in C include MPI_File_open, MPI_File_seek, MPI_File_set_view, MPI_File_read, MPI_File_write, and MPI_File_close."
  },
  {
    "question": "What is the purpose of `MPI_File_set_view` in MPI-IO?",
    "answer": "`MPI_File_set_view` is used to assign regions of the file to separate processes and changes a process's view of data in the file."
  },
  {
    "question": "What triplet is used to specify file views in `MPI_File_set_view`?",
    "answer": "File views are specified using a triplet consisting of `displacement`, `etype` (elementary datatype), and `filetype` (portion of the file visible to the process)."
  },
  {
    "question": "What information is required to open a file using MPI-IO?",
    "answer": "Opening a file requires a communicator, file name, file handle for future reference, and a file access mode ('amode')."
  },
  {
    "question": "How can multiple file access modes be combined in MPI-IO?",
    "answer": "Multiple file access modes can be combined using a bitwise OR ('|') in C or addition ('+') in FORTRAN."
  },
  {
    "question": "What are the limitations of MPI-IO despite its widespread availability?",
    "answer": "MPI-IO writes raw data to files, which means it is not portable across platforms, hard to append new variables, and does not include data description."
  },
  {
    "question": "What does NetCDF stand for?",
    "answer": "NetCDF stands for Network Common Data Format."
  },
  {
    "question": "How does NetCDF relate to MPI-IO?",
    "answer": "NetCDF uses MPI-IO under the hood, but it abstracts away the need to specify offsets, handling the storage in a contiguous fashion by telling it what arrays to store."
  },
  {
    "question": "What are the key features of NetCDF?",
    "answer": "NetCDF stores data as binary, is self-describing (with metadata in the header), portable across different architectures, offers optional compression, is optimized for performance, and supports various visualization packages like Paraview."
  },
  {
    "question": "What does HDF5 stand for?",
    "answer": "HDF5 stands for Hierarchical Data Format."
  },
  {
    "question": "How does HDF5 compare to NetCDF?",
    "answer": "HDF5 is more general than NetCDF, offering an object-oriented description of datasets, groups, attributes, types, data spaces, and property lists. It also supports arranging file content into a Unix-like filesystem."
  },
  {
    "question": "What are the characteristics of HDF5 as a data format?",
    "answer": "HDF5 is a self-describing file format for large datasets, uses MPI-IO, provides data portability, supports optional compression (useful for arrays with many similar elements), and allows header information to be queried by utilities."
  },
  {
    "question": "Why is ADIOS not part of the official software stack on the systems mentioned?",
    "answer": "ADIOS is not part of the official software stack simply because there isn't much demand for it in the community."
  }
]