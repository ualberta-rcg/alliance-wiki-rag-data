[
  {
    "question": "Why is it dangerous to issue a bulk `chmod -R 777` command on a home folder?",
    "answer": "It is a HUGE security risk, completely unacceptable on shared facilities such as clusters, and is never necessary."
  },
  {
    "question": "What is the best approach for sharing data with colleagues who are part of the same research group?",
    "answer": "The best approach is to make use of the project space that each research group has in common."
  },
  {
    "question": "Who should be contacted to request the creation of a research group on national clusters?",
    "answer": "Users should contact technical support to request the creation of a group, as users cannot create their own groups."
  },
  {
    "question": "How can data be shared with someone who does not have an account on the cluster?",
    "answer": "You can use Globus, and specifically a shared endpoint, to share data with someone who doesn't have an account on the cluster."
  },
  {
    "question": "What is the simplest way to share data with a colleague who has an account on the cluster but is not in your research group?",
    "answer": "The simplest approach is to use the permissions available in the filesystem to share the data."
  },
  {
    "question": "What access is required for an individual to read a file located deep within a directory structure?",
    "answer": "The individual must have execute permission for each directory in the entire chain leading from `/scratch` or `/project` to the directory where the file is located."
  },
  {
    "question": "What kinds of permissions do filesystems on clusters support?",
    "answer": "They support the idea of permissions to read, write, and execute files and directories."
  },
  {
    "question": "What error message is displayed if a user attempts to access a file or directory without the necessary permissions?",
    "answer": "You'll see the error message 'Permission denied'."
  },
  {
    "question": "What are the three categories of users for whom filesystem permissions are defined?",
    "answer": "The three categories are the object's owner, members of the object's group, and everyone else."
  },
  {
    "question": "How many total permissions are associated with each filesystem object?",
    "answer": "There are nine permissions associated with each object (three categories of users times three types of permission)."
  },
  {
    "question": "What command is used to view the current permissions for a filesystem object?",
    "answer": "The command `ls -l name_of_object` will print out the permissions for the owner, the group, and everyone else, along with the object's owner and group."
  },
  {
    "question": "What do the permissions `-rw-r--r--` mean for a file?",
    "answer": "It means the owner can read and write the file but not execute it, while group members and everyone else can only read the file."
  },
  {
    "question": "What command is used to change the permissions of a file or directory?",
    "answer": "The `chmod` command is used to change the permissions of a file or directory."
  },
  {
    "question": "What abbreviations are used in `chmod` for user categories?",
    "answer": "The abbreviations `u` for owner (user), `g` for group, `o` for others, and `a` for everyone (all) are used."
  },
  {
    "question": "How can you grant read permission to all members of a file's group using `chmod`?",
    "answer": "You can use the command `chmod g+r file.txt`."
  },
  {
    "question": "How do you withdraw execute permission for a file from everyone except its owner and group?",
    "answer": "You can use the command `chmod o-x script.py`."
  },
  {
    "question": "How can read permission be granted to everyone on the cluster for a specific file?",
    "answer": "You can use the command `chmod a+r file.txt` to grant everyone on the cluster the right to read `file.txt`."
  },
  {
    "question": "What is octal notation used for in Unix filesystem permissions?",
    "answer": "Octal notation is commonly used to refer to Unix filesystem permissions, representing three bits for each user category interpreted as a number from 0 to 7."
  },
  {
    "question": "How is the octal value for permissions calculated for each user category?",
    "answer": "The octal value is calculated using the formula `(read_bit)*4 + (write_bit)*2 + (execute_bit)*1`."
  },
  {
    "question": "What does the octal permission `644` represent?",
    "answer": "An octal representation of `644` means the owner can read and write (6), and the group members and everyone else can only read (4)."
  },
  {
    "question": "What `chmod` command would give everyone in your group read, write, and execute permissions for a file?",
    "answer": "The command `chmod 770 name_of_file` would grant everyone in your group the right to read, write, and execute the file."
  },
  {
    "question": "Who is allowed to modify the permissions of a file or directory?",
    "answer": "Only the owner of a file or directory can modify its permissions."
  },
  {
    "question": "What command can be used to change the group ownership of a file or directory?",
    "answer": "The `chgrp` command can be used to alter the group ownership of a file or directory."
  },
  {
    "question": "What is the purpose of the sticky bit in a shared directory?",
    "answer": "The sticky bit restricts filesystem permissions for a directory, ensuring that a file in that directory can only be renamed or deleted by its owner or the directory's owner, preventing other users with write and execute permission from modifying files they don't own."
  },
  {
    "question": "How can the sticky bit be set on a directory using `chmod`?",
    "answer": "The sticky bit can be set using `chmod +t <directory name>` or `chmod 1774 <directory name>` (using octal notation)."
  },
  {
    "question": "How is the sticky bit indicated in the `ls -l` output for a directory?",
    "answer": "The sticky bit is represented by the letter 't' or 'T' in the last place of the permissions field in `ls -l` output."
  },
  {
    "question": "How can the sticky bit be unset from a directory?",
    "answer": "The sticky bit can be unset using the command `chmod -t <directory name>` or via octal notation with `chmod 0774 <directory name>`."
  },
  {
    "question": "Who is typically the directory owner in a project space when using the sticky bit?",
    "answer": "In the context of the project space, the directory owner will be the PI who sponsors the roles of the students and collaborators."
  },
  {
    "question": "What is the functionality of the `setGID` bit when enabled on a directory?",
    "answer": "If the `setGID` bit is enabled for a directory, new files and directories created within it will automatically inherit the same group ownership as the parent directory."
  },
  {
    "question": "How is the `setGID` permission enabled on a directory using `chmod`?",
    "answer": "It is enabled using a command like `chmod g+s dirTest`."
  },
  {
    "question": "How does enabling the `setGID` bit affect the `ls -l` output for a directory?",
    "answer": "The `x` permission for the group in the `ls -l` output will change to an `s` (e.g., `drwxrws---`)."
  },
  {
    "question": "What happens when a new directory is created inside a `setGID`-enabled directory?",
    "answer": "If a directory is created inside a `setGID`-enabled directory, it will inherit the same group as the parent folder and also have its `setGID` enabled."
  },
  {
    "question": "What does an uppercase 'S' signify in the `setGID` permission field in `ls -l` output?",
    "answer": "An uppercase 'S' indicates that execute permissions have been removed from the directory, but the `setGID` is still in place, which can result in unexpected problems for other group members trying to access files."
  }
]