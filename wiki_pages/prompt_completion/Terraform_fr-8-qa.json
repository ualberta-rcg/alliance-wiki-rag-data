[
  {
    "question": "What does a Terraform plan indicate when adding a block device to an existing OpenStack VM?",
    "answer": "The plan will indicate that the `openstack_compute_floatingip_associate_v2` and `openstack_compute_instance_v2` resources must be replaced (`-/+ destroy and then create replacement`)."
  },
  {
    "question": "Which attributes of an OpenStack compute instance are set within the `block_device` configuration in Terraform?",
    "answer": "The `block_device` configuration sets `uuid`, `source_type`, `destination_type`, `volume_size`, `boot_index`, and `delete_on_termination`."
  },
  {
    "question": "What does `destination_type = \"volume\"` mean in a Terraform `block_device` configuration for an OpenStack instance?",
    "answer": "It indicates that the storage should be provided by an OpenStack volume rather than using a disk on the hypervisor."
  },
  {
    "question": "Why is `delete_on_termination` an important attribute to consider in Terraform `block_device` configuration?",
    "answer": "For testing, it's often set to `true` to avoid leftover volumes, but for real use, it should be `false` as a last defense against accidental resource deletion."
  },
  {
    "question": "What is an important warning when defining both `image_id` in the external compute instance definition and `uuid` in the `block_device` for booting from volume?",
    "answer": "If `image_id` is left defined in the external instance definition while using `block_device` to boot from volume, Terraform will continuously try to rebuild the instance, switching between booting from volume and directly from the image."
  },
  {
    "question": "What should you do if your VM is recreated with a new SSH key after applying a Terraform configuration?",
    "answer": "You will need to remove the old SSH key from your `known_hosts` file (or equivalent) before connecting to the new VM."
  },
  {
    "question": "What is the first thing to do after successfully applying Terraform configuration and connecting to a new VM?",
    "answer": "The first thing to do is to connect to the VM and apply all available updates, for example, using `sudo yum update -y`."
  },
  {
    "question": "What is the purpose of the `terraform.tfstate` file?",
    "answer": "The `terraform.tfstate` file contains details about the managed resources that Terraform uses to determine how to reach a new state described by configuration updates."
  },
  {
    "question": "What happens if the `terraform.tfstate` file is deleted?",
    "answer": "If `terraform.tfstate` is deleted, Terraform cannot properly manage the resources, and you would need to restore it, recreate it, or manage those resources without Terraform."
  },
  {
    "question": "Why might a newly created OpenStack VM not be directly accessible from outside its tenant?",
    "answer": "Because it is only on a private network and has not yet been assigned a floating IP address."
  },
  {
    "question": "When is it a good strategy to use another host with a floating IP as a bastion for a new VM?",
    "answer": "This is a good strategy for nodes that don't need direct internet access (e.g., a database server) or to conserve limited floating IP resources, as both hosts will be on the same private network."
  },
  {
    "question": "How is a floating IP allocated and associated with an OpenStack VM?",
    "answer": "A floating IP is allocated to the project from an IP pool and then associated with the VM's private network interface."
  },
  {
    "question": "What Terraform resource is used to allocate a floating IP in OpenStack?",
    "answer": "The `openstack_networking_floatingip_v2` resource is used to allocate a floating IP."
  },
  {
    "question": "What is the typical `pool` name for allocating a floating IP on the described OpenStack clouds?",
    "answer": "The typical `pool` name is `ext_net` (or `provider-199-2` as seen in the example output)."
  },
  {
    "question": "What Terraform resource is used to associate an allocated floating IP with an OpenStack compute instance?",
    "answer": "The `openstack_compute_floatingip_associate_v2` resource is used to associate a floating IP."
  },
  {
    "question": "How are attributes of one Terraform resource typically referenced in another resource?",
    "answer": "Attributes are typically referenced using the format `<resource type>.<resource name>.<attribute>`, for example, `openstack_networking_floatingip_v2.myvm_fip.address`."
  },
  {
    "question": "What does `var.<variable name>` refer to in Terraform attribute references?",
    "answer": "It refers to a variable defined within the Terraform configuration."
  },
  {
    "question": "What might be necessary if you cannot connect to the instance via SSH even after associating a floating IP?",
    "answer": "It might be necessary to add your computer's IP address to the project's default security group."
  },
  {
    "question": "Why is adding a root volume to an existing VM considered a destructive operation in Terraform?",
    "answer": "It is considered destructive because it replaces the VM's boot disk."
  },
  {
    "question": "What is an important consideration when making configuration changes in Terraform that require rebuilding existing virtual machines?",
    "answer": "It is incredibly easy to accidentally create configuration changes that require rebuilding existing VMs, so one must carefully read the `terraform plan` output before applying."
  },
  {
    "question": "According to the full example, what is the Terraform resource configuration for creating an OpenStack compute instance named \"myvm\" with a root volume?",
    "answer": "The resource configuration includes `name = \"myvm\"`, `flavor_id`, `key_pair`, `security_groups`, a `network` block with `name = \"my-tenant-net\"`, and a `block_device` block with `uuid` (image ID), `source_type = \"image\"`, `destination_type = \"volume\"`, `volume_size = 10`, `boot_index = 0`, and `delete_on_termination = true`."
  },
  {
    "question": "What are some official documentation resources recommended for further exploration of Terraform and its OpenStack provider?",
    "answer": "Recommended resources include \"What is Terraform?\", \"OpenStack Provider\", and \"OpenStack compute instance v2\" pages on terraform.io, as well as the wiki pages \"Cloud/fr\" and \"Cloud Quick Start/fr\"."
  },
  {
    "question": "What are some example projects mentioned for Terraform OpenStack?",
    "answer": "The \"Magic Castle\" project on GitHub and \"diodonfrost/terraform-openstack-examples\" on GitHub are mentioned."
  },
  {
    "question": "Where can you find the UUID of an image in the OpenStack Horizon web interface?",
    "answer": "You can find an image's UUID by navigating to the \"Images\" menu item under \"Compute\", clicking on the desired image from the list, and then viewing its details."
  },
  {
    "question": "Why is finding the UUID of a flavor more complicated in OpenStack Horizon compared to an image?",
    "answer": "Horizon allows you to select a flavor by name when launching an instance, but it does not directly display the flavor's UUID."
  },
  {
    "question": "What are two options for obtaining a flavor's UUID if you only know its name from Horizon?",
    "answer": "The two options are: 1) Use the name for the first Terraform execution, then retrieve the ID from the output or state file, and finally update the configuration to use the ID, or 2) Switch to using the OpenStack command-line interface (CLI)."
  },
  {
    "question": "Which method is recommended for obtaining a flavor's UUID?",
    "answer": "Using the OpenStack command-line interface (CLI) is recommended."
  }
]