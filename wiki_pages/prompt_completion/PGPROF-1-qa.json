[
  {
    "question": "What is PGPROF used for?",
    "answer": "PGPROF is a powerful and simple tool for analyzing the performance of parallel programs."
  },
  {
    "question": "What types of parallel programs can PGPROF analyze?",
    "answer": "PGPROF can analyze programs written with OpenMP, MPI, OpenACC, or CUDA."
  },
  {
    "question": "What are the two main profiling modes available in PGPROF?",
    "answer": "There are two profiling modes: Command-line mode and graphical mode."
  },
  {
    "question": "What are the two main steps involved in using PGPROF?",
    "answer": "Using PGPROF usually consists of two steps: Data collection (running the application with profiling enabled) and Analysis (visualizing the data produced)."
  },
  {
    "question": "Can both data collection and analysis be performed in both command-line and graphical modes?",
    "answer": "Yes, both data collection and analysis can be accomplished in either command-line mode or graphical mode."
  },
  {
    "question": "What is a prerequisite before starting profiling with PGPROF?",
    "answer": "Before you start profiling with PGPROF, the appropriate module needs to be loaded."
  },
  {
    "question": "How can you check available versions of the PGI compiler package, which includes PGPROF?",
    "answer": "You can run `module avail pgi` to see what versions are currently available with the loaded compiler, MPI, and CUDA modules."
  },
  {
    "question": "How do you get a comprehensive list of PGI modules?",
    "answer": "To get a comprehensive list of PGI modules, run `module -r spider '.*pgi.*'`."
  },
  {
    "question": "What versions of PGI were listed as available as of December 2018?",
    "answer": "As of December 2018, the listed versions were pgi/13.10 and pgi/17.3."
  },
  {
    "question": "How do you load a specific version of the PGI compiler, for example, version 17.3?",
    "answer": "To load a specific version, use `module load pgi/version`. For example, `module load pgi/17.3`."
  },
  {
    "question": "What is required for compiling code to get useful information from PGPROF?",
    "answer": "To get useful information from PGPROF, you first need to compile your code with one of the PGI compilers (pgcc for C, pgc++ for C++, pgfortran for Fortran)."
  },
  {
    "question": "What specific flag might be needed when compiling Fortran code for PGPROF?",
    "answer": "A source in Fortran may need to be compiled with the `-g` flag."
  },
  {
    "question": "How do you collect performance data for an application named `a.out` and save it to `a.prof` using PGPROF in command-line mode?",
    "answer": "Use the command `pgprof -o a.prof ./a.out`."
  },
  {
    "question": "After collecting data, how can you analyze a performance data file (`a.prof`) in command-line mode?",
    "answer": "To visualize the performance data in command-line mode, use the command `pgprof -i a.prof`."
  },
  {
    "question": "What are some typical categories of results displayed by PGPROF in command-line analysis?",
    "answer": "The results are usually divided into categories such as GPU kernel execution profile, CUDA API execution profile, OpenACC execution profile, and CPU execution profile."
  },
  {
    "question": "How can you filter the command-line output to show only CPU profiling results?",
    "answer": "You can use the option `--cpu-profiling` to show only the CPU results, for example: `pgprof --cpu-profiling -i a.prof`."
  },
  {
    "question": "How do you make PGPROF show CPU profiling results in a top-down call tree view?",
    "answer": "Use the option `--cpu-profiling-mode top-down`, for example: `pgprof --cpu-profiling-mode top-down -i a.prof`."
  },
  {
    "question": "What does the `--cpu-profiling-mode top-down` option show?",
    "answer": "This option makes PGPROF show the main subroutine at the top and the rest of the functions it called below it."
  },
  {
    "question": "How can you identify which part of your application takes the longest time to run using a call tree in command-line mode?",
    "answer": "You can use the option `--cpu-profiling-mode bottom-up`, which orients the call tree to show each function followed by functions that called it, working backwards to the main function."
  },
  {
    "question": "Can data collected in command-line mode be analyzed in graphical mode?",
    "answer": "Yes, the data file collected in command-line mode can be analyzed in graphical mode using the 'File | Import' command."
  },
  {
    "question": "Where should the PGI profiler's GUI be executed and why?",
    "answer": "Since the PGPROF's GUI is based on Java, it should be executed on the compute node in an interactive session rather than on the login node, as the latter does not have enough memory."
  },
  {
    "question": "How do you enable X11 forwarding for an interactive session when running the PGPROF GUI?",
    "answer": "An interactive session can be started with `salloc --x11 ...` to enable X11 forwarding."
  },
  {
    "question": "What are the steps to start a new profiling session in PGPROF's graphical mode for data collection?",
    "answer": "To start a new session, open the 'File' menu, click on 'New Session', select the executable file, add any arguments, and then click 'Next' and 'Finish'."
  },
  {
    "question": "How do you view the top-down call tree in the graphical mode for CPU details?",
    "answer": "In the 'CPU Details' tab, click on the 'Show the top-down (callers first) call tree view' button."
  },
  {
    "question": "What are the four main panes in the PGPROF visualization window in graphical mode?",
    "answer": "The visualization window is comprised of four panes: the upper right pane shows the timeline with events, 'GPU Details' shows performance details for GPU kernels, 'CPU Details' shows performance details for CPU functions, and 'Properties' shows details for a selected function."
  }
]