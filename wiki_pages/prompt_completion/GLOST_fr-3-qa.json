[
  {
    "question": "How are multiple commands within a single GLOST task separated?",
    "answer": "Commands within a single task must be separated by `&&`."
  },
  {
    "question": "How many tasks are listed in the `list_glost_example.txt` file in the first example?",
    "answer": "The `list_glost_example.txt` file contains eight tasks."
  },
  {
    "question": "What Slurm parameters are configured in the `run_glost_test.sh` script for `list_glost_example.txt`?",
    "answer": "The script specifies `--nodes=1`, `--ntasks-per-node=2`, `--time=00-02:00`, and `--mem-per-cpu=4000M`."
  },
  {
    "question": "Which GLOST module version is loaded in the initial `run_glost_test.sh` example script?",
    "answer": "The `glost/0.3.1` module is loaded, along with `intel/2023.2.1` and `openmpi/4.1.5`."
  },
  {
    "question": "How is GLOST launched in the `run_glost_test.sh` script example?",
    "answer": "GLOST is launched using `srun glost_launch list_glost_example.txt`."
  },
  {
    "question": "Can the provided `run_glost_test.sh` example script be executed directly?",
    "answer": "No, this example script cannot be executed directly because it does not contain actual commands and only shows the basic syntax."
  },
  {
    "question": "What does the `run_glost_test.sh` example script demonstrate?",
    "answer": "It demonstrates the basic syntax for the `list_glost_tasks.txt` argument for `glost_launch` and a typical script for submitting tasks."
  },
  {
    "question": "What must be done for the example script and task list to be functional?",
    "answer": "The list of tasks and the script must be adapted to the user's specific context."
  },
  {
    "question": "How can GLOST be used to execute sequential tasks within a single directory while avoiding conflicts?",
    "answer": "GLOST can execute a list of sequential tasks in a directory, but arguments should be added to differentiate tasks to avoid conflicts with temporary or output files."
  },
  {
    "question": "How many tasks are included in the example for tasks located in the same directory?",
    "answer": "The example for tasks in the same directory contains 10 tasks."
  },
  {
    "question": "What is the role of `nargument` in the 'same directory' example tasks?",
    "answer": "`nargument` defines a variable or parameter that can be passed to the program for differentiation."
  },
  {
    "question": "What command is used as a placeholder for program execution in the 'same directory' example tasks?",
    "answer": "The `sleep 360` command is used as a placeholder for program execution in the 'same directory' example."
  },
  {
    "question": "What command is used for optional output in the 'same directory' example tasks?",
    "answer": "The `echo ${nargument}.`hostname` > log_${nargument}.txt` command is used to print the argument and hostname to a log file."
  },
  {
    "question": "What should replace the `sleep 360` and `echo` commands in a real-world application when using the 'same directory' task example?",
    "answer": "`sleep 360` should be replaced by the application's command line (e.g., `./my_first_prog < first_input_file.txt > first_output_file.txt`), and the `echo` command by subsequent application commands (e.g., `./my_second_prog < second_input_file.txt > second_output_file.txt`)."
  },
  {
    "question": "How many cores and tasks are used in the 'same directory' example, and how are tasks assigned?",
    "answer": "The example uses 2 cores and a list of 10 tasks. The first two tasks are assigned to available processors, and once completed, processors move to the next tasks in the list until all are finished."
  },
  {
    "question": "Why would one execute GLOST tasks in different directories?",
    "answer": "Executing tasks in distinct directories can prevent abnormal task termination or overlapping results, especially when a program uses identical temporary or input/output file names."
  },
  {
    "question": "What is a prerequisite for tasks executed in different directories using GLOST?",
    "answer": "Each task must have its input files and its own dedicated directory."
  },
  {
    "question": "What Slurm parameter is set for `ntasks-per-node` in the script example for tasks in different directories?",
    "answer": "`--ntasks-per-node=3` is set in the script for tasks in different directories."
  },
  {
    "question": "What is the requested wall time in the script example for tasks in different directories?",
    "answer": "The requested wall time is `00-03:00`."
  },
  {
    "question": "How do tasks in different directories ensure unique output files in the example provided?",
    "answer": "Each task creates its own `RUN_${nargument}` directory, changes into it, and then writes its `log_run.txt` within that unique directory."
  }
]