[
  {
    "question": "What significant change was introduced in GCC with the transition from version 4.9 to 5.1?",
    "answer": "The transition from GCC version 4.9 to version 5.1 introduced a major change to its Application Binary Interface (ABI)."
  },
  {
    "question": "What might happen if different compiler versions are used after the GCC ABI change, especially when linking to precompiled libraries?",
    "answer": "If different compilers are used, the ABI change may cause linking to fail, particularly when linking to precompiled libraries provided in a vendor's product."
  },
  {
    "question": "How can you resolve linking failures when using GCC v5.1 or higher with libraries built using an older ABI?",
    "answer": "You can use GCC's Dual ABI feature by passing `-D_GLIBCXX_USE_CXX11_ABI=0` to GCC (v5.1 or higher) to tell it to use the old ABI for proper linking with legacy libraries."
  },
  {
    "question": "What type of error can `-D_GLIBCXX_USE_CXX11_ABI=0` help resolve?",
    "answer": "Using `-D_GLIBCXX_USE_CXX11_ABI=0` can resolve errors like 'std::list' is ambiguous."
  },
  {
    "question": "What is the Application Binary Interface (ABI) in the context of C++ compilers?",
    "answer": "The Application Binary Interface (ABI) comprises the compiler-specific mangled and exported `extern \"C++\"` symbol names that C++ compilers use to link compiled code with libraries."
  },
  {
    "question": "What is a potential consequence of a change to a compiler's ABI?",
    "answer": "Any change to a compiler's ABI can result in programs failing to link."
  },
  {
    "question": "What is crucial for successful linking of binaries to form a final program or library?",
    "answer": "For binaries to be successfully linked, all symbol names must match up; otherwise, linking will fail."
  },
  {
    "question": "What is the purpose of the `main.cxx` source code provided in the example?",
    "answer": "The `main.cxx` source code is a C++ program that includes `<iostream>` and `<string>` to print 'Hello World!', used to generate ABI symbol names for illustrating ABI differences."
  },
  {
    "question": "What different compiler settings are used in the provided Makefile to illustrate ABI differences?",
    "answer": "The Makefile compiles `main.cxx` with various settings, including `-std=c++98`, `-std=c++11`, `-D_GLIBCXX_USE_CXX11_ABI=1`, and `-D_GLIBCXX_USE_CXX11_ABI=0`."
  },
  {
    "question": "What prerequisite is mentioned before running the example Makefile?",
    "answer": "Before running the `make` command for the example, one must ensure that a module for GCC v5.1 or higher has been loaded."
  }
]