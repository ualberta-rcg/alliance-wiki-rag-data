[
  {
    "question": "What is the policy regarding the purging list if files are accessed, read, moved, or deleted between the 1st and 11th of the month?",
    "answer": "If you access, read, move, or delete files between the 1st and the 11th of the month, no modification will be made to the purging list before the 12th."
  },
  {
    "question": "What does it indicate if a file with your name is on the purging list before the 11th but not on the 12th?",
    "answer": "If a file with your name exists before the 11th but not the 12th, none of your files are susceptible to being purged."
  },
  {
    "question": "What action is required if files are accessed, read, moved, or deleted after the 12th of the month?",
    "answer": "If you access, read, move, or delete files after the 12th of the month, you will need to confirm whether the files can or cannot be purged on the 15th."
  },
  {
    "question": "How is the age of a file determined for purging purposes?",
    "answer": "The age of a file is determined by `atime` (the moment of the last access) and `ctime` (the moment of the last modification)."
  },
  {
    "question": "Which command is used to find the `ctime` (last modification time) of a file?",
    "answer": "To find `ctime`, use the command `ls -lc <filename>`."
  },
  {
    "question": "Which command is used to find the `atime` (last access time) of a file?",
    "answer": "To find `atime`, use the command `ls -lu <filename>`."
  },
  {
    "question": "Why is `mtime` not used to determine a file's age?",
    "answer": "The `mtime` parameter is not used because its value can be modified by the user or by another program to display false information."
  },
  {
    "question": "Why is `ctime` used in addition to `atime` when determining file age, given that `atime` is updated by the system?",
    "answer": "While `atime` is updated by the system, user programs can potentially modify `atime` to set its value in the past. Using `ctime` adds a second level of control."
  },
  {
    "question": "What is considered a 'bad practice' regarding file age on the /scratch space?",
    "answer": "Falsifying the age of files with the periodic execution of the recursive `touch` command is considered a bad practice."
  },
  {
    "question": "What are the consequences for users who are detected falsifying file age on /scratch?",
    "answer": "The technical team has ways to detect such practices, and users engaged in them will be asked to remove the tampered files from the /scratch space."
  },
  {
    "question": "What tools are typically sufficient for copying data from /scratch to a project space?",
    "answer": "In most cases, `cp` or `rsync` will be sufficient for copying data from /scratch to your project."
  },
  {
    "question": "What problem arises when copying directories containing symbolic links from /scratch using `cp` or `rsync`?",
    "answer": "When copying directories with symbolic links using `cp` or `rsync`, the symlinks will continue to point towards /scratch, causing problems."
  },
  {
    "question": "How can one safely copy a directory with symbolic links from /scratch to a project space?",
    "answer": "To safely copy a directory with symbolic links, you can use `tar` to create an archive of your files on /scratch, and then extract it in your project."
  },
  {
    "question": "Provide the command to safely copy a directory named 'vos_donnees' from /scratch to /project, preserving symlinks.",
    "answer": "The command is: `cd /scratch/.../vos_donnees; mkdir project/.../vos_donnees; tar cf - ./* | (cd /project/.../vos_donnees && tar xf -)`."
  }
]