[
  {
    "question": "What is the purpose of the `SBATCH_ACCOUNT` environment variable?",
    "answer": "Slurm uses the value of `SBATCH_ACCOUNT` in place of the `--account` directive specified in the job script."
  },
  {
    "question": "Which takes precedence: an account name in a job script or one set via the `SBATCH_ACCOUNT` environment variable?",
    "answer": "The environment variable `SBATCH_ACCOUNT` takes priority over an account name supplied inside the job script."
  },
  {
    "question": "How can you override the `SBATCH_ACCOUNT` environment variable?",
    "answer": "To override the `SBATCH_ACCOUNT` environment variable, you must supply an account name as a command-line argument to `sbatch`."
  },
  {
    "question": "What is the role of the `SLURM_ACCOUNT` environment variable?",
    "answer": "`SLURM_ACCOUNT` plays the same role as `SBATCH_ACCOUNT`, but it applies to the `srun` command."
  },
  {
    "question": "What is the function of the `SALLOC_ACCOUNT` environment variable?",
    "answer": "The `SALLOC_ACCOUNT` environment variable works similarly to `SBATCH_ACCOUNT` and `SLURM_ACCOUNT`, presumably for `salloc` commands."
  },
  {
    "question": "What is a serial job?",
    "answer": "A serial job is a type of job that requests only a single CPU core."
  },
  {
    "question": "What is an array job in Slurm?",
    "answer": "An array job, also known as a task array, is a way to submit a whole set of jobs with a single command."
  },
  {
    "question": "How are individual jobs within a Slurm array job identified?",
    "answer": "Individual jobs in an array are distinguished by the environment variable `$SLURM_ARRAY_TASK_ID`, which is set to a different value for each instance."
  },
  {
    "question": "How do you specify the number of tasks for an array job?",
    "answer": "You specify the number of tasks using the `#SBATCH --array=X-Y` directive, for example, `#SBATCH --array=1-10` to create 10 tasks."
  },
  {
    "question": "How do you request multiple CPU cores for a threaded or OpenMP job in Slurm?",
    "answer": "You request multiple CPU cores using the `#SBATCH --cpus-per-task=N` directive, where N is the desired number of cores, such as `8`."
  },
  {
    "question": "What environment variable is typically set for OpenMP applications in a Slurm job script?",
    "answer": "The `OMP_NUM_THREADS` environment variable should be set, often using `$SLURM_CPUS_PER_TASK`."
  },
  {
    "question": "What compilation flag is required for an application to utilize OpenMP?",
    "answer": "For an application to use OpenMP, it must be compiled with an appropriate flag, such as `gcc -fopenmp` or `icc -openmp`."
  },
  {
    "question": "How do you specify the number of MPI processes per node in a Slurm job script?",
    "answer": "You specify the number of MPI processes per node using the `#SBATCH --ntasks-per-node=N` directive, for example, `#SBATCH --ntasks-per-node=4`."
  },
  {
    "question": "How is memory requested per CPU for an MPI job?",
    "answer": "Memory per CPU is requested using the `#SBATCH --mem-per-cpu=SIZE` directive, such as `#SBATCH --mem-per-cpu=1024M`, where the default unit is megabytes."
  },
  {
    "question": "What command is commonly used to launch an MPI program within a Slurm job script?",
    "answer": "The `srun` command is used to launch an MPI program (e.g., `srun ./mpi_program`), though `mpirun` or `mpiexec` also work."
  },
  {
    "question": "Where can I find documentation on requesting GPU resources with Slurm?",
    "answer": "Information and examples on requesting GPU resources with Slurm can be found on the 'Using GPUs with Slurm' page."
  },
  {
    "question": "What are the benefits of using interactive jobs?",
    "answer": "Interactive jobs are useful for tasks such as data exploration at the command line, using interactive console tools like R and iPython, and for significant software development, debugging, or compiling."
  },
  {
    "question": "What command is used to start an interactive session on a compute node?",
    "answer": "The `salloc` command is used to start an interactive session on a compute node."
  },
  {
    "question": "How do you request resources like time, memory, and tasks for an interactive job?",
    "answer": "You request resources for an interactive job by specifying options such as `--time`, `--mem-per-cpu`, `--ntasks`, and `--account` with the `salloc` command, for example: `$ salloc --time=1:0:0 --mem-per-cpu=3G --ntasks=1 --account=def-someuser`."
  },
  {
    "question": "How can graphical programs be run interactively on a compute node?",
    "answer": "Graphical programs can be run interactively on a compute node by adding the `--x11` flag to the `salloc` command, provided that you first connected to the cluster with X11 forwarding enabled."
  },
  {
    "question": "How does the requested duration of an interactive job affect when it starts?",
    "answer": "Interactive jobs with a duration of three hours or less are likely to start very soon due to dedicated test nodes. Interactive jobs requesting more than three hours run on regular nodes and may experience longer, unpredictable wait times."
  }
]