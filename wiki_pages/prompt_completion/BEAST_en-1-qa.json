[
  {
    "question": "What is BEAST?",
    "answer": "BEAST is a cross-platform program designed for Bayesian MCMC analysis of molecular sequences."
  },
  {
    "question": "What is BEAST primarily used for?",
    "answer": "It is entirely orientated towards rooted, time-measured phylogenies inferred using strict or relaxed molecular clock models."
  },
  {
    "question": "Besides reconstructing phylogenies, what else can BEAST be used for?",
    "answer": "BEAST can be used as a framework for testing evolutionary hypotheses without conditioning on a single tree topology."
  },
  {
    "question": "How does BEAST handle tree space?",
    "answer": "BEAST uses MCMC to average over tree space, weighting each tree proportionally to its posterior probability."
  },
  {
    "question": "Which high-performance library can BEAST utilize for its core calculations?",
    "answer": "BEAST can use the beagle-lib, which is a high-performance library for core calculations in Bayesian and Maximum Likelihood phylogenetics packages."
  },
  {
    "question": "How do you load the BEAST module?",
    "answer": "You load the BEAST module using the command: `module load beast`."
  },
  {
    "question": "What dependencies are automatically loaded when the BEAST module is loaded?",
    "answer": "Loading the BEAST module automatically loads `beagle-lib` and `java` modules."
  },
  {
    "question": "What environment variable is set when the BEAST module is loaded, and what does it point to?",
    "answer": "The environment variable `EBROOTBEAST` is set, pointing to the directory where BEAST's program files are located."
  },
  {
    "question": "How is BEAST initially installed concerning packages or add-ons?",
    "answer": "BEAST is installed without any packages (add-ons)."
  },
  {
    "question": "Which command is used to install BEAST packages for versions 2.5.1 and newer?",
    "answer": "For BEAST v2.5.1 and newer, the `packagemanager` command is used."
  },
  {
    "question": "Which command is used to install BEAST packages for versions older than 2.5.1?",
    "answer": "For older versions of BEAST (e.g., v2.4.x), the `addonmanager` command is used."
  },
  {
    "question": "Where are desired BEAST packages installed?",
    "answer": "Desired packages are installed within your home directory."
  },
  {
    "question": "How do you list available packages for BEAST version 2.5.1?",
    "answer": "After loading `module load beast/2.5.1`, use the command `packagemanager -list`."
  },
  {
    "question": "How do you install the SNAPP package for BEAST version 2.5.1?",
    "answer": "After loading `module load beast/2.5.1`, use the command `packagemanager -add SNAPP`."
  },
  {
    "question": "Where is the SNAPP package installed for BEAST version 2.5.1?",
    "answer": "The SNAPP package is installed in `~/.beast/2.5/SNAPP`."
  },
  {
    "question": "How do you list available packages for BEAST version 2.4.0?",
    "answer": "After loading `module load beast/2.4.0`, use the command `addonmanager -list`."
  },
  {
    "question": "How do you install the SNAPP package for BEAST version 2.4.0?",
    "answer": "After loading `module load beast/2.4.0`, use the command `addonmanager -add SNAPP`."
  },
  {
    "question": "Where is the SNAPP package installed for BEAST version 2.4.0?",
    "answer": "The SNAPP package is installed in `~/.beast/2.4/SNAPP`."
  },
  {
    "question": "Where can users find more information on managing BEAST packages?",
    "answer": "More information on managing BEAST packages can be found in the \"Server machines\" section at http://www.beast2.org/managing-packages/."
  },
  {
    "question": "What is an example SLURM directive for setting the account in a BEAST jobscript?",
    "answer": "An example SLURM directive for setting the account is `#SBATCH --account=def-someuser`."
  },
  {
    "question": "What is an example SLURM directive for setting the time limit in a BEAST jobscript?",
    "answer": "An example SLURM directive for setting the time limit is `#SBATCH --time=3:00:00`."
  },
  {
    "question": "What is an example SLURM directive for setting memory per CPU in a simple BEAST jobscript?",
    "answer": "An example SLURM directive for setting memory per CPU is `#SBATCH --mem-per-cpu=2000M`."
  },
  {
    "question": "How is BEAST executed with an input XML file in a simple jobscript?",
    "answer": "BEAST is executed using the command `beast input_beast.xml`."
  },
  {
    "question": "How do you specify a custom maximum memory for BEAST in a jobscript?",
    "answer": "You can specify a custom maximum memory by setting the `BEAST_MEM` variable, for example `BEAST_MEM=\"-Xmx3750M\"`."
  },
  {
    "question": "What is the recommended relationship between the `BEAST_MEM` setting and the SLURM memory directive (`--mem` or `--mem-per-cpu`)?",
    "answer": "`BEAST_MEM` needs to be 250M lower than the `--mem` or `--mem-per-cpu` value."
  },
  {
    "question": "How are the BEAST and BEAGLE-lib paths defined for a high-memory BEAST job?",
    "answer": "The paths are defined by `BEAST_LIB=\"${EBROOTBEAST}/lib\"` and `BEAST_EXTRA_LIBS=\"${BEAST_LIB}:${BEAGLE_LIB}\"`."
  },
  {
    "question": "How is the `LD_LIBRARY_PATH` environment variable updated for a high-memory BEAST job?",
    "answer": "The `LD_LIBRARY_PATH` is updated using `export LD_LIBRARY_PATH=\"${BEAGLE_LIB}:${LD_LIBRARY_PATH}\"`."
  },
  {
    "question": "What is the structure of the Java command used to run BEAST with increased memory and beagle-lib?",
    "answer": "The Java command (`CMD`) is constructed by setting initial memory (`-Xms256m ${BEAST_MEM}`), pointing to libraries (`-Djava.library.path=${BEAST_EXTRA_LIBS}`), and specifying the program to execute (`-cp ${BEAST_LIB}/launcher.jar beast.app.beastapp.BeastLauncher`)."
  },
  {
    "question": "How is the BEAST application finally executed with the beagle-lib option in a high-memory jobscript?",
    "answer": "It is executed using `$CMD -beagle input_beast.xml`."
  }
]