[
  {
    "question": "What packages are required to be installed on a CentOS VM before compiling ParaView or VisIt for a custom setup?",
    "answer": "On a CentOS VM, you need to install `xauth`, `wget`, `gcc`, `gcc-c++`, `ncurses-devel`, `python-devel`, `libxcb-devel`, `patch`, `imake`, `libxml2-python`, `mesa-libGL`, `mesa-libGL-devel`, `mesa-libGLU`, `mesa-libGLU-devel`, `bzip2`, `bzip2-libs`, `libXt-devel`, `zlib-devel`, `flex`, and `byacc`."
  },
  {
    "question": "What command is used to link a specific header file on a CentOS VM as part of the prerequisites?",
    "answer": "The command `sudo ln -s /usr/include/GL/glx.h /usr/local/include/GL/glx.h` is used to link the `glx.h` header file."
  },
  {
    "question": "How can a user copy their public SSH key to a cloud VM to simplify future logins?",
    "answer": "On your computer, you can use the command `cat ~/.ssh/id_rsa.pub | ssh -i ~/.ssh/cloudwestkey.pem centos@vm.ip.address 'cat >>.ssh/authorized_keys'` to copy your public SSH key to the VM."
  },
  {
    "question": "Why is it necessary to compile ParaView with OSMesa support on a cloud VM?",
    "answer": "It is necessary because most Arbutus VMs do not have access to a GPU, so OSMesa support is needed for ParaView to perform offscreen (software) rendering using the CPU."
  },
  {
    "question": "What does the default configuration of OSMesa enable when compiling for a cloud VM?",
    "answer": "The default configuration of OSMesa enables OpenSWR, which is Intel's software rasterization library for running OpenGL."
  },
  {
    "question": "Which drivers are built with OSMesa for offscreen CPU-based rendering, and which one is recommended?",
    "answer": "Both `llvmpipe` (older and slower) and `SWR` (newer and faster) drivers are built. `SWR` is recommended for use."
  },
  {
    "question": "What are the steps to compile CMake on the VM?",
    "answer": "To compile CMake, you first download the tarball (e.g., `wget https://cmake.org/files/v4.1/cmake-4.1.1.tar.gz`), unpack it, `cd` into the directory, run `./bootstrap`, then `make`, and finally `sudo make install`."
  },
  {
    "question": "How do you compile LLVM on the VM for the ParaView server setup?",
    "answer": "First, download LLVM (e.g., `wget https://github.com/llvm/llvm-project/releases/download/llvmorg-21.1.0/LLVM-21.1.0-Linux-X64.tar.xz`), unpack it, create and navigate to a `build` directory. Then run `cmake` with specific flags (`-DCMAKE_BUILD_TYPE=Release -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_INSTALL_UTILS=ON -DLLVM_TARGETS_TO_BUILD:STRING=X86 ..`), followed by `make` and `sudo make install`."
  },
  {
    "question": "What are the steps to compile Mesa with OSMesa support on the VM?",
    "answer": "Download Mesa (e.g., `wget https://archive.mesa3d.org/mesa-25.2.3.tar.xz`), unpack it, `cd` into the directory, run `./configure` with specified flags (`--enable-opengl --disable-gles1 --disable-gles2 --disable-va --disable-xvmc --disable-vdpau --enable-shared-glapi --disable-texture-float --enable-gallium-llvm --enable-llvm-shared-libs --with-gallium-drivers=swrast,swr --disable-dri --disable-egl --disable-gbm --disable-glx --disable-osmesa --enable-gallium-osmesa`), then `make` and `sudo make install`."
  },
  {
    "question": "How do you compile the ParaView server on the VM with OSMesa support?",
    "answer": "Download ParaView (e.g., `wget https://www.paraview.org/files/v6.0/ParaView-v6.0.0.tar.gz`), unpack it, create and navigate to a `build` directory. Then run `cmake` with specific flags (`-DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/home/centos/paraview -DPARAVIEW_USE_MPI=OFF -DPARAVIEW_ENABLE_PYTHON=ON -DPARAVIEW_BUILD_QT_GUI=OFF -DVTK_OPENGL_HAS_OSMESA=ON -DVTK_USE_OFFSCREEN=ON -DVTK_USE_X=OFF ..`), followed by `make` and `make install`."
  },
  {
    "question": "What is the command to start the ParaView server on the VM with SWR rendering?",
    "answer": "To start the ParaView server, use the command `./paraview/bin/pvserver --force-offscreen-rendering --opengl-window-backend OSMesa`."
  },
  {
    "question": "How do you set up an SSH tunnel from your local computer to the VM for the ParaView client-server connection?",
    "answer": "On your computer, open a terminal and use the command `ssh centos@vm.ip.address -L 11111:localhost:11111` to organize an SSH tunnel from local port 11111 to the VM's port 11111."
  },
  {
    "question": "After setting up the SSH tunnel, how do you connect the ParaView client on your computer to the server running on the VM?",
    "answer": "Start the ParaView client on your computer and connect to `localhost:11111`."
  },
  {
    "question": "What message indicates successful SWR rendering during a ParaView client-server connection to a cloud VM?",
    "answer": "During rendering in the console, you should see the message 'SWR detected AVX2'."
  }
]