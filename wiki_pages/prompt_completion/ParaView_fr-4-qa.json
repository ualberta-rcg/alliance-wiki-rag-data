[
  {
    "question": "How do you establish an SSH tunnel for a ParaView client-server connection on Trillium?",
    "answer": "You establish an SSH tunnel by executing the command `ssh YOURusername@trillium.alliancecan.ca -L11111:niaXYZW:11111 -N` on your Mac/Linux computer."
  },
  {
    "question": "What is the purpose of the SSH tunnel created for Trillium ParaView connections?",
    "answer": "This SSH tunnel associates port 11111 on your local computer (`localhost`) with port 11111 on the compute node (`niaXYZW`) where the ParaView server is awaiting connections."
  },
  {
    "question": "How do you configure the ParaView client to connect to the remote server on Trillium?",
    "answer": "On your computer, start ParaView, go to 'File -> Connect', then click 'Add Server'. Configure the parameters as: `name = trillium`, `server type = Client/Server`, `host = localhost`, `port = 11111`. Then click 'Configure', select 'Manual', and click 'Save'."
  },
  {
    "question": "How do you confirm that the ParaView client has successfully connected to the server on Trillium?",
    "answer": "The message in the terminal window where the server is running will change from `Accepting connection...` to `Client connected`."
  },
  {
    "question": "What is the next step after successfully connecting the ParaView client to the server on Trillium?",
    "answer": "After the connection is established, you can open a ParaView file, which will direct you to the remote file system, to visualize the data as usual."
  },
  {
    "question": "How should `pvserver` be executed for parallel rendering with multiple CPUs on Trillium?",
    "answer": "For parallel rendering with multiple CPUs, `pvserver` should be executed with `mpiexec`, or by submitting a task script or requesting a task with `salloc` followed by `srun pvserver --mesa`."
  },
  {
    "question": "What `salloc` command is used to request a task for parallel rendering with multiple CPUs on Trillium?",
    "answer": "You can request a task using `salloc --ntasks=N*40 --nodes=N --time=1:00:00`, where `N` is the number of nodes and `N*40` is the total number of tasks (the product of the multiplication)."
  },
  {
    "question": "How do you start the ParaView server using `srun` after allocating resources for parallel CPU rendering on Trillium?",
    "answer": "After allocating resources, you need to first load the ParaView module (`module load paraview`), then run `srun pvserver --mesa`."
  },
  {
    "question": "Is the information regarding client-server visualization on the cloud current?",
    "answer": "No, the section on client-server visualization on the cloud is marked as outdated."
  },
  {
    "question": "Where can one find information about creating an instance for cloud client-server visualization?",
    "answer": "The 'Cloud Quick Start/fr' page describes the creation of an instance."
  },
  {
    "question": "What packages are required to be installed on a CentOS instance for compiling ParaView and VisIt for cloud visualization?",
    "answer": "On a CentOS instance, you need to install `xauth wget gcc gcc-c++ ncurses-devel python-devel libxcb-devel`, `patch imake libxml2-python mesa-libGL mesa-libGL-devel`, `mesa-libGLU mesa-libGLU-devel bzip2 bzip2-libs libXt-devel zlib-devel flex byacc`."
  },
  {
    "question": "How can you copy your public SSH key to a cloud instance to simplify connections?",
    "answer": "On your computer, you can run the command `cat ~/.ssh/id_rsa.pub | ssh -i ~/.ssh/cloudwestkey.pem centos@vm.ip.address 'cat >>.ssh/authorized_keys'` to copy your public key to the instance's `authorized_keys` file."
  },
  {
    "question": "Why is it necessary to compile ParaView with OSMesa for cloud instances?",
    "answer": "It is necessary to compile ParaView with OSMesa because cloud instances typically do not have access to a GPU, requiring offscreen rendering."
  },
  {
    "question": "What is activated by default when ParaView is compiled with OSMesa?",
    "answer": "The default configuration of OSMesa activates OpenSWR, Intel's software rasterization library, which enables OpenGL operations."
  },
  {
    "question": "What is the result of compiling ParaView with OSMesa for cloud instances?",
    "answer": "The ParaView server will use OSMesa to construct an X-less offscreen render with a processor, using the newer and faster `llvmpipe` and `SWR` drivers; SWR is recommended."
  },
  {
    "question": "What are the steps to compile CMake on a cloud instance?",
    "answer": "To compile CMake, you need to download `cmake-3.7.0.tar.gz`, unpack it, navigate to its directory, then run `./bootstrap`, `make`, and `sudo make install`."
  },
  {
    "question": "What are the initial steps for compiling LLVM on a cloud instance?",
    "answer": "First, change directory to your home, then use `wget` to download `http://releases.llvm.org/3.9.1/llvm-3.9.1.src.tar.xz`, unpack it, create a `build` directory, and navigate into it."
  },
  {
    "question": "Which CMake options are specified for compiling LLVM on a cloud instance?",
    "answer": "The `cmake` command for LLVM compilation includes `-DCMAKE_BUILD_TYPE=Release`, `-DLLVM_BUILD_LLVM_DYLIB=ON`, `-DLLVM_ENABLE_RTTI=ON`, `-DLLVM_INSTALL_UTILS=ON`, and `-DLLVM_TARGETS_TO_BUILD:STRING=X86`."
  }
]