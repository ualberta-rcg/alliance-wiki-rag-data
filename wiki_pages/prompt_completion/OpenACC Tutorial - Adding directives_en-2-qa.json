[
  {
    "question": "Which NVidia compiler option enables compilation for an accelerator?",
    "answer": "The `-acc` option is used with NVidia compilers to enable compilation for an accelerator."
  },
  {
    "question": "What is the purpose of the `-gpu=managed` sub-option when compiling with OpenACC?",
    "answer": "The `-gpu=managed` sub-option instructs the compiler to use managed memory, simplifying data transfers to and from the device."
  },
  {
    "question": "What is the function of the `-fast` option during OpenACC compilation?",
    "answer": "The `-fast` option is an optimization option used during OpenACC compilation."
  },
  {
    "question": "Why might a compiler fail to parallelize loops, especially in C/C++?",
    "answer": "A compiler might fail to parallelize loops due to 'pointer aliasing', where it cannot determine if different pointers refer to the same memory, thus assuming dependencies."
  },
  {
    "question": "What is pointer aliasing in C/C++?",
    "answer": "Two pointers are said to be aliased if they point to the same memory location."
  },
  {
    "question": "How can a programmer inform the C compiler that pointers will not be aliased?",
    "answer": "In C (specifically C99), the `restrict` keyword can be used to tell the compiler that pointers will not be aliased."
  },
  {
    "question": "Is there a standard `restrict` keyword in C++? If not, what is used by Portland Group and NVidia compilers?",
    "answer": "There is no standard `restrict` keyword in C++ yet. For Portland Group and NVidia compilers, `__restrict` is used."
  },
  {
    "question": "Where should the `__restrict` keyword be placed in a C/C++ pointer declaration?",
    "answer": "The keyword should be placed after the pointer, for example, `float * __restrict A;`."
  },
  {
    "question": "What is the formal meaning of declaring a pointer as `restrict`?",
    "answer": "Declaring a pointer as `restrict` formally means that for 'the lifetime of the pointer, only it or a value derived from it (such as `ptr +1`) will be used to access the object to which it points'."
  },
  {
    "question": "What happens if a programmer violates the guarantee made by the `restrict` keyword?",
    "answer": "If the programmer violates the guarantee given by the `restrict` keyword, the program's behavior is undefined."
  },
  {
    "question": "What OpenACC directive and clause can explicitly tell the compiler that loop iterations are independent?",
    "answer": "The `loop` directive with the `independent` clause (`#pragma acc loop independent`) can be used to explicitly specify that loop iterations are independent."
  },
  {
    "question": "Is the `loop` directive with the `independent` clause a descriptive or prescriptive directive?",
    "answer": "It is a prescriptive directive, meaning it tells the compiler what to do and overrides any compiler analysis."
  }
]