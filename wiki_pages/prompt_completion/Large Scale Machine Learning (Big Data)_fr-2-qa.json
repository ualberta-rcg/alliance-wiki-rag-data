[
  {
    "question": "What is SGDRegressor used for in scikit-learn?",
    "answer": "SGDRegressor implements several types of Generalized Linear Models (GLM) for regressions using the Stochastic Gradient Descent (SGD) algorithm as a solver."
  },
  {
    "question": "How can one perform a ridge regression using SGDRegressor?",
    "answer": "To perform a ridge regression with SGDRegressor, set the 'penalty' parameter to 'l2', for example: `model = SGDRegressor(penalty='l2')`."
  },
  {
    "question": "What is a limitation of SGDRegressor?",
    "answer": "SGDRegressor only functions if the output (result) is unidimensional (scalar)."
  },
  {
    "question": "What is 'out-of-core learning' in scikit-learn?",
    "answer": "'Out-of-core learning' is a technique for handling datasets too large for available memory, where data is kept on disk and loaded in batches for training, similar to deep learning packages."
  },
  {
    "question": "Under what condition is 'out-of-core learning' a viable option in scikit-learn?",
    "answer": "It is a viable option when the estimator offers the `partial_fit` method for incremental learning."
  },
  {
    "question": "Which scikit-learn class is used to adjust a linear SVM classifier with batch data from numpy vectors?",
    "answer": "The `SGDClassifier` class is used to adjust a linear SVM classifier with batch data from numpy vectors."
  },
  {
    "question": "How are numpy vectors stored for batch processing in the `svm-sgd-npy.py` example?",
    "answer": "The numpy vectors are stored on disk in `.npy` files and then memory-mapped (`np.memmap`) for efficient access."
  },
  {
    "question": "What does each call to `partial_fit` execute when performing out-of-core learning with SGDClassifier?",
    "answer": "Each call to `partial_fit` executes an epoch of the stochastic gradient algorithm on a batch of data."
  },
  {
    "question": "How can a Linear SVM be fitted using `SGDClassifier`?",
    "answer": "A Linear SVM can be fitted by setting the `loss` parameter to `'hinge'`, i.e., `SGDClassifier(loss='hinge')`."
  },
  {
    "question": "What is an alternative method for storing data for batch training besides numpy files?",
    "answer": "Another method for storing data is to use CSV files."
  },
  {
    "question": "Which Python package is used to read data in batches from a CSV file for training a lasso regression model?",
    "answer": "The `pandas` package is used to read data in batches from a CSV file, typically using `pd.read_csv` with `chunksize` and `iterator=True`."
  },
  {
    "question": "What is Snap ML?",
    "answer": "Snap ML is a proprietary machine learning library developed by IBM that supports several classical models and is designed for scalability with datasets containing billions of examples and/or variables."
  },
  {
    "question": "What features does Snap ML offer for handling large-scale machine learning tasks?",
    "answer": "Snap ML offers distributed training, GPU acceleration, and the use of sparse structures."
  },
  {
    "question": "How does Snap ML's API relate to scikit-learn?",
    "answer": "Snap ML's API is very similar to scikit-learn's and can replace it for massive datasets."
  },
  {
    "question": "How can you check the latest built version of Snap ML?",
    "answer": "You can check the latest built version of Snap ML by running the command `avail_wheels \"snapml\"`."
  },
  {
    "question": "What is the preferred method for installing Snap ML?",
    "answer": "The preferred method for installing Snap ML is to use the Python wheel."
  },
  {
    "question": "What are the steps to install Snap ML using pip in a virtual environment?",
    "answer": "First, load a Python module (`module load python`), then create and launch a virtual Python environment, and finally, install Snap ML within the virtual environment using `pip install --no-index snapml`."
  }
]