[
  {
    "question": "What is OpenMM?",
    "answer": "OpenMM is a toolkit designed for molecular simulation, which can be used as a standalone application or as a library."
  },
  {
    "question": "What makes OpenMM unique among MD simulation packages?",
    "answer": "OpenMM is unique due to its combination of extreme flexibility (through custom forces and integrators), openness, and high performance, especially on recent GPUs."
  },
  {
    "question": "Where can I find the OpenMM home page?",
    "answer": "The OpenMM home page is at https://openmm.org/."
  },
  {
    "question": "What version of the OpenMM module is used in this example?",
    "answer": "This example is for the openmm/7.7.0 module."
  },
  {
    "question": "How do you create and activate a Python virtual environment for OpenMM?",
    "answer": "First, load the python module, then run `virtualenv $HOME/env-parmed` to create it, and `source $HOME/env-parmed/bin/activate` to activate it."
  },
  {
    "question": "Which Python modules need to be installed for this OpenMM example?",
    "answer": "The ParmEd and netCDF4 Python modules need to be installed."
  },
  {
    "question": "What command is used to install ParmEd and netCDF4 in the virtual environment?",
    "answer": "The command is `pip install --no-index parmed==3.4.3 netCDF4`."
  },
  {
    "question": "What is the name of the example job script for OpenMM?",
    "answer": "The example job script is named `submit_openmm.cuda.sh`."
  },
  {
    "question": "How many GPUs are requested by the example job script?",
    "answer": "The example job script requests 1 GPU."
  },
  {
    "question": "What is the memory per CPU requested in the example job script?",
    "answer": "The example job script requests 4000M (4GB) of memory per CPU."
  },
  {
    "question": "What is the time limit set for the job in the example script?",
    "answer": "The time limit for the job is set to 0-01:00:00 (1 hour)."
  },
  {
    "question": "What modules are loaded in the `submit_openmm.cuda.sh` script?",
    "answer": "The script loads StdEnv/2020, gcc/9.3.0, cuda/11.4, openmpi/4.0.3, python/3.8.10, openmm/7.7.0, netcdf/4.7.4, hdf5/1.10.6, and mpi4py/3.0.3."
  },
  {
    "question": "What is the purpose of the `openmm_input.py` script?",
    "answer": "The `openmm_input.py` script loads Amber files, creates the OpenMM simulation system, sets up integration, and runs dynamics."
  },
  {
    "question": "Where can an example of `openmm_input.py` be found?",
    "answer": "An example of `openmm_input.py` is available at https://mdbench.ace-net.ca/mdbench/idbenchmark/?q=129."
  },
  {
    "question": "Who created the Molecular Dynamics Performance Guide for Alliance clusters?",
    "answer": "A team at ACENET created the Molecular Dynamics Performance Guide for Alliance clusters."
  },
  {
    "question": "What is the purpose of the Molecular Dynamics Performance Guide?",
    "answer": "It helps determine optimal conditions for AMBER, GROMACS, NAMD, and OpenMM jobs."
  },
  {
    "question": "How many CPUs does OpenMM on the CUDA platform require per GPU?",
    "answer": "OpenMM on the CUDA platform requires only one CPU per GPU."
  },
  {
    "question": "Why does OpenMM on CUDA require only one CPU per GPU?",
    "answer": "Because OpenMM does not use CPUs for calculations when running on the CUDA platform."
  },
  {
    "question": "What is considered the most efficient way to run OpenMM simulations regarding GPUs?",
    "answer": "The most efficient way to run OpenMM simulations is to use a single GPU, even though it can use several in one node."
  },
  {
    "question": "When does OpenMM run faster on multiple GPUs?",
    "answer": "OpenMM runs slightly faster on multiple GPUs on nodes with NvLink, where GPUs are connected directly."
  },
  {
    "question": "What is the speedup for OpenMM simulations on P100 GPUs without NvLink?",
    "answer": "Without NvLink, there is very little speedup of simulations on P100 GPUs."
  }
]