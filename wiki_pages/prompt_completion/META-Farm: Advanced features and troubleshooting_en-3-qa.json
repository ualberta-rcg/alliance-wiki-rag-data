[
  {
    "question": "How can I detect if a GPU is unavailable within a meta-farm job?",
    "answer": "You can add a call to the `~/bin/gpu_test` utility and check its return value in `job_script.sh` right before the `task.run` line. If the return value (`retVal`) is non-zero, it indicates no GPU was found, and the job should exit."
  },
  {
    "question": "What is the purpose of including the `gpu_test` snippet in `job_script.sh` for GPU applications?",
    "answer": "The `gpu_test` snippet helps catch rare situations where a compute node's GPU is unavailable, preventing the meta-job from attempting to run all cases from `table.dat` fruitlessly if a GPU problem exists."
  },
  {
    "question": "What environment do jobs generated by the META package inherit?",
    "answer": "All jobs generated by the META package inherit the environment present when you run `submit.run` or `resubmit.run`, including all loaded modules and environment variables."
  },
  {
    "question": "How should the `--export` switch be used if necessary with META jobs?",
    "answer": "If you need to use the `--export` switch, ensure that `ALL` is one of the arguments to the command, for example: `--export=ALL,X=1,Y=2`."
  },
  {
    "question": "How can custom environment variables be passed to all farm jobs without using the `--export` switch?",
    "answer": "Instead of using `--export`, set the variables on the command line when running `submit.run`, like this: `$ VAR1=1 VAR2=5 VAR3=3.1416 submit.run ...`."
  },
  {
    "question": "How do I configure `table.dat` for an application that reads separate, numbered input files (e.g., `data.X`)?",
    "answer": "Each line in `table.dat` should specify the application and redirect the corresponding input file, such as `fcode < /home/user/IC/data.1`."
  },
  {
    "question": "How can a `table.dat` file be automatically generated for an application with numbered input files using a shell loop?",
    "answer": "You can use a shell loop command like `$ for ((i=1; i<=100; i++)); do echo \"fcode < /home/user/IC/data.$i\"; done >table.dat`."
  },
  {
    "question": "How do you handle applications that expect an input file with a specific, unchangeable name (e.g., `INPUT`) in META-Farm?",
    "answer": "To handle this, each case must run in its own subdirectory, and an input file with the prescribed name (e.g., `INPUT`) must be created in each subdirectory."
  },
  {
    "question": "What modification is needed in `single_case.sh` to provide an input file with a fixed name like `INPUT` for each case?",
    "answer": "Add a line to `single_case.sh` that copies the case-specific input file into the farm subdirectory using the prescribed name, for example: `cp /path/to/data.$ID INPUT`."
  },
  {
    "question": "What should `table.dat` contain when dealing with applications that require input files with a prescribed name (e.g., `INPUT`)?",
    "answer": "`table.dat` should contain nothing but the application name or its full path, repeated for each case, such as `/path/to/code`."
  },
  {
    "question": "How can individual columns from the `table.dat` cases table be accessed explicitly within `single_case.sh`?",
    "answer": "By modifying `single_case.sh` to convert the `$COMM` variable into an array using `COMM=( $COMM )`, individual columns can then be accessed as `${COMM[i]}` or ranges as `${COMM[@]:i:n}`."
  },
  {
    "question": "Provide an example of how to use array access in `single_case.sh` for a code requiring both a standard input file and variable command-line arguments.",
    "answer": "If your `table.dat` is `/path/to/IC.1 0.1` and `/path/to/IC.2 0.2 10`, you can call your code in `single_case.sh` as `/path/to/code ${COMM[@]:1} < ${COMM[0]}`."
  }
]