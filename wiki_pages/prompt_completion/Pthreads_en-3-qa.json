[
  {
    "question": "What is a condition variable used for in pthreads?",
    "answer": "A condition variable is used to allow multiple threads to wait for a single condition, such as work becoming available for worker threads."
  },
  {
    "question": "What is the datatype for a condition variable in pthreads?",
    "answer": "The datatype for a condition variable in pthreads is `pthread_cond_t`."
  },
  {
    "question": "How is the lifecycle of a pthreads condition variable managed?",
    "answer": "A condition variable must be initialized before its first use and destroyed when it is no longer needed, similar to mutexes or read/write locks."
  },
  {
    "question": "What other synchronization primitive is required when using a condition variable?",
    "answer": "The use of a condition variable requires a mutex to control access to the variables that form the basis for the condition being tested."
  },
  {
    "question": "How does a thread wait on a condition variable?",
    "answer": "A thread that needs to wait on a condition will first lock the associated mutex and then call the `pthread_cond_wait` function, passing both the condition variable and the mutex as arguments."
  },
  {
    "question": "What happens to the mutex when `pthread_cond_wait` is called by a thread?",
    "answer": "When `pthread_cond_wait` is called, the mutex is released atomically with the creation of the condition variable that the thread is now waiting upon. This allows other threads to lock the mutex to modify variables or wait on the same condition."
  },
  {
    "question": "How many worker threads are featured in the `thread_condition.c` example?",
    "answer": "The `thread_condition.c` example features two worker threads."
  },
  {
    "question": "What is the initial value constraint for the `workload` variable in the `thread_condition.c` example?",
    "answer": "The initial value of the `workload` integer in the `thread_condition.c` example must be less than or equal to 25."
  },
  {
    "question": "In the `thread_condition.c` example, which thread waits on the condition variable?",
    "answer": "The first thread (tnumber == 0) in the `thread_condition.c` example waits on the `ticker` condition variable if `workload <= 25`."
  },
  {
    "question": "How does the second thread in the `thread_condition.c` example modify the `workload` variable?",
    "answer": "The second thread in the example increments the `workload` variable by three at each iteration within a loop."
  },
  {
    "question": "Which function is used to signal a single waiting thread when a condition is met?",
    "answer": "The `pthread_cond_signal` function is used to alert a single waiting thread that the condition is now satisfied."
  },
  {
    "question": "When does the second thread signal the first thread in the `thread_condition.c` example?",
    "answer": "The second thread signals the first thread using `pthread_cond_signal` when the `workload` variable becomes greater than 25."
  },
  {
    "question": "How can all waiting threads be notified when a condition is satisfied?",
    "answer": "To notify all waiting threads that a condition is satisfied, the `pthread_cond_broadcast` function can be used."
  },
  {
    "question": "What is the difference between `pthread_cond_signal` and `pthread_cond_broadcast`?",
    "answer": "`pthread_cond_signal` notifies a single waiting thread (chosen at random) that a condition is satisfied, while `pthread_cond_broadcast` notifies all waiting threads that the condition is satisfied."
  }
]