[
  {
    "question": "What does ASCII stand for?",
    "answer": "ASCII stands for American Standard Code for Information Interchange."
  },
  {
    "question": "What are the advantages of using ASCII file format?",
    "answer": "ASCII files are human readable and portable (architecture independent)."
  },
  {
    "question": "What are the disadvantages of ASCII file format for data storage?",
    "answer": "ASCII is inefficient for storage (e.g., 13 bytes per single precision float, 22 bytes per double precision plus delimiters) and expensive for read/write operations."
  },
  {
    "question": "Which C function is typically used for writing formatted output in ASCII?",
    "answer": "The `fprintf()` function in C is used for writing formatted output in ASCII."
  },
  {
    "question": "How does binary format compare to ASCII in terms of computational cost?",
    "answer": "Binary format is much 'cheaper' in a computational sense than ASCII."
  },
  {
    "question": "How efficient is binary format for storing single and double precision floats?",
    "answer": "Binary format uses 4 bytes per single precision float and 8 bytes per double precision, without delimiters, making it efficient for storage."
  },
  {
    "question": "What are the advantages of using binary format for data storage?",
    "answer": "Binary format offers efficient storage and efficient read/write operations."
  },
  {
    "question": "What are the disadvantages of using binary format for data storage?",
    "answer": "One must know the specific format to read the data, and there can be portability issues related to endians."
  },
  {
    "question": "Which C function is typically used for writing binary data?",
    "answer": "The `fwrite()` function in C is used for writing binary data."
  },
  {
    "question": "What is the purpose of metadata (like XML) in data storage?",
    "answer": "Metadata is useful for storing additional information to describe binary data, such as the number and names of variables, their dimensions and sizes, endians, owner, date, links, and comments."
  },
  {
    "question": "What kind of information does metadata encode?",
    "answer": "Metadata encodes data about data, including the number and names of variables, their dimensions and sizes, endians, owner, date, links, and comments."
  },
  {
    "question": "What are the benefits of using a database format for data storage?",
    "answer": "Database formats offer a very powerful and flexible storage approach, simplifying data organization and analysis, and providing enhanced performance for seek/sort operations depending on usage."
  },
  {
    "question": "What are some open-source database packages mentioned in the document?",
    "answer": "SQLite (serverless), PostgreSQL, and mySQL are mentioned as open-source database packages."
  },
  {
    "question": "What are the key benefits of using standard scientific dataset libraries like HDF5 and NetCDF?",
    "answer": "These libraries are good for storing large-scale arrays efficiently, include data descriptions (metadata), provide data portability across platforms and languages, store data in binary with optional compression, and can optionally provide parallel I/O."
  },
  {
    "question": "What does HDF5 stand for?",
    "answer": "HDF5 stands for Hierarchical Data Format."
  },
  {
    "question": "What does NetCDF stand for?",
    "answer": "NetCDF stands for Network Common Data Format."
  },
  {
    "question": "Is data compression supported by standard scientific dataset libraries like HDF5 and NetCDF?",
    "answer": "Yes, standard scientific dataset libraries like HDF5 and NetCDF store data in binary with optional compression."
  },
  {
    "question": "Why is it necessary to organize parallel I/O in large parallel calculations, even with a parallel filesystem?",
    "answer": "In large parallel calculations, datasets are distributed across many processors/nodes, and using a parallel filesystem alone isn\u2019t sufficient; parallel I/O must be organized due to this distributed nature."
  },
  {
    "question": "What file format options are available for writing data in large parallel calculations?",
    "answer": "Data can be written as raw binary, HDF5, or NetCDF."
  },
  {
    "question": "Describe the 'spokesperson' approach for serial I/O when writing data from multiple computing nodes to a single file.",
    "answer": "In the 'spokesperson' approach, one designated CPU collects all data from other members using communication and then writes the collected data into a single file as a regular serial I/O operation."
  },
  {
    "question": "What are the advantages of the single-CPU serial I/O (spokesperson) approach?",
    "answer": "It is trivially simple for small I/O and can be used with some I/O libraries that are not parallel."
  },
  {
    "question": "What are the drawbacks of the single-CPU serial I/O (spokesperson) approach?",
    "answer": "The bandwidth for writing is limited by the rate of one client, there may not be enough memory on a single node to hold all data, and the approach will not scale due to a built-in bottleneck."
  },
  {
    "question": "What is an alternative serial I/O strategy when using N processors, where each processor performs its own I/O?",
    "answer": "Each participating process can perform serial I/O to individual files."
  },
  {
    "question": "What are the advantages of having each processor perform serial I/O to individual files?",
    "answer": "This approach requires no interprocess communication or coordination and can offer possibly better scaling than a single sequential I/O."
  },
  {
    "question": "What are the disadvantages of each processor performing serial I/O to individual files?",
    "answer": "As process counts increase, this leads to many small files which perform poorly on parallel filesystems, data often requires post-processing into one file, and uncoordinated I/O may swamp the filesystem due to file locks."
  }
]