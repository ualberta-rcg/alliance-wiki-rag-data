[
  {
    "question": "How do you write data in ASCII format in C?",
    "answer": "In C, you can write data in ASCII format using `fprintf()`."
  },
  {
    "question": "How do you write data in ASCII format in Fortran 90?",
    "answer": "In Fortran 90, you can write data in ASCII format using `open(6,file='test',form='formatted');write(6,*)`."
  },
  {
    "question": "What are the disadvantages of using ASCII format for data storage?",
    "answer": "ASCII format is inefficient for storage (e.g., 13 bytes per single precision float, 22 bytes per double precision, plus delimiters) and expensive for read/write operations."
  },
  {
    "question": "How much storage does a single-precision float typically take in ASCII format?",
    "answer": "A single-precision float typically takes 13 bytes in ASCII format."
  },
  {
    "question": "How much storage does a double-precision float typically take in ASCII format?",
    "answer": "A double-precision float typically takes 22 bytes in ASCII format."
  },
  {
    "question": "How do you write data in binary format in C?",
    "answer": "In C, you can write data in binary format using `fwrite()`."
  },
  {
    "question": "How do you write data in binary format in Fortran 90?",
    "answer": "In Fortran 90, you can write data in binary format using `open(6,file='test',form='unformatted'); write(6)`."
  },
  {
    "question": "What are the advantages of using binary format for data storage?",
    "answer": "Binary format offers efficient storage (4 bytes per single precision float, 8 bytes per double precision, no delimiters) and efficient read/write operations."
  },
  {
    "question": "What are the disadvantages of binary data format?",
    "answer": "Disadvantages of binary data format include the need to know the specific format to read it and potential portability issues due to different endians."
  },
  {
    "question": "How much storage does a single-precision float typically take in binary format?",
    "answer": "A single-precision float typically takes 4 bytes in binary format."
  },
  {
    "question": "How much storage does a double-precision float typically take in binary format?",
    "answer": "A double-precision float typically takes 8 bytes in binary format."
  },
  {
    "question": "Based on experiments, how much faster is writing 128M doubles in binary format compared to ASCII on `/scratch`?",
    "answer": "On `/scratch`, writing 128M doubles in binary format takes 6 seconds, while in ASCII format it takes 173 seconds, indicating binary is significantly faster."
  },
  {
    "question": "What is the primary purpose of metadata in data storage?",
    "answer": "Metadata is useful for storing additional information that describes binary data, such as the number and names of variables, their dimensions and sizes, endians, owner, date, links, and comments."
  },
  {
    "question": "Which high-end libraries can also include metadata with binary data?",
    "answer": "High-end libraries such as HDF5 and NetCDF can also store data descriptions that serve as metadata."
  },
  {
    "question": "When is the database data format particularly suitable?",
    "answer": "The database data format is good for many small records, as it can greatly simplify data organization and analysis."
  },
  {
    "question": "What are some open-source database packages supported by CHARENTE?",
    "answer": "CHARENTE supports open-source database packages like SQLite (serverless), PostgreSQL, and mySQL."
  },
  {
    "question": "Is the use of database format common in numerical simulations?",
    "answer": "No, the database format is not quite common in numerical simulations."
  },
  {
    "question": "What are two standard scientific dataset libraries mentioned?",
    "answer": "Two standard scientific dataset libraries mentioned are HDF5 (Hierarchical Data Format) and NetCDF (Network Common Data Format)."
  },
  {
    "question": "What benefits do standard scientific dataset libraries like HDF5 and NetCDF offer besides efficient storage?",
    "answer": "These libraries are good for storing large-scale arrays efficiently, include data descriptions (metadata), provide data portability across platforms and languages, and store data automatically with optional compression."
  },
  {
    "question": "How do HDF5 and NetCDF handle data compression?",
    "answer": "HDF5 and NetCDF store data automatically with optional compression, which is extremely useful for large datasets with many repeating values (e.g., zeros) to save storage dramatically."
  },
  {
    "question": "Do standard scientific dataset libraries like HDF5 and NetCDF support parallel I/O?",
    "answer": "Yes, these libraries optionally provide parallel I/O."
  },
  {
    "question": "Why is organizing parallel I/O necessary in large parallel calculations?",
    "answer": "In large parallel calculations, the dataset is distributed across many processors/nodes, meaning each node computes its allocated domain and tries to store data. In this scenario, simply using a parallel filesystem isn't sufficient, and parallel I/O must be organized by the user."
  },
  {
    "question": "What file format options are available for writing data in parallel I/O?",
    "answer": "Data can be written as raw binary without metadata information or by using high-end libraries like HDF5 and NetCDF."
  },
  {
    "question": "Describe the 'spokesperson' approach for writing data from multiple computing nodes to a single file.",
    "answer": "The 'spokesperson' approach involves setting one CPU to collect all data from other member processes via communication. Once all data is collected, this single CPU then writes the data into a file as a regular serial I/O operation."
  },
  {
    "question": "What are the advantages of the single-CPU serial I/O approach?",
    "answer": "The single-CPU serial I/O approach is trivially simple for small I/O and easy to implement, especially if some I/O libraries are not parallel."
  },
  {
    "question": "What are the disadvantages of the single-CPU serial I/O approach?",
    "answer": "Disadvantages include bandwidth being limited by the rate of one client, potential memory limits on a single node, and a lack of scalability as operation time increases linearly with data amount, problem size, and the number of member processes due to a built-in bottleneck."
  },
  {
    "question": "How does the 'N processors' serial I/O approach differ from the single-CPU approach?",
    "answer": "In the 'N processors' serial I/O approach, each participating process performs I/O to its own individual file, whereas in the single-CPU approach, one 'spokesperson' CPU collects all data and writes to a single file."
  },
  {
    "question": "What are the advantages of the N-processor serial I/O approach?",
    "answer": "The advantages include no interprocess communication or coordination necessary and possibly better scaling than the single sequential I/O method."
  },
  {
    "question": "What are the disadvantages of the N-processor serial I/O approach?",
    "answer": "Disadvantages include generating many small files as process counts increase (which performs poorly on parallel filesystems and is generally discouraged), the need for post-processing data into one file, and the risk that uncoordinated I/O from many processes may swamp the filesystem due to file locks."
  },
  {
    "question": "What is considered the best approach for parallel I/O in many-processor systems?",
    "answer": "The best approach is for each participating process to write data simultaneously into a single file using parallel I/O, ideally in a coordinated fashion to avoid swamping the filesystem."
  },
  {
    "question": "What are the benefits of the parallel I/O approach where N processes write to a single file?",
    "answer": "Benefits include resulting in only one file (which is good for visualization, data management, and storage), data being stored canonically, and the potential for good scalability by avoiding post-processing if implemented correctly."
  },
  {
    "question": "What is a critical consideration for implementing parallel I/O to a single file?",
    "answer": "A critical consideration is that the parallel I/O operations must be done in a coordinated fashion; otherwise, uncoordinated I/O will swamp the filesystem due to file locks."
  }
]