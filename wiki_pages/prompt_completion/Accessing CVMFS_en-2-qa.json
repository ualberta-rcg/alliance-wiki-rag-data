[
  {
    "question": "What is recommended for synchronizing the `cvmfs` service account identity on multiple client nodes?",
    "answer": "It is recommended to synchronize the identity of the `cvmfs` service account across all client nodes, for example, using LDAP, before CVMFS is installed."
  },
  {
    "question": "Why is it important to synchronize the `cvmfs` service account before installing CVMFS?",
    "answer": "Synchronizing the `cvmfs` service account before installation facilitates the use of an alien cache and is easier to do initially than attempting to change it later."
  },
  {
    "question": "What are the minimal Linux kernel requirements for CVMFS for the 2016 and 2018 software environments?",
    "answer": "Linux with a Kernel 2.6.32 or newer is required for the 2016 and 2018 software environments."
  },
  {
    "question": "What is the minimal Linux kernel requirement for the 2020 CVMFS software environment?",
    "answer": "Linux with a Kernel 3.2 or newer is required for the 2020 software environment."
  },
  {
    "question": "How can CVMFS be used on Windows systems?",
    "answer": "CVMFS can be used on Windows with Windows Subsystem for Linux version 2, provided it runs a supported Linux distribution."
  },
  {
    "question": "Is Mac OS natively supported for CVMFS client installation?",
    "answer": "Mac OS is supported only through a virtual machine for CVMFS client installation."
  },
  {
    "question": "What are the minimal CPU instruction set requirements for CVMFS?",
    "answer": "An x86 CPU supporting at least one of SSE3, AVX, AVX2, or AVX512 instruction sets is required."
  },
  {
    "question": "What schedulers are considered optimal for CVMFS when using OpenMPI applications?",
    "answer": "Slurm or Torque schedulers are optimal for tight integration with OpenMPI applications."
  },
  {
    "question": "Which network interconnect types are recommended for parallel applications with CVMFS?",
    "answer": "Ethernet, InfiniBand, or OmniPath network interconnects are recommended for parallel applications."
  },
  {
    "question": "What are the optimal GPU requirements for CUDA-enabled applications with CVMFS?",
    "answer": "An NVidia GPU with CUDA drivers (7.5 or newer) installed is optimal for CUDA-enabled applications."
  },
  {
    "question": "What is the recommendation for Linux packages for optimal CVMFS performance?",
    "answer": "It is recommended to have as few Linux packages installed as possible to reduce the odds of conflicts."
  },
  {
    "question": "Can Ansible be used to install CVMFS?",
    "answer": "Yes, a CVMFS client role is provided as-is for basic configuration of a CVMFS client on an RPM-based system using Ansible."
  },
  {
    "question": "Are there scripts available to assist with CVMFS installation on cloud instances?",
    "answer": "Yes, some scripts are available to facilitate installing CVMFS on cloud instances."
  },
  {
    "question": "What is the default location for the local CVMFS cache?",
    "answer": "The local CVMFS cache is located at `/var/lib/cvmfs` by default."
  },
  {
    "question": "What pre-installation step is recommended for the CVMFS cache?",
    "answer": "It is recommended that the local CVMFS cache be on a dedicated file system, which should be provisioned before installing CVMFS."
  },
  {
    "question": "Where can detailed installation instructions for CVMFS be found?",
    "answer": "For installation instructions, refer to 'Getting the Software' in the CVMFS documentation."
  },
  {
    "question": "Where can standard CVMFS client configuration details be found?",
    "answer": "Standard client configuration details can be found in 'Setting up the Software' and 'Client parameters' in the CVMFS documentation."
  },
  {
    "question": "Which CVMFS repository is included by default configuration?",
    "answer": "The `soft.computecanada.ca` repository is provided by the default configuration."
  },
  {
    "question": "What command validates the CVMFS configuration?",
    "answer": "The command `sudo cvmfs_config chksetup` is used to validate the CVMFS configuration."
  },
  {
    "question": "How do you check if CVMFS repositories are functioning correctly?",
    "answer": "To check if CVMFS repositories are OK, use the command `cvmfs_config probe`."
  },
  {
    "question": "What is the first step before validating and probing CVMFS repositories?",
    "answer": "First ensure that the repositories you want to test are listed in `CVMFS_REPOSITORIES`."
  },
  {
    "question": "Where can users find troubleshooting guidance for CVMFS problems?",
    "answer": "A debugging guide is available in the CVMFS documentation for troubleshooting problems."
  },
  {
    "question": "How do you enable the CVMFS software environment in a session?",
    "answer": "Enabling the CVMFS software environment in a session is done by running the bash script `/cvmfs/soft.computecanada.ca/config/profile/bash.sh`."
  },
  {
    "question": "How can a user configure the environment to mimic a specific cluster like 'rorqual'?",
    "answer": "Define the environment variable `CC_CLUSTER` to `rorqual` before sourcing the bash script, for example: `export CC_CLUSTER=rorqual` followed by `source /cvmfs/soft.computecanada.ca/config/profile/bash.sh`."
  },
  {
    "question": "When will the environment enabling script not run by default?",
    "answer": "The environment enabling script will not run if your user ID is below 1000, as a safeguard against privileged operation."
  },
  {
    "question": "How can a user force the CVMFS environment to be enabled if their user ID is below 1000?",
    "answer": "You can define the environment variable `FORCE_CC_CVMFS=1` or create a file `$HOME/.force_cc_cvmfs` in your home folder."
  },
  {
    "question": "How can a user prevent the CVMFS environment from being enabled in an account?",
    "answer": "To avoid enabling the environment, define `SKIP_CC_CVMFS=1` or create the file `$HOME/.skip_cc_cvmfs`."
  },
  {
    "question": "What is the default value of the `CC_CLUSTER` environment variable?",
    "answer": "By default, the value of the `CC_CLUSTER` environment variable is `computecanada`."
  },
  {
    "question": "What is the purpose of the `RSNT_ARCH` environment variable?",
    "answer": "The `RSNT_ARCH` environment variable is used to identify the set of CPU instructions supported by the system."
  },
  {
    "question": "Which CPU instruction sets are supported by the software environment via `RSNT_ARCH`?",
    "answer": "The supported CPU instruction sets are sse3, avx, avx2, and avx512."
  },
  {
    "question": "How is the `RSNT_ARCH` environment variable automatically detected if not explicitly defined?",
    "answer": "By default, `RSNT_ARCH` is automatically detected based on the content of `/proc/cpuinfo`."
  },
  {
    "question": "What is the purpose of the `RSNT_INTERCONNECT` environment variable?",
    "answer": "The `RSNT_INTERCONNECT` environment variable is used to identify the type of interconnect supported by the system."
  },
  {
    "question": "What are the supported values for the `RSNT_INTERCONNECT` environment variable?",
    "answer": "The supported values for `RSNT_INTERCONNECT` are omnipath, infiniband, and ethernet."
  },
  {
    "question": "How is `RSNT_INTERCONNECT` detected by default if not set?",
    "answer": "By default, `RSNT_INTERCONNECT` is automatically detected based on the presence of `/sys/module/opa_vnic` (for Intel OmniPath) or `/sys/module/ib_core` (for InfiniBand), with `ethernet` as a fall-back value."
  },
  {
    "question": "What is the function of the `RSNT_CUDA_DRIVER_VERSION` environment variable?",
    "answer": "The `RSNT_CUDA_DRIVER_VERSION` environment variable is used to hide or show specific versions of CUDA modules based on the required NVidia driver version."
  },
  {
    "question": "How is `RSNT_CUDA_DRIVER_VERSION` detected if it's not explicitly defined?",
    "answer": "If not defined, `RSNT_CUDA_DRIVER_VERSION` is detected based on files found under `/usr/lib64/nvidia`."
  },
  {
    "question": "What effect does setting `RSNT_CUDA_DRIVER_VERSION=0.0` have?",
    "answer": "Defining `RSNT_CUDA_DRIVER_VERSION=0.0` will hide all versions of CUDA."
  },
  {
    "question": "What is the purpose of the `RSNT_LOCAL_MODULEPATHS` environment variable?",
    "answer": "The `RSNT_LOCAL_MODULEPATHS` environment variable allows defining locations for local module trees that will automatically integrate into the central module tree."
  },
  {
    "question": "How can you install an EasyBuild recipe locally so it's discovered by the CVMFS module hierarchy using `RSNT_LOCAL_MODULEPATHS`?",
    "answer": "First, define `export RSNT_LOCAL_MODULEPATHS=/opt/software/easybuild/modules`, then install the recipe using `eb --installpath /opt/software/easybuild <some easyconfig recipe>`."
  },
  {
    "question": "What does the `LMOD_SYSTEM_DEFAULT_MODULES` environment variable control?",
    "answer": "The `LMOD_SYSTEM_DEFAULT_MODULES` environment variable defines which modules are loaded by default."
  },
  {
    "question": "What module is loaded by default if `LMOD_SYSTEM_DEFAULT_MODULES` is not defined?",
    "answer": "If `LMOD_SYSTEM_DEFAULT_MODULES` is left undefined, the environment will define it to load the `StdEnv` module, which loads a default version of the Intel compiler and OpenMPI."
  },
  {
    "question": "What is the role of the `MODULERCFILE` environment variable?",
    "answer": "The `MODULERCFILE` environment variable is used by Lmod to define default versions of modules and aliases, and a user's custom `modulerc` file added to it will take precedence."
  }
]