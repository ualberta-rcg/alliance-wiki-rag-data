[
  {
    "question": "What problem do the `phello3` code examples (C, Boost C++, Fortran, Python) aim to solve in parallel programming?",
    "answer": "The `phello3` code examples aim to demonstrate a reliable communication pattern between MPI processes to avoid deadlocks."
  },
  {
    "question": "What is the main strategy employed in the `phello3` examples to prevent communication deadlocks?",
    "answer": "The main strategy is to use a pair-odd/even approach, where even-ranked processes send then receive, while odd-ranked processes receive then send."
  },
  {
    "question": "In the C `phello3.c` example, which MPI functions are used for initializing and finalizing the MPI environment?",
    "answer": "`MPI_Init(&argc, &argv)` is used for initialization and `MPI_Finalize()` for finalization."
  },
  {
    "question": "How do C processes in `phello3.c` determine their rank and the total number of processes?",
    "answer": "`MPI_Comm_rank(MPI_COMM_WORLD, &rank)` determines the process's rank, and `MPI_Comm_size(MPI_COMM_WORLD, &size)` determines the total number of processes."
  },
  {
    "question": "What is the role of `BUFMAX` in the C `phello3.c` example?",
    "answer": "`BUFMAX` is a preprocessor macro defined as 81, specifying the maximum size for the `outbuf` and `inbuf` character arrays."
  },
  {
    "question": "How do even-ranked processes in `phello3.c` handle their send and receive operations?",
    "answer": "Even-ranked processes first execute `MPI_Send` to their target and then `MPI_Recv` from their source."
  },
  {
    "question": "How do odd-ranked processes in `phello3.c` handle their send and receive operations?",
    "answer": "Odd-ranked processes first execute `MPI_Recv` from their source and then `MPI_Send` to their target."
  },
  {
    "question": "What data type is specified for message content in the C `MPI_Send` and `MPI_Recv` calls in `phello3.c`?",
    "answer": "`MPI_CHAR` is specified as the data type for the message content."
  },
  {
    "question": "How are messages sent and received in the Boost C++ `phello3.cpp` example?",
    "answer": "Messages are sent using `world.send(sendto,0,outmessage)` and received using `world.recv(recvfrom,0,inmessage)` methods of the `boost::mpi::communicator` object."
  },
  {
    "question": "How is the MPI environment initialized in the Boost C++ `phello3.cpp` example?",
    "answer": "The MPI environment is initialized by creating an `mpi::environment` object: `mpi::environment env(argc, argv);`."
  },
  {
    "question": "How do Boost C++ processes get their rank and the total number of processes in `phello3.cpp`?",
    "answer": "The rank is obtained with `world.rank()` and the size with `world.size()` from the `mpi::communicator world` object."
  },
  {
    "question": "What MPI module is used in the Fortran `phello3.f90` example?",
    "answer": "The `mpi` module is used with `use mpi`."
  },
  {
    "question": "How are process rank and total size obtained in the Fortran `phello3.f90` example?",
    "answer": "`call MPI_COMM_RANK(MPI_COMM_WORLD, rank, ierr)` gets the rank, and `call MPI_COMM_SIZE(MPI_COMM_WORLD, num_procs, ierr)` gets the total number of processes."
  },
  {
    "question": "How is the output message constructed in the Fortran `phello3.f90` example?",
    "answer": "The output message (`outbuf`) is constructed by concatenating strings and converting integer `rank` and `num_procs` to characters using `write(tmp,'(i2)')`."
  },
  {
    "question": "Which MPI module is used in the Fortran 2008 `phello3.f90` example?",
    "answer": "The `mpi_f08` module is used with `use mpi_f08`."
  },
  {
    "question": "How does Fortran 2008 `phello3.f90` initialize and finalize the MPI environment?",
    "answer": "`call MPI_Init()` initializes, and `call MPI_Finalize()` finalizes the MPI environment."
  },
  {
    "question": "Which Python library is used for MPI operations in the `phello3.py` example?",
    "answer": "The `mpi4py` library (imported as `MPI`) is used."
  },
  {
    "question": "How do Python processes in `phello3.py` obtain their rank and the total number of processes?",
    "answer": "The rank is obtained with `comm.Get_rank()` and the size with `comm.Get_size()` from the `MPI.COMM_WORLD` communicator."
  },
  {
    "question": "How are messages sent and received in the Python `phello3.py` example?",
    "answer": "Messages are sent using `comm.send(outbuf, dest=sendto, tag=0)` and received using `inbuf = comm.recv(source=recvfrom, tag=0)`."
  },
  {
    "question": "What mathematical expression is used to calculate the `sendto` destination for a process with `rank` and `size` in the `phello3` examples?",
    "answer": "The `sendto` destination is calculated as `(rank + 1) % size`."
  },
  {
    "question": "What mathematical expression is used to calculate the `recvfrom` source for a process with `rank` and `size` in the `phello3` examples?",
    "answer": "The `recvfrom` source is calculated as `((rank + size) - 1) % size`."
  },
  {
    "question": "What value is used for the `tag` argument in the `MPI_Send` and `MPI_Recv` calls across the `phello3` examples?",
    "answer": "The `tag` argument is consistently set to `0` in these examples."
  }
]