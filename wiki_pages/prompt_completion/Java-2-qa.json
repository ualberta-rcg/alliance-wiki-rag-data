[
  {
    "question": "What is the purpose of the JAVA_TOOL_OPTIONS environment variable?",
    "answer": "The JAVA_TOOL_OPTIONS environment variable can be used to set Java run-time options, offering an alternative to passing them directly on the command line."
  },
  {
    "question": "When is using JAVA_TOOL_OPTIONS particularly convenient?",
    "answer": "It is especially convenient if you launch multiple Java calls, or call a Java program from another Java program."
  },
  {
    "question": "How can you set the JAVA_TOOL_OPTIONS environment variable?",
    "answer": "You can set it using a command like `export JAVA_TOOL_OPTIONS=\"-Xms256m -Xmx2g\"`."
  },
  {
    "question": "How do you verify if options set via JAVA_TOOL_OPTIONS have been picked up by a Java program?",
    "answer": "When your Java program runs, it will produce a diagnostic message like \"Picked up JAVA_TOOL_OPTIONS\"."
  },
  {
    "question": "What is an important consideration regarding memory overhead for Java jobs?",
    "answer": "The Java virtual machine itself creates a memory usage overhead."
  },
  {
    "question": "How much additional memory is recommended for a Java job's limit compared to the -Xmx setting?",
    "answer": "It is recommended to specify the memory limit for your job as 1-2GB more than your setting on the Java command line option -Xmx."
  },
  {
    "question": "What is Java's garbage collection system?",
    "answer": "Java uses an automatic system called 'garbage collection' to identify variables which are out of scope and return the memory associated with them to the operating system."
  },
  {
    "question": "What type of garbage collector does the Java VM use by default, and how many threads does it set?",
    "answer": "By default, the Java VM uses a parallel garbage collector (GC) and sets a number of GC threads equal to the number of CPU cores on a given node."
  },
  {
    "question": "Does each garbage collector thread consume memory?",
    "answer": "Yes, each GC thread consumes memory, and the amount of memory each GC thread consumes is proportional to the amount of physical memory."
  },
  {
    "question": "How should the number of garbage collector threads be configured in a high-performance computing environment?",
    "answer": "It is highly recommended to match the number of GC threads to the number of CPU cores you requested from the scheduler in your job submission script, for example, using `-XX:ParallelGCThreads=12`."
  },
  {
    "question": "How can you specify the use of a serial garbage collector in Java?",
    "answer": "You can use the serial garbage collector by specifying the option `-XX:+UseSerialGC`."
  },
  {
    "question": "What is the effect of the `volatile` keyword when applied to a variable in Java?",
    "answer": "In Java, `volatile` ensures that a variable's value is always read from and written to main memory, which can help to ensure that modifications of this variable are made visible to other threads."
  },
  {
    "question": "Is the `volatile` keyword always sufficient to prevent race conditions in Java?",
    "answer": "No, there are contexts in which the use of the `volatile` keyword is not sufficient to avoid race conditions, and the `synchronized` keyword is required to ensure program consistency."
  },
  {
    "question": "What book is suggested for further reading on Java threads and concurrent programming?",
    "answer": "The book suggested is 'Java Threads: Understanding and Mastering Concurrent Programming' (3rd edition) by Scott Oaks and Henry Wong (O'Reilly, 2012)."
  }
]