[
  {
    "question": "How is the OpenMP 'sections' directive used in C/C++?",
    "answer": "In C/C++, the 'sections' directive is used as `#pragma omp sections [clause, clause,\u2026] { [ #pragma omp section ] structured-block [ #pragma omp section ] structured-block }`."
  },
  {
    "question": "What is the Fortran syntax for the OpenMP 'single' directive?",
    "answer": "The Fortran syntax for the 'single' directive is `!$OMP SINGLE [clause, clause,\u2026] block !$OMP END SINGLE [NOWAIT]`."
  },
  {
    "question": "How do you specify a single region in C/C++ using OpenMP?",
    "answer": "A single region in C/C++ is specified using `#pragma omp single [clause, clause,\u2026] structured-block`."
  },
  {
    "question": "What is the OpenMP directive for parallelizing a DO loop in Fortran?",
    "answer": "The OpenMP directive for parallelizing a DO loop in Fortran is `!$OMP PARALLEL DO [clause, clause,\u2026] DO_LOOP [ !$OMP END PARALLEL DO ]`."
  },
  {
    "question": "How do you parallelize a for-loop in C/C++ using OpenMP?",
    "answer": "You can parallelize a for-loop in C/C++ using `#pragma omp parallel for [clause, clause,\u2026] for-loop`."
  },
  {
    "question": "What is the Fortran syntax for the 'PARALLEL SECTIONS' directive?",
    "answer": "The Fortran syntax for 'PARALLEL SECTIONS' is `!$OMP PARALLEL SECTIONS [clause, clause,\u2026] !$OMP SECTION block !$OMP SECTION block !$OMP END PARALLEL SECTIONS`."
  },
  {
    "question": "How is the OpenMP 'parallel sections' directive implemented in C/C++?",
    "answer": "In C/C++, the 'parallel sections' directive is implemented as `#pragma omp parallel sections [clause, clause,\u2026] { [ #pragma omp section ] structured-block [ #pragma omp section ] structured-block }`."
  },
  {
    "question": "What is the syntax for the OpenMP 'master' directive in Fortran?",
    "answer": "The Fortran syntax for the 'master' directive is `!$OMP MASTER block !$OMP END MASTER`."
  },
  {
    "question": "How do you define a master region in C/C++ using OpenMP?",
    "answer": "A master region in C/C++ is defined using `#pragma omp master structured-block`."
  },
  {
    "question": "What is the OpenMP directive for a critical section in Fortran?",
    "answer": "The OpenMP directive for a critical section in Fortran is `!$OMP CRITICAL [(name)] block !$OMP END CRITICAL [(name)]`."
  },
  {
    "question": "How do you create a critical section in C/C++ with OpenMP?",
    "answer": "You create a critical section in C/C++ with OpenMP using `#pragma omp critical [(name)] structured-block`."
  },
  {
    "question": "What is the OpenMP barrier directive in Fortran?",
    "answer": "The OpenMP barrier directive in Fortran is `!$OMP BARRIER`."
  },
  {
    "question": "How is the OpenMP barrier directive used in C/C++?",
    "answer": "The OpenMP barrier directive in C/C++ is `#pragma omp barrier`."
  },
  {
    "question": "What is the Fortran syntax for the OpenMP 'atomic' directive?",
    "answer": "The Fortran syntax for the 'atomic' directive is `!$OMP ATOMIC expresion_statement`."
  },
  {
    "question": "How do you specify an atomic operation in C/C++ using OpenMP?",
    "answer": "An atomic operation in C/C++ is specified using `#pragma omp atomic expression-statement`."
  },
  {
    "question": "What is the Fortran syntax for the OpenMP 'flush' directive?",
    "answer": "The Fortran syntax for the 'flush' directive is `!$OMP FLUSH [(list)]`."
  },
  {
    "question": "How is the OpenMP 'flush' directive used in C/C++?",
    "answer": "The OpenMP 'flush' directive in C/C++ is `#pragma omp flush [(list)]`."
  },
  {
    "question": "What is the Fortran syntax for the OpenMP 'ordered' directive?",
    "answer": "The Fortran syntax for the 'ordered' directive is `!$OMP ORDERED block !$OMP END ORDERED`."
  },
  {
    "question": "How do you use the OpenMP 'ordered' directive in C/C++?",
    "answer": "You use the OpenMP 'ordered' directive in C/C++ as `#pragma omp ordered structured-block`."
  },
  {
    "question": "What is the Fortran syntax for the OpenMP 'threadprivate' directive?",
    "answer": "The Fortran syntax for the 'threadprivate' directive is `!$OMP THREADPRIVATE( /cb/[, /cb/]\u2026)`."
  },
  {
    "question": "How do you declare threadprivate variables in C/C++ with OpenMP?",
    "answer": "You declare threadprivate variables in C/C++ with OpenMP using `#pragma omp threadprivate ( list )`."
  },
  {
    "question": "What is the OpenMP 'private' clause in Fortran?",
    "answer": "The OpenMP 'private' clause in Fortran is `PRIVATE ( list )`."
  },
  {
    "question": "How is the OpenMP 'private' clause used in C/C++?",
    "answer": "The OpenMP 'private' clause in C/C++ is `private ( list )`."
  },
  {
    "question": "What is the OpenMP 'shared' clause in Fortran?",
    "answer": "The OpenMP 'shared' clause in Fortran is `SHARED ( list )`."
  },
  {
    "question": "How is the OpenMP 'shared' clause used in C/C++?",
    "answer": "The OpenMP 'shared' clause in C/C++ is `shared ( list )`."
  },
  {
    "question": "What are the options for the OpenMP 'default' clause in Fortran?",
    "answer": "The options for the OpenMP 'default' clause in Fortran are `DEFAULT ( PRIVATE | SHARED | NONE )`."
  },
  {
    "question": "How is the OpenMP 'default' clause used in C/C++?",
    "answer": "The OpenMP 'default' clause in C/C++ is `default ( shared | none )`."
  },
  {
    "question": "What is the OpenMP 'firstprivate' clause in Fortran?",
    "answer": "The OpenMP 'firstprivate' clause in Fortran is `FIRSTPRIVATE ( list )`."
  },
  {
    "question": "How is the OpenMP 'firstprivate' clause used in C/C++?",
    "answer": "The OpenMP 'firstprivate' clause in C/C++ is `firstprivate ( list )`."
  },
  {
    "question": "What is the OpenMP 'lastprivate' clause in Fortran?",
    "answer": "The OpenMP 'lastprivate' clause in Fortran is `LASTPRIVATE ( list )`."
  },
  {
    "question": "How is the OpenMP 'lastprivate' clause used in C/C++?",
    "answer": "The OpenMP 'lastprivate' clause in C/C++ is `lastprivate ( list )`."
  },
  {
    "question": "What is the OpenMP 'reduction' clause in Fortran?",
    "answer": "The OpenMP 'reduction' clause in Fortran is `REDUCTION ( { operator | intrinsic } : list )`."
  },
  {
    "question": "How is the OpenMP 'reduction' clause used in C/C++?",
    "answer": "The OpenMP 'reduction' clause in C/C++ is `reduction ( op : list )`."
  },
  {
    "question": "What is the OpenMP 'if' clause in Fortran?",
    "answer": "The OpenMP 'if' clause in Fortran is `IF ( scalar_logical_expression )`."
  },
  {
    "question": "How is the OpenMP 'if' clause used in C/C++?",
    "answer": "The OpenMP 'if' clause in C/C++ is `if ( scalar-expression )`."
  },
  {
    "question": "What is the OpenMP 'copyin' clause in Fortran?",
    "answer": "The OpenMP 'copyin' clause in Fortran is `COPYIN ( list )`."
  },
  {
    "question": "How is the OpenMP 'copyin' clause used in C/C++?",
    "answer": "The OpenMP 'copyin' clause in C/C++ is `copyin ( list )`."
  },
  {
    "question": "What is the OpenMP 'nowait' clause in Fortran?",
    "answer": "The OpenMP 'nowait' clause in Fortran is `NOWAIT`."
  },
  {
    "question": "How is the OpenMP 'nowait' clause used in C/C++?",
    "answer": "The OpenMP 'nowait' clause in C/C++ is `nowait`."
  },
  {
    "question": "What environment variables influence the execution of an OpenMP program?",
    "answer": "The environment variables that influence the execution of an OpenMP program include `OMP_NUM_THREADS`, `OMP_SCHEDULE`, `OMP_DYNAMIC`, `OMP_STACKSIZE`, and `OMP_NESTED`."
  },
  {
    "question": "How can OpenMP environment variables be set or modified?",
    "answer": "OpenMP environment variables can be set or modified using a UNIX command such as `export OMP_NUM_THREADS=12`."
  },
  {
    "question": "What is the typical use of `OMP_NUM_THREADS`?",
    "answer": "In most cases, `OMP_NUM_THREADS` is set to the number of reserved cores per machine, though it might differ for hybrid OpenMP/MPI applications."
  },
  {
    "question": "Which environment variable controls how loops and parallel sections are distributed in OpenMP?",
    "answer": "`OMP_SCHEDULE` controls how loops and parallel sections are distributed."
  },
  {
    "question": "What are the possible values for `OMP_SCHEDULE`?",
    "answer": "Possible values for `OMP_SCHEDULE` are `static,n`, `dynamic,n`, `guided,n`, or `auto`."
  },
  {
    "question": "How does `static,n` scheduling work for `OMP_SCHEDULE`?",
    "answer": "For `static,n` scheduling, `n` corresponds to the number of iterations managed by each thread, and iterations are fixed and distributed at the beginning of the parallel section."
  },
  {
    "question": "How does `dynamic,n` scheduling work for `OMP_SCHEDULE`?",
    "answer": "For `dynamic,n` scheduling, `n` corresponds to the number of iterations managed by each thread, and iterations are fixed but distributed during execution based on the time required by each thread."
  },
  {
    "question": "How does `guided,n` scheduling work for `OMP_SCHEDULE`?",
    "answer": "For `guided,n` scheduling, `n` corresponds to the minimal number of iterations. The number of iterations is initially large but dynamically shrinks gradually as the remaining iterations diminish."
  },
  {
    "question": "What does the `auto` mode for `OMP_SCHEDULE` imply?",
    "answer": "In `auto` mode for `OMP_SCHEDULE`, the compiler and the library are free to choose the scheduling method."
  },
  {
    "question": "What is an advantage of `dynamic`, `guided`, and `auto` scheduling modes?",
    "answer": "The advantage of `dynamic`, `guided`, and `auto` scheduling modes is that they theoretically allow for better load-balancing of threads by dynamically adjusting work assigned to each thread."
  },
  {
    "question": "What is a disadvantage of `dynamic`, `guided`, and `auto` scheduling modes, especially in NUMA architectures?",
    "answer": "A disadvantage is that the programmer doesn't know in advance which core a thread executes on or what memory it will access, making it impossible to predict memory-core affinity, which can be problematic in a NUMA architecture."
  },
  {
    "question": "What is the purpose of the `OMP_STACKSIZE` environment variable?",
    "answer": "`OMP_STACKSIZE` specifies the size of the stack for each thread created by the OpenMP runtime, excluding the main OpenMP thread."
  },
  {
    "question": "What is the implied default value for `OMP_STACKSIZE` if it is not set?",
    "answer": "If `OMP_STACKSIZE` is not set, its implied value will be 4M."
  }
]