[
  {
    "question": "Qu'est-ce que la scalabilit\u00e9 en programmation parall\u00e8le ?",
    "answer": "La scalabilit\u00e9 est d\u00e9finie comme la capacit\u00e9 que poss\u00e8de un programme \u00e0 utiliser des ressources de calcul additionnelles, notamment des c\u0153urs CPU."
  },
  {
    "question": "Le fait de doubler le nombre de c\u0153urs CPU r\u00e9duit-il toujours de moiti\u00e9 la dur\u00e9e d'une op\u00e9ration de calcul ?",
    "answer": "Non, il serait na\u00eff de le croire car c'est rarement le cas."
  },
  {
    "question": "Quels facteurs influencent le gain en performance d'un programme parall\u00e8le ?",
    "answer": "Le gain en performance d\u00e9pend de la nature du probl\u00e8me, de l'algorithme ou du programme utilis\u00e9, du mat\u00e9riel sous-jacent (m\u00e9moire, r\u00e9seau) et du nombre de c\u0153urs CPU utilis\u00e9s."
  },
  {
    "question": "Quelle analyse est recommand\u00e9e avant d'utiliser un programme parall\u00e8le sur une grappe ?",
    "answer": "Il est recommand\u00e9 de faire d'abord une analyse de scalabilit\u00e9 en faisant varier le nombre de c\u0153urs selon une certaine \u00e9chelle (par exemple 2, 4, 8, 16, 32, 64 c\u0153urs)."
  },
  {
    "question": "Quel est l'objectif d'une analyse de scalabilit\u00e9 ?",
    "answer": "Une analyse de scalabilit\u00e9 permet de conna\u00eetre le temps d\u2019ex\u00e9cution dans chacun des cas et de voir la courbe des variations, aidant \u00e0 identifier le nombre optimal de c\u0153urs CPU."
  },
  {
    "question": "Quelle est la premi\u00e8re raison pour laquelle la scalabilit\u00e9 n'est pas toujours optimale ?",
    "answer": "La premi\u00e8re raison est que toutes les op\u00e9rations ne peuvent pas \u00eatre ex\u00e9cut\u00e9es en parall\u00e8le, et un certain pourcentage de l'ex\u00e9cution se fait en s\u00e9rie, fixant un seuil \u00e0 l'efficacit\u00e9 de la parall\u00e9lisation."
  },
  {
    "question": "Si 10 % du temps d'ex\u00e9cution d'un programme est non parall\u00e9lisable, quelle est la dur\u00e9e d'ex\u00e9cution minimale possible ?",
    "answer": "Si 10% du temps (par exemple 6 minutes sur une heure) est employ\u00e9 \u00e0 des op\u00e9rations non parall\u00e9lisables, la dur\u00e9e d'ex\u00e9cution ne pourra jamais \u00eatre inf\u00e9rieure \u00e0 ce seuil (6 minutes), peu importe le nombre de c\u0153urs ajout\u00e9s."
  },
  {
    "question": "Que peut-on esp\u00e9rer concernant le pourcentage de temps effectu\u00e9 en s\u00e9rie lors de la parall\u00e9lisation ?",
    "answer": "On peut esp\u00e9rer que le pourcentage du temps effectu\u00e9 en s\u00e9rie diminue au fur et \u00e0 mesure que la taille du probl\u00e8me grandit."
  },
  {
    "question": "Quelle est la deuxi\u00e8me raison principale pour une scalabilit\u00e9 non optimale ?",
    "answer": "La deuxi\u00e8me raison est que la parall\u00e9lisation requiert g\u00e9n\u00e9ralement une part de communication et de synchronisation entre les processus, ce qui repr\u00e9sente un co\u00fbt indirect qui augmente de fa\u00e7on non lin\u00e9aire avec le nombre de c\u0153urs."
  },
  {
    "question": "Comment est exprim\u00e9 le co\u00fbt indirect de la parall\u00e9lisation en fonction du nombre de c\u0153urs ?",
    "answer": "Le co\u00fbt indirect de la parall\u00e9lisation est exprim\u00e9 par la formule <math>T_c \\propto n^\\alpha</math> o\u00f9 <math>\\alpha > 1</math>."
  },
  {
    "question": "Quelle est la formule de la dur\u00e9e totale d'ex\u00e9cution (T) d'un programme parall\u00e8le ?",
    "answer": "La dur\u00e9e totale d\u2019ex\u00e9cution <math>T = T_s + T_c = A + B/n + C n^\\alpha</math>, o\u00f9 <math>A</math>, <math>B</math> et <math>C</math> sont des nombres r\u00e9els positifs d\u00e9pendant de la grappe, du programme et du probl\u00e8me."
  },
  {
    "question": "Comment la dur\u00e9e d'ex\u00e9cution d'un programme parall\u00e8le \u00e9volue-t-elle g\u00e9n\u00e9ralement avec l'ajout de c\u0153urs CPU ?",
    "answer": "La dur\u00e9e d'ex\u00e9cution diminue lorsqu'on utilise peu de c\u0153urs, atteint un minimum (autour de <math>n\\approx 22</math> dans l'exemple), puis augmente avec l'ajout de processus."
  },
  {
    "question": "Pourquoi est-il primordial d'effectuer une analyse de scalabilit\u00e9 pour un programme parall\u00e8le ?",
    "answer": "Il est primordial d\u2019effectuer une analyse de scalabilit\u00e9 afin d\u2019identifier le nombre optimal de c\u0153urs CPU, selon la nature et la taille du probl\u00e8me ainsi que la grappe sur laquelle le programme est ex\u00e9cut\u00e9."
  },
  {
    "question": "Quels sont les crit\u00e8res pour choisir un probl\u00e8me pour l'analyse de scalabilit\u00e9 ?",
    "answer": "Le probl\u00e8me doit \u00eatre assez petit pour que les tests se fassent rapidement, tout en \u00e9tant repr\u00e9sentatif des cas r\u00e9els \u00e0 traiter. Un probl\u00e8me n\u00e9cessitant 30 \u00e0 60 minutes avec un ou deux c\u0153urs est un bon choix, tandis qu'un test de moins de 10 minutes serait d'une valeur douteuse."
  },
  {
    "question": "Comment doit \u00eatre le probl\u00e8me de test lorsque l'objectif est de r\u00e9duire la scalabilit\u00e9 ?",
    "answer": "Le probl\u00e8me de test devrait pouvoir \u00eatre facilement \u00e9tendu de fa\u00e7on relativement graduelle."
  }
]