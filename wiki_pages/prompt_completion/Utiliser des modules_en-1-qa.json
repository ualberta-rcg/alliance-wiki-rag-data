[
  {
    "question": "What is a 'module' in the context of server software?",
    "answer": "A module is a configuration file that contains instructions for modifying your software environment, making installed software accessible on compute servers."
  },
  {
    "question": "What is the benefit of using a modular architecture for software?",
    "answer": "This modular architecture allows multiple versions of the same application to be installed without conflict."
  },
  {
    "question": "Which tool manages modules on new servers?",
    "answer": "For new servers, modules are managed with the Lmod tool, developed at TACC."
  },
  {
    "question": "What system does Lmod replace on legacy servers?",
    "answer": "Lmod replaces 'Environment Modules', which is used on most legacy servers."
  },
  {
    "question": "What kind of information does a 'modulefile' contain?",
    "answer": "A 'modulefile' contains the information needed to make an application or library available in the user's login session, typically modifying environment variables like `PATH` and `LD_LIBRARY_PATH`."
  },
  {
    "question": "Does loading a module immediately execute the software?",
    "answer": "No, the simple fact of loading a module doesn't execute the software in question."
  },
  {
    "question": "How can I see details about a specific module, such as its exact location?",
    "answer": "You can see details about a module by means of the command `module show <module-name>`."
  },
  {
    "question": "What is the general syntax for using `module` commands?",
    "answer": "The normal syntax for `module` commands is `module command [other options]`."
  },
  {
    "question": "How can I see a list of available `module` sub-commands?",
    "answer": "To see a list of available sub-commands, use `module help`."
  },
  {
    "question": "What is the purpose of the `module spider` sub-command?",
    "answer": "The `spider` sub-command searches the complete tree of all modules in the current standard software environment and displays it."
  },
  {
    "question": "How do I list all available versions of a specific application using `module spider`?",
    "answer": "You can list all available versions of an application by using `module spider <application-name>`, for example, `module spider openmpi`."
  },
  {
    "question": "How can I find out which modules I need to load to access a specific version of an application?",
    "answer": "Specify the name of the application along with a version number, for example `module spider openmpi/4.0.3`, which will display a list of the modules you must load to access this version."
  },
  {
    "question": "What command lists the modules you can load?",
    "answer": "To list the modules you can load, use `module avail`."
  },
  {
    "question": "How can I list modules available for a particular library or tool, like `openmpi`?",
    "answer": "You can obtain a list of modules available for a particular library or tool by using `module avail <tool-name>`, for example, `module avail openmpi`."
  },
  {
    "question": "Why might `module avail` not list all modules?",
    "answer": "The `module avail` command may not list some modules that are incompatible with the modules you have already loaded."
  },
  {
    "question": "How can I see a complete list of all modules, including those incompatible with my current environment?",
    "answer": "To see the list of all modules, including those incompatible with currently loaded ones, use the `spider` sub-command (`module spider`)."
  },
  {
    "question": "Which command lists the modules currently loaded in my environment?",
    "answer": "The sub-command `list` lists the modules that are currently loaded in your environment using `module list`."
  },
  {
    "question": "How do I load a module, for example, GCC version 9.3?",
    "answer": "The `load` sub-command lets you load a given module; for example, `module load gcc/9.3` allows you to access the GCC compiler suite, version 9.3."
  },
  {
    "question": "Can I load multiple modules with a single command?",
    "answer": "Yes, you can load more than one module with a single command, such as `module load gcc/9.3 openmpi/4.0`."
  },
  {
    "question": "What happens if I load a module that is incompatible with one I already have loaded?",
    "answer": "If you load a module that is incompatible with one you already have loaded, Lmod will tell you that it has replaced the old module with a new one."
  },
  {
    "question": "How do I remove a module from my environment?",
    "answer": "To remove a module from your environment, use the `unload` sub-command; for example, `module unload gcc/9.3`."
  },
  {
    "question": "What happens to other modules if I unload a module they depend on?",
    "answer": "If you have other modules loaded that depend on the compiler you unload, Lmod will tell you that they have been disabled."
  },
  {
    "question": "How can I remove all modules I have loaded with a single command?",
    "answer": "The `purge` sub-command allows you to remove all the modules you have loaded with a single command: `module purge`."
  },
  {
    "question": "Are all modules removed when using `module purge`?",
    "answer": "No, some modules may be marked 'sticky' (permanent) by system administrators and will not be unloaded by `module purge`."
  }
]