[
  {
    "question": "What is Nvprof?",
    "answer": "Nvprof is a command-line light-weight GUI-less profiler."
  },
  {
    "question": "On which operating systems is Nvprof available?",
    "answer": "Nvprof is available for Linux, Windows, and Mac OS."
  },
  {
    "question": "What kind of data can Nvprof collect and view?",
    "answer": "Nvprof allows you to collect and view profiling data of CUDA-related activities on both CPU and GPU, including kernel execution and memory transfers."
  },
  {
    "question": "How should profiling options be provided to Nvprof?",
    "answer": "Profiling options should be provided to the profiler via the command-line options."
  },
  {
    "question": "What kind of textual reports can Nvprof provide?",
    "answer": "Nvprof is capable of providing a textual report including a summary of GPU and CPU activity, a trace of GPU and CPU activity, and event collection."
  },
  {
    "question": "How can Nvprof be used for headless profile collection?",
    "answer": "Nvprof can be used on a headless node to collect data, which can then be visualized with the Nvidia Visual Profiler."
  },
  {
    "question": "Which tool is used to visualize Nvprof data collected on a headless node?",
    "answer": "The Nvidia Visual Profiler is used to visualize the timeline of data collected by Nvprof on a headless node."
  },
  {
    "question": "What needs to be disabled on B\u00e9luga and Narval before using Nvprof?",
    "answer": "The NVIDIA Data Center GPU Manager (DCGM) needs to be disabled on B\u00e9luga and Narval."
  },
  {
    "question": "How is DCGM disabled during job submission on B\u00e9luga and Narval?",
    "answer": "DCGM is disabled during job submission by using `DISABLE_DCGM=1 salloc --gres=gpu:1 ...`."
  },
  {
    "question": "How can a user verify that DCGM has stopped running?",
    "answer": "A user can verify that DCGM has stopped running by using the loop `while [ ! -z \"$(dcgmi -v | grep 'Hostengine build info:')\" ]; do sleep 5; done`."
  },
  {
    "question": "What needs to be loaded before starting to profile with Nvprof?",
    "answer": "The appropriate module needs to be loaded before starting to profile with Nvprof."
  },
  {
    "question": "How can a user check available CUDA versions for Nvprof?",
    "answer": "A user can run `module avail cuda` to see what versions are currently available with the compiler and MPImodules they have loaded."
  },
  {
    "question": "How can a user get a comprehensive list of CUDA modules?",
    "answer": "To get a comprehensive list of CUDA modules, a user can run `module -r spider '.*cuda.*'`."
  },
  {
    "question": "What are some examples of CUDA module versions available at the time of writing the document?",
    "answer": "Examples of CUDA module versions available at the time of writing include cuda/10.0.130, cuda/10.0, cuda/9.0.176, cuda/9.0, cuda/8.0.44, and cuda/8.0."
  },
  {
    "question": "How do you load a specific CUDA module version?",
    "answer": "You load a specific CUDA module version using `module load cuda/version`, for example, `module load cuda/10.0`."
  },
  {
    "question": "What command should be run after loading the CUDA module to ensure Nvprof finds CUDA libraries?",
    "answer": "After loading the CUDA module, `export LD_LIBRARY_PATH=$EBROOTCUDA/lib64:$LD_LIBRARY_PATH` should be run to let Nvprof find CUDA libraries."
  },
  {
    "question": "What must be done to your code before using Nvprof to get useful information?",
    "answer": "Your code must first be compiled with one of the CUDA compilers, such as `nvcc` for C."
  },
  {
    "question": "Does Nvprof have different operating modes?",
    "answer": "Yes, Nvprof operates in different modes."
  },
  {
    "question": "What is the default operating mode for Nvprof?",
    "answer": "Summary mode is the default operating mode for Nvprof."
  },
  {
    "question": "What kind of output does Nvprof's Summary mode provide?",
    "answer": "Summary mode outputs a single result line for each instruction, such as a kernel function or CUDA memory copy/set performed by the application."
  },
  {
    "question": "What specific timing metrics does Nvprof's Summary mode output for kernel functions?",
    "answer": "For each kernel function, Nvprof's Summary mode outputs the total time of all instances, as well as the average, minimum, and maximum time."
  },
  {
    "question": "How do you run Nvprof in summary mode for an application named 'a.out'?",
    "answer": "You run `nvprof ./a.out` to get profiling data for an application named `a.out`."
  },
  {
    "question": "What information does the profiling result in Summary mode include for CUDA activities?",
    "answer": "The profiling result in Summary mode includes percentage of total time, total time, number of calls, average time, minimum time, maximum time, and the name of the activity (e.g., kernel function or memory copy)."
  }
]