[
  {
    "question": "How can you adapt a Makefile script to your specific program?",
    "answer": "You need to modify the contents of the variables defined within the Makefile script."
  },
  {
    "question": "How do you update the entire program using the 'make' command on the UNIX command line?",
    "answer": "To update the whole program, type 'make' on the UNIX command line."
  },
  {
    "question": "How do you update only a specific routine using the 'make' command?",
    "answer": "You can update only a specific routine by typing 'make RoutineName', replacing 'RoutineName' with the actual routine's name."
  },
  {
    "question": "What are variables sometimes referred to as in Makefiles?",
    "answer": "Variables are sometimes called 'macros' in Makefiles."
  },
  {
    "question": "What is the purpose of the 'CompilerName' variable in the example Makefile?",
    "answer": "The 'CompilerName' variable specifies the compiler to use, such as 'xlf' for Fortran, C, or other languages."
  },
  {
    "question": "How are compilation options typically defined in the provided Makefile example?",
    "answer": "Compilation options are defined using the 'CompilationOptions' variable, which can be set for different modes like optimization (-O3), debug mode (-g), or profiling with gprof (-O3 -pg)."
  },
  {
    "question": "How would you activate compilation in debug mode using the example Makefile's 'CompilationOptions'?",
    "answer": "To activate compilation in debug mode, you would uncomment the line 'CompilationOptions= -g' by removing the '#' symbol."
  },
  {
    "question": "What does the 'ObjectFiles' variable list in the Makefile?",
    "answer": "The 'ObjectFiles' variable lists all the object files (routines) that are needed for compilation."
  },
  {
    "question": "How are long lists of routines continued across multiple lines for the 'ObjectFiles' variable in a Makefile?",
    "answer": "To continue a list of routines on the following line, a backslash ('\\') is placed at the end of each line."
  },
  {
    "question": "What does the 'ProgramOut' variable define?",
    "answer": "The 'ProgramOut' variable defines the name of the final executable program."
  },
  {
    "question": "How does the Makefile define a rule for compiling Fortran source files (.f) into object files (.o)?",
    "answer": "The Makefile uses the rule '.f.o:' which executes the command '$(CompilerName) $(CompilationOptions) -c $<' to compile Fortran files."
  },
  {
    "question": "What does the symbol '$<' represent in the Makefile's compilation rules?",
    "answer": "The '$<' symbol is replaced by the name of the source file that is being compiled."
  },
  {
    "question": "How does the Makefile specify the dependency and linking process for the final executable?",
    "answer": "The Makefile specifies the dependency with '$(ProgramOut): $(ObjectFiles)' and links the object files using the command '$(CompilerName) $(CompilationOptions) -o $(ProgramOut) $(ObjectFiles)'."
  }
]