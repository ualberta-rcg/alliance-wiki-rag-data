[
  {
    "question": "How do you load the necessary modules to run Dalton 2017-alpha?",
    "answer": "The modules can be loaded using the command: `module load nixpkgs/16.09 intel/2016.4 openmpi/2.0.2 dalton/2017-alpha`."
  },
  {
    "question": "What are the SBATCH resource requests for Script 2 of the `dft_rspexci_nosym` example?",
    "answer": "Script 2 for `dft_rspexci_nosym` requests 1 node, 2 tasks per node, 3500M memory per CPU, and a time limit of 00-30:00."
  },
  {
    "question": "How is the number of MPI processes configured in Script 2 for the `dft_rspexci_nosym` example?",
    "answer": "The number of MPI processes is set using the environment variable `DALTON_NUM_MPI_PROCS` to the value of `${SLURM_NTASKS}` via `export DALTON_NUM_MPI_PROCS=${SLURM_NTASKS}`."
  },
  {
    "question": "What is the command used to run Dalton in Script 2 for the `dft_rspexci_nosym` example?",
    "answer": "The command is `${dltonlaun} -b ${BASLIB} -dal ${daltoninput} -mol ${daltonmol}`, where `dltonlaun` is `dalton`, `daltoninput` is `dft_rspexci_nosym.dal`, and `daltonmol` is `H2O_cc-pVDZ_nosym.mol`."
  },
  {
    "question": "What main sections are included in the `dft_rspexci_nosym.dal` input file?",
    "answer": "The `dft_rspexci_nosym.dal` input file includes `**DALTON INPUT`, `.RUN RESPONSE`, `**INTEGRALS .PROPRINT`, `**WAVE FUNCTIONS .DFT B3LYP`, `**RESPONSE *LINEAR .SINGLE RESIDUE .ROOTS 3`, and `**END OF DALTON INPUT`."
  },
  {
    "question": "What basis set and molecule are defined in the `H2O_cc-pVDZ_nosym.mol` file?",
    "answer": "The `H2O_cc-pVDZ_nosym.mol` file defines the `H2O` molecule using the `cc-pVDZ` basis set."
  },
  {
    "question": "What are the SBATCH resource requests for Script 1 of the `dft_rspexci_sym` example?",
    "answer": "Script 1 for `dft_rspexci_sym` requests 1 node, 4 tasks per node, 3500M memory per CPU, and a time limit of 00-30:00."
  },
  {
    "question": "How is the number of MPI processes configured in Script 1 for the `dft_rspexci_sym` example?",
    "answer": "The number of MPI processes is configured by adding the option `-N ${SLURM_NTASKS}` to the launcher command line for Script 1 of the `dft_rspexci_sym` example."
  },
  {
    "question": "What is the command used to run Dalton in Script 1 for the `dft_rspexci_sym` example?",
    "answer": "The command is `${dltonlaun} -b ${BASLIB} -N ${SLURM_NTASKS} -dal ${daltoninput} -mol ${daltonmol}`, where `dltonlaun` is `dalton`, `daltoninput` is `dft_rspexci_sym.dal`, and `daltonmol` is `H2O_cc-pVDZ_sym.mol`."
  },
  {
    "question": "What are the SBATCH resource requests for Script 2 of the `dft_rspexci_sym` example?",
    "answer": "Script 2 for `dft_rspexci_sym` requests 1 node, 4 tasks per node, 3500M memory per CPU, and a time limit of 00-30:00."
  },
  {
    "question": "How is the number of MPI processes configured in Script 2 for the `dft_rspexci_sym` example?",
    "answer": "The number of MPI processes is set using the environment variable `DALTON_NUM_MPI_PROCS` to the value of `${SLURM_NTASKS}` via `export DALTON_NUM_MPI_PROCS=${SLURM_NTASKS}`."
  },
  {
    "question": "What is the command used to run Dalton in Script 2 for the `dft_rspexci_sym` example?",
    "answer": "The command is `${dltonlaun} -b ${BASLIB} -dal ${daltoninput} -mol ${daltonmol}`, where `dltonlaun` is `dalton`, `daltoninput` is `dft_rspexci_sym.dal`, and `daltonmol` is `H2O_cc-pVDZ_sym.mol`."
  },
  {
    "question": "What main sections are included in the `dft_rspexci_sym.dal` input file?",
    "answer": "The `dft_rspexci_sym.dal` input file includes `**DALTON INPUT`, `.RUN RESPONSE`, `**INTEGRALS .PROPRINT`, `**WAVE FUNCTIONS .DFT B3LYP`, `**RESPONSE *LINEAR .SINGLE RESIDUE`, and `**END OF DALTON INPUT`."
  },
  {
    "question": "What basis set and molecule are defined in the `H2O_cc-pVDZ_sym.mol` file?",
    "answer": "The `H2O_cc-pVDZ_sym.mol` file defines the `H2O` molecule using the `cc-pVDZ` basis set."
  },
  {
    "question": "How can you check the start and end times of a Dalton job run by these scripts?",
    "answer": "The scripts include `echo \"Starting run at: `date`\"` at the beginning and `echo \"Program finished with exit code $? at: `date`\"` at the end to display the start and finish times of the program execution."
  }
]