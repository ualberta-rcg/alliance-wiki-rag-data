[
  {
    "question": "What is the Genome Analysis Toolkit (GATK)?",
    "answer": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools designed for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data."
  },
  {
    "question": "What kind of data does GATK analyze?",
    "answer": "GATK analyzes high-throughput sequencing (HTS) and variant call format (VCF) data."
  },
  {
    "question": "What is GATK primarily used for?",
    "answer": "The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data, and is a leading tool in variant discovery and best practices for genomics research."
  },
  {
    "question": "How can I find out which versions of GATK are available?",
    "answer": "You can access GATK version information by using the `module spider gatk` command."
  },
  {
    "question": "Can you list some of the GATK versions that are provided?",
    "answer": "Some provided GATK versions include gatk/3.7, gatk/3.8, gatk/4.0.0.0, gatk/4.1.8.1, and gatk/4.2.5.0."
  },
  {
    "question": "How do I get more specific information about a particular GATK version, such as 4.1.8.1?",
    "answer": "You can access more specific information for a given version using the command `module spider gatk/4.1.8.1`."
  },
  {
    "question": "What is the prerequisite module for loading GATK/4.1.8.1?",
    "answer": "The GATK/4.1.8.1 module requires the `StdEnv/2020` module as a prerequisite."
  },
  {
    "question": "How do I load GATK version 4.1.8.1, including its prerequisite?",
    "answer": "You can load GATK/4.1.8.1 with its prerequisite using the command `module load StdEnv/2020 gatk/4.1.8.1`."
  },
  {
    "question": "What is the simplified command to load GATK/4.1.8.1 if `StdEnv/2020` is already loaded by default?",
    "answer": "If `StdEnv/2020` is loaded by default, you can simply load GATK/4.1.8.1 using `module load gatk/4.1.8.1`."
  },
  {
    "question": "How do later versions of GATK (4.0.0.0 and above) handle Java executables?",
    "answer": "Later versions of GATK (>=4.0.0.0) provide a wrapper over the Java executables (.jar)."
  },
  {
    "question": "What happens when GATK modules are loaded regarding environmental variables?",
    "answer": "Loading the GATK modules will automatically set most of the environmental variables required to successfully run GATK."
  },
  {
    "question": "What is the general command syntax for running GATK (versions 4.0.0.0 and above)?",
    "answer": "The general usage is `gatk [--java-options \"-Xmx4G\"] ToolName [GATK args]`."
  },
  {
    "question": "Can you provide an example of a GATK command for versions 4.0.0.0 or later?",
    "answer": "An example GATK command is `gatk --java-options \"-Xmx8G\" HaplotypeCaller -R reference.fasta -I input.bam -O output.vcf`."
  },
  {
    "question": "What is the purpose of the `--java-options` argument in GATK commands?",
    "answer": "The `--java-options` argument is used to pass arguments directly to Java, such as specifying the maximum heap memory (e.g., `-Xmx8G`)."
  },
  {
    "question": "Which Java option is recommended to always use with GATK for better error information?",
    "answer": "It is recommended to always use `-DGATK_STACKTRACE_ON_USER_EXCEPTION=true` within `--java-options`."
  },
  {
    "question": "Why is it important to use `-DGATK_STACKTRACE_ON_USER_EXCEPTION=true`?",
    "answer": "This option provides more detailed information in case the program fails, which can help in troubleshooting."
  },
  {
    "question": "What is a crucial rule for options passed to `--java-options`?",
    "answer": "All options passed to `--java-options` must be enclosed within quotation marks."
  },
  {
    "question": "What GATK option is recommended for temporary files when running an `sbatch` job on their systems?",
    "answer": "It is recommended to use the `--tmp-dir` option and set it to `${SLURM_TMPDIR}` when in an `sbatch` job."
  },
  {
    "question": "Why should temporary files be redirected to `${SLURM_TMPDIR}` for GATK jobs?",
    "answer": "Redirecting temporary files to `${SLURM_TMPDIR}` (local storage) makes operations faster and prevents IO operations from affecting other users."
  },
  {
    "question": "What optimization should be enabled when using `GenomicsDBImport` on shared Posix Filesystems?",
    "answer": "When using `GenomicsDBImport`, make sure to have the `--genomicsdb-shared-posixfs-optimizations` option enabled."
  },
  {
    "question": "What is the benefit of using `--genomicsdb-shared-posixfs-optimizations` with `GenomicsDBImport`?",
    "answer": "This option allows for optimizations to improve the usability and performance for shared Posix Filesystems (e.g., NFS, Lustre)."
  },
  {
    "question": "What alternative is suggested if `GenomicsDBImport` optimizations are not possible or when using GNU parallel?",
    "answer": "If optimizations are not possible or if using GNU parallel, it's recommended to copy your database to `${SLURM_TMPDIR}` and run it from there."
  },
  {
    "question": "How are GATK versions earlier than 4 typically executed?",
    "answer": "Earlier versions of GATK do not have the `gatk` command; instead, you must call the jar file directly using `java -jar GenomeAnalysisTK.jar PROGRAM OPTIONS`."
  },
  {
    "question": "What environmental variables contain the path to the GATK jar file for versions <= 3 on their systems?",
    "answer": "The environmental variables `$EBROOTPICARD` and `$EBROOTGATK` contain the path to the jar file for Picard (included in GATK >= 4) and GATK, respectively."
  },
  {
    "question": "What is the appropriate way to call GATK versions <= 3 on their systems?",
    "answer": "The appropriate way to call GATK <= 3 is by first loading the module (e.g., `module load nixpkgs/16.09 gatk/3.8`) and then executing `java -jar \"${EBROOTGATK}\"/GenomeAnalysisTK.jar PROGRAM OPTIONS`."
  }
]