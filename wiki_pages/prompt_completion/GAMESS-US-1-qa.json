[
  {
    "question": "What is GAMESS?",
    "answer": "GAMESS stands for The General Atomic and Molecular Electronic Structure System and is a general *ab initio* quantum chemistry package."
  },
  {
    "question": "Which scheduler do Compute Canada clusters use for GAMESS jobs?",
    "answer": "Compute Canada clusters use the Slurm scheduler for job submission."
  },
  {
    "question": "What is the first step to run a GAMESS calculation?",
    "answer": "The first step is to prepare a GAMESS input file containing the molecular geometry and a specification of the calculation to be carried out."
  },
  {
    "question": "Where can users find information about the GAMESS input file format and keywords?",
    "answer": "Users should refer to the GAMESS Documentation, particularly Chapter 2 \"Input Description\"."
  },
  {
    "question": "What files are required to run a GAMESS job?",
    "answer": "Besides your input file (e.g., \"name.inp\"), you need to prepare a job script to define the compute resources. Both files must be in the same directory."
  },
  {
    "question": "How do you submit a GAMESS job to the scheduler?",
    "answer": "Use the command `sbatch gamess_job.sh` to submit the job."
  },
  {
    "question": "What are the default resource requests in the example `gamess_job.sh` script provided?",
    "answer": "The example `gamess_job.sh` script requests 1 CPU (`--cpus-per-task=1`), 4000 MB of memory per CPU (`--mem-per-cpu=4000M`), and a time limit of 30 minutes (`--time=0-00:30`)."
  },
  {
    "question": "Where are GAMESS temporary binary files (scratch files) written by default?",
    "answer": "By default, GAMESS temporary binary files are written to local disk on the compute node, specifically `$SLURM_TMPDIR`."
  },
  {
    "question": "What happens to data stored in `$SLURM_TMPDIR` after a GAMESS job finishes?",
    "answer": "Data in `$SLURM_TMPDIR` will be deleted after the job finishes."
  },
  {
    "question": "How can you specify an alternative location for GAMESS temporary binary files if local disk space is insufficient?",
    "answer": "You can use `/scratch` instead by uncommenting and setting the `SCR` environment variable, for example, `export SCR=\"$SCRATCH/gamess_${SLURM_JOB_ID}/\"`."
  },
  {
    "question": "What is the default location for GAMESS supplementary output files?",
    "answer": "By default, supplementary output files are written to the user's `$SCRATCH` directory, which is defined by the `USERSCR` environment variable."
  },
  {
    "question": "What environment variable is used for GAMESS temporary binary files and what is its default location?",
    "answer": "The `SCR` environment variable is used for GAMESS temporary binary files, and its default location is `$SLURM_TMPDIR` (node-local storage)."
  },
  {
    "question": "What environment variable is used for GAMESS supplementary output files and what is its default location?",
    "answer": "The `USERSCR` environment variable is used for GAMESS supplementary output files, and its default location is `$SCRATCH` (user's SCRATCH directory)."
  },
  {
    "question": "How is the number of CPUs available for a GAMESS calculation determined?",
    "answer": "The number of CPUs available for a GAMESS calculation is determined by the `--cpus-per-task` setting in the job script."
  },
  {
    "question": "Why can GAMESS only use CPU cores located on the same compute node for parallelization?",
    "answer": "GAMESS has been built using sockets for parallelization, which means it can only use CPU cores that are located on the same compute node."
  },
  {
    "question": "What limits the maximum number of CPU cores that can be used for a GAMESS job?",
    "answer": "The maximum number of CPU cores that can be used for a job is dictated by the size of the nodes in the cluster, e.g., 32 CPU cores per node on Graham."
  },
  {
    "question": "Do quantum chemistry calculations scale well to large numbers of CPUs?",
    "answer": "No, quantum chemistry calculations are known to not scale well to large numbers of CPUs, meaning they cannot use large numbers of CPUs efficiently."
  },
  {
    "question": "What factors influence the efficient use of CPUs in GAMESS calculations?",
    "answer": "The number of atoms, the number of basis functions, and the level of theory all influence how many CPUs can be used efficiently."
  },
  {
    "question": "How can one determine a reasonable number of CPUs to use for a GAMESS calculation?",
    "answer": "One needs to run a scaling test, which involves running the same input file using different numbers of CPUs and comparing the execution times."
  },
  {
    "question": "What is an ideal outcome for a scaling test in GAMESS?",
    "answer": "Ideally, the execution time should be half as long when using twice as many CPUs."
  },
  {
    "question": "Why are quantum chemistry calculations often called 'memory bound'?",
    "answer": "Quantum chemistry calculations are often 'memory bound' because larger molecules at high levels of theory require a lot of memory (RAM), often more than is available in a typical computer."
  },
  {
    "question": "How do packages like GAMESS manage memory limitations for intermediate results?",
    "answer": "Packages like GAMESS use disk storage (SCRATCH) to store intermediate results, freeing up memory and reading them back from disk later in the calculation."
  },
  {
    "question": "What is the two-step process for assigning sufficient memory to GAMESS?",
    "answer": "The two-step process involves 1) requesting memory for the job in the submission script and 2) defining the `MWORDS` and `MEMDDI` options in the `$SYSTEM` group of the input file."
  },
  {
    "question": "What is a reasonable value to request for memory per CPU in the submission script?",
    "answer": "Using `--mem-per-cpu=4000M` is a reasonable value, as it matches the memory-to-CPU ratio on base nodes."
  },
  {
    "question": "What might happen if you request too much memory in the submission script?",
    "answer": "Requesting more memory than `4000M` per CPU may cause the job to wait longer to be scheduled on a large-memory node."
  },
  {
    "question": "Which options in the GAMESS input file define how much memory GAMESS is allowed to use?",
    "answer": "The `MWORDS` and `MEMDDI` options in the `$SYSTEM` group of the input file tell GAMESS how much memory it is allowed to use."
  },
  {
    "question": "What does `MWORDS` represent in GAMESS memory allocation?",
    "answer": "MWORDS is the maximum replicated memory which a job can use, on every core, given in units of 1,000,000 words (a word is 64 bits = 8 bytes)."
  },
  {
    "question": "What does `MEMDDI` represent in GAMESS memory allocation?",
    "answer": "MEMDDI is the grand total memory needed for the distributed data interface (DDI) storage, given in units of 1,000,000 words."
  },
  {
    "question": "How is the memory required on each processor core calculated for a GAMESS run using `p` CPU-cores?",
    "answer": "The memory required on each processor core for a run using `p` CPU-cores is calculated as `MEMDDI/p + MWORDS`."
  },
  {
    "question": "Why is it important to leave a safety margin of memory when configuring GAMESS?",
    "answer": "It is important to leave a few hundred MB of memory between the memory requested from the scheduler and the memory that GAMESS is allowed to use, as a safety margin."
  },
  {
    "question": "What does the message 'slurmstepd: error: Exceeded step/job memory limit at some point' indicate in a GAMESS job output?",
    "answer": "This message indicates that Slurm has terminated the job because it attempted to use more memory than was requested."
  },
  {
    "question": "What steps should be taken if a GAMESS job fails due to exceeding the memory limit?",
    "answer": "If a job fails due to exceeding the memory limit, one needs to either reduce the `MWORDS` or `MEMDDI` in the input file or increase the `--mem-per-cpu` in the submission script."
  }
]