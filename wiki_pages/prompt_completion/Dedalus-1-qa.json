[
  {
    "question": "What is Dedalus?",
    "answer": "Dedalus is a flexible framework for solving partial differential equations using modern spectral methods."
  },
  {
    "question": "How can I list the available versions of Dedalus on the clusters?",
    "answer": "You can list available versions using the command `avail_wheels dedalus`."
  },
  {
    "question": "What Python version and dependencies are required to install Dedalus in a virtual environment?",
    "answer": "You need to load `StdEnv/2023 gcc openmpi mpi4py/3.1.4 fftw-mpi/3.3.10 hdf5-mpi/1.14.2 python/3.11`."
  },
  {
    "question": "How do you create a Python virtual environment for Dedalus without downloading packages?",
    "answer": "You create it using the command `virtualenv --no-download ~/dedalus_env`."
  },
  {
    "question": "How do you activate a Python virtual environment named 'dedalus_env' located in your home directory?",
    "answer": "You activate it with the command `source ~/dedalus_env/bin/activate`."
  },
  {
    "question": "How do you install a specific version of Dedalus, such as 3.0.2, into an activated virtual environment?",
    "answer": "You can install a specific version using `pip install --no-index dedalus==3.0.2`."
  },
  {
    "question": "How do you install the latest available version of Dedalus into an activated virtual environment?",
    "answer": "You can install the latest version by omitting the version number: `pip install --no-index dedalus`."
  },
  {
    "question": "What command is used to validate a Dedalus installation?",
    "answer": "You can validate it by running `python -c 'import dedalus'` within the activated virtual environment."
  },
  {
    "question": "How do you freeze the environment and save the installed requirements for Dedalus to a file?",
    "answer": "You can use the command `pip freeze --local > ~/dedalus-3.0.2-requirements.txt`."
  },
  {
    "question": "How do you remove a local Dedalus virtual environment?",
    "answer": "You remove it by running `deactivate && rm -r ~/dedalus_env`."
  },
  {
    "question": "What SLURM parameters are adjusted for a Dedalus job running distributed across multiple nodes/cores?",
    "answer": "The SLURM parameters to adjust are `--account`, `--time`, `--ntasks`, and `--mem-per-cpu`."
  },
  {
    "question": "What SLURM parameters are adjusted for a Dedalus job running on whole nodes?",
    "answer": "The SLURM parameters to adjust are `--account`, `--time`, `--nodes`, `--ntasks-per-node`, and `--mem-per-cpu`."
  },
  {
    "question": "How is the virtual environment typically created and activated on each allocated node within a Dedalus job submission script?",
    "answer": "It is created and activated using an `srun` command block: `srun --ntasks $SLURM_NNODES --tasks-per-node=1 bash << EOF virtualenv --no-download $SLURM_TMPDIR/env source $SLURM_TMPDIR/env/bin/activate EOF`."
  },
  {
    "question": "How are Python dependencies installed within the virtual environment created on allocated nodes in a Dedalus job script?",
    "answer": "They are installed using `pip install --no-index --upgrade pip` and `pip install --no-index -r dedalus-3.0.2-requirements.txt` within the `srun` block that creates the virtual environment."
  },
  {
    "question": "What command submits a Dedalus job script to the scheduler?",
    "answer": "The command is `sbatch submit-dedalus.sh`."
  },
  {
    "question": "What is recommended before submitting a Dedalus job to the scheduler?",
    "answer": "It is important to test that your submission script will start without errors in an interactive job."
  }
]