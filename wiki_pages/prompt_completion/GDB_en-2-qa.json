[
  {
    "question": "How do you find the process ID (PID) of a running process, such as Firefox, on a Linux system?",
    "answer": "You can find the process ID using the command `ps aux | grep firefox | grep -v grep`."
  },
  {
    "question": "How do you attach GDB to an already running process?",
    "answer": "To attach GDB to a running process, use the command `gdb attach <process_ID>`, for example `gdb attach 12691`."
  },
  {
    "question": "What is one of the most useful commands in GDB?",
    "answer": "One of the most useful commands in GDB is `backtrace`, also known by its shortcut `bt`."
  },
  {
    "question": "What does the `backtrace` (or `bt`) command do in GDB?",
    "answer": "The `backtrace` command shows the current call stack."
  },
  {
    "question": "How do you exit a debugging session in GDB?",
    "answer": "To exit a debugging session, type `quit` at the `(gdb)` prompt."
  },
  {
    "question": "What is the GDB command to begin or stop program execution?",
    "answer": "The `run` or `kill` command is used to begin or stop execution."
  },
  {
    "question": "What is the shortcut for the `run` command in GDB?",
    "answer": "The shortcut for the `run` command is `r`."
  },
  {
    "question": "What is the shortcut for the `backtrace` command in GDB?",
    "answer": "The shortcut for the `backtrace` command is `bt`."
  },
  {
    "question": "How do you set a breakpoint in GDB?",
    "answer": "You can set a breakpoint using the `break` (or `b`) command, specifying `src.c:line_number` or a function name."
  },
  {
    "question": "What GDB command interrupts the program when a variable is modified?",
    "answer": "The `watch` command interrupts the program when a variable is modified."
  },
  {
    "question": "How do you resume a program after it has been interrupted in GDB?",
    "answer": "To resume a program, use the `continue` (or `c`) command."
  },
  {
    "question": "What GDB command executes the next operation?",
    "answer": "The `step` (or `s`) command executes the next operation."
  },
  {
    "question": "How do you display the content of a variable in GDB?",
    "answer": "You can display the content of a variable using the `print` (or `p`) command with the variable name as an argument."
  },
  {
    "question": "What GDB command displays a given line of code?",
    "answer": "The `list` (or `l`) command, with `src.c:number` as an argument, displays a given line of code."
  },
  {
    "question": "What is a common problem when displaying C++ STL structures in GDB by default?",
    "answer": "By default, GDB does not display C++ STL structures very well."
  },
  {
    "question": "What is a simple solution to improve GDB's display of C++ STL structures?",
    "answer": "A simple solution is to copy the `dbinit_stl_views-1.03.txt` file into your home folder and name it `~/.gdbinit`."
  }
]