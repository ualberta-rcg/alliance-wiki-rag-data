[
  {
    "question": "What does GLOST stand for?",
    "answer": "GLOST stands for \"Greedy Launcher Of Small Tasks\"."
  },
  {
    "question": "What is GLOST used for?",
    "answer": "GLOST is a tool for executing a large number of short-duration or variable-duration sequential tasks, or tasks with parameter sweeps."
  },
  {
    "question": "How does GLOST's functionality compare to GNU Parallel or Job arrays?",
    "answer": "Its functioning is similar to GNU parallel or job arrays, but with a simplified syntax."
  },
  {
    "question": "What wrapper and commands does GLOST use?",
    "answer": "GLOST uses the `glost_launch` wrapper and MPI commands such as `srun`, `mpiexec`, and `mpirun`."
  },
  {
    "question": "What is the name of the text file that groups tasks for GLOST?",
    "answer": "A text file named `list_glost_tasks.txt` groups the tasks and is used as an argument for the `glost_launch` wrapper."
  },
  {
    "question": "When is GLOST particularly useful?",
    "answer": "GLOST is particularly useful for several sequential tasks of comparable duration, several sequential tasks of short duration, and sequential tasks with variable parameters (parameter sweep)."
  },
  {
    "question": "What is the core principle behind GLOST's operation?",
    "answer": "The principle is to group several sequential tasks and have them executed in an MPI task that can use multiple cores (one or more nodes)."
  },
  {
    "question": "What is an advantage of grouping tasks with GLOST in relation to the scheduler?",
    "answer": "With fewer tasks in the queue, the scheduler will be less solicited."
  },
  {
    "question": "What alternative software to GLOST is mentioned in the document?",
    "answer": "The document suggests considering the META software package, developed by one of their teams."
  },
  {
    "question": "What are some advantages of META compared to GLOST?",
    "answer": "With META, the total waiting time can be much shorter, the overhead is lower, it has a practical mechanism to resubmit failed or unexecuted calculations, and it can handle sequential, multi-threaded, MPI, GPU, and hybrid tasks."
  },
  {
    "question": "How does GLOST alleviate the burden on Slurm?",
    "answer": "GLOST groups all sequential tasks into a single file named `list_glost_tasks.txt` and submits one MPI task with the `glost_launch` wrapper, significantly reducing the number of tasks in the queue and thus fewer requests for the scheduler to process."
  },
  {
    "question": "How does GLOST simplify task submission for users?",
    "answer": "With GLOST, users submit and process a few MPI tasks rather than hundreds or thousands of sequential tasks."
  },
  {
    "question": "What MPI implementation does GLOST use?",
    "answer": "GLOST uses OpenMPI to group sequential tasks into an MPI task."
  },
  {
    "question": "What modules must be loaded to use GLOST?",
    "answer": "You must load OpenMPI and the corresponding GLOST module."
  },
  {
    "question": "How can I view the available GLOST modules?",
    "answer": "To see the available GLOST modules, use the command `module spider glost`."
  },
  {
    "question": "What are the required modules to load `glost/0.3.1`?",
    "answer": "To load `glost/0.3.1`, you need to load either `StdEnv/2023`, `gcc/12.3`, and `openmpi/4.1.5` or `StdEnv/2023`, `intel/2023.2.1`, and `openmpi/4.1.5`."
  },
  {
    "question": "If OpenMPI is already loaded, how can GLOST be activated?",
    "answer": "If an OpenMPI module is already in your environment, adding `module load glost` to the list of modules you need is sufficient to activate GLOST."
  },
  {
    "question": "What command can be used to ensure GLOST and other modules are present?",
    "answer": "To ensure that GLOST and other modules are present, launch the command `module list`."
  }
]