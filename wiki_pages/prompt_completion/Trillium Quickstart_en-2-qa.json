[
  {
    "question": "How can I SSH between Trillium login nodes?",
    "answer": "You can use their internal hostnames, such as `tri-login01` to `tri-login06` for CPU nodes and `trig-login01` for the GPU login node."
  },
  {
    "question": "How do I enable graphical programs from Trillium to open on my local computer?",
    "answer": "Add the `-Y` option to your SSH command to enable X11 forwarding."
  },
  {
    "question": "What is required to run tasks on Trillium's compute nodes?",
    "answer": "You must submit a batch job to run tasks on compute nodes."
  },
  {
    "question": "What types of tasks are prohibited on Trillium's login nodes?",
    "answer": "You may not run large memory jobs, parallel training or highly multi-threaded processes, long computations (over a few minutes), or resource-intensive tasks like I/O-heavy operations or simulations on the login nodes."
  },
  {
    "question": "What should I check if I cannot log in to Trillium?",
    "answer": "If you cannot log in, check the System Status, ensure your CCDB account is active, verify your public key was uploaded to CCDB in OpenSSH format, and confirm you requested access on the Access Systems page."
  },
  {
    "question": "What kind of storage system does Trillium use?",
    "answer": "Trillium uses a unified high-performance storage system based on the VAST platform."
  },
  {
    "question": "What are the main storage directories available on Trillium and their purposes?",
    "answer": "The main storage directories are the home file system for personal files, the scratch file system for high-speed temporary job data, and the project file system for shared team collaborations."
  },
  {
    "question": "What environment variables point to my home, scratch, and project directories?",
    "answer": "`$HOME` points to your home directory, `$SCRATCH` points to your scratch directory, and `$PROJECT` points to your project directory."
  },
  {
    "question": "If I'm part of multiple projects, which one does the `$PROJECT` environment variable point to?",
    "answer": "If you are part of several projects, `$PROJECT` points to your last project in alphabetical order."
  },
  {
    "question": "Where can I find all the project directories I have access to on Trillium?",
    "answer": "You can find all top-level directories of projects you have access to in `$HOME/links/projects`."
  },
  {
    "question": "How do I create the `$HOME/links` directory if it's missing?",
    "answer": "Run the `trisetup` command to create the `$HOME/links` directory."
  },
  {
    "question": "How often does the `$HOME/links/projects` content update?",
    "answer": "The content of `$HOME/links/projects` automatically updates when you leave or join projects."
  },
  {
    "question": "What environment variable is used for the nearline storage system HPSS?",
    "answer": "The `$ARCHIVE` environment variable will point to your top directory on HPSS, if you have one."
  },
  {
    "question": "What is the storage quota for the `$HOME` file system on Trillium?",
    "answer": "The `$HOME` file system has a quota of 100 GB per user."
  },
  {
    "question": "Is the `$HOME` file system backed up?",
    "answer": "Yes, the `$HOME` file system is backed up."
  },
  {
    "question": "Can I write to my `$HOME` directory from compute nodes?",
    "answer": "No, the `$HOME` directory is read-only on compute nodes."
  },
  {
    "question": "What is the quota for the `$SCRATCH` file system?",
    "answer": "The `$SCRATCH` file system has a quota of 25 TB per user."
  },
  {
    "question": "Is data on the `$SCRATCH` file system backed up?",
    "answer": "No, data on the `$SCRATCH` file system is not backed up."
  },
  {
    "question": "Can I access the `$SCRATCH` file system from login and compute nodes?",
    "answer": "Yes, the `$SCRATCH` file system is accessible from both login and compute nodes."
  },
  {
    "question": "How is the `$PROJECT` file system quota determined?",
    "answer": "The `$PROJECT` file system quota is determined by RAC allocation, with a default of 1 TB per group."
  },
  {
    "question": "Is the `$PROJECT` file system available for writing on compute nodes?",
    "answer": "No, the `$PROJECT` file system is read-only on compute nodes."
  },
  {
    "question": "What is the backup policy for the `$ARCHIVE` file system?",
    "answer": "The `$ARCHIVE` file system uses dual-copy for backup."
  },
  {
    "question": "Can `$ARCHIVE` storage quotas be increased through RAC mechanisms on Trillium?",
    "answer": "No, there is no RAC mechanism to increase `$ARCHIVE` quotas on Trillium."
  },
  {
    "question": "Can `$PROJECT` storage quotas be increased through RAC mechanisms on Trillium?",
    "answer": "No, there is no RAC mechanism to increase `$PROJECT` quotas on Trillium."
  },
  {
    "question": "What system does Trillium use to manage software packages?",
    "answer": "Trillium uses the environment modules system to manage compilers, libraries, and other software packages."
  },
  {
    "question": "How do environment modules help manage software on Trillium?",
    "answer": "Modules dynamically modify your environment (like `PATH` and `LD_LIBRARY_PATH`) to allow access to different software versions without conflicts."
  },
  {
    "question": "How do I load a default software module on Trillium?",
    "answer": "Use the command `module load <module-name>` to load the default version of a software package."
  },
  {
    "question": "How do I load a specific version of a software module?",
    "answer": "Use the command `module load <module-name>/<module-version>` to load a specific version."
  },
  {
    "question": "What command unloads all currently loaded modules?",
    "answer": "The `module purge` command unloads all currently loaded modules."
  },
  {
    "question": "How can I list all available software modules on Trillium?",
    "answer": "Use the `module avail` command to list available modules."
  },
  {
    "question": "How do I see which modules are currently loaded in my environment?",
    "answer": "Use the `module list` command to show currently loaded modules."
  },
  {
    "question": "What command can I use to search for modules and their versions?",
    "answer": "You can use `module spider` or `module spider <module-name>` to search for modules and their versions."
  },
  {
    "question": "Is there a short command to list currently loaded modules?",
    "answer": "Yes, `ml` is an abbreviation for `module list`."
  },
  {
    "question": "Is there a short command to load a software module?",
    "answer": "Yes, `ml <module-name>` is an abbreviation for `module load <module-name>`."
  },
  {
    "question": "Which modules are loaded by default when I first log in to Trillium?",
    "answer": "When you first log in, only `CCconfig`, `gentoo/2023`, and `mii` modules are loaded."
  },
  {
    "question": "How do I load a standard set of compilers and libraries on Trillium?",
    "answer": "Load the `StdEnv/2023` module to get a standard set of compilers and libraries."
  },
  {
    "question": "Why should I avoid loading modules in my `.bashrc` file?",
    "answer": "Loading modules in `.bashrc` can cause unexpected behavior, especially in non-interactive environments like batch jobs or remote shells."
  },
  {
    "question": "What are the recommended ways to load modules instead of using `.bashrc`?",
    "answer": "It is recommended to load modules manually, from a separate script, or using module collections."
  },
  {
    "question": "Where should required modules be loaded to ensure a consistent environment for a job?",
    "answer": "Required modules should be loaded inside your job script."
  },
  {
    "question": "Why is it important to specify full module versions (e.g., `gcc/13.3`) instead of short names (e.g., `gcc`)?",
    "answer": "Specifying full module versions ensures long-term reproducibility, as short names load system defaults which may change."
  },
  {
    "question": "How can I find out about module dependencies?",
    "answer": "Use `module spider <module-name>` to discover required modules and their correct loading order."
  },
  {
    "question": "Can I use commercial software on Trillium?",
    "answer": "Yes, you can use commercial software on Trillium if you have a valid license."
  },
  {
    "question": "How can I connect to a license server for commercial software on Trillium?",
    "answer": "You can connect to a license server securely using SSH tunnelling."
  },
  {
    "question": "Does Trillium provide user-specific licenses for commercial software?",
    "answer": "No, Trillium does not provide user-specific licenses for individual or specialized commercial packages."
  },
  {
    "question": "Are there any commercial tools available system-wide on Trillium?",
    "answer": "Yes, some widely useful commercial tools like Intel compilers, MKL math libraries, and DDT debuggers are available system-wide."
  },
  {
    "question": "What are the guidelines for running lightweight tests on Trillium's login nodes?",
    "answer": "Lightweight tests on login nodes should run in under a few minutes, use no more than 1-2 GB of memory, use only 1-4 CPU cores, and use at most 1 GPU."
  },
  {
    "question": "How do I run the ARM DDT debugger on the login nodes?",
    "answer": "Load the `ddt-cpu` or `ddt-gpu` module using `module load` and then run the ARM DDT debugger."
  },
  {
    "question": "How can I request an interactive debug job for tests that exceed login node limits?",
    "answer": "Use the `debugjob` command on a login node to request an interactive debug job."
  },
  {
    "question": "What resources and time limit does `debugjob` provide when run from a CPU login node?",
    "answer": "When run from a CPU login node, `debugjob` provides an interactive shell on a CPU compute session for 1 hour with 1 node, 192 cores, and 755 GiB memory."
  },
  {
    "question": "What resources and time limit does `debugjob` provide when run from a GPU login node?",
    "answer": "When run from a GPU login node, `debugjob` provides an interactive session with 1 GPU on a shared GPU compute node for two hours, with 24 cores and 188 GiB memory."
  },
  {
    "question": "What is the walltime limit for a `debugjob` requesting 2 CPU nodes?",
    "answer": "A `debugjob` requesting 2 CPU nodes has a walltime limit of 30 minutes."
  },
  {
    "question": "How many CPU cores and memory does a `debugjob -g 1` provide on the GPU subcluster?",
    "answer": "A `debugjob -g 1` provides 24 CPU cores and 188 GiB of memory on the GPU subcluster."
  },
  {
    "question": "What is the maximum number of GPUs that can be requested for a `debugjob`?",
    "answer": "The maximum number of GPUs that can be requested for a `debugjob` is 8, across 2 nodes."
  },
  {
    "question": "What are the characteristics of the shell environment in a `debugjob`?",
    "answer": "A `debugjob` environment has only standard modules loaded, no internet access, no write access to home and project file systems, and no job submissions."
  },
  {
    "question": "How can I make a `debugjob` inherit my loaded modules from the interactive session?",
    "answer": "Add `--export=ALL` as the first option to the `debugjob` command to inherit loaded modules."
  }
]