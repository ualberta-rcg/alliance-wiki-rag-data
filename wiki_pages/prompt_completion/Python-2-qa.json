[
  {
    "question": "How do you create a virtual environment?",
    "answer": "You can create a virtual environment using the command `virtualenv --no-download ENV`, where `ENV` is the name of the directory for your new environment."
  },
  {
    "question": "How do you activate a virtual environment?",
    "answer": "Once a virtual environment has been created, it must be activated using the command `source ENV/bin/activate`."
  },
  {
    "question": "How do you upgrade `pip` within a newly activated virtual environment?",
    "answer": "You should upgrade `pip` in the environment by running `pip install --no-index --upgrade pip`."
  },
  {
    "question": "How do you exit a virtual environment?",
    "answer": "To exit a virtual environment, simply enter the command `deactivate`."
  },
  {
    "question": "What steps are needed to use an existing virtual environment repeatedly?",
    "answer": "Each time, you need to load the same environment modules you loaded when you created it (e.g., `module load python scipy-stack`) and then activate the environment using `source ENV/bin/activate`."
  },
  {
    "question": "What is the primary function of the `pip` command?",
    "answer": "The `pip` command is used to compile and install most Python packages and their dependencies once a virtual environment is loaded."
  },
  {
    "question": "Where can a comprehensive index of Python packages be found?",
    "answer": "A comprehensive index of Python packages can be found at PyPI (https://pypi.python.org/pypi)."
  },
  {
    "question": "What command is used to install the latest stable version of Numpy in an activated virtual environment?",
    "answer": "You would use the command `pip install numpy --no-index` to install the latest stable version of Numpy."
  },
  {
    "question": "What is the purpose of the `--no-index` option when installing packages with `pip`?",
    "answer": "The `--no-index` option tells `pip` to install packages only from locally available packages (our wheels) and not from PyPI."
  },
  {
    "question": "Why is it recommended to use the `--no-index` option when installing packages if a wheel is provided?",
    "answer": "Using `--no-index` with staff-compiled wheels can prevent issues with missing or conflicting dependencies and ensures packages are optimized for the cluster's hardware and libraries."
  },
  {
    "question": "What happens if the `--no-index` option is omitted during a `pip install` command?",
    "answer": "If `--no-index` is omitted, `pip` will search both PyPI and local packages, and if PyPI has a newer version, it will be installed, potentially causing issues."
  },
  {
    "question": "When would you use the `--no-binary` option with `pip install`?",
    "answer": "You can use the `--no-binary` option if you prefer to download a package from PyPI instead of using a wheel, as it tells `pip` to ignore prebuilt packages and compile from source."
  },
  {
    "question": "How can you get more verbose output from `pip` to diagnose installation issues?",
    "answer": "To see where `pip` is installing a Python package from and diagnose issues, you can tell it to be more verbose with the `-vvv` option."
  },
  {
    "question": "What is the recommended approach when installing multiple Python packages to help `pip` resolve dependencies?",
    "answer": "It is advisable to install multiple packages with one command, as this helps `pip` resolve dependencies effectively."
  },
  {
    "question": "Why can launching Python software and loading virtual environments be slow on parallel filesystems?",
    "answer": "Parallel filesystems are efficient for large data chunks but perform poorly with intensive use of small files, which is characteristic of starting Python and loading virtual environments."
  },
  {
    "question": "What is a suggested workaround for slowdowns caused by virtual environment loading on parallel filesystems?",
    "answer": "As a workaround, especially for single-node Python jobs, you can create your virtual environment inside your job using the compute node's local disk, which can be faster."
  },
  {
    "question": "What is a limitation of creating a virtual environment inside of your job on a compute node?",
    "answer": "The virtual environment is only accessible on the specific node where it was created, so it must be created for each node in a multi-node job."
  }
]