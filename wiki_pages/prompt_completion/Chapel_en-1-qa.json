[
  {
    "question": "What is Chapel?",
    "answer": "Chapel is a general-purpose, compiled, high-level parallel programming language with built-in abstractions for shared- and distributed-memory parallelism."
  },
  {
    "question": "What are the two styles of parallel programming supported by Chapel?",
    "answer": "The two styles are task parallelism, driven by programmer-specified tasks, and data parallelism, driven by applying the same computation on subsets of data elements."
  },
  {
    "question": "Who is Chapel ideal for learning parallel programming?",
    "answer": "Chapel is ideal for learning parallel programming for a novice HPC user."
  },
  {
    "question": "How does Chapel combine ease-of-use with performance?",
    "answer": "Chapel strives to merge the ease-of-use of Python and the performance of traditional compiled languages such as C and Fortran."
  },
  {
    "question": "What are Chapel's operating system and hardware support capabilities?",
    "answer": "Chapel is open source and can run on any Unix-like operating system, with hardware support from laptops to large HPC systems."
  },
  {
    "question": "What is a current limitation of Chapel regarding its library ecosystem?",
    "answer": "Chapel has a relatively small user base, so many libraries that exist for C, C++, and Fortran have not yet been implemented in Chapel."
  },
  {
    "question": "Which module provides single-locale (single node; shared-memory only) Chapel on general-purpose clusters?",
    "answer": "The `chapel-multicore` module provides single-locale Chapel support."
  },
  {
    "question": "How do you load the modules and allocate resources for an interactive serial Chapel test job?",
    "answer": "Load modules with `module load gcc/12.3 chapel-multicore/2.4.0` and allocate resources with `salloc --time=0:30:0 --ntasks=1 --mem-per-cpu=3600 --account=def-someprof`."
  },
  {
    "question": "How do you compile and run a Chapel test program in serial mode within an allocated interactive job?",
    "answer": "Compile with `chpl test.chpl -o test` and run with `./test`."
  },
  {
    "question": "How do you load modules and allocate resources for an interactive multi-core Chapel test job on a single node?",
    "answer": "Load modules with `module load gcc/12.3 chapel-multicore/2.4.0` and allocate resources with `salloc --time=0:30:0 --ntasks=1 --cpus-per-task=3 --mem-per-cpu=3600 --account=def-someprof`."
  },
  {
    "question": "Which module provides multi-locale (multiple nodes; hybrid shared- and distributed-memory) Chapel support on InfiniBand clusters?",
    "answer": "The `chapel-ucx` module provides multi-locale Chapel support on InfiniBand clusters."
  },
  {
    "question": "What commands are used to load modules and allocate resources for an interactive multi-locale Chapel job on an InfiniBand cluster with 4 nodes?",
    "answer": "Load modules with `module load gcc/12.3 chapel-ucx/2.4.0` and allocate resources with `salloc --time=0:30:0 --nodes=4 --cpus-per-task=3 --mem-per-cpu=3500 --account=def-someprof`."
  },
  {
    "question": "How do you compile and run a multi-locale Chapel program like `probeLocales.chpl` for 4 locales within an interactive job?",
    "answer": "Compile using `chpl --fast probeLocales.chpl` and run using `./probeLocales -nl 4`."
  },
  {
    "question": "Which module enables NVIDIA GPU support for multi-locale Chapel on InfiniBand clusters?",
    "answer": "The `chapel-ucx-cuda` module enables NVIDIA GPU support for multi-locale Chapel on InfiniBand clusters."
  },
  {
    "question": "What modules need to be loaded and what resources allocated for an interactive multi-locale Chapel job with NVIDIA GPU support?",
    "answer": "Load modules with `module load gcc/12.3 cuda/12.2 chapel-ucx-cuda/2.4.0` and allocate resources with `salloc --time=0:30:0 --mem-per-cpu=3500 --gpus-per-node=1 --account=def-someprof`."
  },
  {
    "question": "How do you compile and run a Chapel GPU program like `probeGPU.chpl` for a single locale with GPU support?",
    "answer": "Compile using `chpl --fast probeGPU.chpl` and run using `./probeGPU -nl 1`."
  },
  {
    "question": "What is the recommended method for running production Chapel jobs?",
    "answer": "For production jobs, it is recommended to write a Slurm submission script and submit it with `sbatch`."
  }
]