[
  {
    "question": "What is the purpose of the `MPI_Finalize` function in an MPI program?",
    "answer": "`MPI_Finalize` is a function that must be called to perform any clean-up operations required before an MPI program exits."
  },
  {
    "question": "Where is it generally recommended to call `MPI_Finalize` in an MPI program?",
    "answer": "As a rule of thumb, it is a good idea to call `MPI_Finalize` as the last statement of an MPI program."
  },
  {
    "question": "What information does the `MPI_Comm_size` function provide?",
    "answer": "`MPI_Comm_size` reports the number of processes running as part of the MPI job by assigning it to a result parameter."
  },
  {
    "question": "What does the `MPI_Comm_rank` function report, and how are MPI ranks numbered?",
    "answer": "`MPI_Comm_rank` reports the rank of the calling process. Ranks in MPI start from 0, so for N processes, the ranks will be 0 to N-1."
  },
  {
    "question": "What is a 'communicator' in the context of MPI?",
    "answer": "A communicator is a set of processes capable of sending messages to one another."
  },
  {
    "question": "Which predefined communicator represents all MPI processes started with a job?",
    "answer": "The predefined value `MPI_COMM_WORLD` represents all the MPI processes started with the job."
  },
  {
    "question": "Is an explicit call to `MPI.Finalize()` required when using `mpi4py` in Python?",
    "answer": "No, `mpi4py` installs a termination hook, so there is no need to explicitly call `MPI.Finalize()`."
  }
]