[
  {
    "question": "What is VASP?",
    "answer": "VASP (The Vienna ab initio Simulation Package) is a computer program for atomic scale materials modelling, including electronic structure calculations and quantum mechanical molecular dynamics, from first principles."
  },
  {
    "question": "Is VASP commercial or free software?",
    "answer": "VASP is commercial software."
  },
  {
    "question": "Why is VASP difficult to install centrally on the infrastructure described?",
    "answer": "VASP is commercial software that can only be licensed to groups hired by a single legal entity, which is incompatible with the operational model, preventing central installation."
  },
  {
    "question": "Which universities have special licensing agreements for VASP?",
    "answer": "Simon Fraser University, the University of Waterloo, and the University of Toronto have a license with VASP for their respective clusters Fir, Nibi, and Trillium."
  },
  {
    "question": "What information is required to request access to prebuilt VASP binaries on Fir, Nibi, or Trillium?",
    "answer": "You must include license holder (PI) information (Name, Email, Department, Institution) and license information (VASP version 4 or 5, License number, and an updated list of licensed users)."
  },
  {
    "question": "If I am licensed for VASP version 5, can I use version 4?",
    "answer": "Yes, if you are licensed for version 5, you may also use version 4."
  },
  {
    "question": "If I am licensed for VASP version 4, can I use version 5?",
    "answer": "No, a version 4 license does not permit you to use version 5."
  },
  {
    "question": "Where are prebuilt VASP binary files installed?",
    "answer": "Prebuilt VASP binary files have been installed only on Fir, Nibi, and Trillium."
  },
  {
    "question": "What is the recommended approach if prebuilt VASP is not available on a cluster?",
    "answer": "Users may want to install VASP on their own home directory by referring to the 'Building VASP yourself' instructions."
  },
  {
    "question": "How do you load VASP version 5.4.4 on Fir and Nibi?",
    "answer": "You need to run `module load StdEnv/2023 intel/2023.2.1 openmpi/4.1.5` followed by `module load vasp/5.4.4`."
  },
  {
    "question": "How do you load VASP version 6.4.2 on Fir and Nibi?",
    "answer": "You need to run `module load StdEnv/2023 intel/2023.2.1 intelmpi/2021.9.0` followed by `module load vasp/6.4.2`."
  },
  {
    "question": "What is the general procedure to load a specific VASP module and its dependencies?",
    "answer": "First, run `module spider vasp` to see available versions, then `module spider vasp/<version>` for dependencies, and finally load the dependencies and the VASP module using `module load`."
  },
  {
    "question": "Where can users find information for using VASP on Trillium?",
    "answer": "To use VASP on Trillium, users should refer to the SciNet VASP wiki page."
  },
  {
    "question": "Are GPU versions of VASP available on Niagara nodes?",
    "answer": "No, Niagara nodes do not have GPUs, so GPU versions of VASP are not available on that system."
  },
  {
    "question": "How are modules loaded for VASP 6.4.2 on Trillium?",
    "answer": "You need to run `module load StdEnv/2023 intel/2023.2.1 intelmpi/2021.9.0 hdf5/1.14.2`, then `module use /opt/software/commercial/modules`, followed by `module load vasp/6.4.2`."
  },
  {
    "question": "Where are VASP pseudopotential files located on Cedar and Graham?",
    "answer": "All pseudopotentials are located in `$EBROOTVASP/pseudopotentials/` on Cedar and Graham once the VASP module is loaded."
  },
  {
    "question": "What are the executable files for VASP-4.6 and their functions?",
    "answer": "For VASP-4.6, `vasp` is for standard NVT calculations with non-gamma k points, `vasp-gamma` is for standard NVT calculations with only gamma points, and `makeparam` estimates required memory."
  },
  {
    "question": "What are the executable files for VASP versions 5.4.1, 5.4.4, and 6.1.0 without CUDA support?",
    "answer": "Without CUDA support, `vasp_std` is for standard NVT calculations with non-gamma k-points, `vasp_gam` is for standard NVT with only gamma points, and `vasp_ncl` is for NPT calculations with non-gamma k-points."
  },
  {
    "question": "What are the executable files for VASP versions 5.4.4 and 6.1.0 with CUDA support?",
    "answer": "With CUDA support, `vasp_gpu` is for standard NVT calculations with gamma and non-gamma k-points, and `vasp_gpu_ncl` is for NPT calculations with gamma and non-gamma k-points."
  },
  {
    "question": "Which VASP extensions have been incorporated?",
    "answer": "Two extensions, Transition State Tools (VTSTtools) and VASPsol, have been incorporated."
  },
  {
    "question": "What should a user do if a required VASP version is not prebuilt?",
    "answer": "If a needed VASP version is not listed, users can either build it themselves or contact Technical support to request its installation."
  },
  {
    "question": "Do Vasp-GPU executable files utilize both GPUs and CPUs?",
    "answer": "Yes, Vasp-GPU executable files run on both GPUs and CPUs of a node."
  },
  {
    "question": "Why is benchmarking recommended for Vasp-GPU usage?",
    "answer": "Benchmarking with one or two GPUs is highly recommended because GPU calculation is expensive, to ensure maximum performance and avoid wasting computer resources."
  },
  {
    "question": "What were the findings of the Si crystal benchmark regarding GPU usage?",
    "answer": "The benchmark showed performance for GPU=1,2 and CPU=1 was over 5 times better than GPU=0 and CPU=1, but there was not much performance gain from GPU=1 to GPU=2, with GPU=2 use being around 50%."
  },
  {
    "question": "What are the four input files VASP uses?",
    "answer": "VASP uses four input files named INCAR, KPOINTS, POSCAR, and POTCAR."
  },
  {
    "question": "How should VASP input files be prepared for a job?",
    "answer": "It is best to prepare VASP input files in a separate directory for each job."
  },
  {
    "question": "How do you submit a VASP job script?",
    "answer": "To submit the job from the job directory, use `sbatch vasp_job.sh`."
  },
  {
    "question": "How can you estimate the memory needed for a VASP job?",
    "answer": "Prepare all input files and run `makeparam` in an interactive job submission; for more accurate future estimates, check the maximum stack size used by completed jobs."
  },
  {
    "question": "What should users consider when running VASP jobs with 32 or more cores?",
    "answer": "Users should read about whole-node scheduling when using 32 or more cores."
  },
  {
    "question": "What are the resource requests in the example VASP CPU job script (`vasp_job.sh`)?",
    "answer": "The example VASP CPU job script requests 4 CPU cores, 4096MB memory (4x1024MB), and a time limit of 5 minutes."
  },
  {
    "question": "What command is used to run VASP in the example CPU job script?",
    "answer": "The example CPU job script uses `mpirun <VASP>` to run VASP."
  },
  {
    "question": "What are the resource requests in the example VASP GPU job script (`vasp_gpu_job.sh`)?",
    "answer": "The example VASP GPU job script requests 1 CPU core, 1 GPU of type p100 (only for Cedar), 3GB memory, and a time limit of 5 minutes."
  },
  {
    "question": "What command is used to run VASP in the example GPU job script?",
    "answer": "The example GPU job script uses `mpirun <VASP>` to run VASP."
  }
]