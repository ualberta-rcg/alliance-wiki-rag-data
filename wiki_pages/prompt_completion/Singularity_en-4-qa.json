[
  {
    "question": "When is it important to retain filesystem permissions during Singularity image creation?",
    "answer": "It is important to retain filesystem permissions if one needs to regularly update or reconfigure the contents of the image, and if the tools used for those updates require those permissions to be retained."
  },
  {
    "question": "What are some examples of Linux package management commands that might require retained filesystem permissions when updating a Singularity image?",
    "answer": "Commands such as `apt-get update && apt-get upgrade`, `apt-get install some-software-package`, `yum install some-software-package`, and `dnf install some-software-package` might not run successfully unless filesystem permissions are retained."
  },
  {
    "question": "What should I do if Singularity image creation fails due to user restrictions on a login node?",
    "answer": "If Singularity image creation fails due to user restrictions placed on a login node, you should request assistance to create the Singularity image by contacting Technical support."
  },
  {
    "question": "Does this documentation describe how to use Slurm for interactive or batch jobs?",
    "answer": "No, the discussion only describes how to use Singularity and does not cover how to use Slurm for interactive or batch jobs."
  },
  {
    "question": "Can `sudo` be used to run programs in a Singularity image on a cluster?",
    "answer": "No, you cannot use `sudo` to run programs in your Singularity image on a cluster."
  },
  {
    "question": "What are the different ways to run programs in a Singularity image?",
    "answer": "Programs can be run in a Singularity image by running commands interactively in one Singularity session, running a single command which executes and then stops, or running a container instance for daemons and backgrounded processes."
  },
  {
    "question": "How can Singularity be used interactively?",
    "answer": "Singularity can be used interactively by using its `shell` command."
  },
  {
    "question": "How do you get help on Singularity's `shell` command usage?",
    "answer": "You can get help on Singularity's `shell` command usage by running `$ singularity shell --help`."
  },
  {
    "question": "What does the command `singularity shell -B /home -B /project -B /scratch -B /localscratch myimage.simg` achieve?",
    "answer": "This command bind mounts `/home`, `/project`, `/scratch`, and `/localscratch` within the `myimage.simg` container, allowing access to these directories, and then runs a shell (e.g., `/bin/bash`)."
  },
  {
    "question": "How do you exit an interactive Singularity shell session?",
    "answer": "To exit an interactive Singularity shell session, you should type \"exit\"."
  },
  {
    "question": "How can you run a Singularity shell with a 'clean environment'?",
    "answer": "You can run a 'clean environment' shell by adding a `-e` option, for example: `$ singularity shell -e -B /home -B /project -B /scratch -B /localscratch myimage.simg`."
  },
  {
    "question": "What conditions are required to write changes to disk when using Singularity interactively on your own machine?",
    "answer": "For changes to be written to disk when using Singularity interactively on your own machine, you must be using a Singularity 'sandbox' image (a directory), the `-w` option, and `sudo`."
  },
  {
    "question": "How do you create a Singularity sandbox image on your own machine?",
    "answer": "You can create a Singularity sandbox image by running `sudo singularity build -s myimage-dir myimage.simg`."
  },
  {
    "question": "How do you interactively engage with a Singularity sandbox image while allowing changes to be written?",
    "answer": "You can interactively engage with a Singularity sandbox image with write permissions by running `sudo singularity shell -w myimage-dir`."
  },
  {
    "question": "After modifying a sandbox directory, how can you build a new SIF file from it?",
    "answer": "After modifying a sandbox directory, you can build a new/updated SIF file with the command `sudo singularity build myimage-new.simg myimage-dir/`."
  },
  {
    "question": "Which Singularity commands are used for submitting jobs that invoke commands in containers?",
    "answer": "When submitting jobs that invoke commands in Singularity containers, one will either use Singularity's `exec` or `run` commands."
  },
  {
    "question": "What is the difference in configuration requirements between Singularity's `exec` and `run` commands?",
    "answer": "The `exec` command does not require any configuration, while the `run` command requires configuring an application within a Singularity recipe file."
  },
  {
    "question": "Are the options for the Singularity `exec` command similar to the `shell` command?",
    "answer": "Yes, the Singularity `exec` command's options are almost identical to the `shell` command's options."
  },
  {
    "question": "How can I get help for the Singularity `exec` command?",
    "answer": "You can get help for the Singularity `exec` command by running `$ singularity exec --help`."
  },
  {
    "question": "What does the `singularity exec` command do when not asking for help?",
    "answer": "When not asking for help, the `exec` command runs the command you specify within the container and then leaves the container."
  },
  {
    "question": "What would be the output of `singularity exec -B /home -B /project -B /scratch -B /localscratch myimage.simg ls /`?",
    "answer": "This command will output the contents of the root directory within the container, using the version of `ls` installed within that container."
  },
  {
    "question": "Which Singularity command is sufficient for running a single command from within a container in a job?",
    "answer": "The `exec` command will suffice for running a single command from within your Singularity container in a job."
  }
]