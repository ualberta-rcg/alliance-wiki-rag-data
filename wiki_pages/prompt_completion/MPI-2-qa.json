[
  {
    "question": "What programming languages will this tutorial use for MPI code development?",
    "answer": "This tutorial will present MPI code development in C, C++, Fortran, and Python."
  },
  {
    "question": "What is the goal of the MPI Programming Basics tutorial?",
    "answer": "The goal of the MPI Programming Basics tutorial is to parallelize the \"Hello, World!\" program."
  },
  {
    "question": "How is a basic C \"Hello, world!\" program typically compiled and run in the tutorial's example?",
    "answer": "A basic C \"Hello, world!\" program is compiled using `cc -Wall hello.c -o hello` and then run with `./hello`."
  },
  {
    "question": "What execution model is used by parallel programs written with MPI?",
    "answer": "Parallel programs written using MPI make use of an execution model called Single Program, Multiple Data, or SPMD."
  },
  {
    "question": "What does the SPMD model involve?",
    "answer": "The SPMD model involves running a number of copies of a single program."
  },
  {
    "question": "What is the unique number assigned to each process in MPI called?",
    "answer": "In MPI, each copy or 'process' is assigned a unique number, referred to as the 'rank' of the process."
  },
  {
    "question": "How do processes in the SPMD model achieve different behaviors?",
    "answer": "Processes in the SPMD model usually use an \"if\" statement based on their rank to execute the appropriate set of instructions."
  },
  {
    "question": "What header file or module is required for C/C++ MPI programs?",
    "answer": "C/C++ MPI programs must include the `mpi.h` header file."
  },
  {
    "question": "What modules are used for Fortran MPI programs, and which is recommended?",
    "answer": "Fortran MPI programs can use `mpif.h`, `use mpi`, or `use mpi_f08`. `mpif.h` is strongly discouraged, and `mpi_f08` is recommended for new Fortran 2008 code."
  },
  {
    "question": "What is a compiler wrapper in the context of MPI?",
    "answer": "A compiler wrapper is a handy script provided by most MPI implementations that handles set-up issues with respect to include and lib directories, linking flags, etc."
  },
  {
    "question": "What are the compiler wrappers used for C, Fortran, and C++ MPI programs?",
    "answer": "The compiler wrappers are `mpicc` for C, `mpifort` (or `mpif90`) for Fortran, and `mpiCC` (or `mpicxx`) for C++."
  },
  {
    "question": "What is the initial coordination step for MPI programs once they start running?",
    "answer": "The initial coordination step for MPI programs is when each one calls an initialization function before it uses any other MPI features."
  },
  {
    "question": "What is the C prototype for the MPI initialization function?",
    "answer": "The C prototype for the MPI initialization function is `int MPI_Init(int *argc, char **argv[]);`."
  },
  {
    "question": "What do the `argc` and `argv` arguments represent in the C `MPI_Init` function?",
    "answer": "The `argc` and `argv` arguments to the C `MPI_Init` are pointers to the variables that represent the command-line arguments to the program."
  },
  {
    "question": "How do C MPI functions indicate their error status?",
    "answer": "Like all C MPI functions, the return value represents the error status of the function."
  },
  {
    "question": "How do Fortran MPI subroutines indicate their error status?",
    "answer": "Fortran MPI subroutines return the error status in an additional argument, `IERR`, which is optional if you `use mpi_f08`."
  },
  {
    "question": "What function is used for clean-up before an MPI program exits?",
    "answer": "The `MPI_Finalize` function must be called to do any clean-up that might be required before an MPI program exits."
  },
  {
    "question": "What is the C prototype for the `MPI_Finalize` function?",
    "answer": "The C prototype for `MPI_Finalize` is `int MPI_Finalize(void);`."
  },
  {
    "question": "Is `MPI.Finalize()` explicitly needed in Python with mpi4py?",
    "answer": "No, mpi4py installs a termination hook, so there is no need to explicitly call `MPI.Finalize()`, though it can be called."
  },
  {
    "question": "What is the recommended placement for `MPI_Init` and `MPI_Finalize` in an MPI program?",
    "answer": "As a rule of thumb, it is a good idea to call `MPI_Init` as the first statement of an MPI program, and `MPI_Finalize` as its last statement."
  }
]