[
  {
    "question": "What is GDB?",
    "answer": "GDB is a debugger used to investigate software problems."
  },
  {
    "question": "What does GDB stand for?",
    "answer": "GDB stands for 'The GNU Project Debugger'."
  },
  {
    "question": "What is the primary purpose of a debugger like GDB?",
    "answer": "A debugger makes it possible to quickly find the cause of a problem in a piece of software."
  },
  {
    "question": "What common type of software problem does GDB often help resolve?",
    "answer": "GDB is often used to resolve segmentation faults."
  },
  {
    "question": "What tool is recommended for resolving memory-related problems like memory leaks?",
    "answer": "For problems relating to memory, such as memory leaks, Valgrind is recommended."
  },
  {
    "question": "How should a C++ program be compiled to include debugging symbols for GDB?",
    "answer": "A program should be compiled using the `-g` option, for example: `g++ -g program.cpp -o program`."
  },
  {
    "question": "Why is it important to compile a program with the `-g` option for GDB?",
    "answer": "The `-g` option includes debugging symbols within the binary, which allows the debugger to provide more information on the bug."
  },
  {
    "question": "How do you run a program inside GDB?",
    "answer": "First, load the program with `gdb ./program`, then type `run` at the GDB prompt."
  },
  {
    "question": "What GDB command is used to start the execution of a loaded program?",
    "answer": "The `run` command starts the execution of a program within GDB."
  },
  {
    "question": "What GDB command displays the call stack (backtrace)?",
    "answer": "The `bt` (short for backtrace) command displays the call stack."
  },
  {
    "question": "What was the cause of the segmentation fault in the example C++ program?",
    "answer": "The segmentation fault in the example C++ program was caused by attempting to access an array element at index 1000000, while the array only contained 1000 elements."
  },
  {
    "question": "When is finding the cause of a segmentation fault using a core file particularly useful?",
    "answer": "Debugging with a core file is useful for bugs that happen a long time after the program has started, rather than using the debugger directly."
  },
  {
    "question": "How can you enable the generation of core files?",
    "answer": "To activate the creation of core files, run the command `ulimit -c unlimited`."
  },
  {
    "question": "What files are needed to trace execution up to an error using a core file in GDB?",
    "answer": "You need the program binary executable and the generated core file."
  },
  {
    "question": "How do you open a core file in GDB?",
    "answer": "First, start GDB with the program binary (e.g., `gdb -q ./program`), then use the `core-file` command followed by the core file name (e.g., `core-file core.18246`)."
  },
  {
    "question": "What is the result of debugging with a core file compared to running the program directly in GDB?",
    "answer": "Debugging with a core file yields the same result regarding the error location and backtrace as if the program had been run inside the debugger."
  },
  {
    "question": "What is required to attach GDB to an already running process?",
    "answer": "The process ID (PID) of the running process is required to attach GDB."
  },
  {
    "question": "How can you find the process ID (PID) of a running program, such as Firefox?",
    "answer": "You can find the PID using a command like `ps aux | grep firefox | grep -v grep`."
  },
  {
    "question": "How do you attach GDB to a running process with a specific PID?",
    "answer": "Use the command `gdb attach <PID>`, for example: `gdb attach 12691`."
  },
  {
    "question": "What GDB command shows the current call stack of an attached process?",
    "answer": "The `backtrace` or `bt` command shows the current call stack."
  },
  {
    "question": "What interactive debugging actions are available in GDB beyond running and backtracing?",
    "answer": "In GDB, you can set breakpoints on functions or lines of code, or set watches to interrupt the program when a variable is modified."
  },
  {
    "question": "How can you analyze the state of a program when its execution is interrupted in GDB?",
    "answer": "When execution is interrupted, you can analyze the state of the program by printing the value of variables."
  }
]