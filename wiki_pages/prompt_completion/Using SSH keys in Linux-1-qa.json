[
  {
    "question": "What is the first step before creating a new SSH key pair?",
    "answer": "Before creating a new key pair, check to see if you already have one. If you do, but can't remember where you've used it, it's better to create a fresh one."
  },
  {
    "question": "Where are SSH key pairs typically stored?",
    "answer": "Key pairs are typically located in the `.ssh/` directory in your /home directory."
  },
  {
    "question": "How are SSH keys named by default?",
    "answer": "By default, a key is named with an 'id_' prefix, followed by the key type (e.g., 'rsa', 'dsa', 'ed25519'), and the public key also has a '.pub' suffix."
  },
  {
    "question": "What is a common example of default SSH key names?",
    "answer": "A common example of default SSH key names is `id_rsa` and `id_rsa.pub`."
  },
  {
    "question": "What is a good practice when naming SSH keys?",
    "answer": "A good practice is to give it a name that is meaningful to you and identifies on which system the key is used."
  },
  {
    "question": "What command is used to generate a new SSH key?",
    "answer": "You can generate a new key with the `ssh-keygen` command."
  },
  {
    "question": "How do you generate an `ed25519` type SSH key?",
    "answer": "You can generate an `ed25519` key by running `ssh-keygen -t ed25519`."
  },
  {
    "question": "How do you generate a 4-kbit RSA SSH key?",
    "answer": "You can generate a 4-kbit RSA key by running `ssh-keygen -b 4096 -t rsa`."
  },
  {
    "question": "What prompts will you receive when generating an SSH key pair?",
    "answer": "You will be prompted to 'Enter file in which to save the key', 'Enter passphrase', and 'Enter same passphrase again'."
  },
  {
    "question": "Why should you enter a different file name for new SSH keys if default names are already in use?",
    "answer": "You should enter a different file name for the new keys to avoid overwriting existing key pairs."
  },
  {
    "question": "What type of SSH key is backed by a hardware security key?",
    "answer": "SSH keys backed by a hardware security key are typically of type `ecdsa-sk`."
  },
  {
    "question": "How do you generate an SSH key backed by a hardware security key?",
    "answer": "You can generate it with the `ssh-keygen` command using the `-t ecdsa-sk` option, like `ssh-keygen -t ecdsa-sk`."
  },
  {
    "question": "What additional step might be required when generating a hardware-backed SSH key?",
    "answer": "You may need to touch your authenticator to authorize key generation, in addition to entering a passphrase."
  },
  {
    "question": "What is the encouraged method for installing SSH public keys to make them available to clusters?",
    "answer": "Users are encouraged to leverage the new CCDB feature to install their SSH public key."
  },
  {
    "question": "How can you install your SSH public key via CCDB?",
    "answer": "Grab the content of your public key (e.g., `id_rsa.pub`) and upload it to CCDB as per the specified instructions."
  },
  {
    "question": "What is the simplest and safest command to install an SSH key to a remote system?",
    "answer": "The simplest, safest way to install a key to a remote system is by using the `ssh-copy-id` command."
  },
  {
    "question": "Provide an example of using `ssh-copy-id` to install a public key.",
    "answer": "An example is `ssh-copy-id -i ~/.ssh/mynewkey.pub graham.computecanada.ca`."
  },
  {
    "question": "What does the `ssh-copy-id` command do behind the scenes?",
    "answer": "It connects to the remote machine and places the public key into `.ssh/authorized_keys` in your /home directory there."
  },
  {
    "question": "What is the main benefit of using `ssh-copy-id` over manual installation?",
    "answer": "The main benefit from using `ssh-copy-id` is that it will create files and directories if necessary, and will ensure that the permissions on them are correct."
  },
  {
    "question": "What are the manual steps to install a public key on a remote server?",
    "answer": "You can manually install a public key by copying the public key file to the remote server, then running `mkdir ~/.ssh`, `cat id_rsa.pub >> ~/.ssh/authorized_keys`, `chmod --recursive go-rwx ~/.ssh`, and `chmod go-w ~`."
  },
  {
    "question": "What permission setting is required for the private key file?",
    "answer": "The private key file must not be accessible to others, which can be set with `chmod go-rwx id_rsa`."
  },
  {
    "question": "What permission setting is required for your remote /home directory?",
    "answer": "Your remote /home directory must not be writable by others, which can be set with `chmod go-w ~`."
  },
  {
    "question": "What permission setting is required for your remote ~/.ssh and ~/.ssh/authorized_keys?",
    "answer": "Your remote ~/.ssh and ~/.ssh/authorized_keys must not be writable by others, which can be set with `chmod --recursive go-rwx ~/.ssh`."
  },
  {
    "question": "How do you test connecting to a remote machine using a new key pair?",
    "answer": "You test the new key by SSHing to the remote machine from the local machine with `ssh -i /path/to/your/privatekey USERNAME@ADDRESS`."
  },
  {
    "question": "In the `ssh` connection command, what does `/path/to/your/privatekey` refer to?",
    "answer": "It specifies your private key file, e.g. `/home/ubuntu/.ssh/id_rsa`."
  },
  {
    "question": "In the `ssh` connection command, what does `USERNAME` refer to?",
    "answer": "`USERNAME` is the user name on the remote machine."
  },
  {
    "question": "In the `ssh` connection command, what does `ADDRESS` refer to?",
    "answer": "`ADDRESS` is the address of the remote machine."
  },
  {
    "question": "What is the primary function of `ssh-agent`?",
    "answer": "`ssh-agent` stores your private key in memory on your local computer and provides it whenever another program on this computer needs it for authentication, reducing the need to type a passphrase repeatedly."
  },
  {
    "question": "How do you start the `ssh-agent` program?",
    "answer": "You can start the `ssh-agent` program using the command `eval `ssh-agent``."
  },
  {
    "question": "After starting `ssh-agent`, how do you add your key pair to it?",
    "answer": "You can add your key pair to those managed by the agent using the command `ssh-add`."
  },
  {
    "question": "How can you add a key pair located in a non-standard path to `ssh-agent`?",
    "answer": "You can explicitly add the full path to the private key as an argument to `ssh-add`."
  },
  {
    "question": "How do you check which private keys are currently accessible to `ssh-agent`?",
    "answer": "Using the `ssh-add -l` option will show which private keys are currently accessible to the `ssh-agent`."
  },
  {
    "question": "When is 'agent forwarding' necessary with `ssh-agent`?",
    "answer": "You will need to enable 'agent forwarding' if you need to use your private key on the cluster itself, for example when interacting with a remote GitHub repository."
  },
  {
    "question": "How do you enable agent forwarding for a specific host like `beluga.computecanada.ca`?",
    "answer": "To enable agent forwarding for `beluga.computecanada.ca`, you can add `Host beluga.computecanada.ca` and `ForwardAgent yes` to your `$HOME/.ssh/config` file on your personal computer."
  },
  {
    "question": "What should you never do when configuring agent forwarding in your SSH configuration file?",
    "answer": "You should never use the line `Host *` for agent forwarding in your SSH configuration file."
  },
  {
    "question": "How can graphical \"keychain managers\" simplify SSH key usage on Linux and macOS?",
    "answer": "Many contemporary Linux distributions and macOS offer graphical \"keychain managers\" that can be configured to manage your SSH key pair, storing the private key in memory after local login and automatically providing it to the SSH client during remote login, eliminating the need to type passphrases."
  }
]