[
  {
    "question": "What is the primary purpose of the scratch filesystem on our clusters?",
    "answer": "The scratch filesystem is intended as temporary, fast storage for data being used during job execution."
  },
  {
    "question": "Where should data needed for long-term storage be kept?",
    "answer": "Data needed for long-term storage and reference should be kept in either `/project` or other archival storage areas."
  },
  {
    "question": "What is the general policy for deleting files from the scratch filesystem?",
    "answer": "Files older than 60 days are periodically deleted according to the policy outlined in this page."
  },
  {
    "question": "Does moving a file within scratch prevent it from being purged?",
    "answer": "No, simply moving a file from one directory in scratch to another directory in scratch will not in general prevent it from being purged, as purging is based on the file's age, not its location."
  },
  {
    "question": "How does the scratch filesystem policy differ on Graham and Nibi clusters compared to other clusters?",
    "answer": "On Graham and Nibi, the scratch filesystem does not explicitly expire, but uses quota to enforce transient use."
  },
  {
    "question": "What is the soft limit for scratch usage on Graham and Nibi clusters?",
    "answer": "If your usage is under 1T on Graham and Nibi, you never have to do anything (no expiration, etc)."
  },
  {
    "question": "What happens when a user exceeds the soft limit on Graham or Nibi?",
    "answer": "When you exceed the 'soft limit' on Graham or Nibi, you trigger an over-quota condition, which includes a 60-day grace period."
  },
  {
    "question": "What occurs when the grace period for an over-quota condition expires on Graham or Nibi?",
    "answer": "When the grace period expires, over-quota enforcement starts, disallowing any new allocation. Files are still accessible, but adding files or increasing file sizes will fail."
  },
  {
    "question": "How can an over-quota condition be resolved on Graham or Nibi?",
    "answer": "To resolve an over-quota condition, you must bring your usage under the soft limit, which 'resets' the clock."
  },
  {
    "question": "What is the hard quota for scratch usage on Graham and Nibi?",
    "answer": "There is a hard quota of 20T on Graham and Nibi."
  },
  {
    "question": "What is an advantage of the quota-based mechanism used on Graham and Nibi?",
    "answer": "This quota-based mechanism has the advantage of being fully user-controlled and avoids the case where specific files in a collection disappear due to slightly different age."
  },
  {
    "question": "When are files checked for expiration on the scratch filesystem?",
    "answer": "The scratch filesystem is checked at the end of the month for files which will be candidates for expiry on the 15th of the following month."
  },
  {
    "question": "What happens on the first day of the month regarding file expiration notifications?",
    "answer": "On the first day of the month, a login message is posted and a notification e-mail is sent to all users who have at least one file which is a candidate for purging and containing the location of a file which lists all the candidates for purging."
  },
  {
    "question": "How much time do users have to copy data after the initial expiration notification on the 1st of the month?",
    "answer": "Users will have two weeks to make arrangements to copy data to their project space or some other location if they wish to save the data in question."
  },
  {
    "question": "When is the final notification email sent about files slated for expiration?",
    "answer": "On the 12th of the month, a final notification e-mail will be sent with an updated assessment of candidate files for expiration on the 15th."
  },
  {
    "question": "How long do users have to move files after receiving the final notification email on the 12th of the month?",
    "answer": "Users are given 72 hours (until the end of the day on the 15th) to make arrangements for moving these files."
  },
  {
    "question": "What are the specific criteria for files to be deleted on the 15th of the month?",
    "answer": "At the end of the day on the 15th, any remaining files on the scratch filesystem for which both the `ctime` and the `atime` are older than 60 days will be deleted."
  },
  {
    "question": "What is the user's ultimate responsibility regarding files on the scratch space?",
    "answer": "It is the user's ultimate responsibility to keep files older than 60 days from being located in the scratch space."
  },
  {
    "question": "What effect does copying or `rsync`ing files from scratch have on their eligibility for deletion?",
    "answer": "Simply copying or using the `rsync` command to displace your files will update the `atime` for the original data on scratch, making them ineligible for deletion."
  },
  {
    "question": "What is the recommended action after copying data from scratch to another location?",
    "answer": "Once you have put the data in another location, please delete the original files and directories in scratch instead of depending on the automatic purging."
  },
  {
    "question": "Where can users check which files are slated for purging on Cedar, Beluga, and Narval clusters?",
    "answer": "On Cedar, Beluga, and Narval clusters, users can go to the `/scratch/to_delete/` path and look for a file with their name."
  },
  {
    "question": "Where can users check which files are slated for purging on Niagara?",
    "answer": "On Niagara, users can go to `/scratch/t/to_delete/` (which is a symlink to `/scratch/t/todelete/current`) to check for purging candidates."
  },
  {
    "question": "What information does the file listing candidates for purging contain?",
    "answer": "The file will contain a list of filenames with full path, possibly other information about atime, ctime, size, etc."
  },
  {
    "question": "How often is the file listing candidates for purging updated?",
    "answer": "The file listing candidates for purging will be updated only on the 1st and the 12th of each month."
  },
  {
    "question": "What does it mean if no file with your name is found in the candidate list?",
    "answer": "If a file with your name is not there, it means you have no candidates slated for purging that month."
  },
  {
    "question": "If files are modified between the 1st and 11th of the month, will the purging assessment change immediately?",
    "answer": "No, if you access/read/move/delete some of the candidates between the 1st and the 11th, there won't be any changes in the assessment until the 12th."
  },
  {
    "question": "What if an assessment file was present until the 11th but is gone on the 12th?",
    "answer": "If an assessment file was present up until the 11th but is no longer on the 12th, it's because you don't have anything to be purged anymore."
  },
  {
    "question": "If files are modified after the 12th of the month, how should a user confirm they won't be purged?",
    "answer": "If you access/read/move/delete some or the candidates after the 12th, then you have to check yourself to confirm your files won't be purged on the 15th."
  },
  {
    "question": "How is a file's age defined for the purpose of scratch filesystem purging?",
    "answer": "A file's age is defined as the most recent of its access time (`atime`) and change time (`ctime`)."
  },
  {
    "question": "What command is used to find the change time (`ctime`) of a file?",
    "answer": "You can find the `ctime` of a file using `ls -lc <filename>`."
  },
  {
    "question": "What command is used to obtain the access time (`atime`) of a file?",
    "answer": "The `atime` of a file can be obtained with the command `ls -lu <filename>`."
  },
  {
    "question": "Why is the modify time (`mtime`) not used to determine a file's age for purging?",
    "answer": "The modify time (`mtime`) is not used because it can be modified by the user or by other programs to display incorrect information."
  },
  {
    "question": "Why is `ctime` used as a fallback for `atime` when determining file age?",
    "answer": "The use of `ctime` as a fallback guards against userspace programs altering `atime`, potentially to times in the past, which could result in early expiration of a file."
  },
  {
    "question": "What is considered an abusive technique to circumvent the scratch purging policy?",
    "answer": "Periodically running a recursive `touch` command on your files to prevent them from being flagged for expiration is considered a potential abuse."
  },
  {
    "question": "What are the consequences for users detected circumventing the purging policy?",
    "answer": "Users who employ such techniques will be contacted and asked to modify their behaviour, in particular to move the 'retouched' data from scratch to a more appropriate location."
  },
  {
    "question": "What is the recommended method for safely copying a directory containing symbolic links from scratch to project?",
    "answer": "To safely copy a directory with symbolic links, you can use `tar` to make an archive of your files on scratch and extract this archive in your project."
  },
  {
    "question": "Provide an example command to copy a directory with symbolic links from scratch to project using tar.",
    "answer": "An example command to copy a directory with symlinks is: `cd /scratch/.../your_data; mkdir project/.../your_data; tar cf - ./* | (cd /project/.../your_data && tar xf -)`."
  }
]