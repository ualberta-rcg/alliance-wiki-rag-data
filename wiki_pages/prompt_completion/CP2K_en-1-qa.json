[
  {
    "question": "What is CP2K?",
    "answer": "CP2K is a quantum chemistry and solid state physics software package for atomistic simulations."
  },
  {
    "question": "What types of systems can CP2K simulate?",
    "answer": "CP2K can simulate solid state, liquid, molecular, periodic, material, crystal, and biological systems."
  },
  {
    "question": "What is the latest installed version of CP2K?",
    "answer": "The latest installed version of CP2K is 8.2."
  },
  {
    "question": "How do you load the GCC-compiled version of CP2K 8.2?",
    "answer": "You can load it using `module load StdEnv/2020 gcc/9.3.0 openmpi/4.0.3 cp2k/8.2`."
  },
  {
    "question": "Is there an alternative compiler option for CP2K?",
    "answer": "Yes, there is a version compiled with the Intel compiler."
  },
  {
    "question": "How do you load the Intel-compiled version of CP2K 8.2?",
    "answer": "You can load it using `module load StdEnv/2020 intel/2020.1.217 openmpi/4.0.3 cp2k/8.2`."
  },
  {
    "question": "What is a potential issue with the Intel-compiled version of CP2K?",
    "answer": "The Intel-compiled version seems less stable and sometimes crashes for unknown reasons."
  },
  {
    "question": "Where can users find an example static calculation for CP2K?",
    "answer": "An example static calculation can be found on the CP2K website: `https://www.cp2k.org/howto:static_calculation`."
  },
  {
    "question": "What are the initial commands to download and extract the example static calculation files?",
    "answer": "First, use `wget https://www.cp2k.org/_media/static_calculation.tgz` to download, then `tar xvfz static_calculation.tgz` to extract, and `cd static_calculation/sample_output_no_smearing` to navigate to the directory."
  },
  {
    "question": "What is the recommended filename for the example job submission script?",
    "answer": "The recommended filename is `mpi_job.sh`."
  },
  {
    "question": "In the `mpi_job.sh` example, what is the specified number of MPI processes?",
    "answer": "The `mpi_job.sh` example specifies 4 MPI processes (`#SBATCH --ntasks=4`)."
  },
  {
    "question": "What memory per CPU is requested in the `mpi_job.sh` example?",
    "answer": "The `mpi_job.sh` example requests 4GB memory per CPU (`#SBATCH --mem-per-cpu=4G`)."
  },
  {
    "question": "What is the time limit set for the job in `mpi_job.sh`?",
    "answer": "The time limit is 0 days, 0 hours, and 15 minutes (`#SBATCH --time=0-00:15`)."
  },
  {
    "question": "What command is used to execute the CP2K job within the `mpi_job.sh` script?",
    "answer": "The command used is `srun cp2k.popt -o Si_bulk8.out Si_bulk8.inp`."
  },
  {
    "question": "How do you submit the `mpi_job.sh` script?",
    "answer": "You submit the script by executing `sbatch mpi_job.sh`."
  },
  {
    "question": "How can you check if a job has completed?",
    "answer": "Run the command `sq`. If your job is no longer listed, it has completed."
  },
  {
    "question": "Where is the main output of the CP2K calculation located for the example job?",
    "answer": "The output of CP2K will be located in the file `Si_bulk8.out`."
  },
  {
    "question": "What are the two main executables included with CP2K version 8.2 and later?",
    "answer": "CP2K version 8.2 and later includes the MPI executable `cp2k.popt` and the OpenMP/MPI executable `cp2k.psmp`."
  },
  {
    "question": "Why might one choose to use `cp2k.psmp` instead of `cp2k.popt`?",
    "answer": "The `cp2k.psmp` executable, an OpenMP/MPI version, may give better performance for some calculations, showing a 10% increase in a benchmark test."
  },
  {
    "question": "What was the observed performance increase for the QS/H2O-512.inp benchmark when using `cp2k.psmp`?",
    "answer": "A 10% performance increase was observed when using `cp2k.psmp` with 2 threads per MPI process."
  },
  {
    "question": "For which cluster is the OpenMP/MPI job submission example provided?",
    "answer": "The example OpenMP/MPI job submission file is for the Beluga cluster."
  },
  {
    "question": "How many nodes are requested in the `openmp_mpi_job.sh` example?",
    "answer": "The `openmp_mpi_job.sh` example requests 2 nodes (`#SBATCH --nodes=2`)."
  },
  {
    "question": "How many MPI processes are specified in the `openmp_mpi_job.sh` example?",
    "answer": "The `openmp_mpi_job.sh` example specifies 40 MPI processes (`#SBATCH --ntasks=40`)."
  },
  {
    "question": "How many CPUs per task are set in the `openmp_mpi_job.sh` example?",
    "answer": "The `openmp_mpi_job.sh` example sets 2 CPUs per task (`#SBATCH --cpus-per-task=2`)."
  },
  {
    "question": "What is the memory per CPU requested in the `openmp_mpi_job.sh` example?",
    "answer": "The `openmp_mpi_job.sh` example requests 3GB memory per CPU (`#SBATCH --mem-per-cpu=3G`)."
  },
  {
    "question": "What is the time limit for the OpenMP/MPI job in `openmp_mpi_job.sh`?",
    "answer": "The time limit is 0 days, 0 hours, and 59 minutes (`#SBATCH --time=0-00:59`)."
  },
  {
    "question": "What environment variable is set in `openmp_mpi_job.sh` to control OpenMP threads?",
    "answer": "The `OMP_NUM_THREADS` environment variable is set using `export OMP_NUM_THREADS=$SLURM_CPUS_PER_TASK`."
  },
  {
    "question": "What command runs the OpenMP/MPI CP2K job in `openmp_mpi_job.sh`?",
    "answer": "The command is `srun --cpus-per-task=$OMP_NUM_THREADS cp2k.psmp -o H2O-512.out H2O-512.inp`."
  },
  {
    "question": "Is `cp2k.psmp` always faster than `cp2k.popt`?",
    "answer": "No, running the `cp2k.psmp` executable may actually be slower for some cases, as performance changes are highly problem dependent."
  },
  {
    "question": "What should users do to determine the best CP2K executable and threading option for their specific case?",
    "answer": "Users must benchmark their code and choose the right option for their particular case."
  }
]