[
  {
    "question": "How can users prevent simultaneous parallel MATLAB jobs from corrupting shared local parallel profile files?",
    "answer": "Users should ensure each job creates its own parallel profile in a unique location by setting the `JobStorageLocation` property of the `parallel.Cluster` object."
  },
  {
    "question": "Provide a MATLAB code fragment that sets a unique `JobStorageLocation` for a parallel profile.",
    "answer": "The code fragment is: `local_cluster = parcluster('local'); local_cluster.JobStorageLocation = getenv('SLURM_TMPDIR'); parpool(local_cluster);`"
  },
  {
    "question": "Which environment variable is suggested for setting the unique `JobStorageLocation` in MATLAB?",
    "answer": "`SLURM_TMPDIR`."
  },
  {
    "question": "What is an important consideration when running MATLAB Compiler Runtime (MCR) code?",
    "answer": "Like any other intensive job, MCR code must always be run within a job submitted to the scheduler."
  },
  {
    "question": "Which tool is used to compile MATLAB code on the clusters?",
    "answer": "The MATLAB Compiler, `mcc`."
  },
  {
    "question": "Which versions of the MATLAB Compiler (`mcc`) are currently supported?",
    "answer": "Versions 2014a, 2018a, and later."
  },
  {
    "question": "How do you compile a MATLAB file named `cosplot.m` using the `mcc` command?",
    "answer": "Use the command `mcc -m -R -nodisplay cosplot.m`."
  },
  {
    "question": "What does the `mcc` command produce after compiling a MATLAB file?",
    "answer": "It produces a binary (e.g., `cosplot`) and a wrapper script (e.g., `run_cosplot.sh`)."
  },
  {
    "question": "Why is the default wrapper script generated by `mcc` not suitable for running compiled binaries on the servers?",
    "answer": "The default wrapper script will not work as MATLAB assumes some libraries can be found in specific locations, which it does not correctly handle."
  },
  {
    "question": "What wrapper script is provided to run compiled MATLAB binaries on the servers?",
    "answer": "`run_mcr_binary.sh`."
  },
  {
    "question": "How do you load the appropriate MCR module for a compiled MATLAB executable?",
    "answer": "On one of our servers, load an MCR module corresponding to the MATLAB version used to build the executable, e.g., `module load mcr/R2024b`."
  },
  {
    "question": "What command should be run once for each compiled binary to set correct paths?",
    "answer": "Run `setrpaths.sh --path <binary_name>`, for example, `setrpaths.sh --path cosplot`."
  },
  {
    "question": "Where should the compiled binary be used with `run_mcr_binary.sh`?",
    "answer": "In your submission script, not on the login nodes, using a command like `run_mcr_binary.sh cosplot`."
  },
  {
    "question": "How many times is it necessary to run `setrpaths.sh` for a specific compiled binary?",
    "answer": "You only need to run the `setrpaths.sh` command once for each compiled binary."
  },
  {
    "question": "When is the MATLAB Parallel Server recommended?",
    "answer": "MATLAB Parallel Server is only worthwhile if you need more workers in your parallel MATLAB job than available CPU cores on a single compute node."
  },
  {
    "question": "Is it currently possible to submit MATLAB parallel jobs from a local computer using MATLAB Parallel Server?",
    "answer": "No, job submission from a local computer is no longer possible since May 2023."
  },
  {
    "question": "What is the reason for the current inability to submit MATLAB Parallel Server jobs from a local computer?",
    "answer": "Mandatory security improvements implemented since May 2023 mean MATLAB uses an SSH mode that is no longer permitted, and there is currently no workaround."
  },
  {
    "question": "Is the Slurm plugin for MATLAB still functional?",
    "answer": "No, the procedure below no longer works because the Slurm plugin is no longer available, and due to the SSH issue."
  },
  {
    "question": "What MATLAB version and toolbox were required for the (now non-functional) Slurm plugin?",
    "answer": "MATLAB R2022a or newer, including the Parallel Computing Toolbox."
  },
  {
    "question": "What command could be run in MATLAB if the Slurm plugin configuration wizard didn't start automatically?",
    "answer": "`parallel.cluster.generic.runProfileWizard()`."
  },
  {
    "question": "For Narval and Rorqual clusters, what were the recommended 'Cluster host' responses for the (now defunct) Slurm plugin configuration wizard?",
    "answer": "For Narval: `narval.alliancecan.ca`; for Rorqual: `rorqual.alliancecan.ca`."
  },
  {
    "question": "What was the recommended 'Remote job storage' for the Slurm plugin configuration?",
    "answer": "`/scratch`, with 'Use unique subfolders' checked."
  },
  {
    "question": "What was the maximum number of workers suggested for the Slurm plugin configuration?",
    "answer": "960 workers."
  },
  {
    "question": "What was the recommended MATLAB installation folder for workers (local R2022a) for the Slurm plugin?",
    "answer": "`/cvmfs/restricted.computecanada.ca/easybuild/software/2020/Core/matlab/2022a`."
  },
  {
    "question": "What command was used to navigate to the `nonshared` folder to edit Slurm plugin files?",
    "answer": "`cd(fullfile(matlabshared.supportpkg.getSupportPackageRoot, 'parallel', 'slurm', 'nonshared'))`."
  },
  {
    "question": "In the `independentSubmitFcn.m` file (for the defunct Slurm plugin), what line was to be replaced?",
    "answer": "The line `additionalSubmitArgs = sprintf('--ntasks=1 --cpus-per-task=%d', cluster.NumThreads);` was to be replaced with `additionalSubmitArgs = ccSBATCH().getSubmitArgs();`."
  },
  {
    "question": "In the `communicatingJobWrapper.sh` file (for the defunct Slurm plugin), what command needed to be added?",
    "answer": "Around line #20, `module load matlab/2022a` needed to be added, adjusting the module version."
  },
  {
    "question": "After editing the plugin files, how would you return to the home directory in MATLAB?",
    "answer": "`cd(getenv('HOME'))` (or `cd(getenv('HOMEPATH'))` on Windows)."
  },
  {
    "question": "Should the built-in validation tool in the Cluster Profile Manager be used for the (now defunct) Slurm plugin?",
    "answer": "No, users should not use the built-in validation tool."
  },
  {
    "question": "What was the recommended method for validating the (defunct) Slurm plugin configuration?",
    "answer": "Trying the `TestParfor` example along with a proper `ccSBATCH.m` script file, downloaded from GitHub."
  }
]