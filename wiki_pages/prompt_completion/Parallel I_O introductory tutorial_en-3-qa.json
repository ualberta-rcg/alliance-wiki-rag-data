[
  {
    "question": "What are the advantages of using the ASCII data format?",
    "answer": "ASCII is human readable and portable across different architectures."
  },
  {
    "question": "What are the disadvantages of the ASCII data format?",
    "answer": "ASCII is inefficient for storage, using 13 bytes per single precision float and 22 bytes per double precision float (plus delimiters), and is expensive for read/write operations."
  },
  {
    "question": "How is writing in ASCII format implemented in C code?",
    "answer": "In C code, `fprintf()` is used for writing in ASCII format."
  },
  {
    "question": "How is writing in ASCII format implemented in FORTRAN 90 code?",
    "answer": "In FORTRAN 90, `open(6,file='test',form='formatted');write(6,*)` is used for writing in ASCII format."
  },
  {
    "question": "How does binary format compare to ASCII in terms of computational cost?",
    "answer": "Binary format is much 'cheaper' in a computational sense than ASCII, and takes way shorter time for writing."
  },
  {
    "question": "How much storage does binary format use for single and double precision floats?",
    "answer": "Binary format uses 4 bytes per single precision float and 8 bytes per double precision float, with no delimiters."
  },
  {
    "question": "Is binary format efficient for read and write operations?",
    "answer": "Yes, binary format offers efficient read and write operations."
  },
  {
    "question": "What are the drawbacks of using binary data format?",
    "answer": "The drawbacks of binary format are that you have to know the specific format to read it, and there can be portability issues related to endians."
  },
  {
    "question": "How is writing in binary format implemented in C code?",
    "answer": "In C code, `fwrite()` is used for writing in binary format."
  },
  {
    "question": "How is writing in binary format implemented in FORTRAN 90 code?",
    "answer": "In FORTRAN 90, `open(6,file='test',form='unformatted'); write(6)` is used for writing in binary format."
  },
  {
    "question": "What is the purpose of metadata, such as XML?",
    "answer": "Metadata encodes data about data, including the number and names of variables, their dimensions and sizes, endians, owner, date, links, and comments."
  },
  {
    "question": "When is metadata particularly useful?",
    "answer": "Metadata is particularly helpful when passing binary files to someone else or other programs, as it describes the binary data."
  },
  {
    "question": "Which high-end libraries can also be used to include metadata?",
    "answer": "High-end libraries such as HDF5 and NetCDF can also be used to store data descriptions and metadata."
  },
  {
    "question": "What kind of data records is the database format good for?",
    "answer": "The database data format is good for many small records."
  },
  {
    "question": "How can using a database simplify data management and analysis?",
    "answer": "Using a database can greatly simplify data organization and analysis, and it can provide enhanced performance over seek/sort depending on usage."
  },
  {
    "question": "Which open-source database packages are supported by CHARENTE?",
    "answer": "CHARENTE supports SQLite (serverless), PostgreSQL, and mySQL."
  },
  {
    "question": "Are database formats commonly used in numerical simulations?",
    "answer": "No, database formats are not quite common in numerical simulation."
  },
  {
    "question": "What are some examples of standard scientific dataset libraries?",
    "answer": "Examples of standard scientific dataset libraries include HDF5 (Hierarchical Data Format) and NetCDF (Network Common Data Format)."
  },
  {
    "question": "What benefits do standard scientific dataset libraries offer beyond efficient storage?",
    "answer": "Beyond efficient storage of large-scale arrays, these libraries include data descriptions (metadata), provide data portability across platforms and languages, store data in binary with optional compression, and optionally provide parallel I/O."
  },
  {
    "question": "How can standard scientific dataset libraries help save data storage for large simulations?",
    "answer": "These libraries can save data storage dramatically by efficiently compressing repeating values, which is useful in large-scale simulations with datasets containing many zeros or other repeated values."
  },
  {
    "question": "In large parallel calculations where data is distributed across processors, is a parallel filesystem alone sufficient for I/O?",
    "answer": "No, in large parallel calculations, using a parallel filesystem isn't sufficient; users must organize parallel I/O themselves."
  },
  {
    "question": "What file format options are available for writing data in large parallel calculations?",
    "answer": "Data can be written as raw binary, HDF5, or NetCDF."
  },
  {
    "question": "What is the simplest approach for serial I/O when writing data from multiple computing nodes to a single file?",
    "answer": "The simplest approach is to designate one 'spokesperson' CPU to collect all data from other members and then write it to a file as a regular serial I/O."
  },
  {
    "question": "What are the advantages of the 'spokesperson' approach for serial I/O in parallel jobs?",
    "answer": "It is trivially simple for small I/O, and it can be used when some I/O libraries are not parallel."
  },
  {
    "question": "What are the limitations of the 'spokesperson' approach for serial I/O in parallel jobs?",
    "answer": "The bandwidth for writing is limited by the rate of one client, there may not be enough memory on a node to hold all data, and this approach won't scale because the operation time increases linearly with the amount of data and the number of member processes."
  }
]