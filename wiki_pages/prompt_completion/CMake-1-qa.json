[
  {
    "question": "What is CMake?",
    "answer": "CMake is a free, multi-language, multi-platform compilation tool, standing for 'cross-platform make'."
  },
  {
    "question": "Why have some projects, like KDE and MySQL, switched from Autotools to CMake?",
    "answer": "Projects have switched to CMake for various reasons, including that compilation is quicker and build files are easier to write, according to KDE."
  },
  {
    "question": "How does CMake's basic usage compare to Autotools?",
    "answer": "CMake works similarly to Autotools, requiring a configuration step followed by a build. Instead of './configure', you call 'cmake directory'."
  },
  {
    "question": "How do you configure an application using CMake in the current directory?",
    "answer": "To configure an application in the current directory, you run 'cmake .'."
  },
  {
    "question": "What is the simplest command to configure, build, and install an application or library using CMake?",
    "answer": "The simplest way to configure, build, and install an application or library is with 'cmake . && make && make install'."
  },
  {
    "question": "What mechanism do the clusters use to help binaries find dependent libraries?",
    "answer": "Our clusters use a mechanism called RUNPATH or RPATH to automatically add information to the resulting binary to help it find dependent libraries."
  },
  {
    "question": "What common issue can arise when compiling software on clusters with CMake?",
    "answer": "Conflicts can arise when both the cluster's RPATH mechanism and CMake's RPATH feature are used at the same time."
  },
  {
    "question": "How can you avoid RPATH-related errors when using CMake on the clusters?",
    "answer": "To avoid RPATH-related errors, you can add the option '-DCMAKE_SKIP_INSTALL_RPATH=ON' to your CMake command line."
  },
  {
    "question": "What option helps CMake find libraries in non-standard locations on the clusters?",
    "answer": "To help CMake find libraries installed in non-standard locations, you can use the option '-DCMAKE_SYSTEM_PREFIX_PATH=$EBROOTGENTOO'."
  },
  {
    "question": "How can you specify specific library locations if general options are insufficient?",
    "answer": "You may need to add more specific options for individual libraries, such as '-DCURL_LIBRARY=$EBROOTGENTOO/lib/libcurl.so -DCURL_INCLUDE_DIR=$EBROOTGENTOO/include' for cURL."
  },
  {
    "question": "What are the ways to customize the configuration of an application or library with CMake?",
    "answer": "The configuration can be customized using different command line options or by using the command line interface with the 'ccmake' command."
  },
  {
    "question": "What is 'ccmake' used for?",
    "answer": "ccmake is a command-line interface used to customize the configuration of an application or library after running cmake, presenting a list of project-defined options."
  },
  {
    "question": "How do you invoke 'ccmake' for the current directory?",
    "answer": "You invoke 'ccmake' for the current directory by running 'ccmake .'."
  },
  {
    "question": "When should 'ccmake' be run in the configuration process?",
    "answer": "You should run 'ccmake' after having run 'cmake', typically with the command 'cmake . && ccmake .'."
  },
  {
    "question": "How do you edit a value for an option within the 'ccmake' interface?",
    "answer": "To edit a value within the 'ccmake' interface, you press the 'enter' key on the selected option."
  },
  {
    "question": "What key in 'ccmake' should be pressed to try out a new configuration after modifying a value?",
    "answer": "After modifying a value in 'ccmake', you should press the 'c' key to try out the configuration with the new value."
  },
  {
    "question": "What option in 'ccmake' allows you to generate the Makefile after a successful configuration?",
    "answer": "If a new configuration succeeds in 'ccmake', you will have the option 'g' to generate the Makefile."
  },
  {
    "question": "How do you exit 'ccmake' without generating a Makefile?",
    "answer": "You can quit 'ccmake' without generating a Makefile by pressing the 'q' key."
  },
  {
    "question": "How do you activate advanced mode in 'ccmake'?",
    "answer": "You can activate advanced mode in 'ccmake' by pressing the 't' key."
  }
]