[
  {
    "question": "What is MrBayes?",
    "answer": "MrBayes is a program for Bayesian inference and model choice across a wide range of phylogenetic and evolutionary models."
  },
  {
    "question": "What methods does MrBayes use to estimate model parameters?",
    "answer": "MrBayes uses Markov chain Monte Carlo (MCMC) methods to estimate the posterior distribution of model parameters."
  },
  {
    "question": "How can I find available MrBayes modules?",
    "answer": "You can find available MrBayes modules by running the command `module spider mrbayes`."
  },
  {
    "question": "How many CPU cores does the sequential MrBayes job script example use?",
    "answer": "The sequential MrBayes job script example uses only one CPU core, specified by `--cpus-per-task=1`."
  },
  {
    "question": "What input file is commonly used in the MrBayes example scripts?",
    "answer": "The example scripts for MrBayes use `primates.nex`, an input file distributed with MrBayes."
  },
  {
    "question": "What module is loaded for a sequential MrBayes job in the example script?",
    "answer": "The module `mrbayes/3.2.7` is loaded for a sequential MrBayes job."
  },
  {
    "question": "How is a sequential MrBayes job launched in the example script?",
    "answer": "A sequential MrBayes job is launched using the command `srun mb primates.nex`."
  },
  {
    "question": "How do you submit the sequential MrBayes job script named `submit-mrbayes-seq.sh`?",
    "answer": "The `submit-mrbayes-seq.sh` job script is submitted with the command `sbatch submit-mrbayes-seq.sh`."
  },
  {
    "question": "What parallel computing resources can MrBayes utilize?",
    "answer": "MrBayes can be run on multiple cores, multiple nodes, and GPUs."
  },
  {
    "question": "How many CPU cores does the MPI parallel MrBayes job script use?",
    "answer": "The MPI parallel MrBayes job script uses 8 CPU cores in total, specified by `--ntasks=8`."
  },
  {
    "question": "How do you submit the MPI parallel MrBayes job script named `submit-mrbayes-parallel.sh`?",
    "answer": "The `submit-mrbayes-parallel.sh` job script is submitted with the command `sbatch submit-mrbayes-parallel.sh`."
  },
  {
    "question": "Which modules need to be loaded to run MrBayes on a GPU according to the example?",
    "answer": "To run MrBayes on a GPU, the `gcc`, `cuda/12`, and `mrbayes/3.2.7` modules need to be loaded."
  },
  {
    "question": "What SBATCH parameter is used to request a GPU for a MrBayes job?",
    "answer": "The `--gpus=1` SBATCH parameter is used to request one GPU for a MrBayes job."
  },
  {
    "question": "How do you submit the GPU MrBayes job script named `submit-mrbayes-gpu.sh`?",
    "answer": "The `submit-mrbayes-gpu.sh` job script is submitted with the command `sbatch submit-mrbayes-gpu.sh`."
  },
  {
    "question": "Why is it suggested to break up very long MrBayes runs into several smaller jobs?",
    "answer": "Very long MrBayes jobs are more likely to be interrupted by hardware failure or maintenance outages."
  },
  {
    "question": "Does MrBayes support checkpointing?",
    "answer": "Yes, MrBayes has a mechanism for creating checkpoints, allowing progress to be saved and continued in subsequent jobs."
  },
  {
    "question": "What is the key difference in the second input file for checkpointing MrBayes calculations?",
    "answer": "The key difference in the second input file (`job2.nex`) for checkpointing is the presence of the `append` keyword."
  }
]