[
  {
    "question": "When does Valgrind report memory leak errors?",
    "answer": "Valgrind reports memory leak errors at the end of the program's execution."
  },
  {
    "question": "What does a Valgrind error message for a memory leak typically look like?",
    "answer": "A typical Valgrind error message for a memory leak will indicate 'bytes in blocks are definitely lost' and provide the allocation traceback, similar to: '==2116== 100 bytes in 1 blocks are definitely lost in loss record 1 of 1 ==2116== at 0x1B900DD0: malloc (vg_replace_malloc.c:131) ==2116== by 0x804840F: main (in /home/cprogram/example1)'"
  },
  {
    "question": "What kind of issues trigger an 'Invalid pointer access/out of bound errors' message in Valgrind?",
    "answer": "This error message is triggered if you attempt to read or write to an unallocated pointer or outside of the allocated memory."
  },
  {
    "question": "What is an example of Valgrind's error message for invalid pointer access or out-of-bounds errors?",
    "answer": "An example of this error message is: '==9814== Invalid write of size 1 ==9814== at 0x804841E: main (example2.c:6) ==9814== Address 0x1BA3607A is 0 bytes after a block of size 10 alloc'd ==9814== at 0x1B900DD0: malloc (vg_replace_malloc.c:131) ==9814== by 0x804840F: main (example2.c:5)'"
  },
  {
    "question": "What Valgrind error message indicates the use of uninitialized variables?",
    "answer": "If you use an uninitialized variable, Valgrind will report an error message such as 'Conditional jump or move depends on uninitialised value(s)'."
  },
  {
    "question": "Can you provide an example of Valgrind's error message for using uninitialized variables?",
    "answer": "An example error message for using uninitialized variables is: '==17943== Conditional jump or move depends on uninitialised value(s) ==17943== at 0x804840A: main (example3.c:6)'"
  }
]