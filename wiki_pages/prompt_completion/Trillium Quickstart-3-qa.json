[
  {
    "question": "What is the purpose of the `debugjob` command on Trillium?",
    "answer": "The `debugjob` command is used to request an interactive debug job for tests that exceed login node limits or require dedicated resources."
  },
  {
    "question": "How do you request a default interactive debug session on the CPU subcluster?",
    "answer": "You run the command `debugjob` from a CPU login node."
  },
  {
    "question": "What resources are allocated for a default CPU `debugjob` session?",
    "answer": "A default CPU `debugjob` session allocates 1 node, 192 CPU cores, 0 GPUs, 755 GiB of memory, and has a walltime limit of 60 minutes."
  },
  {
    "question": "How can you request a two-node CPU interactive debug session?",
    "answer": "You can request a two-node CPU debug session using the command `debugjob 2`."
  },
  {
    "question": "What are the specifications for a `debugjob 2` on the CPU subcluster?",
    "answer": "A `debugjob 2` on the CPU subcluster provides 2 nodes, 384 CPU cores, 0 GPUs, 2x755 GiB of memory, and a walltime limit of 30 minutes."
  },
  {
    "question": "What command should be used to request a single GPU interactive session?",
    "answer": "You can use `debugjob` or `debugjob -g 1` from the GPU login node to request a single GPU interactive session."
  },
  {
    "question": "What resources are allocated for a single GPU interactive debug session?",
    "answer": "A single GPU debug session allocates 1/4 node, 24 CPU cores, 1 GPU, 188 GiB of memory, and has a walltime limit of 120 minutes."
  },
  {
    "question": "How do you request a full GPU node interactive debug session (4 GPUs)?",
    "answer": "To request a full GPU node debug session, use the command `debugjob 1` or `debugjob -g 4`."
  },
  {
    "question": "What are the resource limits for an 8-GPU interactive debug session?",
    "answer": "An 8-GPU debug session (using `debugjob 2` or `debugjob -g 8`) provides 2 nodes, 192 CPU cores, 8 GPUs, 2x755 GiB of memory, and a 15-minute walltime limit."
  },
  {
    "question": "What is the default environment like within a `debugjob` session?",
    "answer": "In a `debugjob` session, only standard modules are loaded, there is no internet access, no write access to the home and project file systems, and no job submissions are allowed."
  },
  {
    "question": "How can a `debugjob` session inherit modules that were loaded before issuing the command?",
    "answer": "To inherit previously loaded modules, add `--export=ALL` as the first option to the `debugjob` command, for example: `debugjob --export=ALL`."
  },
  {
    "question": "When should an interactive session be requested using `salloc` instead of `debugjob`?",
    "answer": "If your test job requires more time than allowed by `debugjob`, you should request an interactive session from the regular queue using `salloc`."
  },
  {
    "question": "What is the command structure for requesting an interactive CPU test job using `salloc`?",
    "answer": "The command for an interactive CPU test job using `salloc` is: `$ salloc --export=NONE --nodes=N --time=M:00:00 [--ngpus-per-node=G] [--x11]`."
  },
  {
    "question": "What are the implications of submitting jobs with `salloc`?",
    "answer": "Jobs submitted with `salloc` may take longer to start compared to `debugjob` sessions and count towards your allocation."
  },
  {
    "question": "What job scheduler does Trillium use?",
    "answer": "Trillium uses SLURM as its job scheduler."
  },
  {
    "question": "How do you submit a job script to the scheduler on Trillium?",
    "answer": "You use the `sbatch` command on a login node, for example: `$ sbatch jobscript.sh`."
  },
  {
    "question": "From which login nodes should CPU compute jobs be submitted?",
    "answer": "CPU compute jobs need to be submitted from the CPU login nodes."
  },
  {
    "question": "From which login nodes should GPU compute jobs be submitted?",
    "answer": "GPU compute nodes must be submitted from the GPU login node."
  },
  {
    "question": "What must a job script contain to specify required resources for SLURM?",
    "answer": "The job script should contain lines starting with `#SBATCH` to specify the resources it will need."
  },
  {
    "question": "How is a job's priority determined in the SLURM queue?",
    "answer": "A job's priority in the queue depends on requested resources, time spent in the queue, recent past usage, and the SLURM account under which the job was submitted."
  },
  {
    "question": "What are the two main types of SLURM accounts on Trillium?",
    "answer": "The two main types are RAS (Resource Allocation Projects) or default RAPs, which start with `def-`, and RAC (Research Allocation Competition) RAPs, which typically start with `rrg-` or `rpp-`."
  },
  {
    "question": "Can a RAC allocation for another system, like Nibi, be used on Trillium?",
    "answer": "No, RACs are bound to a specific system, so a RAC for Nibi cannot be used on Trillium."
  }
]