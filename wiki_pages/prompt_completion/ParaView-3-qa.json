[
  {
    "question": "How can you confirm that parallel rendering is active in ParaView?",
    "answer": "To check that you are doing parallel rendering, you can colour your dataset by the `Process Id` variable, which is unavailable when running in serial."
  },
  {
    "question": "Which clusters support single-core visualization using Open OnDemand?",
    "answer": "Single-core visualization via Open OnDemand is supported on Nibi or Trillium."
  },
  {
    "question": "What are the web portals for Open OnDemand on Nibi and Trillium?",
    "answer": "On Nibi, sign in at https://ondemand.sharcnet.ca. On Trillium, sign in at https://ondemand.scinet.utoronto.ca/pun/sys/dashboard."
  },
  {
    "question": "What are the initial steps to launch a single-core ParaView session via Open OnDemand on Nibi?",
    "answer": "Once logged in, find 'Desktop' under 'Compute Nodes | Nibi Desktop'. Specify a CPU-only Slurm account with 1 CPU core and launch the job. After it's running, click 'Launch Nibi Desktop', open a terminal, and type `module load paraview/6.0.0` followed by `paraview`."
  },
  {
    "question": "Can the ParaView GUI application directly utilize multiple CPU cores for rendering?",
    "answer": "The ParaView GUI application itself is single-threaded and cannot directly use multiple cores. Some filters like contouring or resampling support multithreading via VTK backends."
  },
  {
    "question": "How is true parallel rendering achieved with ParaView when the GUI is single-threaded?",
    "answer": "For true parallel rendering, you need to connect the single-core ParaView client to a parallel ParaView server. Both can be launched within Open OnDemand."
  },
  {
    "question": "What are the resource limits for multi-core visualization on Nibi's Open OnDemand?",
    "answer": "On Nibi's Open OnDemand, you can request up to 128GB memory and up to 8 cores for multi-core visualization."
  },
  {
    "question": "How do you start a parallel ParaView server with 4 CPU cores within an Open OnDemand desktop session?",
    "answer": "Inside your Open OnDemand desktop session, open a terminal, type `module load paraview/6.0.0`, and then execute `mpirun --oversubscribe -np 4 pvserver`."
  },
  {
    "question": "After starting the parallel ParaView server, how do you launch the ParaView client within the same Open OnDemand desktop session?",
    "answer": "Still inside the remote desktop, start another terminal and type `module load paraview/6.0.0` followed by `paraview`."
  },
  {
    "question": "What configuration steps are required in the ParaView GUI to connect to a parallel server running in an Open OnDemand session?",
    "answer": "In ParaView GUI, click 'Connect', then 'Add Server'. Select 'Server Type = Client/Server', set 'Host = localhost', 'Port = 11111', and 'Startup Type = Manual'. Then, click 'Connect' again to establish the connection."
  },
  {
    "question": "Which HPC clusters support the large-scale interactive client-server ParaView setup?",
    "answer": "The large-scale interactive client-server setup is supported on Rorqual, Nibi, Fir, Trillium, and Narval."
  },
  {
    "question": "What is a crucial compatibility requirement for establishing a ParaView client-server connection?",
    "answer": "ParaView requires the same major version on the local client and the remote host to prevent incompatibility that typically shows as a failed handshake when establishing the connection."
  },
  {
    "question": "What is the function of the 'Remote Render Threshold' setting in ParaView's preferences?",
    "answer": "The 'Remote Render Threshold' setting (found under 'Render View -> Remote/Parallel Rendering Options') dictates whether small rendering tasks are handled by your local computer's GPU or remotely by the cluster."
  },
  {
    "question": "How does setting the 'Remote Render Threshold' to 0MB affect ParaView's rendering behavior?",
    "answer": "If the 'Remote Render Threshold' is set to 0MB, all rendering, including rotations, will be performed remotely using the cluster resources. This is beneficial for large data processing but might reduce interactivity."
  },
  {
    "question": "What is the default value for ParaView's 'Remote Render Threshold' setting?",
    "answer": "The default value for ParaView's 'Remote Render Threshold' setting is 20MB."
  },
  {
    "question": "Can ParaView perform rasterization and ray tracing using only cluster CPUs?",
    "answer": "Yes, ParaView can perform both rasterization and ray tracing on cluster CPUs, allocating as many cores as necessary for rendering."
  },
  {
    "question": "Which modern CPU-based libraries provide rendering performance comparable to GPU-based rendering for ParaView?",
    "answer": "Modern CPU-based libraries such as OSPRay and OpenSWR offer performance quite similar to GPU-based rendering."
  },
  {
    "question": "How does ParaView leverage MPI for parallel rendering of very large datasets on clusters?",
    "answer": "Since the ParaView server uses MPI for distributed-memory processing, for very large datasets one can do parallel rendering on a large number of CPU cores, either on a single node or scattered across multiple nodes."
  }
]