[
  {
    "question": "Comment installer un paquet Python pr\u00e9t\u00e9l\u00e9charg\u00e9, comme un fichier .whl ?",
    "answer": "Pour installer un paquet pr\u00e9t\u00e9l\u00e9charg\u00e9, utilisez la commande `pip install` avec le chemin complet du fichier, par exemple : `pip install tensorboardX-1.9-py2.py3-none-any.whl`."
  },
  {
    "question": "Quel est le but principal du module `multiprocessing` en Python ?",
    "answer": "Le module `multiprocessing` en Python est un moyen facile d'obtenir des r\u00e9sultats plus rapidement gr\u00e2ce \u00e0 la programmation parall\u00e8le."
  },
  {
    "question": "Que permet la classe `Pool` du module `multiprocessing` ?",
    "answer": "La classe `Pool` permet de contr\u00f4ler le nombre de processus lanc\u00e9s en parall\u00e8le pour ex\u00e9cuter le m\u00eame calcul avec des donn\u00e9es multiples."
  },
  {
    "question": "Quelle est l'importance d'adapter le nombre de processus \u00e0 la quantit\u00e9 de c\u0153urs allou\u00e9s sur une grappe ?",
    "answer": "Il est crucial d'utiliser les c\u0153urs allou\u00e9s \u00e0 la t\u00e2che. Si le nombre de processus d\u00e9passe les c\u0153urs demand\u00e9s, les calculs seront plus lents et le n\u0153ud pourrait \u00eatre surcharg\u00e9. Si le nombre de processus est inf\u00e9rieur, des c\u0153urs resteront inactifs, menant \u00e0 une sous-utilisation des ressources."
  },
  {
    "question": "Comment un script Python peut-il obtenir le nombre de c\u0153urs CPU allou\u00e9s par l'ordonnanceur (SLURM) ?",
    "answer": "Dans un script Python, le nombre de c\u0153urs peut \u00eatre obtenu via la variable d'environnement `SLURM_CPUS_PER_TASK` en utilisant `int(os.environ.get('SLURM_CPUS_PER_TASK',default=1))`."
  },
  {
    "question": "Le module `multiprocessing` peut-il utiliser plusieurs n\u0153uds de calcul ?",
    "answer": "Non, le module `multiprocessing` ne peut utiliser qu'un seul n\u0153ud de calcul. Le gain de performance est donc limit\u00e9 au nombre de c\u0153urs CPU de ce n\u0153ud."
  },
  {
    "question": "Quelles sont les alternatives pour la programmation parall\u00e8le en Python sur plusieurs n\u0153uds ?",
    "answer": "Pour d\u00e9passer la limite d'un seul n\u0153ud et utiliser plusieurs n\u0153uds, on peut consid\u00e9rer `mpi4py` ou `PySpark`."
  },
  {
    "question": "Quelle est la premi\u00e8re \u00e9tape \u00e0 consid\u00e9rer avant de parall\u00e9liser un code Python ?",
    "answer": "Avant de parall\u00e9liser, assurez-vous que votre code est optimal, car un code de qualit\u00e9 fournira toujours la meilleure performance."
  },
  {
    "question": "Quelles sont les m\u00e9thodes simples pour d\u00e9boguer du code Python ?",
    "answer": "Les m\u00e9thodes simples pour d\u00e9boguer le code Python incluent l'ajout d'instructions `print` ou l'utilisation d'assertions (`assert`)."
  },
  {
    "question": "Comment utiliser le d\u00e9bogueur `pdb` en Python pour une t\u00e2che interactive ?",
    "answer": "Pour utiliser `pdb`, ajoutez `import pdb; pdb.set_trace()` (ou `breakpoint()`) au d\u00e9but de votre fichier ou \u00e0 l'endroit d\u00e9sir\u00e9, puis ex\u00e9cutez votre code. Vous entrerez alors dans le d\u00e9bogueur."
  },
  {
    "question": "Quels sont quelques exemples de commandes utiles dans le d\u00e9bogueur `pdb` ?",
    "answer": "Des commandes utiles de `pdb` incluent `w` (afficher la trace de pile), `b` (d\u00e9finir un point d'arr\u00eat), `s` (ex\u00e9cuter la ligne actuelle et arr\u00eater), `n` (continuer jusqu'\u00e0 la ligne suivante dans la fonction actuelle), `p exp` (\u00e9valuer et afficher une expression), et `q` (quitter le d\u00e9bogueur)."
  },
  {
    "question": "Comment obtenir une trace de l'origine d'un probl\u00e8me pour un script Python qui se suspend ?",
    "answer": "Avec le module `faulthandler`, vous pouvez modifier votre script pour qu'une trace de l'origine du probl\u00e8me soit fournie apr\u00e8s une certaine dur\u00e9e en utilisant la commande `faulthandler.dump_traceback_later(timeout, repeat=False, file=sys.stderr, exit=False)`."
  },
  {
    "question": "Quel outil peut \u00eatre utilis\u00e9 pour inspecter un processus Python en cours d'ex\u00e9cution sans modifier le script ?",
    "answer": "L'outil `py-spy` peut \u00eatre utilis\u00e9 pour inspecter un processus Python pendant l'ex\u00e9cution d'une t\u00e2che sans avoir \u00e0 le modifier au pr\u00e9alable."
  },
  {
    "question": "Quelles sont les \u00e9tapes pour utiliser `py-spy` afin de diagnostiquer un script Python suspendu ?",
    "answer": "Les \u00e9tapes incluent : 1. Installer `py-spy` dans un environnement virtuel. 2. Se connecter \u00e0 la t\u00e2che avec `srun --pty --jobid JOBID bash`. 3. Trouver l'ID du processus Python avec `htop -u $USER`. 4. Activer l'environnement virtuel de `py-spy`. 5. Lancer `py-spy top --pid PID` pour une vue en direct ou `py-spy dump --pid PID` pour une trace de l'\u00e9tat du code."
  }
]