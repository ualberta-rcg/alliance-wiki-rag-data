[
  {
    "question": "Comment le module `multiprocessing` de Python est-il utilis\u00e9 pour le calcul parall\u00e8le avec la classe `Pool`?",
    "answer": "La classe `Pool` du module `multiprocessing` permet de contr\u00f4ler le nombre de processus lanc\u00e9s en parall\u00e8le pour ex\u00e9cuter le m\u00eame calcul avec des donn\u00e9es multiples, par exemple en utilisant `pool.apply_async` ou `pool.map`."
  },
  {
    "question": "Pourquoi est-il important d'adapter le nombre de processus au nombre de c\u0153urs allou\u00e9s sur une grappe de calcul?",
    "answer": "Si le nombre de processus d\u00e9passe les c\u0153urs demand\u00e9s, les calculs seront lents et le n\u0153ud surcharg\u00e9. Si le nombre est inf\u00e9rieur, des c\u0153urs resteront inactifs et les ressources sous-utilis\u00e9es. Il faut utiliser autant de c\u0153urs que de ressources demand\u00e9es \u00e0 l'ordonnanceur."
  },
  {
    "question": "Comment peut-on r\u00e9cup\u00e9rer le nombre de c\u0153urs allou\u00e9s \u00e0 une t\u00e2che SLURM dans un script Python pour ajuster le nombre de processus?",
    "answer": "On peut utiliser `os.environ.get('SLURM_CPUS_PER_TASK', default=1)` pour obtenir le nombre de c\u0153urs CPU par t\u00e2che, puis l'utiliser pour initialiser la classe `Pool`, par exemple `pool = mp.Pool(processes=ncpus)`."
  },
  {
    "question": "Quelle est la limitation du module `multiprocessing` concernant l'utilisation des n\u0153uds de calcul?",
    "answer": "Le module `multiprocessing` ne peut utiliser qu'un seul n\u0153ud de calcul, limitant le gain de performance au nombre de c\u0153urs CPU de ce n\u0153ud."
  },
  {
    "question": "Quelles sont les alternatives pour la programmation parall\u00e8le si on souhaite d\u00e9passer la limite d'un seul n\u0153ud de calcul avec Python?",
    "answer": "Pour utiliser plusieurs n\u0153uds, il faut consid\u00e9rer `mpi4py` ou `PySpark`."
  },
  {
    "question": "Comment d\u00e9boguer un script Python gel\u00e9 en obtenant une trace de l'origine du probl\u00e8me?",
    "answer": "On peut modifier le script pour utiliser le module `faulthandler` avec la commande `faulthandler.dump_traceback_later(timeout, repeat=False, file=sys.stderr, exit=False)`."
  },
  {
    "question": "Comment inspecter un processus Python en cours d'ex\u00e9cution sur une grappe sans modifier le script?",
    "answer": "On peut utiliser `py-spy` en l'installant dans un environnement virtuel, se connectant \u00e0 la t\u00e2che avec `srun --pty --jobid JOBID bash`, trouvant l'ID du processus Python avec `htop -u $USER`, activant l'environnement py-spy, puis lan\u00e7ant `py-spy top --pid PID` pour une vue en direct ou `py-spy dump --pid PID` pour une trace de l'\u00e9tat."
  },
  {
    "question": "Que signifie l'erreur `ERROR: Package 'X' requires a different Python: X.Y.Z not in '>=X.Y'` lors de l'installation d'un paquet Python?",
    "answer": "Cette erreur signifie que la version du module Python charg\u00e9e n'est pas support\u00e9e par le paquet que vous tentez d'installer."
  },
  {
    "question": "Comment r\u00e9soudre l'erreur `ERROR: Package 'X' requires a different Python: X.Y.Z not in '>=X.Y'`?",
    "answer": "On peut utiliser une version de Python plus r\u00e9cente (comme le dernier module disponible) ou installer une version moins r\u00e9cente du paquet 'X'."
  },
  {
    "question": "Comment r\u00e9soudre l'erreur `ERROR: Package has requirement X, but you'll have Y which is incompatible`?",
    "answer": "Il faut mettre \u00e0 jour `pip` \u00e0 la plus r\u00e9cente version ou une version sup\u00e9rieure \u00e0 21.3 en utilisant `pip install --no-index --upgrade pip`, puis relancer la commande d'installation."
  },
  {
    "question": "Que faire si l'on rencontre l'erreur `ERROR: No matching distribution found for X` lors de l'installation d'un paquet avec `pip`?",
    "answer": "Il faut s'assurer que le nom et la version du paquet sont corrects, ou v\u00e9rifier si le paquet est disponible avec la commande `avail_wheels` ou sur la page `Wheels disponibles`."
  },
  {
    "question": "Quelle est la meilleure pratique pour installer plusieurs paquets Python avec `pip`?",
    "answer": "Il est pr\u00e9f\u00e9rable d'installer plusieurs paquets avec une seule commande, par exemple `pip install package1 package2 package3`, pour que `pip` puisse r\u00e9soudre plus facilement les probl\u00e8mes de d\u00e9pendance."
  },
  {
    "question": "Pourquoi un environnement virtuel qui fonctionnait pr\u00e9c\u00e9demment pourrait-il ne plus fonctionner?",
    "answer": "Cela peut \u00eatre d\u00fb aux fr\u00e9quentes mises \u00e0 jour des paquets qui rendent un environnement non reproductible, ou si l'environnement a \u00e9t\u00e9 cr\u00e9\u00e9 dans `$SCRATCH` et partiellement d\u00e9truit lors de la purge automatique."
  },
  {
    "question": "Comment \u00e9viter qu'un environnement virtuel ne devienne d\u00e9fectueux \u00e0 cause des mises \u00e0 jour fr\u00e9quentes des paquets ou d'une destruction partielle?",
    "answer": "Il est recommand\u00e9 de figer les paquets et leurs versions (`pip install --no-index 'package1==X.Y'`) et de cr\u00e9er un fichier de requis (`requirements.txt`) pour installer ces paquets de mani\u00e8re reproductible dans les t\u00e2ches."
  },
  {
    "question": "Que signifie l'erreur `ERROR: package-3.8.1-cp311-cp311-manylinux_2_28_x86_64.whl is not a supported wheel on this platform`?",
    "answer": "Cette erreur indique que le wheel n'est pas compatible ou support\u00e9 par la plateforme, potentiellement parce qu'il s'agit d'un paquet `manylinux` incompatible ou d'un paquet construit pour une version de Python diff\u00e9rente de celle utilis\u00e9e."
  },
  {
    "question": "Comment r\u00e9soudre l'erreur `AttributeError: module \u2018numpy\u2019 has no attribute \u2018X\u2019`?",
    "answer": "Cette erreur survient souvent avec les versions r\u00e9centes de Numpy (\u00e0 partir de v1.20) qui ont supprim\u00e9 des attributs obsol\u00e8tes. La solution est d'installer une version pr\u00e9c\u00e9dente de Numpy, par exemple `pip install --no-index 'numpy<1.24'`."
  },
  {
    "question": "Quelles sont les causes fr\u00e9quentes de l'erreur `ModuleNotFoundError: No module named 'X'`?",
    "answer": "Les causes fr\u00e9quentes incluent le fait que le paquet n'est pas install\u00e9 ou visible pour l'interpr\u00e9teur Python, une correspondance incorrecte entre le nom du module et son nom r\u00e9el, ou un environnement virtuel d\u00e9fectueux."
  },
  {
    "question": "Quelles sont les recommandations pour \u00e9viter l'erreur `ModuleNotFoundError: No module named 'X'`?",
    "answer": "Il est conseill\u00e9 d'\u00e9viter de modifier les variables d'environnement `PYTHONPATH` ou `PATH`, et de charger tous les modules avant d'activer un environnement virtuel."
  },
  {
    "question": "Comment diagnostiquer et potentiellement r\u00e9soudre un `ModuleNotFoundError: No module named 'X'`?",
    "answer": "V\u00e9rifiez si le paquet est install\u00e9 avec `pip list`, assurez-vous que le nom du module est exact (casse, traits de soulignement), et v\u00e9rifiez le niveau d'importation si le module provient de son r\u00e9pertoire source. En cas de doute, recr\u00e9ez un nouvel environnement."
  },
  {
    "question": "Que faire si l'on rencontre l'erreur `ImportError: numpy.core.multiarray failed to import`?",
    "answer": "Cette erreur indique qu'une version incompatible de Numpy est install\u00e9e ou utilis\u00e9e. Il faut installer une version compatible, par exemple `pip install --no-index 'numpy<2.0'` si un wheel construit avec Numpy 1.x est utilis\u00e9 avec Numpy 2.x."
  }
]