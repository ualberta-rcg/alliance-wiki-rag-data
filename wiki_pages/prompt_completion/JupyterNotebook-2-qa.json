[
  {
    "question": "What functionality does the RStudio Launcher provide for Jupyter Notebook?",
    "answer": "RStudio Launcher enables Jupyter Notebook to initiate an RStudio session, utilizing Jupyter Notebook's token authentication, and adds an 'RStudio Session' option to the Jupyter Notebook 'New' dropdown list."
  },
  {
    "question": "Which software environments are required for the RStudio Launcher installation procedure?",
    "answer": "The RStudio Launcher installation procedure is only compatible with the `StdEnv/2016.4` and `StdEnv/2018.3` software environments."
  },
  {
    "question": "What commands are used to install RStudio Launcher as a Jupyter Notebook extension?",
    "answer": "To install RStudio Launcher, execute the following commands in your activated Python virtual environment: `pip install nbserverproxy`, `pip install https://github.com/jupyterhub/nbrsessionproxy/archive/v0.8.0.zip`, `jupyter serverextension enable --py nbserverproxy --sys-prefix`, `jupyter nbextension install --py nbrsessionproxy --sys-prefix`, `jupyter nbextension enable --py nbrsessionproxy --sys-prefix`, and `jupyter serverextension enable --py nbrsessionproxy --sys-prefix`."
  },
  {
    "question": "How do you activate the Jupyter Notebook environment after installation when logging into a cluster?",
    "answer": "First, load the Python module associated with your environment using `module load python/3.7`. Then, activate the virtual environment where Jupyter Notebook is installed by running `source $HOME/jupyter_py3/bin/activate`."
  },
  {
    "question": "How can you use RStudio Server with RStudio Launcher?",
    "answer": "To use RStudio Launcher with RStudio Server, you need to load the RStudio Server module by executing `module load rstudio-server` within your activated virtual environment."
  },
  {
    "question": "How do you start Jupyter Notebook by submitting an interactive job?",
    "answer": "To start Jupyter Notebook, submit an interactive job using a command like `salloc --time=1:0:0 --ntasks=1 --cpus-per-task=2 --mem-per-cpu=1024M --account=def-yourpi srun $VIRTUAL_ENV/bin/notebook.sh`, adjusting the parameters based on your specific requirements."
  },
  {
    "question": "Why is an SSH tunnel necessary to connect to Jupyter Notebook running on a compute node?",
    "answer": "An SSH tunnel is required because compute nodes are not directly accessible from the Internet, and it allows you to access Jupyter Notebook running on such a node from your web browser."
  },
  {
    "question": "What Python package is recommended for creating an SSH tunnel from Linux or MacOS X?",
    "answer": "On Linux or MacOS X systems, the `sshuttle` Python package is recommended for creating an SSH tunnel."
  },
  {
    "question": "What is the command to create an SSH tunnel using sshuttle on Linux or MacOS X?",
    "answer": "To create an SSH tunnel using `sshuttle`, run the command `sshuttle --dns -Nr <username>@<cluster>.alliancecan.ca`, replacing `<username>` with your actual username and `<cluster>` with the name of the cluster you are connecting to."
  },
  {
    "question": "After setting up an SSH tunnel with sshuttle, how do you connect to Jupyter Notebook in your browser?",
    "answer": "After the `sshuttle` tunnel is active, copy and paste the URL provided by Jupyter Notebook (e.g., `http://cdr544.int.cedar.computecanada.ca:8888/?token=...`) into your web browser."
  },
  {
    "question": "Which tool can be used to create an SSH tunnel from Windows for Jupyter Notebook?",
    "answer": "MobaXTerm can be used to create an SSH tunnel from Windows for Jupyter Notebook. It also works on Unix systems like MacOS and Linux."
  },
  {
    "question": "What is the first step for creating an SSH tunnel to Jupyter Notebook using MobaXTerm?",
    "answer": "The first step is to open a new Terminal tab in MobaXTerm (Session 1), connect to a cluster, and then follow the instructions to start Jupyter Notebook to obtain its URL, which contains the hostname, port, and token."
  },
  {
    "question": "How do you create the SSH tunnel in MobaXTerm's Session 2?",
    "answer": "Open a second Terminal tab in MobaXTerm (Session 2) and run `ssh -L 8888:<hostname:port> <username>@<cluster>.alliancecan.ca`, substituting `<hostname:port>`, `<username>`, and `<cluster>` with the values obtained from Session 1."
  },
  {
    "question": "Once the MobaXTerm SSH tunnel is established, how do you access Jupyter Notebook in your browser?",
    "answer": "Open your browser and navigate to `http://localhost:8888/?token=<token>`, replacing `<token>` with the token value obtained from the Jupyter Notebook URL in MobaXTerm Session 1."
  },
  {
    "question": "How can you shut down the Jupyter Notebook server before its walltime limit expires?",
    "answer": "To shut down the Jupyter Notebook server, press Ctrl-C twice in the terminal window where the interactive job was launched."
  },
  {
    "question": "How do you shut down an SSH tunnel created using MobaXTerm?",
    "answer": "If you created the SSH tunnel with MobaXTerm, press Ctrl-D in Session 2 to shut down the tunnel."
  },
  {
    "question": "Can Jupyter Notebook support kernels for other programming languages or different Python versions?",
    "answer": "Yes, Jupyter Notebook allows adding kernels for other programming languages or Python versions that differ from the one running the Notebook."
  },
  {
    "question": "What are the two main steps involved in installing a new kernel for Jupyter Notebook?",
    "answer": "The two main steps are: 1) Installation of packages that enable the language interpreter to communicate with Jupyter Notebook, and 2) Creation of a 'kernel spec file' that instructs Jupyter Notebook on how to initiate a communication channel with the interpreter."
  },
  {
    "question": "Where should kernel spec files be created for Jupyter Notebook?",
    "answer": "Each kernel spec file must be created in its own subfolder within the path `~/.local/share/jupyter/kernels` in your home directory."
  },
  {
    "question": "What command should be used to create the base directory for Jupyter Notebook kernel spec files?",
    "answer": "You should use the command `mkdir -p ~/.local/share/jupyter/kernels` to create the necessary directory for kernel spec files."
  },
  {
    "question": "What is the first step to install a Julia kernel for Jupyter Notebook?",
    "answer": "The first step to install a Julia kernel is to load the Julia module by running `module load julia`."
  },
  {
    "question": "How do you install the IJulia package for a Julia kernel in Jupyter Notebook?",
    "answer": "After loading the Julia module and activating the Jupyter Notebook virtual environment, install IJulia by running `echo 'Pkg.add(\"IJulia\")' | julia`."
  },
  {
    "question": "What are the steps to add a Python 3.5 kernel to Jupyter Notebook?",
    "answer": "To add a Python 3.5 kernel, first load the module (`module load python/3.5`), then create (`virtualenv $HOME/jupyter_py3.5`) and activate (`source $HOME/jupyter_py3.5/bin/activate`) a new virtual environment. Next, install `ipykernel` (`pip install ipykernel`), generate the kernel spec file (`python -m ipykernel install --user --name <unique_name> --display-name \"Python 3.5 Kernel\"`), and finally, `deactivate` the virtual environment."
  },
  {
    "question": "What is the command to install the `ipykernel` library for a Python kernel?",
    "answer": "The `ipykernel` library is installed using the command `pip install ipykernel` within the activated Python virtual environment."
  },
  {
    "question": "How do you generate the kernel spec file for a new Python kernel, such as Python 3.5?",
    "answer": "To generate the kernel spec file for a new Python kernel, run `python -m ipykernel install --user --name <unique_name> --display-name \"Python 3.5 Kernel\"`, replacing `<unique_name>` with a unique name for your kernel."
  },
  {
    "question": "What are the steps to install an R kernel for Jupyter Notebook?",
    "answer": "To install an R kernel, first load the R module (`module load r`) and activate the Jupyter Notebook virtual environment (`source $HOME/jupyter_py3/bin/activate`). Then, install R kernel dependencies (`R -e \"install.packages(c('crayon', 'pbdZMQ', 'devtools'), repos='http://cran.us.r-project.org')\"`), install the R kernel itself (`R -e \"devtools::install_github(paste0('IRkernel/', c('repr', 'IRdisplay', 'IRkernel')))\"`), and finally, install the R kernel spec file (`R -e \"IRkernel::installspec()\"`)."
  },
  {
    "question": "How do you install the necessary R kernel dependencies?",
    "answer": "Install the R kernel dependencies by running the command: `R -e \"install.packages(c('crayon', 'pbdZMQ', 'devtools'), repos='http://cran.us.r-project.org')\"` in your activated virtual environment."
  },
  {
    "question": "What command is used to install the IRkernel for R?",
    "answer": "The IRkernel for R is installed by executing `R -e \"devtools::install_github(paste0('IRkernel/', c('repr', 'IRdisplay', 'IRkernel')))\"`."
  },
  {
    "question": "How do you install the R kernel spec file?",
    "answer": "The R kernel spec file is installed by running `R -e \"IRkernel::installspec()\"`."
  }
]