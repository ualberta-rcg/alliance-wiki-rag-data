[
  {
    "question": "What components typically make up an EasyBuild toolchain?",
    "answer": "Toolchains are a combination of a compiler, MPI implementation, CUDA version, and mathematical libraries, which are used to compile software packages."
  },
  {
    "question": "Where can I find EasyBuild recipes for toolchains?",
    "answer": "Toolchain recipes are available in the `/cvmfs/soft.computecanada.ca/easybuild/ebfiles_repo/$EBVERSIONGENTOO` directory."
  },
  {
    "question": "What does the `gofbc` toolchain name typically represent?",
    "answer": "The `gofbc` toolchain typically represents a combination of GCC, OpenMPI, FlexiBlas, and CUDA."
  },
  {
    "question": "What specific software versions are included in the `gofbc` toolchain version `2020.1.403.114`?",
    "answer": "The `gofbc` toolchain version `2020.1.403.114` contains GCC version 9.3.0, OpenMPI 4.0.3, CUDA 11.4, and FlexiBLAS 3.0.4."
  },
  {
    "question": "What is the role of `builddependencies` in an EasyBuild toolchain recipe?",
    "answer": "The `builddependencies` specify subtoolchains that will be considered but are not loaded in the modulefile or by software compiled with the main toolchain. This indicates that the main toolchain is a superset of these subtoolchains."
  },
  {
    "question": "How do toolchain supersets affect software dependencies?",
    "answer": "When a toolchain is a superset of other toolchains, software packages built with the former can depend on software packages built with the latter, but not the other way around."
  },
  {
    "question": "What is the command to install a software package using an EasyBuild recipe?",
    "answer": "After copying the recipe, run `eb <recipe.eb>` to install the software."
  },
  {
    "question": "Where does EasyBuild install software by default in a user's account?",
    "answer": "By default, EasyBuild installs the software inside of your home directory, in `$HOME/.local/easybuild`."
  },
  {
    "question": "What steps are needed after installing software with EasyBuild for it to become available as a module?",
    "answer": "After the installation is completed, you need to exit your session and reconnect to the cluster for the software to be available to load as a module."
  },
  {
    "question": "How do I force EasyBuild to reinstall an existing version of software with modified parameters?",
    "answer": "To reinstall the exact same version as a centrally installed one but with modified parameters, use the command `eb <recipe.eb> --force`."
  },
  {
    "question": "What command should I use to install an EasyBuild software package to a custom location, such as a project directory?",
    "answer": "To install the software package in a different location, use `eb <recipe.eb> --installpath /path/to/your/project/easybuild`."
  },
  {
    "question": "How can I make modules from a custom EasyBuild installation path available in my current session?",
    "answer": "To get these modules available in your sessions, run `export RSNT_LOCAL_MODULEPATHS=/path/to/your/project/easybuild/modules`."
  },
  {
    "question": "How can I make custom EasyBuild modules available by default in all my sessions?",
    "answer": "You can add the command `export RSNT_LOCAL_MODULEPATHS=/path/to/your/project/easybuild/modules` to your `.bashrc` file in your home directory."
  },
  {
    "question": "Where can I find more resources or tutorials about EasyBuild?",
    "answer": "Additional resources include a webinar on 'Building software on Compute Canada clusters using EasyBuild', staff-facing documentation on GitHub, and various tutorials available on the EasyBuild website."
  }
]