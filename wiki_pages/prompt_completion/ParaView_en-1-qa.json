[
  {
    "question": "What is the purpose of the 'Remote Render Threshold' setting in ParaView?",
    "answer": "The 'Remote Render Threshold' setting determines where rendering will be performed. If set to a default (e.g., 20MB), small renderings happen on your local GPU, while anything modestly intensive is shipped to the remote cluster. If set to 0MB, all rendering, including rotations, is done remotely using cluster resources."
  },
  {
    "question": "How does setting the 'Remote Render Threshold' to a default value (e.g., 20MB) affect ParaView's rendering behavior?",
    "answer": "If the 'Remote Render Threshold' is set to default (e.g., 20MB), small rendering tasks will be handled by your computer's GPU, making mouse rotations fast. However, anything under the threshold (modestly intensive) will be sent to the remote computer, which might result in slow visualization depending on your connection."
  },
  {
    "question": "What is the impact of setting the 'Remote Render Threshold' to 0MB in ParaView?",
    "answer": "Setting the 'Remote Render Threshold' to 0MB ensures that all rendering, including rotations, is performed remotely on the cluster. This is beneficial for large data processing as it fully utilizes cluster resources, but it may reduce interactivity."
  },
  {
    "question": "What is a key compatibility requirement for ParaView client-server connections?",
    "answer": "ParaView requires the same major version on the local client and the remote host to prevent incompatibility, which typically manifests as a failed handshake during connection establishment."
  },
  {
    "question": "What happens if the ParaView client and server major versions do not match?",
    "answer": "If the ParaView client and server major versions do not match, it can lead to incompatibility, typically showing as a failed handshake when trying to establish the client-server connection."
  },
  {
    "question": "Which types of rendering are supported on Fir, Nibi, Rorqual, and Narval clusters for client-server visualization?",
    "answer": "On Fir, Nibi, Rorqual, and Narval, client-server rendering can be done on both CPUs (in software) and GPUs (with hardware acceleration)."
  },
  {
    "question": "What is the recommended starting approach for visualization on Fir, Nibi, Rorqual, and Narval due to GPU complexities?",
    "answer": "Due to additional complications with GPU rendering, it is strongly recommended to start with CPU-only visualization on these clusters."
  },
  {
    "question": "How can you estimate the number of cores needed for CPU-only visualization on these clusters?",
    "answer": "You can estimate the number of necessary cores by dividing the amount of memory required for your rendering by approximately 3.5 GB/core. For example, a 40GB dataset would need at least 12 cores."
  },
  {
    "question": "What is the recommended maximum memory allocation per core for software rendering?",
    "answer": "For software rendering, it is not recommended to allocate more than 4GB/core."
  },
  {
    "question": "Why is it important to allocate additional memory for filters and data processing in ParaView?",
    "answer": "It's important to allocate additional memory for filters and data processing because operations like a structured to unstructured dataset conversion can significantly increase your memory footprint (e.g., by ~3X)."
  },
  {
    "question": "What should you do if your ParaView server terminates during data processing?",
    "answer": "If your ParaView server gets killed when processing data, you will need to increase the number of allocated cores."
  },
  {
    "question": "What CPU-based libraries are mentioned as offering performance similar to GPU-based rendering for some ParaView tasks?",
    "answer": "Modern CPU-based libraries such as OSPRay and OpenSWR are mentioned as offering performance quite similar to GPU-based rendering for some types of rendering."
  },
  {
    "question": "How does the ParaView server utilize MPI for large datasets with CPU-based visualization?",
    "answer": "The ParaView server uses MPI for distributed-memory processing, allowing parallel rendering of very large datasets on a large number of CPU cores, either on a single node or across multiple nodes."
  },
  {
    "question": "What is the first step to set up CPU-based client-server visualization on Fir or Nibi?",
    "answer": "First, you need to install the same ParaView version on your local computer as available on the cluster, then log into Fir or Nibi and start a serial CPU interactive job."
  },
  {
    "question": "How do you start a serial CPU interactive job on Fir or Nibi?",
    "answer": "You can start a serial CPU interactive job using the command: `salloc --time=1:00:0 --ntasks=1 --mem-per-cpu=3600 --account=def-someprof`."
  },
  {
    "question": "After starting an interactive job, how do you load the ParaView module and start the server for CPU-based visualization?",
    "answer": "Inside your job, you load the ParaView module with `module load paraview/5.13.1` and then start the server using `pvserver --force-offscreen-rendering`."
  },
  {
    "question": "What information should you note from the `pvserver` output to establish a client connection?",
    "answer": "You should note the node name (e.g., fc30107) and the port number (usually 11111) displayed in the `pvserver` output under 'Connection URL'."
  },
  {
    "question": "How do you set up an SSH tunnel from your local computer to the compute node for ParaView client-server connection?",
    "answer": "You open another terminal on your computer (Mac/Linux or terminal emulator on Windows) and use the command: `ssh <username>@fir.alliancecan.ca -L 11111:fc30107:11111`, replacing `<username>` and `fc30107` with your actual username and compute node."
  },
  {
    "question": "How do you configure the ParaView client on your computer to connect to the remote server?",
    "answer": "Start ParaView, go to 'File -> Connect' (or click the green 'Connect' button), then 'Add Server'. Set name = fir, server type = Client/Server, host = localhost, port = 11111. Click 'Configure', select 'Manual', and 'Save'."
  },
  {
    "question": "How can you confirm that your ParaView client has successfully connected to the remote server?",
    "answer": "After selecting the server from the list and clicking 'Connect' in your ParaView client, the first terminal window where `pvserver` was running (which initially read 'Accepting connection') will change to 'Client connected'."
  }
]