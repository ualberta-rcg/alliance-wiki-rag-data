[
  {
    "question": "What is the purpose of the 'Remote Render Threshold' setting in ParaView's preferences?",
    "answer": "The 'Remote Render Threshold' determines where rendering occurs. If set to default (e.g., 20MB), small rendering happens on your local computer's GPU for faster mouse rotation, while anything under the threshold is shipped remotely. If set to 0MB, all rendering, including rotation, is remote, utilizing cluster resources for large data processing, though it might reduce interactivity."
  },
  {
    "question": "Why is ParaView client and server version compatibility important?",
    "answer": "ParaView requires the same major version on the local client and the remote host to prevent incompatibility, which typically manifests as a failed handshake when establishing the client-server connection. For example, a server version 5.10.0 requires a client version 5.10.x."
  },
  {
    "question": "On which systems can client-server visualization be performed using both CPUs and GPUs?",
    "answer": "Client-server visualization on Cedar, Graham, B\u00e9luga, and Narval supports rendering on both CPUs (in software) and GPUs (hardware acceleration)."
  },
  {
    "question": "What is the recommended starting point for client-server visualization on Cedar, Graham, B\u00e9luga, and Narval?",
    "answer": "It is strongly recommended to start with CPU-only visualization due to additional complications with GPU rendering."
  },
  {
    "question": "How can I estimate the number of cores needed for CPU-only visualization on Cedar, Graham, B\u00e9luga, or Narval?",
    "answer": "You can estimate the number of necessary cores by taking the amount of memory required for your rendering and dividing it by approximately 3.5 GB/core. For instance, a 40GB dataset would need at least 12 cores."
  },
  {
    "question": "What is the recommended maximum memory allocation per core for software rendering?",
    "answer": "For software rendering, it is not recommended to allocate more than 4GB/core."
  },
  {
    "question": "What should be considered regarding memory allocation for filters and data processing during visualization?",
    "answer": "It's important to allocate additional memory for filters and data processing, as operations like structured to unstructured dataset conversion can increase memory footprint by about 3X. You might need to start with 32 or 64 cores depending on the workflow."
  },
  {
    "question": "What should I do if my ParaView server gets killed while processing data?",
    "answer": "If your ParaView server gets killed, you will need to increase the number of allocated cores."
  },
  {
    "question": "What advantages do modern CPU-based libraries like OSPRay and OpenSWR offer for ParaView rendering?",
    "answer": "Modern CPU-based libraries such as OSPRay and OpenSWR can offer performance quite similar to GPU-based rendering for certain types of rendering."
  },
  {
    "question": "How can large datasets be rendered in parallel using the ParaView server on CPUs?",
    "answer": "Since the ParaView server uses MPI for distributed-memory processing, very large datasets can be rendered in parallel on a large number of CPU cores, either on a single node or across multiple nodes."
  },
  {
    "question": "What is the first step to perform CPU-based client-server ParaView visualization on Cedar or Graham?",
    "answer": "First, install the same ParaView version on your computer as available on the cluster, then log into Cedar or Graham and start a serial CPU interactive job using `salloc --time=1:00:0 --ntasks=1 --mem-per-cpu=3600 --account=def-someprof`."
  },
  {
    "question": "How do you start the ParaView server for offscreen rendering within a CPU interactive job?",
    "answer": "Inside the job, load the offscreen ParaView module using `module load paraview/5.13.1` and then start the server with `pvserver --force-offscreen-rendering`."
  },
  {
    "question": "How do you establish an SSH tunnel for ParaView client-server connection from your local computer to a compute node?",
    "answer": "Open another terminal on your computer and use the command `ssh <username>@cedar.computecanada.ca -L 11111:cdr774:11111`, replacing `cdr774` with the correct compute node."
  },
  {
    "question": "How do you configure ParaView on your local computer to connect to the remote server?",
    "answer": "Start ParaView, go to 'File -> Connect' or click the green 'Connect' button, then 'Add Server'. Set name = cedar, server type = Client/Server, host = localhost, port = 11111. Click 'Configure', select 'Manual', and 'Save', then select the server from the list and click 'Connect'."
  },
  {
    "question": "How can you perform parallel rendering on multiple CPUs?",
    "answer": "To perform parallel rendering on multiple CPUs, start a parallel job using `salloc` with desired `--ntasks` (e.g., `salloc --time=0:30:0 --ntasks=8 --mem-per-cpu=3600 --account=def-someprof`) and then run the ParaView server with `srun pvserver --force-offscreen-rendering` after loading the module."
  },
  {
    "question": "How can you verify that you are performing parallel rendering in ParaView?",
    "answer": "You can verify parallel rendering by passing your visualization through the 'Process Id Scalars' filter and then coloring it by 'process id'."
  }
]