[
  {
    "question": "How are command-line options modified in CMake?",
    "answer": "Command-line options can be modified using the syntax `cmake . -DVARIABLE=VALEUR`."
  },
  {
    "question": "What command-line option is used to specify the installation directory in CMake?",
    "answer": "To specify the installation directory, use `cmake . -DCMAKE_INSTALL_PREFIX=/home/user/mon_repertoire`."
  },
  {
    "question": "Which CMake option allows changing the C compiler?",
    "answer": "The `CMAKE_C_COMPILER` option is used to change the C compiler."
  },
  {
    "question": "How can the C++ compiler be changed using CMake command-line options?",
    "answer": "The `CMAKE_CXX_COMPILER` option can be used to change the C++ compiler."
  },
  {
    "question": "What is the CMake option for changing the linker?",
    "answer": "The `CMAKE_LINKER` option is used to change the linker."
  },
  {
    "question": "What does the `CMAKE_C_FLAGS` option control in CMake?",
    "answer": "The `CMAKE_C_FLAGS` option changes the options passed to the C compiler."
  },
  {
    "question": "How do you modify the options passed to the C++ compiler in CMake?",
    "answer": "The `CMAKE_CXX_FLAGS` option changes the options passed to the C++ compiler."
  },
  {
    "question": "Which CMake option is used to change the options passed to the linker?",
    "answer": "The `CMAKE_SHARED_LINKER_FLAGS` option is used to change the options passed to the linker."
  },
  {
    "question": "Where can users find a complete list of CMake options?",
    "answer": "A complete list of options is available on the official CMake Wiki page."
  },
  {
    "question": "What simpler CMake option is available for defining the type of compilation?",
    "answer": "CMake offers a simpler option called `CMAKE_BUILD_TYPE` to define the type of compilation to use."
  },
  {
    "question": "What are the possible values for the `CMAKE_BUILD_TYPE` option?",
    "answer": "The possible values for `CMAKE_BUILD_TYPE` are '-' (no value), 'Debug', 'Release', 'MinSizeRel', and 'RelWithDebInfo'."
  },
  {
    "question": "What happens when `CMAKE_BUILD_TYPE` is set to `Debug`?",
    "answer": "Setting `CMAKE_BUILD_TYPE` to `Debug` activates debugging options and deactivates optimization options."
  },
  {
    "question": "How does `CMAKE_BUILD_TYPE` set to `Release` affect compilation?",
    "answer": "When `CMAKE_BUILD_TYPE` is set to `Release`, it deactivates debugging options and activates typical optimizations."
  },
  {
    "question": "What is the purpose of `MinSizeRel` for `CMAKE_BUILD_TYPE`?",
    "answer": "The `MinSizeRel` option deactivates debugging options and activates optimization options to minimize the binary size."
  },
  {
    "question": "What does `RelWithDebInfo` do for `CMAKE_BUILD_TYPE`?",
    "answer": "Using `RelWithDebInfo` activates both debugging options and typical optimizations."
  },
  {
    "question": "What information does `ccmake` display in advanced mode?",
    "answer": "`ccmake` in advanced mode displays both found and unfound libraries, as well as the list of options passed to compilers and the linker, based on the type of construction."
  },
  {
    "question": "Why is `CMAKE_BUILD_TYPE` a convenient option?",
    "answer": "`CMAKE_BUILD_TYPE` is convenient because it defines compiler options that vary based on the compiler used, meaning users don't have to verify which specific options to use."
  }
]