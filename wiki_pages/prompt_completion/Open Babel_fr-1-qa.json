[
  {
    "question": "What is Open Babel?",
    "answer": "Open Babel is a toolkit designed to handle various chemical data languages. It's an open and collaborative project."
  },
  {
    "question": "What is the primary purpose of Open Babel?",
    "answer": "Its purpose is to allow users to search, convert, analyze, or store data from molecular modeling, chemistry, solid materials, biochemistry, or related fields."
  },
  {
    "question": "Where can I find more detailed information or a user guide for Open Babel?",
    "answer": "You can consult the Open Babel User Guide at https://openbabel.org/docs/."
  },
  {
    "question": "How many types of Open Babel modules are typically installed on the clusters?",
    "answer": "Two types of modules are installed on our clusters: `openbabel` and `openbabel-omp`."
  },
  {
    "question": "What is the `openbabel` module used for?",
    "answer": "The `openbabel` module is the sequential version and can be safely used even on login nodes to convert chemical structure file formats. In most cases, it is the correct module to use."
  },
  {
    "question": "How do you load the `openbabel` module?",
    "answer": "You can load the `openbabel` module using the command `module load openbabel`."
  },
  {
    "question": "How would you download a `.mol` file, for example, `acetic_acid.mol`?",
    "answer": "You can download `acetic_acid.mol` using `wget \"https://www.chemspider.com/FilesHandler.ashx?type=str&3d=yes&id=171\" -O acetic_acid.mol`."
  },
  {
    "question": "How do you convert a chemical file from `.mol` format to `.pdb` format using `obabel`?",
    "answer": "You can convert a `.mol` file to `.pdb` format using `obabel -i mol acetic_acid.mol -o pdb -O acetic_acid.pdb`."
  },
  {
    "question": "What functionality does the `openbabel-omp` module provide?",
    "answer": "The `openbabel-omp` module offers parallelization using OpenMP."
  },
  {
    "question": "Is it safe to use `openbabel-omp` on login nodes?",
    "answer": "No, you should not use the `openbabel-omp` module on login nodes because it can create many threads and cause load spikes, disturbing other users."
  },
  {
    "question": "When is the parallel version of Open Babel (`openbabel-omp`) particularly useful?",
    "answer": "The parallel version is useful for converting a very large number of molecular structures or calculating a large number of cheminformatics descriptors for multiple molecules."
  },
  {
    "question": "What environment variable must be set when using `openbabel-omp` for parallel tasks?",
    "answer": "You must set the `OMP_NUM_THREADS` environment variable to tell Open Babel how many CPU cores it can use."
  },
  {
    "question": "How can the Python interface for Open Babel be accessed?",
    "answer": "The functionalities of Open Babel can be used from Python. The Python interface for Open Babel is added as extensions to the `openbabel` and `openbabel-omp` modules."
  },
  {
    "question": "Which Python packages are available after loading a compatible Open Babel module?",
    "answer": "The `openbabel` and `pybel` packages can be used after loading `openbabel` and a compatible Python module."
  },
  {
    "question": "How do you load the necessary modules to use Open Babel with Python 3.11?",
    "answer": "You can load them using `module load python/3.11 openbabel/3.1.1`."
  },
  {
    "question": "How can you check the version of the `openbabel` Python package once imported?",
    "answer": "After importing `openbabel`, you can check its version with `print(openbabel.__version__)`."
  },
  {
    "question": "What is the typical SLURM directive to request 2 CPU cores for a task?",
    "answer": "The directive is `#SBATCH --cpus-per-task=2`."
  },
  {
    "question": "How is `OMP_NUM_THREADS` set dynamically in a SLURM batch script based on allocated CPUs?",
    "answer": "It can be set using `export OMP_NUM_THREADS=\"${SLURM_CPUS_PER_TASK:-1}\"`."
  }
]