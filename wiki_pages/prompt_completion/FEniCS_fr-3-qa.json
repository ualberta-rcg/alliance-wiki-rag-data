[
  {
    "question": "What Python packages are installed by the `apt-get install` commands in the Singularity recipe?",
    "answer": "The commands install numerous Python packages, including `python-deap`, `python-decorator`, `python-ecdsa`, `python-enum34`, `python-funcsigs`, `ipython`, `python-jinja2`, `python-jsonschema`, `python-lockfile`, `python-markupsafe`, `python-matplotlib`, `python-mistune`, `python-mock`, `python-mpmath`, `python-netaddr`, `python-netifaces`, `python-nose`, `ipython-notebook`, `python-numpy`, `python-pandas`, `python-paramiko`, `python-path`, `python-pathlib`, `python-pbr`, `python-pexpect`, `python-pickleshare`, `python-prompt-toolkit`, `python-ptyprocess`, `python-pycryptopp`, `python-pygments`, `python-pyparsing`, `python-zmq`, `python-requests`, `python-scipy`, `python-setuptools`, `python-simplegeneric`, `python-singledispatch`, `python-six`, `python-sympy`, `python-terminado`, `python-tornado`, and `python-traitlets`, along with their Python 3 equivalents where specified."
  },
  {
    "question": "What non-Python development tools are installed as part of the Singularity recipe's post-installation steps?",
    "answer": "The non-Python development tools installed include `automake`, `git-core`, `libopenmpi-dev`, `libtool`, `mercurial`, and `openmpi-bin`."
  },
  {
    "question": "How are downloaded and temporary files cleaned up after package installation in the Singularity recipe?",
    "answer": "Downloaded and temporary files are cleaned up by running `sudo apt-get clean` and `sudo rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*`."
  },
  {
    "question": "What is the first step for FEniCS Legacy (2019) installation on Trillium?",
    "answer": "The first step is to download the Docker image as an Apptainer SIF using the command `apptainer pull fenics-legacy.sif docker://ghcr.io/scientificcomputing/fenics-gmsh:2024-05-30`."
  },
  {
    "question": "How do you create a writable sandbox directory for FEniCS Legacy (2019) from an Apptainer SIF file?",
    "answer": "A writable sandbox directory can be created using `apptainer build --sandbox fenics-legacy.sandbox fenics-legacy.sif`."
  },
  {
    "question": "What is the purpose of creating a writable sandbox directory for FEniCS Legacy (2019)?",
    "answer": "Creating a writable sandbox directory allows users to modify or install extra packages into the image."
  },
  {
    "question": "Is the `.sandbox` suffix required for the writable directory name when creating a sandbox for FEniCS Legacy?",
    "answer": "No, the `.sandbox` suffix is just a convention and is not required. The directory can be called something else (e.g., 'fenics-dev/' or 'my_rw_image/')."
  },
  {
    "question": "How do you fix the pip certificate bundle path inside the FEniCS Legacy sandbox?",
    "answer": "To fix the pip certificate bundle path, execute the command `apptainer exec --writable fenics-legacy.sandbox sh -c \"mkdir -p /etc/pki/tls/certs && ln -s /etc/ssl/certs/ca-certificates.crt /etc/pki/tls/certs/ca-bundle.crt\"` inside the sandbox."
  },
  {
    "question": "Why is it necessary to fix the pip certificate bundle path inside the sandbox?",
    "answer": "It is necessary to fix the pip certificate bundle path so that pip/SSL trusts HTTPS connections."
  }
]