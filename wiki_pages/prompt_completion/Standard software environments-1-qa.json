[
  {
    "question": "What are standard software environments?",
    "answer": "Our software environments are provided through a set of modules which allow you to switch between different versions of software packages. These modules are organized in a tree structure with the trunk made up of typical utilities provided by any Linux environment. Branches are compiler versions and sub-branches are versions of MPI or CUDA."
  },
  {
    "question": "What is the purpose of modules named StdEnv?",
    "answer": "StdEnv modules identify combinations of specific compiler and MPI modules that are used most commonly by our team to build other software."
  },
  {
    "question": "How many standard software environments are there as of February 2023, and what are their versions?",
    "answer": "As of February 2023, there are four standard environments, versioned 2023, 2020, 2018.3 and 2016.4."
  },
  {
    "question": "Which standard software environments are actively supported?",
    "answer": "Only versions 2020 and 2023 are actively supported."
  },
  {
    "question": "What are the default components of the `StdEnv/2023` environment?",
    "answer": "The `StdEnv/2023` environment uses GCC 12.3.0, Intel 2023.1, and Open MPI 4.1.5 as defaults."
  },
  {
    "question": "How do you activate the `StdEnv/2023` environment?",
    "answer": "To activate the `StdEnv/2023` environment, use the command `module load StdEnv/2023`."
  },
  {
    "question": "What is the minimum CPU instruction set supported by `StdEnv/2023`?",
    "answer": "The minimum CPU instruction set supported by `StdEnv/2023` is AVX2, or more generally, `x86-64-v3`."
  },
  {
    "question": "Which compiler is the default in `StdEnv/2023`, GCC or Intel?",
    "answer": "GCC becomes the default compiler in `StdEnv/2023`, instead of Intel."
  },
  {
    "question": "How is CUDA handled in the `StdEnv/2023` environment?",
    "answer": "In `StdEnv/2023`, CUDA becomes an add-on to OpenMPI; CUDA-aware MPI is loaded at run time if CUDA is loaded, which allows sharing MPI libraries across CUDA and non-CUDA branches."
  },
  {
    "question": "What are some of the core module upgrades in `StdEnv/2023`?",
    "answer": "Core module upgrades in `StdEnv/2023` include GCC from 9.3 to 12.3, OpenMPI from 4.0.3 to 4.1.5, Intel compilers from 2020 to 2023, Intel MKL from 2020 to Flexiblas 3.3.1 (with MKL 2023 or BLIS 0.9.0), and CUDA from 11 to 12."
  },
  {
    "question": "What are the default components of the `StdEnv/2020` environment?",
    "answer": "The `StdEnv/2020` environment uses GCC 9.3.0, Intel 2020.1, and Open MPI 4.0.3 as defaults."
  },
  {
    "question": "How do you activate the `StdEnv/2020` environment?",
    "answer": "To activate the `StdEnv/2020` environment, use the command `module load StdEnv/2020`."
  },
  {
    "question": "What is a 'multi-architecture binary' in `StdEnv/2020` and what instruction sets does it support?",
    "answer": "In `StdEnv/2020`, 'multi-architecture binaries' (also known as fat binaries) are binaries compiled with the Intel compiler that automatically support both AVX2 and AVX512 instruction sets."
  },
  {
    "question": "How did `StdEnv/2020` improve the visibility of software packages like bioinformatics and R modules?",
    "answer": "In `StdEnv/2020`, many software packages, including bioinformatics and R modules, are now installed at a lower level of the software hierarchy, making the same module visible irrespective of which compiler is loaded and no longer requiring the `gcc` module."
  },
  {
    "question": "What change was made to the GNU C Library in the `StdEnv/2020` release?",
    "answer": "The `StdEnv/2020` release installed a more recent version of the GNU C Library, which introduces optimizations in some mathematical functions."
  },
  {
    "question": "What tool was used for the compatibility layer in the `StdEnv/2020` version?",
    "answer": "For the `StdEnv/2020` version, Gentoo Prefix was used for the compatibility layer."
  },
  {
    "question": "Which package manager was used for the compatibility layer in `StdEnv/2016.4` and `2018.3`?",
    "answer": "For the `2016.4` and `2018.3` versions, the Nix package manager was used for the compatibility layer."
  }
]