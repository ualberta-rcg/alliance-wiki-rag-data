[
  {
    "question": "What Python module is recommended for parallel programming on a single compute node?",
    "answer": "The `multiprocessing` module is recommended for parallel programming."
  },
  {
    "question": "Which class within Python's `multiprocessing` module helps control the number of parallel processes?",
    "answer": "The `Pool` class allows one to control the number of processes started in parallel."
  },
  {
    "question": "What are two ways to apply a function to a list of data in parallel using the `multiprocessing.Pool` class?",
    "answer": "You can use `pool.apply_async` in a loop for each item, or `pool.map` to apply the function over the entire data list."
  },
  {
    "question": "Why should you match the number of processes to the allocated cores on a cluster?",
    "answer": "Launching more processes than requested cores will slow down calculations and possibly overload the compute node, while launching fewer processes will waste resources and leave cores idle."
  },
  {
    "question": "How can a Python script dynamically get the number of CPUs allocated to a job on a cluster?",
    "answer": "The number of CPUs can be retrieved from the `SLURM_CPUS_PER_TASK` environment variable using `os.environ.get('SLURM_CPUS_PER_TASK', default=1)`."
  },
  {
    "question": "What is a key limitation of the `multiprocessing` module regarding compute nodes?",
    "answer": "The `multiprocessing` module is restricted to using a single compute node."
  },
  {
    "question": "What Python libraries or tools should be considered for parallel programming across multiple compute nodes?",
    "answer": "For multiple nodes, consider using `mpi4py` or `PySpark`."
  },
  {
    "question": "What is an important step to take before parallelizing a Python program for performance improvement?",
    "answer": "Ensure the Python program is written efficiently first."
  },
  {
    "question": "What Python module can help diagnose a hanging script by dumping a traceback after a timeout?",
    "answer": "The `faulthandler` module, specifically `faulthandler.dump_traceback_later()`, can be used."
  },
  {
    "question": "What tool allows inspection of a running Python process without prior modification to the script?",
    "answer": "`py-spy` can be used to inspect a Python process while the job is running."
  },
  {
    "question": "How can you get live feedback on where a Python script is spending time using `py-spy`?",
    "answer": "Run `py-spy top --pid PID` after attaching to the job and finding the process ID."
  },
  {
    "question": "How can you get a traceback of where a running Python script is currently at using `py-spy`?",
    "answer": "Run `py-spy dump --pid PID` to get a traceback of the script's current state."
  }
]