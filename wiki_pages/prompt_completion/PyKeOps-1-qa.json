[
  {
    "question": "What is the KeOps library used for?",
    "answer": "The KeOps library allows you to compute reductions of large arrays whose entries are given by a mathematical formula or a neural network."
  },
  {
    "question": "What are the core components of the KeOps library?",
    "answer": "It combines efficient C++ routines with an automatic differentiation engine."
  },
  {
    "question": "Which programming languages and libraries can be used with KeOps?",
    "answer": "KeOps can be used with Python (NumPy, PyTorch), MATLAB, and R."
  },
  {
    "question": "How is PyKeOps available on the clusters?",
    "answer": "PyKeOps is available on the clusters as prebuilt Python packages (wheels)."
  },
  {
    "question": "How can you list the available versions of PyKeOps?",
    "answer": "You can list available versions with the command `avail_wheels pykeops`."
  },
  {
    "question": "What is an example version of PyKeOps listed by `avail_wheels`?",
    "answer": "An example version listed is 2.2.3 for Python 3."
  },
  {
    "question": "What is the first step to install PyKeOps in a Python virtual environment?",
    "answer": "The first step is to load runtime dependencies using `module load StdEnv/2023 python/3.11`."
  },
  {
    "question": "How do you create a Python virtual environment for PyKeOps?",
    "answer": "Create a Python virtual environment using `virtualenv --no-download ~/pykeops_env`."
  },
  {
    "question": "How do you activate the PyKeOps virtual environment?",
    "answer": "Activate the virtual environment with `source ~/pykeops_env/bin/activate`."
  },
  {
    "question": "How do you install a specific version of PyKeOps?",
    "answer": "Install a specific version using `pip install --no-index pykeops==X.Y.Z`, where `X.Y.Z` is the desired version (e.g., 2.2.3)."
  },
  {
    "question": "How do you install the latest available version of PyKeOps from the wheelhouse?",
    "answer": "You can omit specifying the version with `pip install --no-index pykeops` to install the latest one."
  },
  {
    "question": "How do you validate the PyKeOps installation in a virtual environment?",
    "answer": "Validate the installation by running `python -c 'import pykeops; pykeops.test_numpy_bindings()'`."
  },
  {
    "question": "How do you freeze the environment and requirements set for PyKeOps?",
    "answer": "Freeze the environment and requirements set using `pip freeze --local > ~/pykeops-2.2.3-requirements.txt`."
  },
  {
    "question": "How do you remove the local PyKeOps virtual environment?",
    "answer": "Remove the local virtual environment with `deactivate && rm -r ~/pykeops_env`."
  },
  {
    "question": "On what types of processors can PyKeOps run?",
    "answer": "PyKeOps can run on CPU or GPU."
  },
  {
    "question": "What is the first step when running KeOps jobs?",
    "answer": "The first step is to write your job submission script."
  },
  {
    "question": "What modules are loaded for a CPU PyKeOps job?",
    "answer": "For a CPU PyKeOps job, `StdEnv/2023` and `python/3.11` modules are loaded."
  },
  {
    "question": "How is the virtual environment created on the compute node for a CPU PyKeOps job?",
    "answer": "The virtual environment is created on the compute node using `virtualenv --no-download $SLURM_TMPDIR/env` and activated with `source $SLURM_TMPDIR/env/bin/activate`."
  },
  {
    "question": "How are Python dependencies installed in a CPU PyKeOps job submission script?",
    "answer": "Python dependencies are installed using `pip install --no-index --upgrade pip` and `pip install --no-index -r pykeops-2.2.3-requirements.txt`."
  },
  {
    "question": "What modules are loaded for a GPU PyKeOps job?",
    "answer": "For a GPU PyKeOps job, `StdEnv/2023`, `python/3.11`, `cuda/12`, and `custom-ctypes` modules are loaded, with `custom-ctypes` being critical."
  },
  {
    "question": "What specific validation test is performed in a GPU PyKeOps job submission script?",
    "answer": "The GPU script tests that `nvrtc` bindings are also found by running `python -c 'import pykeops; pykeops.test_numpy_bindings()'`."
  },
  {
    "question": "What should you do before submitting your PyKeOps job to the scheduler?",
    "answer": "Before submitting, it is important to test that your submission script will start without errors, which can be done in an interactive job."
  },
  {
    "question": "How do you submit a PyKeOps job to the scheduler?",
    "answer": "Submit your job to the scheduler using the command `sbatch submit-keops.sh`."
  }
]