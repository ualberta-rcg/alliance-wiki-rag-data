[
  {
    "question": "What is the primary function of the KeOps library?",
    "answer": "The KeOps library allows you to compute reductions of large arrays where entries are defined by a mathematical formula or a neural network."
  },
  {
    "question": "What programming languages and environments does KeOps support?",
    "answer": "KeOps can be used with Python (NumPy, PyTorch), MATLAB, and R."
  },
  {
    "question": "How can I check the available versions of PyKeOps on the clusters?",
    "answer": "You can list available versions by running the command `avail_wheels pykeops`."
  },
  {
    "question": "What are the first steps to install PyKeOps in a Python virtual environment?",
    "answer": "First, load runtime dependencies with `module load StdEnv/2023 python/3.11`, then create and activate a virtual environment using `virtualenv --no-download ~/pykeops_env` and `source ~/pykeops_env/bin/activate`."
  },
  {
    "question": "How do you install a specific version of PyKeOps within a virtual environment?",
    "answer": "After activating the virtual environment, run `pip install --no-index --upgrade pip` followed by `pip install --no-index pykeops==X.Y.Z`, replacing `X.Y.Z` with the desired version (e.g., `2.2.3`)."
  },
  {
    "question": "How can you install the latest available version of PyKeOps from the wheelhouse?",
    "answer": "To install the latest version, you can omit specifying the version when running `pip install --no-index pykeops`."
  },
  {
    "question": "How do you validate a PyKeOps installation in a virtual environment?",
    "answer": "You can validate the installation by executing `python -c 'import pykeops; pykeops.test_numpy_bindings()'`."
  },
  {
    "question": "What command is used to freeze the PyKeOps environment's requirements to a file?",
    "answer": "You can freeze the environment and requirements set by running `pip freeze --local > ~/pykeops-2.2.3-requirements.txt`."
  },
  {
    "question": "How do you remove a local PyKeOps virtual environment?",
    "answer": "To remove the local virtual environment, use the command `deactivate && rm -r ~/pykeops_env`."
  },
  {
    "question": "On what types of hardware can PyKeOps be executed?",
    "answer": "PyKeOps can be run on either CPU or GPU."
  },
  {
    "question": "What modules are required for a PyKeOps CPU job submission script?",
    "answer": "For a CPU job, the required modules are `StdEnv/2023` and `python/3.11`."
  },
  {
    "question": "What modules are necessary for a PyKeOps GPU job, and which one is critical?",
    "answer": "For a GPU job, the modules `StdEnv/2023`, `python/3.11`, `cuda/12`, and `custom-ctypes` are needed. The `custom-ctypes` module is critical."
  },
  {
    "question": "How is a virtual environment created and activated within a job submission script on a compute node?",
    "answer": "A virtual environment is created with `virtualenv --no-download $SLURM_TMPDIR/env` and activated with `source $SLURM_TMPDIR/env/bin/activate`."
  },
  {
    "question": "How are PyKeOps dependencies installed from a requirements file within a job submission script?",
    "answer": "Dependencies are installed by first upgrading pip with `pip install --no-index --upgrade pip`, then installing from the requirements file using `pip install --no-index -r pykeops-2.2.3-requirements.txt`."
  },
  {
    "question": "What is the command to submit a KeOps job to the scheduler?",
    "answer": "You can submit your job to the scheduler using the command `sbatch submit-keops.sh`."
  },
  {
    "question": "What testing step should be performed before submitting a KeOps job to the scheduler?",
    "answer": "Before submitting, it is important to test that your submission script will start without errors, typically by doing a quick test in an interactive job."
  }
]