[
  {
    "question": "What is spaCy?",
    "answer": "spaCy is a Python package that provides industrial-strength natural language processing."
  },
  {
    "question": "How can you check the latest available built version of spaCy?",
    "answer": "You can see the latest built version by running the command `avail_wheels spacy thinc thinc_gpu_ops`."
  },
  {
    "question": "What is the preferred method for installing spaCy?",
    "answer": "The preferred option is to install it using the pre-compiled Python wheel."
  },
  {
    "question": "What Python module should be loaded as part of the spaCy pre-build installation process?",
    "answer": "The `python/3.6` module should be loaded."
  },
  {
    "question": "What are the initial steps for a pre-build installation of spaCy?",
    "answer": "First, load the `python/3.6` module, then create and activate a virtual environment."
  },
  {
    "question": "How do you install spaCy with both GPU and CPU support in a virtual environment?",
    "answer": "Use the command `pip install spacy[cuda] --no-index` within the activated virtual environment."
  },
  {
    "question": "What command is used to install spaCy with only CPU support in a virtual environment?",
    "answer": "You can install it using `pip install spacy --no-index`."
  },
  {
    "question": "What modules need to be loaded to use the GPU version of spaCy?",
    "answer": "You need to load `gcc/5.4.0` and `cuda/9`."
  },
  {
    "question": "How do you configure the `LD_LIBRARY_PATH` for spaCy's GPU version?",
    "answer": "After loading CUDA, set `export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH`."
  },
  {
    "question": "What additional installation is needed if you want to use the PyTorch wrapper with thinc?",
    "answer": "You'll need to install either the `torch_cpu` or `torch_gpu` wheel."
  }
]