[
  {
    "question": "How do you install YT for CPU rendering on a cluster in your own directory?",
    "answer": "To install YT for CPU rendering, you first load the python and mpi4py modules, then create a virtual environment named 'astro', activate it, and finally install cython, numpy, and yt using pip."
  },
  {
    "question": "What is the command to create a virtual environment for Python tools named 'astro'?",
    "answer": "The command is `virtualenv astro`."
  },
  {
    "question": "How do you activate the 'astro' virtual environment?",
    "answer": "You activate the 'astro' virtual environment by running `source ~/astro/bin/activate`."
  },
  {
    "question": "What Python packages are installed via pip for YT rendering?",
    "answer": "The Python packages installed are cython, numpy, and yt."
  },
  {
    "question": "How do you start Python after loading the YT environment for normal use?",
    "answer": "After loading the environment with `source ~/astro/bin/activate`, you simply type `python` to start."
  },
  {
    "question": "How do you deactivate the YT environment?",
    "answer": "You deactivate the YT environment by running the `deactivate` command."
  },
  {
    "question": "Where can the sample dataset Enzo_64 be downloaded from?",
    "answer": "The sample dataset Enzo_64 can be downloaded from `http://yt-project.org/data`."
  },
  {
    "question": "What is the purpose of the `grids.py` script?",
    "answer": "The `grids.py` script is used to render 90 frames, rotating a dataset around the vertical axis."
  },
  {
    "question": "How is MPI parallelism enabled in the `grids.py` script?",
    "answer": "MPI parallelism is enabled by calling `yt.enable_parallelism()` in the script."
  },
  {
    "question": "What is the resolution set for each rendered frame in the `grids.py` script?",
    "answer": "The resolution for each frame is set to (1024, 1024)."
  },
  {
    "question": "How are the domain and grid boundaries annotated in the `grids.py` script?",
    "answer": "The domain boundary is drawn with `sc.annotate_domain(ds, color=[1, 1, 1, 0.005])` and grid boundaries with `sc.annotate_grids(ds, alpha=0.005)`."
  },
  {
    "question": "How many degrees does the camera rotate over 90 frames in the `grids.py` script?",
    "answer": "The camera rotates by 180 degrees (pi radians) over 90 frames."
  },
  {
    "question": "What is the walltime specified in the `yt-mpi.sh` job submission script?",
    "answer": "The walltime specified is 30 minutes (`0:30:00`)."
  },
  {
    "question": "How many MPI processes are requested in the `yt-mpi.sh` script?",
    "answer": "Four MPI processes (`--ntasks=4`) are requested in the `yt-mpi.sh` script."
  },
  {
    "question": "How much memory per CPU is allocated in the `yt-mpi.sh` script?",
    "answer": "3800 MB per CPU (`--mem-per-cpu=3800`) is allocated."
  },
  {
    "question": "What command is used to submit the job script `yt-mpi.sh`?",
    "answer": "The job script is submitted using `sbatch yt-mpi.sh`."
  },
  {
    "question": "How do you create a movie from the rendered frames at 30fps?",
    "answer": "A movie can be created using `ffmpeg -r 30 -i frame%04d.png -c:v libx264 -pix_fmt yuv420p -vf \"scale=trunc(iw/2)*2:trunc(ih/2)*2\" grids.mp4`."
  }
]