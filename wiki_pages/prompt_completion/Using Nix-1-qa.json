[
  {
    "question": "What is Nix?",
    "answer": "Nix is a software building and composition system that allows users to manage their own persistent software environments."
  },
  {
    "question": "On which systems is Nix available?",
    "answer": "Nix is only available on SHARCNET systems, specifically graham and legacy."
  },
  {
    "question": "What are the key features of Nix compositions?",
    "answer": "Nix compositions support one-off, per-project, and per-user usage, can be built, installed, upgraded, downgraded, and removed as a user, operations are atomic, and they are extremely easy to add and share."
  },
  {
    "question": "Why should module-loaded software be preferred over Nix-built software for long-running simulations?",
    "answer": "Currently, Nix builds software in a generic manner (without AVX2 or AVX512 vector instructions support), so module-loaded software should be preferred when it exists for longer running simulations."
  },
  {
    "question": "What does the message 'failed to lock thread to CPU XX' indicate when using Nix?",
    "answer": "The message `failed to lock thread to CPU XX` is a harmless warning that can be ignored."
  },
  {
    "question": "How do you enable the Nix environment?",
    "answer": "The user\u2019s current Nix environment is enabled by loading the nix module using the command `module load nix`."
  },
  {
    "question": "What happens when the Nix module is loaded?",
    "answer": "Loading the Nix module creates some `.nix*` files and sets some environment variables."
  },
  {
    "question": "How do you disable the Nix environment?",
    "answer": "The Nix environment is disabled by unloading the nix module using the command `module unload nix`."
  },
  {
    "question": "What happens when the Nix module is unloaded?",
    "answer": "Unloading the Nix module unsets the environment variables but leaves the `.nix*` files alone."
  },
  {
    "question": "How can most per-user Nix operations be undone?",
    "answer": "Most per-user operations can be undone with the `--rollback` option, for example, `nix-env --rollback` or `nix-channel --rollback`."
  },
  {
    "question": "How do you completely reset the Nix environment?",
    "answer": "To completely reset the Nix environment, you unload the module, erase all user-related Nix files (`~/.nix-profile`, `~/.nix-defexpr`, `~/.nix-channels`, `~/.config/nixpkgs`, `/nix/var/nix/profiles/per-user/$USER`, `/nix/var/nix/gcroots/per-user/$USER`), and then reload the module file."
  },
  {
    "question": "How can you locate already available Nix compositions?",
    "answer": "The `nix search` command can be used to locate already available compositions, for example, `nix search git`."
  },
  {
    "question": "What is a 'pro tip' for using `nix search` after upgrading a channel?",
    "answer": "A pro tip is that you need to specify `-u` after upgrading your channel for `nix search`."
  },
  {
    "question": "How does `nix search` handle multiple search strings?",
    "answer": "The search string for `nix search` is actually a regular expression, and multiple ones are ANDed together."
  },
  {
    "question": "How do you use a Nix composition for a one-off task?",
    "answer": "For one-off usage, the easiest way is to use the `nix run` command, which starts a shell with the specified composition (e.g., `nix run nixpkg.git`)."
  },
  {
    "question": "Does `nix run` protect compositions from garbage collection?",
    "answer": "No, a composition started with `nix run` is only guaranteed to be around temporarily and is not protected from being garbage collected overnight."
  },
  {
    "question": "Can you use multiple compositions with a single `nix run` command?",
    "answer": "Yes, you can specify more than one composition in the same `nix run` command."
  },
  {
    "question": "How do you execute a specific command instead of opening a shell with `nix run`?",
    "answer": "You can specify a command instead of a shell with `nix run -c <cmd> <args> ...`."
  },
  {
    "question": "How do you use a program for a specific project with Nix?",
    "answer": "For per-project usage, the easiest way is with the `nix build` command, which creates a symbolic link (default name `result`) to access the program's `bin` directory."
  },
  {
    "question": "How do you access a program after using `nix build`?",
    "answer": "After `nix build`, you can access the program through the `bin` directory of the created symbolic link, for example, `./result/bin/git`."
  },
  {
    "question": "Under what condition is a per-project composition protected from overnight garbage collection?",
    "answer": "A per-project composition will only be protected from overnight garbage collection if you output the symlink into your `home` directory and do not rename or move it."
  },
  {
    "question": "How can you specify the output symlink name when using `nix build`?",
    "answer": "You can specify the output symlink name with the `-o <name>` option (e.g., `nix build -o myproject nixpkgs.git`)."
  },
  {
    "question": "What is added to your PATH when the `nix` module is loaded for per-user compositions?",
    "answer": "Loading the `nix` module adds the per-user common `~/.nix-profile/bin` directory to your `PATH`."
  },
  {
    "question": "Which command is used to add and remove per-user compositions?",
    "answer": "The `nix-env` command is used to add and remove compositions from the per-user `~/.nix-profile/bin` directory."
  },
  {
    "question": "How do you install a composition for per-user use with `nix-env`?",
    "answer": "You install a composition using `nix-env --install --attr nixpkgs.git`."
  },
  {
    "question": "How do you query installed per-user compositions with `nix-env`?",
    "answer": "You query installed compositions using `nix-env --query`."
  }
]