[
  {
    "question": "How can you set Java runtime options using an environment variable?",
    "answer": "You can set Java runtime options using the `JAVA_TOOL_OPTIONS` environment variable, for example: `export JAVA_TOOL_OPTIONS=\"-Xms256m -Xmx2g\"`."
  },
  {
    "question": "How do you know if the `JAVA_TOOL_OPTIONS` environment variable has been successfully picked up by a Java program?",
    "answer": "When your Java program runs, it will produce a diagnostic message like \"Picked up JAVA_TOOL_OPTIONS\" to verify that the options have been applied."
  },
  {
    "question": "What is the recommended memory limit for a Java job considering the JVM's overhead?",
    "answer": "It is recommended to specify the memory limit for your job as 1-2GB more than the setting used with the Java command line option `-Xmx`, because the Java virtual machine itself creates a memory usage overhead."
  },
  {
    "question": "What is garbage collection in Java?",
    "answer": "Java uses an automatic system called 'garbage collection' to identify variables which are out of scope and return the memory associated with them to the operating system."
  },
  {
    "question": "What is the default behavior of the Java Virtual Machine regarding garbage collection threads?",
    "answer": "By default, the Java VM uses a parallel garbage collector (GC) and sets a number of GC threads equal to the number of CPU cores on a given node."
  },
  {
    "question": "Why is it important to match the number of garbage collector threads to the requested CPU cores?",
    "answer": "Each GC thread consumes memory, and the amount of memory consumed is proportional to the physical memory. Therefore, it's highly recommended to match the number of GC threads to the number of CPU cores requested from the scheduler to avoid excessive memory consumption."
  },
  {
    "question": "How can you explicitly set the number of parallel garbage collector threads?",
    "answer": "You can explicitly set the number of parallel garbage collector threads using the option `-XX:ParallelGCThreads=N`, for example, `-XX:ParallelGCThreads=12`."
  },
  {
    "question": "How can you use the serial garbage collector in Java?",
    "answer": "You can use the serial garbage collector by specifying the option `-XX:+UseSerialGC`."
  },
  {
    "question": "What is the effect of the `volatile` keyword when applied to a variable in Java?",
    "answer": "In Java, the `volatile` keyword ensures that a variable's value is always read from and written to main memory, which helps make modifications visible to other threads."
  },
  {
    "question": "When is the `volatile` keyword not sufficient to prevent race conditions in Java?",
    "answer": "There are contexts in which the use of the `volatile` keyword is not sufficient to avoid race conditions, and the `synchronized` keyword is required to ensure program consistency."
  },
  {
    "question": "Which book is recommended for further reading on Java threads?",
    "answer": "The book 'Java Threads: Understanding and Mastering Concurrent Programming' (3rd edition) by Scott Oaks and Henry Wong is recommended for further reading."
  }
]