[
  {
    "question": "What is AlphaFold?",
    "answer": "AlphaFold is a machine learning model designed for the prediction of protein folding."
  },
  {
    "question": "Which version of AlphaFold is discussed on this page?",
    "answer": "This page discusses AlphaFold v2.0, the version that was entered in CASP14 and published in Nature."
  },
  {
    "question": "Where can I find the source code and documentation for AlphaFold?",
    "answer": "The source code and documentation for AlphaFold are available on DeepMind's GitHub page: https://github.com/deepmind/alphafold."
  },
  {
    "question": "How should I cite AlphaFold if I publish findings using its source code or model parameters?",
    "answer": "Any publication disclosing findings from using AlphaFold's source code or model parameters should cite the AlphaFold paper, accessible via its DOI: https://doi.org/10.1038/s41586-021-03819-2."
  },
  {
    "question": "How can I list the available AlphaFold versions on the clusters?",
    "answer": "You can list available AlphaFold versions by using the command: `avail_wheels alphafold --all-versions`."
  },
  {
    "question": "What are some of the AlphaFold versions available?",
    "answer": "Available versions include 2.3.1, 2.3.0, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.1.1, and 2.0.0, all for Python 3 on a generic architecture."
  },
  {
    "question": "What modules need to be loaded as AlphaFold dependencies for installation?",
    "answer": "You need to load the following modules: `StdEnv/2020 gcc/9.3.0 openmpi/4.0.3 cuda/11.4 cudnn/8.2.0 kalign/2.03 hmmer/3.2.1 openmm-alphafold/7.5.1 hh-suite/3.3.0 python/3.8`."
  },
  {
    "question": "Which Python versions are supported by AlphaFold as of July 2022?",
    "answer": "As of July 2022, AlphaFold supports Python 3.7 and 3.8."
  },
  {
    "question": "How do you create and activate a Python virtual environment for AlphaFold?",
    "answer": "First, create the virtual environment with `virtualenv --no-download ~/alphafold_env`, then activate it using `source ~/alphafold_env/bin/activate`."
  },
  {
    "question": "How do I install a specific version of AlphaFold in my virtual environment?",
    "answer": "After updating pip with `pip install --no-index --upgrade pip`, install a specific version using `pip install --no-index alphafold==X.Y.Z`, replacing `X.Y.Z` with the desired version (e.g., `2.2.4`). You can omit the version to install the latest available."
  },
  {
    "question": "How can I validate the AlphaFold installation?",
    "answer": "You can validate the installation by running `run_alphafold.py --help` within your activated virtual environment."
  },
  {
    "question": "How do I freeze the Python environment and its requirements for AlphaFold?",
    "answer": "To freeze the environment, run `pip freeze > ~/alphafold-requirements.txt`."
  },
  {
    "question": "Does AlphaFold require external databases?",
    "answer": "Yes, AlphaFold requires a set of external databases to function."
  },
  {
    "question": "Where are AlphaFold databases available on the clusters?",
    "answer": "The AlphaFold databases are available in `/cvmfs/bio.data.computecanada.ca/content/databases/Core/alphafold2_dbs/`."
  },
  {
    "question": "When were the AlphaFold databases on CVMFS last updated and where is the latest version accessible?",
    "answer": "AlphaFold databases on CVMFS undergo yearly updates. In January 2024, the database was updated and is accessible in the `2024_01` folder."
  },
  {
    "question": "How do I set the `DOWNLOAD_DIR` to use the updated CVMFS AlphaFold database from January 2024?",
    "answer": "You can set the `DOWNLOAD_DIR` by executing: `export DOWNLOAD_DIR=/cvmfs/bio.data.computecanada.ca/content/databases/Core/alphafold2_dbs/2024_01/`."
  },
  {
    "question": "Can I download AlphaFold databases locally, and if so, where must they be stored?",
    "answer": "Yes, you can download the databases locally into your `$SCRATCH` directory. Importantly, they must reside in the `$SCRATCH` directory."
  },
  {
    "question": "What are the steps to create a local data folder for AlphaFold databases?",
    "answer": "From a DTN or login node, set `export DOWNLOAD_DIR=$SCRATCH/alphafold/data` and then create the folder with `mkdir -p $DOWNLOAD_DIR`."
  },
  {
    "question": "How do you download all AlphaFold data to a local directory?",
    "answer": "After loading modules and activating your virtual environment, execute `download_all_data.sh $DOWNLOAD_DIR`."
  },
  {
    "question": "What are the restrictions and recommendations for downloading AlphaFold databases?",
    "answer": "This step cannot be done from a compute node; it should be performed on a data transfer node (DTN) or a login node. Since the download can take up to a full day, it's suggested to use a terminal multiplexer to avoid issues like `Client_loop: send disconnect: Broken pipe`."
  },
  {
    "question": "What is the specific `DOWNLOAD_DIR` setting for Graham clusters?",
    "answer": "For Graham clusters, you should set `export DOWNLOAD_DIR=/datashare/alphafold`."
  },
  {
    "question": "What is the approximate total size and content of the AlphaFold 2.3 database structure?",
    "answer": "The AlphaFold 2.3 database structure is approximately 2.6 TB total, containing `bfd`, `mgnify`, `params` (with 15 models), `pdb70`, `pdb_mmcif` (with over 200,000 files), `pdb_seqres`, `uniprot`, `uniref30`, and `uniref90`."
  },
  {
    "question": "What is the approximate total size and content of the AlphaFold 2.2 database structure?",
    "answer": "The AlphaFold 2.2 database structure is approximately 2.2 TB total (with a download size of 428 GB), containing `bfd`, `mgnify`, `params` (with 5 CASP14 models and 5 pTM models), `pdb70`, `pdb_mmcif` (with about 180,000 files), `uniclust30`, and `uniref90`."
  },
  {
    "question": "What is the maximum number of CPU cores recommended for running AlphaFold and why?",
    "answer": "You should request a maximum of 8 CPU cores when running AlphaFold because it is hardcoded to not use more and does not benefit from additional cores."
  },
  {
    "question": "How do you set up the environment and install dependencies within a SLURM submission script for AlphaFold?",
    "answer": "Within the script, you first load modules like `StdEnv/2020`, then generate a virtual environment in `$SLURM_TMPDIR` (`virtualenv --no-download ${SLURM_TMPDIR}/env`), activate it (`source ${SLURM_TMPDIR}/env/bin/activate`), and finally install pip and AlphaFold using `pip install --no-index --upgrade pip` and `pip install --no-index --requirement ~/alphafold-requirements.txt`."
  },
  {
    "question": "What are the common SLURM directives used in AlphaFold submission scripts?",
    "answer": "Common SLURM directives include `--job-name` (e.g., `alphafold_run`), `--account` (e.g., `def-someprof`), `--time` (e.g., `08:00:00`), `--cpus-per-task=8`, and `--mem=20G`. For GPU jobs, `--gres=gpu:1` is also included."
  },
  {
    "question": "What are the main command-line arguments for `run_alphafold.py`?",
    "answer": "Key arguments include `--fasta_paths` (input sequences), `--output_dir` (output location), `--data_dir` (database location), `--db_preset` (e.g., `full_dbs`), `--model_preset` (e.g., `multimer` or `monomer_casp14`), various database paths (e.g., `bfd_database_path`, `mgnify_database_path`), binary paths (e.g., `hhblits_binary_path`), `--max_template_date`, and `--use_gpu_relax`."
  },
  {
    "question": "What is the difference in `model_preset` and `max_template_date` between AlphaFold 2.3 and 2.2 submission scripts?",
    "answer": "AlphaFold 2.3 scripts use `--model_preset=multimer` and `--max_template_date=2022-01-01`, while AlphaFold 2.2 scripts use `--model_preset=monomer_casp14` and `--max_template_date=2020-05-14`."
  },
  {
    "question": "What is the database path option difference for `uniclust30` in AlphaFold 2.3 compared to 2.2?",
    "answer": "The `--uniclust30_database_path` option used in AlphaFold 2.2 was renamed to `--uniref30_database_path` in version 2.3."
  },
  {
    "question": "How do you submit an AlphaFold job to the scheduler?",
    "answer": "You submit the job using the `sbatch` command, for example: `sbatch --job-name alphafold-X alphafold-gpu.sh`."
  },
  {
    "question": "What causes the 'Client_loop: send disconnect: Broken pipe' error message during database download?",
    "answer": "This error message, encountered during database download, is often hard to diagnose but can be caused by factors like an unusually high number of users on the login node, leading to resource contention."
  },
  {
    "question": "What are the solutions to resolve the 'Broken pipe' error when downloading AlphaFold databases?",
    "answer": "Solutions include using a terminal multiplexer, utilizing the database already present on the cluster (e.g., `/cvmfs/bio.data.computecanada.ca/content/databases/Core/alphafold2_dbs/2023_07/`), or downloading the full database in sections using specific `download_` scripts like `download_pdb.sh`."
  }
]