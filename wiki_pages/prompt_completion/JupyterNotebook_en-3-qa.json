[
  {
    "question": "How do you establish an SSH tunnel for Jupyter Notebook from Windows using MobaXTerm?",
    "answer": "Open a second Terminal tab in MobaXTerm and run the command `ssh -L 8888:<hostname:port> <username>@<cluster>.alliancecan.ca`, replacing the bracketed values with your specific details."
  },
  {
    "question": "After creating an SSH tunnel with MobaXTerm, how do you access Jupyter Notebook in your browser?",
    "answer": "Open your browser and navigate to `http://localhost:8888/?token=<token>`, replacing `<token>` with the token value obtained from Session 1."
  },
  {
    "question": "How do you shut down the Jupyter Notebook server?",
    "answer": "You can shut down the Jupyter Notebook server by pressing Ctrl-C twice in the terminal where the interactive job was launched."
  },
  {
    "question": "If you used MobaXterm to create an SSH tunnel for Jupyter Notebook, how do you shut down the tunnel?",
    "answer": "Press Ctrl-D in Session 2 of MobaXterm to shut down the tunnel."
  },
  {
    "question": "Why would you want to add kernels to Jupyter Notebook?",
    "answer": "It is possible to add kernels for other programming languages or Python versions different than the one running the Jupyter Notebook."
  },
  {
    "question": "What are the two main steps for installing a new kernel in Jupyter Notebook?",
    "answer": "The installation of a new kernel involves two steps: installing packages that allow the language interpreter to communicate with Jupyter Notebook, and creating a kernel spec file to indicate how to initiate a communication channel with the interpreter."
  },
  {
    "question": "Where should kernel spec files be created?",
    "answer": "Each kernel spec file has to be created in its own subfolder inside `~/.local/share/jupyter/kernels` in your home directory."
  },
  {
    "question": "How do you create the necessary directory for Jupyter Notebook kernel spec files?",
    "answer": "You can create the directory using the command `mkdir -p ~/.local/share/jupyter/kernels`."
  },
  {
    "question": "What is the first step to install a Julia kernel in Jupyter Notebook?",
    "answer": "First, load the Julia module using `module load julia`."
  },
  {
    "question": "How do you activate the Jupyter Notebook virtual environment before installing the Julia kernel?",
    "answer": "Activate the virtual environment with `source $HOME/jupyter_py3/bin/activate`."
  },
  {
    "question": "What command is used to install IJulia within the Jupyter Notebook virtual environment?",
    "answer": "Install IJulia by running `echo 'Pkg.add(\"IJulia\")' | julia`."
  },
  {
    "question": "How do you install a Python 3.5 kernel for Jupyter Notebook?",
    "answer": "Load Python 3.5 (`module load python/3.5`), create and activate a new virtual environment (`virtualenv $HOME/jupyter_py3.5` and `source $HOME/jupyter_py3.5/bin/activate`), install `ipykernel` (`pip install ipykernel`), generate the kernel spec file (`python -m ipykernel install --user --name <unique_name> --display-name \"Python 3.5 Kernel\"`), then deactivate the virtual environment (`deactivate`)."
  },
  {
    "question": "After loading the R module and activating the Jupyter Notebook virtual environment, what is the next step to install an R kernel?",
    "answer": "Install the R kernel dependencies using the command `R -e \"install.packages(c('crayon', 'pbdZMQ', 'devtools'), repos='http://cran.us.r-project.org')\"`."
  },
  {
    "question": "How do you install the R kernel itself after its dependencies are met?",
    "answer": "Install the R kernel by running `R -e \"devtools::install_github(paste0('IRkernel/', c('repr', 'IRdisplay', 'IRkernel')))\"`."
  },
  {
    "question": "What is the final step to complete the R kernel installation in Jupyter Notebook?",
    "answer": "The final step is to install the R kernel spec file with the command `R -e \"IRkernel::installspec()\"`."
  }
]