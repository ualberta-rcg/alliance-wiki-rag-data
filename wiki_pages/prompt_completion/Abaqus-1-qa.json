[
  {
    "question": "What is Abaqus FEA?",
    "answer": "Abaqus FEA is a software suite designed for finite element analysis and computer-aided engineering."
  },
  {
    "question": "Do I need to provide my own Abaqus license to use it on clusters?",
    "answer": "Yes, Abaqus software modules are available on clusters, but users must provide their own license."
  },
  {
    "question": "How do I configure my Abaqus license on a cluster?",
    "answer": "Log in to the cluster, create a file named `$HOME/.licenses/abaqus.lic`, and add two `prepend_path` lines for `ABAQUSLM_LICENSE_FILE` and `LM_LICENSE_FILE`, replacing `port@server` with your Abaqus license server's flexlm port number and IP address or fully qualified hostname."
  },
  {
    "question": "What should the contents of the `abaqus.lic` file be?",
    "answer": "The `abaqus.lic` file should contain:\n`prepend_path(\"ABAQUSLM_LICENSE_FILE\",\"port@server\")`\n`prepend_path(\"LM_LICENSE_FILE\",\"port@server\")`\nReplace `port@server` with your specific flexlm port and server address."
  },
  {
    "question": "What information should I provide to technical support if my Abaqus license isn't set up for an Alliance cluster?",
    "answer": "You should provide the flexlm port number, static vendor port number, and the IP address of your Abaqus license server."
  },
  {
    "question": "What is the purpose of the additional configuration changes by system administrators for Abaqus licenses?",
    "answer": "These changes ensure that the flexlm and vendor TCP ports of your Abaqus server are reachable from all cluster compute nodes when jobs are run via the queue."
  },
  {
    "question": "What is required before a local Abaqus license can be used remotely on Alliance hardware?",
    "answer": "A special license agreement must generally be negotiated and signed by SIMULIA and your institution."
  },
  {
    "question": "What types of Slurm scripts are available for Abaqus job submission?",
    "answer": "Prototype Slurm scripts are available for submitting thread-based and MPI-based parallel simulations to single or multiple compute nodes."
  },
  {
    "question": "Which Abaqus scripts are recommended for most users?",
    "answer": "Most users will find it sufficient to use one of the 'project directory scripts' provided in the 'Single node computing' sections."
  },
  {
    "question": "How can I get a listing of all Abaqus command line arguments?",
    "answer": "You can obtain a listing of all Abaqus command line arguments by loading an Abaqus module and running `abaqus -help | less`."
  },
  {
    "question": "Which script type should be used for single node Abaqus jobs running for less than one day?",
    "answer": "Single node jobs that run for less than one day should use the 'project directory script' located in the first tab of the single node computing section."
  },
  {
    "question": "Which scripts are recommended for single node Abaqus jobs running for more than one day?",
    "answer": "Single node jobs that run for more than a day should use one of the restart scripts."
  },
  {
    "question": "How can jobs that create large restart files benefit from local disk usage?",
    "answer": "Jobs that create large restart files will benefit by writing to the local disk through the use of the `SLURM_TMPDIR` environment variable, utilized in the 'temporary directory scripts'."
  },
  {
    "question": "What is the purpose of restart scripts in Abaqus job submission?",
    "answer": "Restart scripts are used to continue jobs that have been terminated early, for example, due to reaching maximum requested runtime or a compute node crash."
  },
  {
    "question": "When should MPI scripts be used for Abaqus jobs?",
    "answer": "MPI scripts in the 'multiple node sections' should be used for jobs requiring large memory or compute resources beyond what a single compute node can provide, to distribute computing over arbitrary node ranges."
  },
  {
    "question": "What should be done before running long multi-node Abaqus jobs?",
    "answer": "Short scaling test jobs should be run to determine wall-clock times and memory requirements as a function of the number of cores (e.g., 2, 4, 8) to determine the optimal number."
  },
  {
    "question": "What types of parallelization do Abaqus solvers support for Standard Analysis?",
    "answer": "Abaqus solvers support thread-based and MPI-based parallelization for Standard Analysis type jobs."
  },
  {
    "question": "Are scripts for multiple node job restarts available for Standard Analysis?",
    "answer": "No, scripts to perform multiple node job restarts are not currently provided for Standard Analysis."
  },
  {
    "question": "What Slurm directives are commonly found in a 'project directory script' for single node standard analysis (e.g., `scriptsp1.txt`)?",
    "answer": "Common Slurm directives include `--account`, `--time`, `--cpus-per-task`, `--mem`, and `--nodes=1`."
  },
  {
    "question": "Which Abaqus module version is loaded in the example `scriptsp1.txt`?",
    "answer": "The example `scriptsp1.txt` loads `abaqus/2021` (and `StdEnv/2020`)."
  },
  {
    "question": "How is restart data configured to be written every 12 time increments in an Abaqus input file?",
    "answer": "To write restart data every N=12 time increments, specify `*RESTART, WRITE, OVERLAY, FREQUENCY=12` in the input file."
  },
  {
    "question": "How do you specify writing restart data for a total of 12 time increments in an Abaqus input file?",
    "answer": "To write restart data for a total of 12 time increments, specify `*RESTART, WRITE, OVERLAY, NUMBER INTERVAL=12, TIME MARKS=NO` in the input file."
  },
  {
    "question": "How can you check for completed restart information in Abaqus output files?",
    "answer": "You can check for completed restart information by running `egrep -i \"step|start\" testsp*.com testsp*.msg testsp*.sta`."
  },
  {
    "question": "What specific lines should a restart input file contain for a Standard Analysis job?",
    "answer": "The restart input file for a Standard Analysis job should contain: `*HEADING` and `*RESTART, READ`."
  },
  {
    "question": "How does the 'temporary directory script' (e.g., `scriptst1.txt`) handle saving data?",
    "answer": "The 'temporary directory script' uses a `while sleep 6h; do cp -fv * $SLURM_SUBMIT_DIR 2>/dev/null; done &` loop to periodically save data from `$SLURM_TMPDIR` to `$SLURM_SUBMIT_DIR`."
  }
]