[
  {
    "question": "What is R primarily used for?",
    "answer": "R is a system for statistical computation and graphics, consisting of a language and a runtime environment."
  },
  {
    "question": "Does R include a debugger and graphics capabilities?",
    "answer": "Yes, R's runtime environment includes graphics, a debugger, and access to certain system functions."
  },
  {
    "question": "Why is R considered an essential tool on HPC installations for academic research, even though it wasn't developed for HPC?",
    "answer": "R's popularity with scientists from various disciplines (engineering, mathematics, statistics, bioinformatics) makes it essential, and features like C extensions, byte-compiled code, and parallelization provide reasonable performance for single-node jobs."
  },
  {
    "question": "How can R users customize available R functions?",
    "answer": "Users can customize R functions by installing packages from the Comprehensive R Archive Network (CRAN) into their home directories."
  },
  {
    "question": "Who wrote a blog post about running R scripts with Compute Canada?",
    "answer": "User Julie Fortin wrote a blog post titled \"How to run your R script with Compute Canada\"."
  },
  {
    "question": "What is the first step to using the R interpreter?",
    "answer": "You need to begin by loading an R module."
  },
  {
    "question": "How can I see a list of available R modules?",
    "answer": "You can see a list of all available R modules using the command `module spider r`."
  },
  {
    "question": "What is an example command for loading a specific R module?",
    "answer": "You can load a particular R module using a command like `module load gcc/9.3.0 r/4.0.2`."
  },
  {
    "question": "How do you start the R interpreter interactively?",
    "answer": "You can start the R interpreter by typing `R` in the environment after loading the module."
  },
  {
    "question": "How do you quit the R interpreter?",
    "answer": "You can quit the R interpreter by typing `q()`."
  },
  {
    "question": "How do you execute an R script non-interactively?",
    "answer": "To execute an R script non-interactively, use `Rscript` with the file containing the R commands as an argument, for example: `Rscript computation.R`."
  },
  {
    "question": "What automatic options does `Rscript` pass to the R interpreter?",
    "answer": "Rscript automatically passes `--slave` and `--no-restore` to the R interpreter, which also implies `--no-save`."
  },
  {
    "question": "Why does `Rscript` prevent the creation of workspace files on exit?",
    "answer": "The `--no-save` option, implied by `Rscript`'s automatic `--no-restore`, prevents the creation of useless workspace files on exit."
  },
  {
    "question": "Where should R calculations lasting more than two or three minutes be run?",
    "answer": "Any calculations lasting more than two or three minutes should not be run on the login node; they should be run via the job scheduler."
  },
  {
    "question": "What is an example of a simple job script for running an R script?",
    "answer": "A simple job script would include SBATCH directives for account, memory, and time, module loading (e.g., `module load gcc/9.3.0 r/4.0.2`), and the command to run the R script (e.g., `Rscript computation.R`)."
  },
  {
    "question": "How do you install packages from CRAN interactively on a cluster?",
    "answer": "You can use `install.packages()` in an interactive R session on a cluster login node to install packages from CRAN."
  },
  {
    "question": "Why is installing R packages in a batch or interactive job not possible on compute nodes?",
    "answer": "Installing R packages in a batch or interactive job is not possible on compute nodes because most clusters' compute nodes do not have access to the Internet."
  },
  {
    "question": "What module is recommended to load before installing R packages, especially those developed with GNU compilers?",
    "answer": "It is recommended to load a `gcc` module before trying to install any R packages, and to use the same version of `gcc` for all packages you install."
  },
  {
    "question": "How do you install the `sp` package from CRAN in an interactive R session?",
    "answer": "You would use the command `install.packages('sp', repos='https://cloud.r-project.org/')` in an interactive R session on a login node."
  },
  {
    "question": "What happens if the `repos` argument is not specified when using `install.packages()`?",
    "answer": "If the `repos` argument is not specified, you will be asked to select an appropriate mirror for download."
  },
  {
    "question": "What environment variable might be required by some packages before installation?",
    "answer": "Some packages require defining the environment variable `TMPDIR` before installing."
  },
  {
    "question": "How do you specify a local installation directory for R packages based on the loaded R module?",
    "answer": "You specify the local installation directory using `mkdir -p ~/.local/R/$EBVERSIONR/` and `export R_LIBS=~/.local/R/$EBVERSIONR/`."
  },
  {
    "question": "How do you install an R package from the command line while specifying the repository and local library?",
    "answer": "You can install a package using `R -e 'install.packages(\"sp\", repos=\"https://cloud.r-project.org/\")'` after setting the `R_LIBS` environment variable."
  },
  {
    "question": "What should be included in a submission script to use a locally installed R package?",
    "answer": "In your submission script, you must load the desired R module and set the local library directory with `export R_LIBS=~/.local/R/$EBVERSIONR/`."
  },
  {
    "question": "What should be done if an R package depends on external libraries already on the clusters?",
    "answer": "If the library is listed as available software, load the appropriate module for that external library before installing the R package that requires it."
  },
  {
    "question": "What modules are required for the `rgdal` package, according to `module spider`?",
    "answer": "The `rgdal` package requires the `gdal` library, and `module spider gdal/2.2.1` indicates that `gdal` itself requires `nixpkgs` and `gcc` modules."
  },
  {
    "question": "How can you verify which modules are currently loaded?",
    "answer": "You can verify currently loaded modules by running `module list`."
  },
  {
    "question": "What should you do if an R package fails to install?",
    "answer": "If any package fails to install, read the error message carefully as it might provide details concerning additional modules you need to load."
  },
  {
    "question": "How do you install a downloaded R package named `archive_package.tgz`?",
    "answer": "Run `R CMD INSTALL -l 'path for your local (home) R library' archive_package.tgz` in a shell to install a downloaded package."
  },
  {
    "question": "How can you execute commands from the ambient environment from inside R?",
    "answer": "You can execute commands in the ambient environment from inside R using the R command `system()`."
  },
  {
    "question": "What potential issue can arise when using `system()` in R on clusters?",
    "answer": "When using `system()` on clusters, R can give an incorrect value to the environment variable `LD_LIBRARY_PATH`."
  },
  {
    "question": "How can the `LD_LIBRARY_PATH` issue with `system()` calls in R be avoided?",
    "answer": "You can avoid this problem by using the syntax `system(\"LD_LIBRARY_PATH=$RSNT_LD_LIBRARY_PATH <my system call>\")` in your R system calls."
  },
  {
    "question": "What is the benefit of passing parameters as arguments to R scripts?",
    "answer": "Passing parameters as arguments avoids having to change the R script for every job or manage multiple copies of otherwise identical scripts."
  },
  {
    "question": "What types of parameters can be passed as arguments to R scripts?",
    "answer": "Input/output file names and numerical parameters can be passed as arguments to R scripts."
  },
  {
    "question": "How do you pass arguments to an R script from the command line?",
    "answer": "You pass arguments by listing them after the script name, for example: `Rscript myscript.R input_1.csv 5`."
  },
  {
    "question": "How are arguments accessed within an R script?",
    "answer": "Arguments passed to an R script are accessed using `args = commandArgs(trailingOnly=TRUE)`."
  },
  {
    "question": "How do you check if enough arguments have been supplied to an R script?",
    "answer": "You can check if enough arguments are supplied using `if (length(args)<2) { stop(\"Error message\") }`."
  },
  {
    "question": "How would you read the first argument as a string and the second as an integer in an R script?",
    "answer": "You would read the first argument as a string using `name <- args[1]` and the second as an integer using `number <- as.integer( args[2] )`."
  }
]