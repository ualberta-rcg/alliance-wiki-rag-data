[
  {
    "question": "What is the primary purpose of the `nix-env` command?",
    "answer": "The `nix-env` command is used to manage your per-user Nix environment."
  },
  {
    "question": "Is `nix-env` the recommended command for managing Nix environments?",
    "answer": "No, `nix-env` is a legacy command that has not yet been replaced by a newer `nix <command>`."
  },
  {
    "question": "How do you check what compositions are currently installed in your Nix environment?",
    "answer": "You can use the command `nix-env --query` to see what is currently installed."
  },
  {
    "question": "How can you view all available compositions that can be installed using `nix-env`?",
    "answer": "Use the command `nix-env --query --available --attr-path --description` to see available compositions, their attribute paths, and descriptions."
  },
  {
    "question": "What is a more efficient way to locate compositions compared to `nix-env --query --available`?",
    "answer": "The newer `nix search` command is often a better way to locate compositions as it saves a cache for faster subsequent invocations."
  },
  {
    "question": "How do you install a specific composition, such as `git`, into your Nix environment?",
    "answer": "You can install a composition using `nix-env --install --attr nixpkgs.git`."
  },
  {
    "question": "After installing a new executable, why might `bash` not immediately find it and how can this be fixed?",
    "answer": "Bash might not immediately find a new executable because it remembers locations. You can tell bash to forget remembered executable locations with `hash -r`."
  },
  {
    "question": "How do you remove a composition, such as `subversion`, from your Nix environment?",
    "answer": "To remove a composition, use `nix-env --uninstall subversion`."
  },
  {
    "question": "What happens to Nix environments when you install or remove compositions?",
    "answer": "Each time you install or remove compositions, a new environment is created based off of the previous environment."
  },
  {
    "question": "How can you revert to the immediately previous Nix environment?",
    "answer": "You can restore the previous environment by using the command `nix-env --rollback`."
  },
  {
    "question": "How do you list all historical environments (generations) created by Nix?",
    "answer": "To get a list of all your environments, use `nix-env --list-generations`."
  },
  {
    "question": "How can you switch to a specific past Nix environment generation?",
    "answer": "You can switch to a specific generation using `nix-env --switch-generation <generation_number>`, for example, `nix-env --switch-generation 4`."
  },
  {
    "question": "What does it mean for Nix environment operations to be atomic?",
    "answer": "Atomic operations mean that installing or updating compositions either succeed and create a new environment, or leave the previous one intact, preventing halfway installations."
  },
  {
    "question": "If an installation process with `nix-env` is interrupted (e.g., with CTRL+c), what happens to the environment?",
    "answer": "If an installation operation is interrupted, it does not complete and has no effect on the environment whatsoever; the previous environment remains intact."
  },
  {
    "question": "Does Nix re-download software if it was installed previously in a different environment?",
    "answer": "No, Nix reuses software that already exists in the local Nix store from previous installs, making subsequent installations faster."
  }
]