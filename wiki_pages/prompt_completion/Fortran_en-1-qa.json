[
  {
    "question": "What type of programming language is Fortran?",
    "answer": "Fortran is a compiled programming language."
  },
  {
    "question": "Which Fortran compilers are available on Compute Canada's servers?",
    "answer": "The <tt>gfortran</tt> and <tt>ifort</tt> compilers are installed on Compute Canada's servers."
  },
  {
    "question": "Why are compiled languages like Fortran encouraged for programming?",
    "answer": "You will generally get much better performance using a compiled language."
  },
  {
    "question": "What `gfortran` compiler option checks for array bounds, disassociated pointers, and uninitialized variables?",
    "answer": "The <tt>-fcheck=all</tt> option for the gfortran compiler checks array bounds and alerts for disassociated pointers and uninitialized variables."
  },
  {
    "question": "What is the function of the <tt>-check</tt> option for the `ifort` compiler?",
    "answer": "The <tt>-check</tt> option for the ifort compiler checks array bounds and alerts for disassociated pointers and uninitialized variables."
  },
  {
    "question": "How can an `ifort` application be made to halt for floating point exceptions?",
    "answer": "Use <tt>-fpe0</tt> with the ifort compiler to cause the application to halt for floating point exceptions such as division by zero or the square root of a negative number."
  },
  {
    "question": "Which compiler option disables optimizations during the testing phase of code development?",
    "answer": "During testing, you should use <tt>-O0</tt> to disable optimizations."
  },
  {
    "question": "How do you add debugging symbols to a Fortran program during testing?",
    "answer": "During testing, you should use <tt>-g</tt> to add debugging symbols."
  },
  {
    "question": "What built-in functions for basic linear algebra are included in modern Fortran versions?",
    "answer": "Modern versions of Fortran (from Fortran 90 on) include built-in functions to handle basic linear algebra operations like <tt>matmul</tt>, <tt>dot_product</tt>, and <tt>transpose</tt>."
  },
  {
    "question": "Should one implement their own methods for numerical linear algebra operations in Fortran?",
    "answer": "No, you should use built-in Fortran functions or system-provided BLAS/LAPACK libraries and never attempt to write your own methods for such operations, except as an educational exercise."
  },
  {
    "question": "How much faster can BLAS matrix-matrix multiplication be compared to a naive implementation?",
    "answer": "The BLAS matrix-matrix multiplication routine can be up to 100 times faster than a naive implementation involving three nested loops."
  },
  {
    "question": "What is a common cause of segmentation faults in a Fortran program?",
    "answer": "An error that is frequently seen with a Fortran program comes from interface problems, specifically if a pointer, a dynamically allocated array, or even a function pointer is passed as an argument to a subroutine."
  },
  {
    "question": "What message indicates a segmentation fault has occurred in a Fortran program?",
    "answer": "The message 'forrtl: severe (174): SIGSEGV, segmentation fault occurred' indicates a segmentation fault."
  },
  {
    "question": "How can interface-related segmentation faults in Fortran be fixed?",
    "answer": "To correct interface-related segmentation faults, you should ensure that the interface of the subroutine is explicitly defined using the INTERFACE command."
  }
]