[
  {
    "question": "What is Abaqus FEA?",
    "answer": "Abaqus FEA is a software suite designed for finite element analysis and computer-aided engineering."
  },
  {
    "question": "Can I use Abaqus software modules on Alliance clusters with my own license?",
    "answer": "Yes, Abaqus software modules are available on Alliance clusters, but you must provide your own license."
  },
  {
    "question": "How do I configure my account on an Alliance cluster to use my Abaqus license?",
    "answer": "You need to log in and create a file named `$HOME/.licenses/abaqus.lic` on the cluster."
  },
  {
    "question": "What content should be included in the `$HOME/.licenses/abaqus.lic` file?",
    "answer": "The file should contain these two lines: `prepend_path(\"ABAQUSLM_LICENSE_FILE\",\"port@server\")` and `prepend_path(\"LM_LICENSE_FILE\",\"port@server\")`."
  },
  {
    "question": "What information should I replace in the `abaqus.lic` file?",
    "answer": "You should replace `port@server` with the flexlm port number and server IP address (or fully qualified hostname) of your Abaqus license server."
  },
  {
    "question": "Which Abaqus versions do the license paths in the `abaqus.lic` file support?",
    "answer": "The specified license paths support Abaqus versions 202X and 6.14.1."
  },
  {
    "question": "What steps are required if my Abaqus license is not yet configured for use on an Alliance cluster?",
    "answer": "Additional configuration changes by the Alliance system administrator and your local system administrator will be necessary."
  },
  {
    "question": "Why are additional configuration changes needed for an Abaqus license on an Alliance cluster?",
    "answer": "These changes ensure that the flexlm and vendor TCP ports of your Abaqus server are reachable from all cluster compute nodes when jobs are run via the queue."
  },
  {
    "question": "How do I request assistance with setting up my Abaqus license for an Alliance cluster?",
    "answer": "You should write to technical support, including the flexlm port number, static vendor port number, and IP address of your Abaqus license server."
  },
  {
    "question": "What will I receive from technical support after providing my Abaqus license server details?",
    "answer": "You will be sent a list of cluster IP addresses so your administrator can open the local server firewall to allow connections from the cluster on both ports."
  },
  {
    "question": "Is a special agreement required to use a local Abaqus license remotely on Alliance hardware?",
    "answer": "Yes, a special license agreement must generally be negotiated and signed by SIMULIA and your institution."
  },
  {
    "question": "What are prototype Slurm scripts used for in Abaqus on clusters?",
    "answer": "Prototype Slurm scripts are used for submitting thread and MPI-based parallel simulations to single or multiple compute nodes."
  },
  {
    "question": "Which type of Slurm script is typically sufficient for most Abaqus users?",
    "answer": "Most users will find it sufficient to use one of the project directory scripts provided in the Single node computing sections."
  },
  {
    "question": "What is the purpose of the optional `memory=` argument in Abaqus Slurm scripts?",
    "answer": "The `memory=` argument is for larger memory or problematic jobs where the 3072MB offset value may require tuning."
  },
  {
    "question": "How can I obtain a listing of all Abaqus command line arguments?",
    "answer": "You can get a listing by loading an Abaqus module and then running: `abaqus -help | less`."
  },
  {
    "question": "Which script should be used for single node Abaqus jobs that run for less than one day?",
    "answer": "Single node jobs that run less than one day should use the project directory script located in the first tab."
  },
  {
    "question": "Which script should be used for single node Abaqus jobs that run for more than one day?",
    "answer": "Single node jobs that run for more than a day should use one of the restart scripts."
  },
  {
    "question": "How can jobs that create large restart files benefit from writing to the local disk?",
    "answer": "They can benefit by writing to the local disk through the use of the `SLURM_TMPDIR` environment variable, which is utilized in the temporary directory scripts."
  },
  {
    "question": "What is the primary function of Abaqus restart scripts?",
    "answer": "Abaqus restart scripts continue jobs that have been terminated early for reasons like reaching maximum requested runtime or compute node crashes."
  },
  {
    "question": "When should MPI scripts in the multiple node sections be used for Abaqus jobs?",
    "answer": "MPI scripts should be used for jobs that require large memory or larger compute resources beyond what a single compute node can provide."
  },
  {
    "question": "What should be done before running long multi-node Abaqus jobs?",
    "answer": "Short scaling test jobs should be run to determine wall-clock times and memory requirements as a function of the number of cores to find the optimal number."
  },
  {
    "question": "What types of parallelization are supported by Abaqus solvers for Standard Analysis?",
    "answer": "Abaqus solvers support thread-based and MPI-based parallelization for Standard Analysis."
  },
  {
    "question": "Are multiple node job restart scripts currently provided for Standard Analysis?",
    "answer": "No, scripts to perform multiple node job restarts are not currently provided for Standard Analysis."
  },
  {
    "question": "What is the default account specified in the provided Standard Analysis single node project directory script?",
    "answer": "The default account specified is `def-group`."
  },
  {
    "question": "What is the default time limit set in the Standard Analysis single node project directory script?",
    "answer": "The default time limit is `00-06:00` (6 hours)."
  },
  {
    "question": "How many CPUs per task are requested in the Standard Analysis single node project directory script?",
    "answer": "The script requests `4` CPUs per task."
  },
  {
    "question": "What is the total memory requested in the Standard Analysis single node project directory script?",
    "answer": "The script requests `8G` (8 gigabytes) of total memory."
  },
  {
    "question": "How many nodes are specified for the Standard Analysis single node project directory script?",
    "answer": "The script specifies `1` node and indicates that this value should not be changed."
  },
  {
    "question": "Which modules are loaded for Abaqus 2021 in the Standard Analysis single node project directory script?",
    "answer": "The script loads `StdEnv/2020` and `abaqus/2021`."
  },
  {
    "question": "How is the `memory` argument for the Abaqus command calculated in the single node project directory script?",
    "answer": "The `memory` argument is calculated as `$((${SLURM_MEM_PER_NODE}-3072))MB`."
  },
  {
    "question": "How can I specify to write restart data every N=12 time increments in an Abaqus input file?",
    "answer": "You can specify `*RESTART, WRITE, OVERLAY, FREQUENCY=12` in the input file."
  },
  {
    "question": "How can I specify to write restart data for a total of 12 time increments in an Abaqus input file?",
    "answer": "You can specify `*RESTART, WRITE, OVERLAY, NUMBER INTERVAL=12, TIME MARKS=NO` in the input file."
  },
  {
    "question": "How do you check for completed restart information for a Standard Analysis job?",
    "answer": "You can use the command `egrep -i \"step|start\" testsp*.com testsp*.msg testsp*.sta`."
  },
  {
    "question": "What command line argument can be added to the Abaqus command to benefit some simulations?",
    "answer": "Adding `order_parallel=OFF` to the Abaqus command might benefit some simulations."
  },
  {
    "question": "What is required in the restart input file for a Standard Analysis job?",
    "answer": "The restart input file should contain `*HEADING` and `*RESTART, READ`."
  },
  {
    "question": "In a temporary directory script for Abaqus, what happens if the job is still running after 6 hours?",
    "answer": "The script includes a loop that saves data by copying `*` files to `$SLURM_SUBMIT_DIR` every 6 hours, due to a time limit."
  }
]