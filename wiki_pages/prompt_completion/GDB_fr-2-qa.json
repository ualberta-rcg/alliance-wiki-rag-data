[
  {
    "question": "What are some of the advanced interactive debugging commands available in GDB?",
    "answer": "In GDB, advanced interactive debugging commands include `run`/`kill`, `where`/`backtrace`, `break`, `watch`, `continue`, `step`, `print`, and `list`."
  },
  {
    "question": "How do you start or stop the execution of a program in GDB?",
    "answer": "You can start the execution of a program using the `run` command (or its shortcut `r`) and stop it with the `kill` command (or `k`)."
  },
  {
    "question": "What is the GDB command to display the call stack?",
    "answer": "To display the call stack, you can use the `where` command or its shortcut `bt` (for `backtrace`)."
  },
  {
    "question": "How do you set a breakpoint in GDB?",
    "answer": "A breakpoint can be set using the `break` command (or shortcut `b`), specifying either `src.c:numero_de_ligne` or a `fonction`."
  },
  {
    "question": "Which GDB command allows you to pause execution when a variable changes its value?",
    "answer": "The `watch` command, followed by the variable's name, will stop the program's execution when that variable is modified."
  },
  {
    "question": "How do you resume program execution after hitting a breakpoint in GDB?",
    "answer": "To continue execution after a breakpoint, use the `continue` command (or its shortcut `c`)."
  },
  {
    "question": "What GDB command is used to execute the next operation in a program?",
    "answer": "The `step` command (or its shortcut `s`) is used to execute the next operation."
  },
  {
    "question": "How can you display the content of a variable in GDB?",
    "answer": "You can display the content of a variable using the `print` command (or its shortcut `p`) followed by the variable's name."
  },
  {
    "question": "What GDB command is used to display a specific line of code?",
    "answer": "The `list` command (or its shortcut `l`) with `src.c:num\u00e9ro` as an argument can display a specified line of code."
  },
  {
    "question": "Does GDB effectively display C++ Standard Template Library (STL) structures by default?",
    "answer": "By default, GDB does not display the content of C++ Standard Template Library (STL) structures very well."
  },
  {
    "question": "What is a simple solution to improve GDB's display of STL structures?",
    "answer": "A simple solution is to copy the `dbinit_stl_views-1.03.txt` file into your home directory, naming it `~/.gdbinit`."
  },
  {
    "question": "Where can I find additional resources for GDB?",
    "answer": "Additional resources include the GDB website, a GDB tutorial (oucsace.cs.ohiou.edu/~bhumphre/gdb.html), and a TACC document on debugging and profiling (goo.gl/rLPvR0)."
  }
]