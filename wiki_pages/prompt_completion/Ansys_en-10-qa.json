[
  {
    "question": "What is the primary function of Fluent journal files?",
    "answer": "Fluent journal files are used to include any command from Fluent's Text-User-Interface (TUI) and can change simulation parameters, enabling a series of simulations under different conditions with a single case file."
  },
  {
    "question": "Which command in a Fluent journal file specifies the use of the legacy .cas/.dat file format?",
    "answer": "The command `/file/cff-files no` is used to specify the legacy .cas/.dat file format, which is the default for module versions 2019R3 or older."
  },
  {
    "question": "Which command enables the more efficient .cas.h5/.dat.h5 file format in Fluent journal files?",
    "answer": "To use the more efficient .cas.h5/.dat.h5 file format (default for module versions 2020R1 or newer), the command `/file/cff-files yes` should be included in the journal file."
  },
  {
    "question": "What is the initial step when using a User-Defined Function (UDF) with Fluent on a cluster?",
    "answer": "The first step is to transfer your UDF source file (e.g., `sampleudf.c`) and any additional dependency files to the cluster, ensuring to use the text mode setting if transferring from a Windows machine."
  },
  {
    "question": "Where should UDF files be located relative to other simulation files on the cluster?",
    "answer": "The UDF should be placed in the same directory where your journal, cas, and dat files reside."
  },
  {
    "question": "At what point in a journal file should UDF commands be added?",
    "answer": "UDF commands should be added into your journal file before the commands that read in your simulation cas/dat files."
  },
  {
    "question": "What should be checked regarding UDF configuration in the Fluent GUI before uploading a case file for use on the Alliance?",
    "answer": "Before uploading your cas file, ensure that neither the Interpreted UDFs Dialog Box nor the UDF Library Manager Dialog Box are configured to use any UDF; this ensures that only journal file commands control UDF usage during job submission."
  },
  {
    "question": "How do you instruct Fluent to interpret a UDF at runtime using a journal file command?",
    "answer": "Add the command `define/user-defined/interpreted-functions \"sampleudf.c\" \"cpp\" 10000 no` to your journal file, replacing `\"sampleudf.c\"` with the actual filename of your source file."
  },
  {
    "question": "What is necessary for an interpreted UDF to be used with parallel Fluent jobs?",
    "answer": "To use an interpreted UDF with parallel jobs, it will need to be parallelized as described in the parallel UDF section of the documentation."
  },
  {
    "question": "How is a compiled UDF initially prepared for use on an Alliance cluster?",
    "answer": "A compiled UDF must be compiled on an Alliance cluster at least once, which creates a `libudf` subdirectory structure containing the necessary `libudf.so` shared library."
  },
  {
    "question": "Can a `libudf` directory be copied directly from a remote system (e.g., a laptop) to an Alliance cluster?",
    "answer": "No, a `libudf` directory cannot simply be copied from a remote system because the library dependencies of the shared library will not be satisfied, leading to Fluent crashing on startup."
  },
  {
    "question": "Under what conditions can a compiled `libudf` directory be transferred between Alliance clusters?",
    "answer": "Once a UDF has been compiled on one Alliance cluster, its `libudf` directory can be transferred to any other Alliance cluster, provided the account loads the same `StdEnv` environment module version."
  },
  {
    "question": "What is the journal file command for compiling a UDF?",
    "answer": "The journal file command to compile a UDF is `define/user-defined/compiled-functions compile libudf yes sampleudf.c \"\" \"\"`."
  },
  {
    "question": "What is the journal file command for loading a compiled UDF?",
    "answer": "The journal file command to load a compiled UDF is `define/user-defined/compiled-functions load libudf`."
  },
  {
    "question": "Why should both compile and load commands for compiled UDFs not be simultaneously uncommented in a journal file for job submission?",
    "answer": "Leaving both compile and load commands uncommented is highly inefficient as the UDF will be automatically recompiled for each job, and it can also lead to build conflicts if multiple jobs are run from the same directory."
  },
  {
    "question": "How can a compiled UDF be built using the Fluent GUI?",
    "answer": "A compiled UDF can be built in the Fluent GUI by navigating to the Compiled UDFs Dialog Box, adding the UDF source file, and then clicking Build."
  },
  {
    "question": "What must be done to a UDF before it can be used with a Fluent parallel job?",
    "answer": "Before a UDF can be used with a Fluent parallel job (single node SMP and multinode MPI), it must be parallelized."
  },
  {
    "question": "What is involved in parallelizing a UDF for Fluent?",
    "answer": "Parallelizing a UDF involves adding compiler directives, predicates, and reduction macros into your working serial UDF."
  },
  {
    "question": "What are the potential consequences if a UDF is not parallelized for parallel Fluent jobs?",
    "answer": "Failure to parallelize a UDF for parallel Fluent jobs will result in Fluent running slow at best or immediately crashing at worst."
  },
  {
    "question": "Where can detailed information regarding parallelization of UDFs be found?",
    "answer": "Detailed information on parallelizing UDFs is described in `Part I: Chapter 7: Parallel Considerations` of the Ansys 2024 `Fluent Customization Manual`."
  },
  {
    "question": "What type of Fluent models can UDFs customize?",
    "answer": "UDFs can be used to customize Discrete Phase Models (DPM) in Fluent."
  },
  {
    "question": "In a Fluent journal file, what does `/file/confirm-overwrite no` achieve?",
    "answer": "In a Fluent journal file, `/file/confirm-overwrite no` prevents Fluent from asking for confirmation before overwriting existing files."
  },
  {
    "question": "How is the input case and data file specified in a Fluent journal file for a steady simulation?",
    "answer": "The input case and data file are specified using `/file/read-case-data FFF-in`, where `FFF-in` is the filename."
  },
  {
    "question": "How do you set the number of iterations for the solver in a steady Fluent journal file?",
    "answer": "The number of iterations for the solver is set using `/solve/iterate 1000`, where `1000` is the desired number of iterations."
  },
  {
    "question": "What journal command writes the final output case and data files in Fluent?",
    "answer": "The command `/file/write-case-data FFF-out` writes the final output case and data files in Fluent."
  },
  {
    "question": "How can an optional simulation report be generated and saved to a file using a Fluent journal file?",
    "answer": "An optional simulation report can be generated and saved using `/report/summary y \"My_Simulation_Report.txt\"`, where `\"My_Simulation_Report.txt\"` specifies the output filename."
  },
  {
    "question": "What command ensures Fluent shuts down cleanly after a journal file execution?",
    "answer": "The command `/exit` ensures Fluent shuts down cleanly."
  },
  {
    "question": "How do you configure Fluent to auto-save data files every 100 iterations in a journal file?",
    "answer": "To auto-save data files every 100 iterations, use the command `/file/auto-save/data-frequency 100`."
  },
  {
    "question": "What command allows Fluent to retain data files from the 5 most recent iterations during auto-saving?",
    "answer": "The command `/file/auto-save/retain-most-recent-files y` allows Fluent to retain data files from the 5 most recent iterations."
  },
  {
    "question": "How do you specify an output subdirectory and root name for auto-saved files in a Fluent journal file?",
    "answer": "You can specify an output subdirectory and root name using `/file/auto-save/root-name output/FFF-out`, which appends the iteration number to the root name."
  },
  {
    "question": "What command reads the input case file for a transient simulation in Fluent?",
    "answer": "The command `/file/read-case FFF-transient-inp` reads the input case file for a transient simulation."
  },
  {
    "question": "How can both case and data input files be read for continuation or restart in a transient Fluent journal file?",
    "answer": "Both case and data input files can be read using `/file/read-case-data FFF-transient-inp` for continuation or restart in a transient simulation."
  },
  {
    "question": "What commands configure Fluent to auto-save data every 100 time steps and a case file if modified in a transient simulation?",
    "answer": "Use `/file/auto-save/data-frequency 100` and `/file/auto-save/case-frequency if-case-is-modified`."
  },
  {
    "question": "How do you set the physical time step size in a transient Fluent journal file?",
    "answer": "The physical time step size is set using `/solve/set/time-step 0.0001`."
  },
  {
    "question": "What command initializes a transient simulation using the hybrid initialization method?",
    "answer": "The command `/solve/initialize/hyb-initialization` initializes a transient simulation using the hybrid initialization method."
  },
  {
    "question": "How are the number of time steps and maximum iterations per time step specified for a transient simulation in a journal file?",
    "answer": "The number of time steps and maximum iterations per time step are specified using `/solve/dual-time-iterate 1000 75`, where `1000` is the number of time steps and `75` is the maximum iterations per time step."
  }
]