[
  {
    "question": "How do you install the Jupyter Lmod extension?",
    "answer": "To install and activate the Jupyter Lmod extension, first load the `nodejs` module, then run `pip install jupyterlmod`, and finally execute `jupyter labextension install jupyterlab-lmod`."
  },
  {
    "question": "What is Jupyter Lmod used for?",
    "answer": "Jupyter Lmod is an extension that allows interaction with environment modules before launching kernels, using Lmod's Python interface for tasks like loading, unloading, or saving module collections."
  },
  {
    "question": "Where can I find instructions for managing loaded modules within the JupyterLab interface?",
    "answer": "Directives for managing loaded modules in the JupyterLab interface can be found on the JupyterHub page."
  },
  {
    "question": "What is RStudio Server in the context of JupyterLab?",
    "answer": "RStudio Server allows users to develop R code within an RStudio environment, accessible through a browser tab from JupyterLab."
  },
  {
    "question": "What is the initial step for installing RStudio Server when setting up JupyterLab?",
    "answer": "Before loading the `python` module and creating a new virtual environment, you must load the `rstudio-server` module using `module load rstudio-server python`."
  },
  {
    "question": "How do you install the Jupyter RSession proxy after JupyterLab is set up in the virtual environment?",
    "answer": "After JupyterLab is installed in the new virtual environment, install the Jupyter RSession proxy by running `pip install --no-index jupyter-rsession-proxy`."
  },
  {
    "question": "How do you activate the Python virtual environment for JupyterLab after connecting to the cluster?",
    "answer": "You need to activate it again with the command `source $HOME/jupyter_py3/bin/activate`."
  },
  {
    "question": "How can you verify that your JupyterLab environment is ready?",
    "answer": "You can verify that your environment is ready by getting a list of installed `jupyter*` packages using the command `pip freeze | grep jupyter`."
  },
  {
    "question": "How do you start a JupyterLab server?",
    "answer": "To start a JupyterLab server, you need to submit an interactive task using `salloc`, adjusting parameters like time, number of tasks, CPUs, memory, and account as needed."
  },
  {
    "question": "What is an example command to launch JupyterLab using `salloc`?",
    "answer": "An example command is `salloc --time=1:0:0 --ntasks=1 --cpus-per-task=2 --mem-per-cpu=1024M --account=def-yourpi srun $VIRTUAL_ENV/bin/jupyterlab.sh`."
  },
  {
    "question": "Why is an SSH tunnel necessary to connect to JupyterLab on a compute node?",
    "answer": "An SSH tunnel is necessary because compute nodes are not directly accessible from the internet, and it allows you to access the JupyterLab server from your web browser on a local machine."
  },
  {
    "question": "What is the recommended tool for creating an SSH tunnel on Linux or macOS to connect to JupyterLab?",
    "answer": "The Python package `sshuttle` is recommended for creating an SSH tunnel on Linux or macOS."
  },
  {
    "question": "How do you create an SSH tunnel with `sshuttle` on Linux or macOS?",
    "answer": "Open a new terminal window on your local machine and use the command `sshuttle --dns -Nr <username>@<cluster>.computecanada.ca`, replacing `<username>` and `<cluster>` with your specific details."
  },
  {
    "question": "Which tools can be used to create an SSH tunnel from Windows?",
    "answer": "On Windows, you can use MobaXTerm or any terminal that supports the `ssh` command to create an SSH tunnel."
  },
  {
    "question": "How do you extract the `hostname:port` and `token` when connecting to JupyterLab from Windows?",
    "answer": "You extract the `hostname:port` and `token` from the first HTTP address provided when JupyterLab is launched, for example, from `http://node_name.int.cluster.computecanada.ca:8888/lab?token=101c368829...`."
  },
  {
    "question": "What is the SSH command to create a tunnel for JupyterLab on Windows?",
    "answer": "The command is `ssh -L 8888:<hostname:port> <username>@<cluster>.computecanada.ca`, where you replace `<hostname:port>`, `<username>`, and `<cluster>` with your specific values."
  },
  {
    "question": "After setting up an SSH tunnel on Windows, what URL should you use in your browser to access JupyterLab?",
    "answer": "You should go to `http://localhost:8888/?token=<token>`, replacing `<token>` with the alphanumeric value obtained from the JupyterLab server's URL."
  },
  {
    "question": "How do you stop the JupyterLab server before its allocated execution time ends?",
    "answer": "To stop the JupyterLab server, press **CTRL-C** twice in the terminal where the interactive job was launched."
  },
  {
    "question": "How do you close an SSH tunnel created with MobaXterm?",
    "answer": "To close an SSH tunnel created with MobaXterm, press **Ctrl-D**."
  }
]