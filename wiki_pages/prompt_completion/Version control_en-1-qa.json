[
  {
    "question": "What is considered one of the cornerstones of application development?",
    "answer": "Source code management is one of the cornerstones of application development."
  },
  {
    "question": "What are the two general approaches to managing source code for a project?",
    "answer": "You could make multiple backup copies, send code by email, and manually reconcile changes, or you could use a revision control system."
  },
  {
    "question": "Why are revision control tools particularly important for academic research?",
    "answer": "Traceability is essential for ensuring that a given set of results can be reproduced."
  },
  {
    "question": "What metaphor is used to describe revision control management tools for programmers?",
    "answer": "Revision control management tools are the programmer's equivalent to the experimentalist's lab notebook."
  },
  {
    "question": "What is one of the main advantages of using revision control tools for collaboration?",
    "answer": "They permit you to collaborate more easily and eliminate the risk that a collaborator might delete your modifications or vice versa without leaving a trace."
  },
  {
    "question": "How do revision control tools function like a 'time machine'?",
    "answer": "They save the history of all modifications made to a project, allowing you to reinitialize your project to an earlier version."
  },
  {
    "question": "What is the basic principle by which source code management tools operate?",
    "answer": "They function using a basic principle of separating local modifications made by a user in their local directory, and what is called the repository."
  },
  {
    "question": "What information does the repository contain?",
    "answer": "The repository contains, in a structured manner, the history of all of the modifications made by all of a project's contributors."
  },
  {
    "question": "What action must a contributor take to make their local modifications available to other developers?",
    "answer": "A contributor has to submit (commit) their modifications to the repository."
  },
  {
    "question": "What do developers need to do before making their own modifications to a file?",
    "answer": "Developers need to make sure they are using the latest version of a file by retrieving it from the repository (checkout, update)."
  },
  {
    "question": "What happens if two programmers modify the same source code file at the same time?",
    "answer": "The source code management tool may report a conflict during the submission of the two rival modifications or automatically resolve the conflict if possible."
  },
  {
    "question": "How are the principal revision control tools categorized?",
    "answer": "They can be divided into two 'families' or 'generations'."
  },
  {
    "question": "What characteristic defines first-generation revision control tools?",
    "answer": "First-generation tools use a single central repository where all modifications are under its control and retrieved from it."
  },
  {
    "question": "Name two examples of first-generation revision control tools.",
    "answer": "CVS and SVN are examples of first-generation tools."
  },
  {
    "question": "What is a key characteristic of second-generation revision control tools?",
    "answer": "Second-generation tools use local repositories."
  },
  {
    "question": "Name three examples of second-generation revision control tools.",
    "answer": "Git, Mercurial, and Bazaar are examples of second-generation tools."
  },
  {
    "question": "What is an advantage of second-generation tools using local repositories?",
    "answer": "Development work can be done independent of any remote server, leading to faster commit and checkout operations and more complex operations."
  },
  {
    "question": "What advanced management feature do Git and Mercurial offer?",
    "answer": "Git and Mercurial offer advanced management of branched development."
  },
  {
    "question": "How does the branched development model work for new features?",
    "answer": "Each new feature corresponds to a branch of the development tree, developed in parallel until mature enough to be fused with the principal branch or abandoned."
  },
  {
    "question": "In second-generation tools, what are the two steps to submit modifications to an external repository?",
    "answer": "First, they are submitted to the local repository (commit), then they are pushed (push) to the external repository."
  },
  {
    "question": "What are the two steps to retrieve modifications from an external repository using second-generation tools?",
    "answer": "First, you must obtain them (pull or get) into the local repository, then update your working version (update or checkout)."
  },
  {
    "question": "What determines the choice of a revision control tool if you are contributing to an existing project?",
    "answer": "You will have to use the tool that has been chosen by the initial development team."
  },
  {
    "question": "What factor influences the choice of a revision control tool when starting a new project?",
    "answer": "The choice will depend on the breadth of your project."
  },
  {
    "question": "When might a first-generation tool like SVN be sufficient for a new project?",
    "answer": "It can be sufficient for a project with only a few contributors, which will remain private, and for which you simply want a history of modifications."
  },
  {
    "question": "When should a second-generation tool like Git or Mercurial be considered for a new project?",
    "answer": "If your project is larger, with external collaborators, you should consider a second-generation tool."
  }
]