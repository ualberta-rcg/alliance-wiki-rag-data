[
  {
    "question": "What is one of the earliest parallelization techniques?",
    "answer": "One of the earliest parallelization techniques is the use of POSIX threads, commonly shortened to pthreads."
  },
  {
    "question": "What environment does pthreads parallelization rely on?",
    "answer": "Pthreads parallelization relies on the assumption of a shared memory environment."
  },
  {
    "question": "Where are pthreads typically used?",
    "answer": "Pthreads are typically used only on a single node, with the number of active threads limited by the number of available CPU cores on that node."
  },
  {
    "question": "What is the main target programming language for pthreads?",
    "answer": "In practice, the main target programming language for pthreads is C."
  },
  {
    "question": "What is a better alternative for parallelizing Fortran programs using threads than pthreads?",
    "answer": "For Fortran programs, OpenMP is almost certainly a better idea for parallelization using threads."
  },
  {
    "question": "What alternatives do C++ programmers have for threading instead of pthreads?",
    "answer": "C++ programmers would probably find the constructs in the Boost threading library or those part of the C++11 standard to be more attractive options than pthreads."
  },
  {
    "question": "How do pthreads compare to higher-level APIs like OpenMP?",
    "answer": "Pthreads form a toolkit of threading primitives that permit the most general and low-level parallelization, at the price of sacrificing much of the simplicity and ease of use of a high-level API like OpenMP."
  },
  {
    "question": "What is the essential model for pthreads?",
    "answer": "The essential model for pthreads is the dynamic spawning of lightweight sub-processes (threads) that asynchronously carry out operations and then are extinguished by rejoining the program's master process."
  },
  {
    "question": "Is sharing data difficult in pthreads compared to a distributed approach like MPI?",
    "answer": "Sharing data among pthreads through global variables isn't difficult because all threads reside in the same memory space, in comparison with a distributed approach like MPI."
  },
  {
    "question": "What potential issue needs to be avoided when modifying shared data in pthreads?",
    "answer": "Any modifications of shared data in pthreads have to be managed with care to avoid race conditions."
  },
  {
    "question": "What is scalability in the context of parallel programming?",
    "answer": "Scalability is how well a program is able to run in parallel."
  },
  {
    "question": "What is recommended after parallelizing software to understand its performance?",
    "answer": "After parallelizing software and ensuring its correctness, it is recommended to perform a scaling analysis to understand its parallel performance."
  },
  {
    "question": "Which header file is required to use pthreads in a C program?",
    "answer": "To use pthreads in a C program, you will need to include the header file <tt>pthread.h</tt>."
  },
  {
    "question": "How do you compile a C program that uses pthreads?",
    "answer": "To compile a C program that uses pthreads, you need to include the <tt>pthread.h</tt> header and link with the pthread library, for example, using <tt>gcc -pthread -o test threads.c</tt>."
  },
  {
    "question": "What are the ways to specify the number of threads to be used in a pthread program?",
    "answer": "The number of threads can be specified via a command-line argument, an environment variable, or hard-coded into the source file."
  },
  {
    "question": "What is the disadvantage of hard-coding the number of threads?",
    "answer": "If the number of threads is hard-coded into the source file, you would not be able to adjust the thread count at run time."
  },
  {
    "question": "Describe the programming model for pthreads when parallelizing a serial program.",
    "answer": "In pthreads, threads are created by a parent, carry out some work, and finally are reabsorbed or joined back into the parent."
  },
  {
    "question": "Who can be a parent thread in the pthreads model?",
    "answer": "The parent may be the serial master thread or another worker thread."
  },
  {
    "question": "Which function is used to create new pthreads?",
    "answer": "New threads are created with the function <tt>pthread_create</tt>."
  },
  {
    "question": "What are the four arguments of the <tt>pthread_create</tt> function?",
    "answer": "The four arguments of <tt>pthread_create</tt> are: the unique identifier for the newly created thread, the set of attributes for this thread, the C function the thread will execute upon initiation (the 'start routine'), and the argument for the start routine."
  },
  {
    "question": "What does the provided <tt>thread.c</tt> example demonstrate regarding pthreads?",
    "answer": "The <tt>thread.c</tt> example demonstrates the creation of twelve worker threads using <tt>pthread_create</tt> and waiting for them to finish using <tt>pthread_join</tt>."
  },
  {
    "question": "How many threads are created in the <tt>thread.c</tt> example?",
    "answer": "The <tt>thread.c</tt> example creates twelve threads."
  },
  {
    "question": "What function do the threads in the <tt>thread.c</tt> example execute?",
    "answer": "Each thread in the <tt>thread.c</tt> example executes the <tt>task</tt> function."
  },
  {
    "question": "Is the <tt>pthread_create</tt> function blocking or non-blocking?",
    "answer": "The call of <tt>pthread_create</tt> is non-blocking, meaning the master thread continues execution after creating worker threads."
  },
  {
    "question": "What is the purpose of the <tt>pthread_join</tt> function?",
    "answer": "<tt>pthread_join</tt> is a blocking function where the master thread waits for worker threads to finish executing their assigned functions and rejoin the master thread."
  },
  {
    "question": "Is the <tt>pthread_join</tt> function blocking or non-blocking?",
    "answer": "The <tt>pthread_join</tt> function is blocking."
  },
  {
    "question": "Describe the basic lifecycle of a POSIX thread as illustrated by the example.",
    "answer": "The basic lifecycle of a POSIX thread involves a master thread creating a thread, assigning it a function to run, and then waiting for the thread to finish and join back into the execution of the master thread."
  }
]