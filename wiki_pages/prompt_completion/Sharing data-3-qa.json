[
  {
    "question": "What does a umask value of 007 mean for file permissions?",
    "answer": "A umask value of 007 means files are readable, writable, and executable by the owner and the group, but not by others."
  },
  {
    "question": "What does a umask value of 022 imply for file permissions?",
    "answer": "A umask value of 022 means files are readable and executable by everyone, but writable only by the owner."
  },
  {
    "question": "If the umask is 002, what are the resulting default file permissions?",
    "answer": "With a umask of 002, files are readable, writable, and executable by the owner and the group, and readable and executable by everyone else, but writable only by the owner and the group."
  },
  {
    "question": "What factors, besides umask, determine if a user can access a file?",
    "answer": "A user trying to access a file must have execute permission on all directories in the path to the file, must be a member of the file's group for group permissions, and Access Control Lists (ACLs) can also determine access. Permissions can also be explicitly changed using `chmod` after creation."
  },
  {
    "question": "How can you change the permissions of existing files to match new default permissions?",
    "answer": "To change permissions of existing files, use `chmod g-w,o-rx <file>`. For an entire directory, use `chmod -R g-w,o-rx <directory>`."
  },
  {
    "question": "What are Access Control Lists (ACLs) used for?",
    "answer": "ACLs allow for finer-grained permissions than traditional Unix permissions, enabling permissions to be set on a user-by-user basis rather than just for the owner, group, and everyone else."
  },
  {
    "question": "Which commands are used to view and modify Access Control Lists?",
    "answer": "The `getfacl` command is used to see ACL permissions, and `setfacl` is used to alter them."
  },
  {
    "question": "How do you grant read and execute permission on a single file for a specific user, like 'smithj' on 'my_script.py', using ACLs?",
    "answer": "You can use the command: `setfacl -m u:smithj:rx my_script.py`."
  },
  {
    "question": "How do you share a subdirectory, including future new files, with read and write access for a specific user using ACLs?",
    "answer": "To share a subdirectory for new files, use `setfacl -d -m u:smithj:rwX /home/<user>/projects/def-<PI>/shared_data`. To apply to existing content, use `setfacl -R -m u:smithj:rwX /home/<user>/projects/def-<PI>/shared_data`."
  },
  {
    "question": "What is the meaning of the 'X' attribute when setting ACL permissions for directories?",
    "answer": "The 'X' attribute (uppercase X) sets the execute permission only if the item is already executable (either a directory or a file with existing execute permission). It is essential for directories to allow browsing."
  },
  {
    "question": "What are the requirements for successfully sharing a subdirectory using ACLs?",
    "answer": "For ACL subdirectory sharing to work, the directory must be owned by you, parent directories must grant execute permission to the shared user (e.g., with `setfacl -m u:smithj:X` or `chmod o+x`), and when sharing in the project filesystem, the path provided to collaborators must start with `/project` (the physical path), not `/home/<user>/projects`."
  },
  {
    "question": "Why should you use the `/project` path instead of `/home/<user>/projects` when sharing a project directory with collaborators?",
    "answer": "The `/home/<user>/projects` path contains symbolic links to physical directories in `/project`. These symlinks are not reachable by collaborators unless they also have access to your home directory. Using the physical `/project` path ensures collaborators can access the data directly."
  },
  {
    "question": "How can you find the physical path that a symbolic link points to?",
    "answer": "You can use the `realpath` command to find the physical path a symlink points to. For example, `realpath /home/smithj/projects/def-smithj/shared_data`."
  }
]