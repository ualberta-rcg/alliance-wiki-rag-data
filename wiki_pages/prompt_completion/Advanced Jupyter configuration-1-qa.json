[
  {
    "question": "What is the primary use case for Jupyter Lab and notebooks?",
    "answer": "Jupyter Lab and notebooks are meant for short interactive tasks such as testing, debugging, or quickly visualizing data (few minutes)."
  },
  {
    "question": "How should longer analysis tasks be run with Jupyter?",
    "answer": "Running longer analysis must be done in a non-interactive job using `sbatch`."
  },
  {
    "question": "What is Project Jupyter?",
    "answer": "Project Jupyter is a non-profit, open-source project that evolved from the IPython Project in 2014 to support interactive data science and scientific computing across all programming languages."
  },
  {
    "question": "What is JupyterLab?",
    "answer": "JupyterLab is a web-based interactive development environment for notebooks, code, and data, offering a flexible interface and modular design that supports extensions."
  },
  {
    "question": "Where should a JupyterLab server be run?",
    "answer": "A JupyterLab server should only run on a compute node or a cloud instance, not on cluster login nodes, due to imposed limits on CPU time or memory."
  },
  {
    "question": "How do users reserve compute resources for a JupyterLab job on a compute node?",
    "answer": "Users can reserve compute resources by submitting a job that requests a specific number of CPUs (and optionally GPUs), an amount of memory, and the run time."
  },
  {
    "question": "What is the recommended method for installing JupyterLab?",
    "answer": "The recommended method is to install JupyterLab using the `pip` command within a Python virtual environment."
  },
  {
    "question": "What is the first step to create a Python virtual environment for JupyterLab?",
    "answer": "The first step is to load a Python module by running `module load python`."
  },
  {
    "question": "What module should be loaded if you intend to use RStudio Server with JupyterLab?",
    "answer": "If you intend to use RStudio Server, you must first load the `rstudio-server` module before the `python` module and before creating a new virtual environment, using the command `module load rstudio-server python`."
  },
  {
    "question": "How do you create a new Python virtual environment named 'jupyter_py3'?",
    "answer": "Create a new Python virtual environment by running `virtualenv --no-download $HOME/jupyter_py3`."
  },
  {
    "question": "How do you activate a newly created Python virtual environment named 'jupyter_py3'?",
    "answer": "Activate the virtual environment by running `source $HOME/jupyter_py3/bin/activate`."
  },
  {
    "question": "How do you install JupyterLab in an activated virtual environment?",
    "answer": "In your activated virtual environment, first upgrade pip with `pip install --no-index --upgrade pip`, then install JupyterLab with `pip install --no-index jupyterlab`."
  },
  {
    "question": "How do you create a wrapper script to launch JupyterLab in the virtual environment?",
    "answer": "Create the wrapper script by running `echo -e '#!/bin/bash\nunset XDG_RUNTIME_DIR\njupyter lab --ip $(hostname -f) --no-browser' > $VIRTUAL_ENV/bin/jupyterlab.sh`."
  },
  {
    "question": "After creating the JupyterLab wrapper script, what is the next step?",
    "answer": "Make the script executable by running `chmod u+x $VIRTUAL_ENV/bin/jupyterlab.sh`."
  },
  {
    "question": "What is the purpose of JupyterLab extensions?",
    "answer": "Extensions allow users to add functionalities and modify the JupyterLab's user interface."
  },
  {
    "question": "What is Jupyter Lmod?",
    "answer": "Jupyter Lmod is an extension that enables interaction with environment modules before launching kernels, using Lmod's Python interface for tasks like loading or unloading modules."
  },
  {
    "question": "How do you install the Jupyter Lmod extension?",
    "answer": "First, load the nodejs module (`module load nodejs`), then install jupyterlmod with pip (`pip install jupyterlmod`), and finally install the labextension (`jupyter labextension install jupyterlab-lmod`)."
  },
  {
    "question": "What is the RStudio Server extension for JupyterLab?",
    "answer": "The RStudio Server extension allows users to develop R code in an RStudio environment that appears in their web browser in a separate tab within JupyterLab."
  },
  {
    "question": "How do you install the Jupyter RSession proxy after JupyterLab is set up for RStudio Server?",
    "answer": "Install the Jupyter RSession proxy by running `pip install --no-index jupyter-rsession-proxy` in the activated virtual environment."
  },
  {
    "question": "How do you activate the Python virtual environment on subsequent logins to the cluster?",
    "answer": "You need to activate it again by running `source $HOME/jupyter_py3/bin/activate`."
  },
  {
    "question": "How can you verify that your JupyterLab environment is ready and list installed jupyter packages?",
    "answer": "You can verify by running `pip freeze | grep jupyter`."
  },
  {
    "question": "How do you start a JupyterLab server?",
    "answer": "To start a JupyterLab server, you must submit an interactive job using `salloc`."
  },
  {
    "question": "Provide an example command to start a JupyterLab server with specific resource requests.",
    "answer": "An example command is `salloc --time=1:0:0 --ntasks=1 --cpus-per-task=2 --mem-per-cpu=1024M --account=def-yourpi srun $VIRTUAL_ENV/bin/jupyterlab.sh`."
  },
  {
    "question": "Why is an SSH tunnel needed to connect to JupyterLab?",
    "answer": "An SSH tunnel is needed because JupyterLab runs on a compute node, which is not directly accessible from the internet."
  },
  {
    "question": "What tool is recommended for creating an SSH tunnel to JupyterLab from Linux or macOS?",
    "answer": "On a Linux or macOS system, the `sshuttle` Python package is recommended for creating the SSH tunnel."
  },
  {
    "question": "How do you create an SSH tunnel using `sshuttle` on Linux or macOS?",
    "answer": "Open a new terminal and run `sshuttle --dns -Nr <username>@<cluster>.computecanada.ca`, replacing `<username>` and `<cluster>` with your details."
  },
  {
    "question": "How do you connect to JupyterLab from a web browser after creating an `sshuttle` tunnel?",
    "answer": "Copy and paste the first provided HTTP address from the `salloc` output (e.g., `http://node_name.int.cluster.computecanada.ca:8888/lab?token=...`) into your web browser."
  },
  {
    "question": "What tool can be used to create an SSH tunnel from Windows to JupyterLab?",
    "answer": "An SSH tunnel can be created from Windows using MobaXTerm (or any terminal that supports the `ssh` command)."
  },
  {
    "question": "What information do you need to extract from the JupyterLab server's HTTP address when connecting from Windows?",
    "answer": "You need to extract the `hostname:port` (e.g., `node_name.int.cluster.computecanada.ca:8888`) and the `token` from the first provided HTTP address."
  },
  {
    "question": "How do you create an SSH tunnel from MobaXTerm (Windows) to JupyterLab?",
    "answer": "Open a new terminal tab in MobaXTerm and run `ssh -L 8888:<hostname:port> <username>@<cluster>.computecanada.ca`, replacing the placeholders with your extracted values and account details."
  },
  {
    "question": "Once the SSH tunnel is established from Windows, how do you access JupyterLab in your web browser?",
    "answer": "Open your web browser and go to `http://localhost:8888/?token=<token>`, replacing `<token>` with the alphanumerical value extracted earlier."
  },
  {
    "question": "How do you shut down the JupyterLab server before the walltime limit?",
    "answer": "You can shut down the JupyterLab server by pressing `Ctrl-C` twice in the terminal where the interactive job was launched."
  },
  {
    "question": "How do you shut down an SSH tunnel created with MobaXterm?",
    "answer": "Press `Ctrl-D` in the MobaXterm terminal that created the SSH tunnel."
  }
]