[
  {
    "question": "What is the recommended use case for Jupyter Lab and notebooks?",
    "answer": "Jupyter Lab and notebooks are meant for short interactive tasks such as testing, debugging, or quickly visualizing data, typically lasting only a few minutes."
  },
  {
    "question": "How should longer analysis tasks be performed instead of using interactive Jupyter notebooks?",
    "answer": "Running longer analysis tasks must be done in a non-interactive job (sbatch)."
  },
  {
    "question": "What is Project Jupyter?",
    "answer": "Project Jupyter is a non-profit, open-source project, born out of the IPython Project in 2014, that supports interactive data science and scientific computing across all programming languages."
  },
  {
    "question": "What is JupyterLab?",
    "answer": "JupyterLab is a web-based interactive development environment for notebooks, code, and data, offering a flexible interface for configuring and arranging workflows in various scientific and data-related fields, with a modular design for extensions."
  },
  {
    "question": "Where should a JupyterLab server be run?",
    "answer": "A JupyterLab server should only run on a compute node or on a cloud instance."
  },
  {
    "question": "Why are cluster login nodes not recommended for running a JupyterLab server?",
    "answer": "Cluster login nodes are not recommended because they impose various limits that can stop applications if they consume too much CPU time or memory."
  },
  {
    "question": "How can users reserve compute resources for a JupyterLab job?",
    "answer": "Users can reserve compute resources by submitting a job that requests a specific number of CPUs (and optionally GPUs), an amount of memory, and the run time."
  },
  {
    "question": "What is the primary method for installing JupyterLab?",
    "answer": "JupyterLab is installed using the `pip` command within a Python virtual environment."
  },
  {
    "question": "What is the first step if you don't have an existing Python virtual environment for JupyterLab installation?",
    "answer": "If you do not have an existing Python virtual environment, you need to create one and then activate it."
  },
  {
    "question": "How do you load a Python module when setting up the environment for JupyterLab?",
    "answer": "You can load a Python module by running `module load python` for the default version, or `module load <specific_version_python>` for another version."
  },
  {
    "question": "What special step is required when loading modules if you intend to use RStudio Server with JupyterLab?",
    "answer": "If you intend to use RStudio Server, you must load `rstudio-server` before the `python` module and before creating a new virtual environment using `module load rstudio-server python`."
  },
  {
    "question": "How do you create a new Python virtual environment for JupyterLab?",
    "answer": "You create a new Python virtual environment using the command `virtualenv --no-download $HOME/jupyter_py3`."
  },
  {
    "question": "How do you activate a newly created Python virtual environment for JupyterLab?",
    "answer": "You activate your newly created Python virtual environment with `source $HOME/jupyter_py3/bin/activate`."
  },
  {
    "question": "What commands are used to install JupyterLab in an activated virtual environment?",
    "answer": "First, update pip with `pip install --no-index --upgrade pip`, then install JupyterLab with `pip install --no-index jupyterlab`."
  },
  {
    "question": "How do you create a wrapper script to launch JupyterLab within its virtual environment?",
    "answer": "You can create a wrapper script by running `echo -e '#!/bin/bash\\nunset XDG_RUNTIME_DIR\\njupyter lab --ip $(hostname -f) --no-browser' > $VIRTUAL_ENV/bin/jupyterlab.sh`."
  },
  {
    "question": "What is the final step for the JupyterLab wrapper script after its creation?",
    "answer": "The script must be made executable using `chmod u+x $VIRTUAL_ENV/bin/jupyterlab.sh`."
  },
  {
    "question": "What is the purpose of JupyterLab extensions?",
    "answer": "Extensions allow you to add functionalities and modify JupyterLab's user interface."
  },
  {
    "question": "What is Jupyter Lmod and what does it do?",
    "answer": "Jupyter Lmod is an extension that enables interaction with environment modules (like loading, unloading, or saving collections) before launching kernels, by utilizing Lmod's Python interface."
  },
  {
    "question": "What commands are used to install the Jupyter Lmod extension?",
    "answer": "To install Jupyter Lmod, load `nodejs` (`module load nodejs`), then `pip install jupyterlmod`, and finally `jupyter labextension install jupyterlab-lmod`."
  },
  {
    "question": "What functionality does the RStudio Server extension provide within JupyterLab?",
    "answer": "The RStudio Server extension allows you to develop R codes in an RStudio environment that appears in your web browser in a separate tab within JupyterLab."
  },
  {
    "question": "What is one key installation difference for RStudio Server compared to standard JupyterLab installation?",
    "answer": "One key difference is that the `rstudio-server` module must be loaded before the `python` module and before creating a new virtual environment."
  },
  {
    "question": "How do you install the Jupyter RSession proxy for RStudio Server functionality?",
    "answer": "Once JupyterLab is installed in the new virtual environment, install the Jupyter RSession proxy using `pip install --no-index jupyter-rsession-proxy`."
  },
  {
    "question": "How do you activate the Python virtual environment for JupyterLab when you log onto the cluster?",
    "answer": "You activate the environment again using `source $HOME/jupyter_py3/bin/activate`."
  },
  {
    "question": "How can you verify that your JupyterLab environment is ready and list installed jupyter packages?",
    "answer": "You can verify the environment by running `pip freeze | grep jupyter` to get a list of installed jupyter* packages."
  },
  {
    "question": "How do you start a JupyterLab server?",
    "answer": "To start a JupyterLab server, you submit an interactive job with `salloc`, adjusting the parameters based on your needs."
  },
  {
    "question": "Provide an example command to start a JupyterLab server requesting specific resources.",
    "answer": "An example command is `salloc --time=1:0:0 --ntasks=1 --cpus-per-task=2 --mem-per-cpu=1024M --account=def-yourpi srun $VIRTUAL_ENV/bin/jupyterlab.sh`."
  },
  {
    "question": "Why is an SSH tunnel required to access JupyterLab running on a compute node from a web browser?",
    "answer": "An SSH tunnel is required because compute nodes are not directly accessible from the internet, necessitating a tunnel through the cluster from your computer."
  },
  {
    "question": "What tool is recommended for creating an SSH tunnel from a Linux or macOS system to JupyterLab?",
    "answer": "On a Linux or macOS system, the `sshuttle` Python package is recommended for creating an SSH tunnel."
  },
  {
    "question": "What is the `sshuttle` command to create an SSH tunnel from Linux or macOS?",
    "answer": "The `sshuttle` command is `sshuttle --dns -Nr <username>@<cluster>.alliancecan.ca`, where `<username>` and `<cluster>` are replaced with your specific details."
  },
  {
    "question": "What tool is used to create an SSH tunnel from Windows to JupyterLab?",
    "answer": "An SSH tunnel can be created from Windows using MobaXTerm."
  },
  {
    "question": "What information from the JupyterLab server's HTTP address is needed to set up an SSH tunnel from Windows?",
    "answer": "You need to extract the `hostname:port` and the `token` from the first provided HTTP address after JupyterLab is launched."
  },
  {
    "question": "How do you create an SSH tunnel from MobaXTerm on Windows to connect to JupyterLab?",
    "answer": "After extracting the `hostname:port` and `token`, open a new Terminal tab in MobaXTerm and use the command `ssh -L 8888:<hostname:port> <username>@<cluster>.alliancecan.ca`."
  },
  {
    "question": "Once an SSH tunnel is established from Windows, what address do you use in your web browser to access JupyterLab?",
    "answer": "You go to `http://localhost:8888/?token=<token>`, replacing `<token>` with the extracted alphanumerical value."
  },
  {
    "question": "How do you shut down the JupyterLab server before its allocated time expires?",
    "answer": "You can shut down the JupyterLab server by pressing `Ctrl-C` twice in the terminal where the interactive job was launched."
  },
  {
    "question": "How do you shut down an SSH tunnel created using MobaXterm?",
    "answer": "To shut down an SSH tunnel created with MobaXterm, press `Ctrl-D` in the terminal where the tunnel was launched."
  }
]