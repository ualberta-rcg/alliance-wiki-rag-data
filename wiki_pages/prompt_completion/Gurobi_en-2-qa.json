[
  {
    "question": "How do you read a model within the Gurobi interactive shell?",
    "answer": "You can read a model using the command `m = read('/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/gurobi/8.1.1/examples/data/glass4.mps')`."
  },
  {
    "question": "How do you set the number of threads for an optimization run in the Gurobi interactive shell?",
    "answer": "You can set the number of threads using `m.Params.Threads = 8`."
  },
  {
    "question": "How do you set the optimization method in the Gurobi interactive shell?",
    "answer": "You can set the optimization method using `m.Params.Method = 2`."
  },
  {
    "question": "How do you specify the result file for an optimization in the Gurobi interactive shell?",
    "answer": "You specify the result file using `m.Params.ResultFile = \"glass4.sol\"`."
  },
  {
    "question": "How do you specify the log file for an optimization in the Gurobi interactive shell?",
    "answer": "You specify the log file using `m.Params.LogFile = \"glass4.log\"`."
  },
  {
    "question": "What command initiates the optimization process in the Gurobi interactive shell?",
    "answer": "The `m.optimize()` command initiates the optimization process."
  },
  {
    "question": "How do you write the optimized model to a file in the Gurobi interactive shell?",
    "answer": "You can write the optimized model to a file using `m.write('glass4.lp')`."
  },
  {
    "question": "How can you check the optimization status within the Gurobi interactive shell?",
    "answer": "You can check the optimization status using the `m.status` command."
  },
  {
    "question": "How can you check the runtime of an optimization in the Gurobi interactive shell?",
    "answer": "You can check the runtime using the `m.runtime` command."
  },
  {
    "question": "Where can I find documentation for Gurobi parameter descriptions?",
    "answer": "Documentation for Gurobi parameter descriptions can be found at `https://www.gurobi.com/documentation/8.1/refman/parameter_descriptions.html`."
  },
  {
    "question": "How do you replay recorded API calls with Gurobi?",
    "answer": "You can replay recorded API calls using the command `gurobi_cl recording000.grbr`."
  },
  {
    "question": "How do you submit a Slurm script for a Gurobi problem to the queue?",
    "answer": "A Slurm script can be submitted to the queue by running the `sbatch script-name.sh` command."
  },
  {
    "question": "How do you check the status of jobs in the Slurm queue?",
    "answer": "The status of jobs in the queue can be checked by running the `sq` command."
  },
  {
    "question": "Which Gurobi tool is used in the `script-lp_coins.sh` example for solving a coin production model?",
    "answer": "The `gurobi_cl` command-line interface is used in the `script-lp_coins.sh` example."
  },
  {
    "question": "How are parameters passed to `gurobi_cl` in a Slurm script?",
    "answer": "Parameters can be passed directly to `gurobi_cl` using simple command-line arguments, such as `Threads=$SLURM_CPUS_ON_NODE Method=2 ResultFile=coins.sol`."
  },
  {
    "question": "What Gurobi version is loaded in the `script-lp_coins.sh` example?",
    "answer": "The `script-lp_coins.sh` example loads `gurobi/9.5.0`."
  },
  {
    "question": "Where can I find help on selecting Gurobi parameters for a problem?",
    "answer": "For help, refer to the 'Performance and Parameters' and 'Algorithms and Search' sections in the Gurobi Knowledge Base and the extensive online Gurobi documentation."
  },
  {
    "question": "What is the purpose of the `script-facility.sh` example?",
    "answer": "The `script-facility.sh` example demonstrates how to solve a simple facility location model using Gurobi Python and how to set the threads parameter dynamically."
  },
  {
    "question": "How is the number of threads specified for a Gurobi Python job in `script-facility.sh`?",
    "answer": "The number of threads is set by dynamically generating a `gurobi.env` file into the working directory with the line `echo \"Threads ${SLURM_CPUS_ON_NODE:-1}\" > gurobi.env`."
  },
  {
    "question": "Why is it important to explicitly set the number of threads for Gurobi Python jobs on the cluster?",
    "answer": "It is important to set the number of threads to prevent Gurobi from defaulting to using as many physical cores as available, which can slow down the job and negatively impact other users."
  },
  {
    "question": "What Gurobi version is loaded in the `script-facility.sh` Python example?",
    "answer": "The `script-facility.sh` example loads `gurobi/11.0.1`."
  }
]