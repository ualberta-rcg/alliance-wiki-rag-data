[
  {
    "question": "What is Gurobi?",
    "answer": "Gurobi is a commercial software suite designed for solving complex optimization problems."
  },
  {
    "question": "What is the primary focus of this wiki page regarding Gurobi?",
    "answer": "This wiki page describes the non-commercial use of Gurobi software on our clusters."
  },
  {
    "question": "On which clusters is the free Gurobi license supported?",
    "answer": "A free license to use Gurobi is supported on the Graham, Cedar, B\u00e9luga, and Niagara clusters."
  },
  {
    "question": "What are the limitations of the Gurobi license provided on these clusters?",
    "answer": "The license provides a total of 4096 simultaneous uses (tokens) and permits distributed optimization with up to 100 nodes."
  },
  {
    "question": "Can a single user run multiple jobs simultaneously with the provided Gurobi license?",
    "answer": "Yes, a single user is permitted to run multiple simultaneous jobs."
  },
  {
    "question": "How can I obtain access to the Gurobi license?",
    "answer": "You must agree to certain conditions, contact support, and include a copy of the completed academic usage agreement. You will then be added to the license file within a few days."
  },
  {
    "question": "What are the conditions for academic use of the Gurobi license?",
    "answer": "Users must agree to only use the Gurobi license on Digital Research Alliance of Canada systems for non-commercial research projects that will be published in publicly available articles."
  },
  {
    "question": "Do I need to create a `~/.licenses/gurobi.lic` file to use Gurobi?",
    "answer": "No, you do NOT need to create a `~/.licenses/gurobi.lic` file as the required settings are configured by default when you load a Gurobi module."
  },
  {
    "question": "How do I verify if my Gurobi license is working correctly?",
    "answer": "Load the Gurobi module (`module load gurobi`) and then run `gurobi_cl 1> /dev/null && echo Success || echo Fail`. If it returns 'Success', it's working."
  },
  {
    "question": "What should I do if the Gurobi license test returns 'Fail'?",
    "answer": "First, check for a file named `~/.license/gurobi` and rename or remove it, then reload the module and retry. If it still fails, check for GUROBI environment variables in `~/.bashrc` or `~/.bash_profile`, comment or remove them, log out, log in, reload the module, and retry. If it still fails, contact support."
  },
  {
    "question": "Why is it important to minimize Gurobi license checkout attempts?",
    "answer": "Minimizing license checkout attempts is important because all checkouts are handled by a single remote license server, and frequent contact is costly in time. Limiting attempts improves job performance and license server responsiveness for all users."
  },
  {
    "question": "What is the recommended approach for Gurobi license usage within a job?",
    "answer": "Your program should make a single license checkout and then reuse this license token throughout the lifetime of the job."
  },
  {
    "question": "What are the consequences of failing to use Gurobi carefully regarding license checkouts?",
    "answer": "Failure to use Gurobi carefully may lead to random intermittent license checkout failures for all users. If this happens, you will be contacted and asked to kill your jobs until the problem is resolved."
  },
  {
    "question": "Where can C++ users find documentation on creating a single Gurobi environment?",
    "answer": "Documentation for C++ users on creating a single Gurobi environment can be found at https://www.gurobi.com/documentation/9.5/refman/cpp_env2.html."
  },
  {
    "question": "Where can Python users find documentation on implementing a single Gurobi environment?",
    "answer": "Python users can consult the page at https://www.gurobi.com/documentation/9.5/refman/py_env_start.html, which discusses using a single environment and license token with multiple models."
  },
  {
    "question": "How do you allocate resources for Gurobi command-line tools on a cluster?",
    "answer": "Resources can be allocated using a command like `salloc --time=1:00:0 --cpus-per-task=8 --mem=1G --account=def-xyz`."
  },
  {
    "question": "How do you load the Gurobi module for command-line use?",
    "answer": "`module load gurobi`"
  },
  {
    "question": "How can you get help for the `gurobi_cl` command-line tool?",
    "answer": "Run `gurobi_cl --help`."
  },
  {
    "question": "How do you prepare an environment file for recording API calls in the Gurobi interactive shell?",
    "answer": "You can create a `gurobi.env` file with the content `Record 1` by running `echo \"Record 1\" > gurobi.env`."
  },
  {
    "question": "How do you start the Gurobi interactive shell?",
    "answer": "After loading the Gurobi module, run `gurobi.sh`."
  }
]