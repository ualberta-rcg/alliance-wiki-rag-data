[
  {
    "question": "What is the difference between Independent I/O and Collective I/O operations?",
    "answer": "Independent I/O operations specify only what a single process will do, whereas Collective I/O is a coordinated access to storage by a group of processes where functions are called by all participating processes."
  },
  {
    "question": "What are the advantages of using Collective I/O?",
    "answer": "Collective I/O allows the filesystem to gain more knowledge about the overall access pattern, leading to more optimization in lower software layers and better performance."
  },
  {
    "question": "What is MPI-IO?",
    "answer": "MPI-IO is the parallel I/O component of the MPI-2 standard, introduced in 1996."
  },
  {
    "question": "What kind of files is MPI-IO suitable for writing?",
    "answer": "MPI-IO is good for writing raw binary files."
  },
  {
    "question": "Which high-level I/O libraries are built on top of MPI-IO?",
    "answer": "HDF5 (Hierarchical Data Format) and Parallel NetCDF (Network Common Data Format) are built on top of MPI-IO."
  },
  {
    "question": "Which MPI implementation provides MPI-IO as a default module?",
    "answer": "OpenMPI provides MPI-IO as a default module on \"our systems\"."
  },
  {
    "question": "How does MPI-IO resemble other MPI operations?",
    "answer": "MPI-IO exploits analogies with MPI, making writing to and reading from a file very similar to MPI send and receive practices, respectively."
  },
  {
    "question": "How is file access organized in MPI-IO?",
    "answer": "File access in MPI-IO is grouped via a communicator, which is a group for message passing in MPI. Collective operations are also used."
  },
  {
    "question": "What are the basic MPI-IO operations in C?",
    "answer": "The basic MPI-IO operations in C include `MPI_File_open`, `MPI_File_seek`, `MPI_File_set_view`, `MPI_File_read`, `MPI_File_write`, and `MPI_File_close`."
  },
  {
    "question": "What is the function of `MPI_File_seek` in MPI-IO?",
    "answer": "`MPI_File_seek` is used to update an individual file pointer."
  },
  {
    "question": "What does `MPI_File_set_view` do in MPI-IO?",
    "answer": "`MPI_File_set_view` is used to assign regions of a file to separate processes by changing a process's view of data in the file."
  },
  {
    "question": "What three components define file views when using `MPI_File_set_view`?",
    "answer": "File views are specified using a triplet consisting of `displacement`, `etype`, and `filetype`."
  },
  {
    "question": "In the context of `MPI_File_set_view`, what does 'displacement' mean?",
    "answer": "`displacement` refers to the number of bytes to skip from the start of the file."
  },
  {
    "question": "What does 'etype' represent in `MPI_File_set_view`?",
    "answer": "`etype` is the elementary datatype, which defines the unit of data access."
  },
  {
    "question": "What is specified by 'filetype' in `MPI_File_set_view`?",
    "answer": "`filetype` specifies which portion of the file is visible to the process."
  },
  {
    "question": "What are the fundamental requirements for opening a file in MPI-IO?",
    "answer": "Opening a file in MPI-IO requires a communicator, a file name, a file handle (for all future reference), and a file access mode (`amode`)."
  },
  {
    "question": "Name some file access modes available in MPI-IO.",
    "answer": "Available file access modes include `MPI_MODE_RDONLY` (Read only), `MPI_MODE_RDWR` (Read and writing), `MPI_MODE_WRONLY` (Write only), `MPI_MODE_CREATE` (Create file if it does not exist), and `MPI_MODE_APPEND` (Position all file pointers to end), among others."
  },
  {
    "question": "How can multiple file access modes be combined in MPI-IO for C and FORTRAN?",
    "answer": "Multiple file access modes can be combined using the bitwise OR operator (\"|\") in C or the addition operator (\"+\") in FORTRAN."
  },
  {
    "question": "What is the typical value for the `info` argument when opening a file with MPI-IO?",
    "answer": "The `info` argument is usually set to `MPI_INFO_NULL`."
  }
]