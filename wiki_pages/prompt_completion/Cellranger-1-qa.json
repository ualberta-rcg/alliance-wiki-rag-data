[
  {
    "question": "What is Cellranger?",
    "answer": "Cellranger is a set of analysis pipelines designed to process Chromium single-cell data."
  },
  {
    "question": "What types of analysis can Cellranger perform on Chromium single-cell data?",
    "answer": "Cellranger can align reads, generate feature-barcode matrices, perform clustering, and conduct other secondary analysis."
  },
  {
    "question": "Where can users find a complete list of Cellranger's subtools?",
    "answer": "Users can find a complete list of subtools in the official documentation provided by 10x Genomics."
  },
  {
    "question": "Is Cell Ranger a free software?",
    "answer": "No, Cell Ranger is licensed software, and users must register to download it."
  },
  {
    "question": "From which website can users download Cell Ranger?",
    "answer": "Users can download Cell Ranger after registering at https://www.10xgenomics.com/support/software/cell-ranger/downloads/eula?closeUrl=%2Fsu."
  },
  {
    "question": "How do you unpack the Cell Ranger tar file with .gz compression?",
    "answer": "To unpack a Cell Ranger .tar.gz file, use the command: `tar -xzvf cellranger-x.y.z.tar.gz`."
  },
  {
    "question": "What command should be used to unpack a Cell Ranger file with .xz compression?",
    "answer": "If Cell Ranger is in the .xz compression format, use the command: `tar -xvf cellranger-x.y.z.tar.xz`."
  },
  {
    "question": "What is created after unpacking the Cell Ranger tar file?",
    "answer": "Unpacking Cell Ranger creates a new directory named `cellranger-x.y.z`, which contains Cell Ranger, its dependencies, and the `cellranger` script."
  },
  {
    "question": "How do you unpack Cell Ranger reference data files?",
    "answer": "Reference data files, such as `refdata-gex-GRCh38-2020-A.tar.gz`, can be unpacked using the command: `tar -xzvf refdata-gex-GRCh38-2020-A.tar.gz`."
  },
  {
    "question": "What does an unpacked reference data directory contain?",
    "answer": "An unpacked reference data directory contains a single reference (e.g., GRCh38) with pre-generated indices and other data required by Cell Ranger."
  },
  {
    "question": "How can the `cellranger` command be made invokable from any directory?",
    "answer": "The Cell Ranger directory should be prepended to the user's `$PATH` environment variable, for example: `export PATH=/opt/cellranger-x.y.z:$PATH`."
  },
  {
    "question": "How can the `export PATH` command for Cell Ranger be made permanent for convenience?",
    "answer": "Users may wish to add the `export PATH` command to their `.bashrc` file for convenience."
  },
  {
    "question": "What is the primary function of `cellranger mkfastq`?",
    "answer": "`cellranger mkfastq` demultiplexes raw base call (BCL) files from Illumina sequencers into FASTQ files."
  },
  {
    "question": "What is `cellranger mkfastq` a wrapper around?",
    "answer": "`cellranger mkfastq` is a wrapper around Illumina's bcl2fastq, with additional 10x Genomics specific features and a simplified sample sheet format."
  },
  {
    "question": "What kind of sample sheet is recommended for most `cellranger mkfastq` experiments?",
    "answer": "A simple CSV sample sheet is recommended for most sequencing experiments."
  },
  {
    "question": "What columns are required in a simple CSV sample sheet for `cellranger mkfastq`?",
    "answer": "A simple CSV sample sheet for `cellranger mkfastq` requires three columns: Lane, Sample, and Index."
  },
  {
    "question": "How would you run the `cellranger mkfastq` pipeline?",
    "answer": "You can run `cellranger mkfastq` using a command like: `cellranger mkfastq --id=$ID --run=/path/to/bcl --csv=test_sample.csv`."
  },
  {
    "question": "What does `cellranger count` do?",
    "answer": "`cellranger count` takes FASTQ files, performs alignment, filtering, barcode counting, UMI counting, generates feature-barcode matrices, determines clusters, and performs gene expression analysis."
  },
  {
    "question": "What does `cellranger count` use Chromium cellular barcodes for?",
    "answer": "`cellranger count` uses Chromium cellular barcodes to generate feature-barcode matrices, determine clusters, and perform gene expression analysis."
  },
  {
    "question": "Can `cellranger count` process input from multiple sequencing runs?",
    "answer": "Yes, the `cellranger count` pipeline can take input from multiple sequencing runs on the same GEM well."
  },
  {
    "question": "Does `cellranger count` process Feature Barcode data?",
    "answer": "Yes, `cellranger count` processes Feature Barcode data alongside Gene Expression reads."
  },
  {
    "question": "How would you run the `cellranger count` pipeline with specific parameters?",
    "answer": "An example command to run `cellranger count` is: `cellranger count --id=$ID --transcriptome=refdata-gex-GRCh38-2020-A --fastqs=$FASTQS --sample=mysample --create-bam=true --localcores=8 --localmem=64`."
  },
  {
    "question": "Where can users find guidance on choosing the appropriate Cell Ranger pipeline?",
    "answer": "Users should refer to the 'Choosing a pipeline' page for guidance on selecting the appropriate pipeline for their needs."
  },
  {
    "question": "What is the function of `cellranger aggr`?",
    "answer": "`cellranger aggr` aggregates outputs from multiple `cellranger count` runs, normalizes them to the same sequencing depth, and then recomputes feature-barcode matrices and analysis on the combined data."
  },
  {
    "question": "What is the purpose of the `cellranger aggr` pipeline?",
    "answer": "The `aggr` pipeline can combine data from multiple samples into an experiment-wide feature-barcode matrix and analysis."
  },
  {
    "question": "What columns are required in the CSV file for `cellranger aggr`?",
    "answer": "The CSV file for `cellranger aggr` needs `sample_id` and `molecule_h5` columns."
  },
  {
    "question": "How do you run the `cellranger aggr` pipeline?",
    "answer": "You can run `cellranger aggr` using a command like: `cellranger aggr --id=$ID --csv=aggr.csv`."
  }
]