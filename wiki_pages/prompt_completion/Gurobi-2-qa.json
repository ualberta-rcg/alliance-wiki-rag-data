[
  {
    "question": "How do I start an interactive Gurobi shell session on a cluster?",
    "answer": "First, request an interactive allocation using `salloc` (e.g., `salloc --time=1:00:0 --cpus-per-task=8 --mem=1G --account=def-xyz`), then load the Gurobi module with `module load gurobi`, and finally launch the shell with `gurobi.sh`."
  },
  {
    "question": "How can I read a model file within the Gurobi interactive shell?",
    "answer": "Use the command `m = read('/path/to/your/model.mps')` within the Gurobi interactive shell, replacing the path with your model's location."
  },
  {
    "question": "How do I set optimization parameters like threads or method in the Gurobi interactive shell?",
    "answer": "You can set parameters like `Threads` or `Method` using commands such as `m.Params.Threads = 8` and `m.Params.Method = 2`."
  },
  {
    "question": "How do I optimize a model in the Gurobi interactive shell?",
    "answer": "After loading a model and setting parameters, execute `m.optimize()` to run the optimization."
  },
  {
    "question": "How can I record Gurobi API calls?",
    "answer": "You can record API calls by creating a `gurobi.env` file containing `Record 1` (e.g., `echo \"Record 1\" > gurobi.env`) before running Gurobi commands."
  },
  {
    "question": "Where can I find documentation on recording Gurobi API calls?",
    "answer": "Documentation on recording API calls is available at https://www.gurobi.com/documentation/8.1/refman/recording_api_calls.html."
  },
  {
    "question": "How do I replay recorded Gurobi API calls?",
    "answer": "To replay recorded API calls, use the command `gurobi_cl recording000.grbr`, replacing `recording000.grbr` with the name of your recording file."
  },
  {
    "question": "How do I submit a Gurobi job to the Slurm queue?",
    "answer": "Once your Slurm script for the Gurobi problem is prepared, submit it using the command `sbatch script-name.sh`."
  },
  {
    "question": "What command checks the status of jobs in the Slurm queue?",
    "answer": "You can check the status of your jobs in the queue by running the `sq` command."
  },
  {
    "question": "What Gurobi command-line tool is used to solve problems directly in a Slurm script?",
    "answer": "The `gurobi_cl` command-line tool is used to solve problems directly in a Slurm script."
  },
  {
    "question": "How are parameters passed to `gurobi_cl` in a Slurm script?",
    "answer": "Parameters can be passed directly to `gurobi_cl` using simple command-line arguments, for example, `Threads=$SLURM_CPUS_ON_NODE Method=2 ResultFile=coins.sol`."
  },
  {
    "question": "Which environment modules are typically loaded for Gurobi version 9.5.0 in a batch script?",
    "answer": "For Gurobi version 9.5.0, you would typically load `StdEnv/2020` and `gurobi/9.5.0`."
  },
  {
    "question": "Where can I find resources for selecting optimal Gurobi parameters?",
    "answer": "You can refer to the 'Performance and Parameters' and 'Algorithms and Search' sections in the Gurobi Knowledge Base, as well as the extensive online Gurobi documentation."
  },
  {
    "question": "What is the purpose of the `gurobi.env` file in the Python example Slurm script?",
    "answer": "The `gurobi.env` file is dynamically generated to set the `Threads` parameter equal to the number of cores allocated to the job, preventing Gurobi from defaulting to using all physical cores on the node."
  },
  {
    "question": "Why is it important to set Gurobi threads explicitly in a Python job script?",
    "answer": "It is important to set Gurobi threads explicitly because, by default, Gurobi might start as many threads as there are physical cores on the compute node, potentially slowing down the job and negatively impacting other users."
  },
  {
    "question": "Which environment modules are typically loaded for Gurobi version 11.0.1 in a Python batch script?",
    "answer": "For Gurobi version 11.0.1, you would typically load `StdEnv/2023` and `gurobi/11.0.1`."
  }
]