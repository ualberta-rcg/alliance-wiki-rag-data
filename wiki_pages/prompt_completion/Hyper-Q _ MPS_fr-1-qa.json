[
  {
    "question": "What is Hyper-Q?",
    "answer": "Hyper-Q, also known as Multi-Process Service (MPS), is a feature of NVIDIA GPUs compatible with CUDA versions 3.5 and newer."
  },
  {
    "question": "Where can I find more information about CUDA models and capabilities for NVIDIA GPUs?",
    "answer": "Information about CUDA models, architectures, and compute capabilities can be found in the Nvidia Tesla Wikipedia table."
  },
  {
    "question": "What is the primary design goal of the MPS execution architecture?",
    "answer": "The MPS execution architecture is designed to enable the transparent use of parallel and cooperative CUDA applications by leveraging Hyper-Q features on NVIDIA GPUs (Kepler and later)."
  },
  {
    "question": "How does Hyper-Q improve GPU performance?",
    "answer": "Hyper-Q improves performance by allowing CUDA kernels to be processed simultaneously on a single GPU, especially when the GPU's computing capacity is underutilized by a single process."
  },
  {
    "question": "What performance benefit has MPS demonstrated in tests?",
    "answer": "Tests have shown that MPS can increase the number of floating-point operations per second (flops) even when the GPU is shared among unrelated CPU processes."
  },
  {
    "question": "For which type of CUDA applications is MPS particularly suitable?",
    "answer": "MPS is ideal for CUDA applications that handle problems whose relatively small size prevents them from fully utilizing modern GPUs with thousands of cores."
  },
  {
    "question": "Is MPS enabled by default?",
    "answer": "No, MPS is not activated by default."
  },
  {
    "question": "How do you enable MPS before starting a CUDA application?",
    "answer": "You need to launch the following commands: `export CUDA_MPS_PIPE_DIRECTORY=/tmp/nvidia-mps`, `export CUDA_MPS_LOG_DIRECTORY=/tmp/nvidia-log`, and `nvidia-cuda-mps-control -d`."
  },
  {
    "question": "Under what conditions can MPS be used?",
    "answer": "MPS can be used if you have more than one CPU thread accessing the GPU, such as when running a hybrid MPI/CUDA or OpenMP/CUDA application, or multiple sequential CUDA applications (GPU farming)."
  },
  {
    "question": "Why is MPS useful for GPU farming?",
    "answer": "MPS is very useful for executing multiple instances of the same CUDA application when the application itself is too small to fully occupy a modern GPU."
  },
  {
    "question": "What is a prerequisite for executing multiple CUDA application instances using MPS for GPU farming?",
    "answer": "MPS allows the execution of multiple instances, provided that the GPU memory is sufficient."
  },
  {
    "question": "What is the purpose of the '&' symbol in the example GPU farming script?",
    "answer": "The '&' symbol on the code execution line moves processes to the background."
  },
  {
    "question": "What does the 'wait' command do in the example GPU farming script?",
    "answer": "The 'wait' command at the end of the script ensures that the GPU farm continues until all background processes are completed."
  },
  {
    "question": "How is MPS configured within the provided GPU farming script example?",
    "answer": "The script sets `CUDA_MPS_LOG_DIRECTORY` to `$SLURM_TMPDIR/tmp` and starts the MPS control daemon using `nvidia-cuda-mps-control -d`."
  }
]