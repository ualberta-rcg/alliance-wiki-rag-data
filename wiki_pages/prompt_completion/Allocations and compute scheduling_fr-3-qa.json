[
  {
    "question": "What information must be provided for a GPU request during the resource allocation competition?",
    "answer": "Any GPU request must specify the preferred GPU model for the project."
  },
  {
    "question": "How are Reference GPU Units (UGR) calculated in the CCDB form?",
    "answer": "The quantity of Reference GPU Units (UGR) is automatically calculated from the requested GPU-year quantity per project year."
  },
  {
    "question": "Can you give an example of how UGRs are calculated for a GPU allocation?",
    "answer": "If you request 13 GPU-years of the A100-40gb model on *narval-gpu*, the corresponding UGR quantity would be 13 * 4.0 = 52."
  },
  {
    "question": "What happens if a GPU allocation needs to be transferred to a different cluster?",
    "answer": "If your allocation needs to be moved to another cluster, the committee will allocate GPU-years to that new resource while keeping the same quantity of UGRs."
  },
  {
    "question": "What is the primary principle for determining the priority of computing tasks?",
    "answer": "The governing principle is based on the resources that a task makes *unavailable to other users*, rather than the resources actually used."
  },
  {
    "question": "When do unused cores impact the priority calculation for tasks?",
    "answer": "Unused cores often influence priority calculation when a task requests multiple cores but only uses a portion of them during execution."
  },
  {
    "question": "Why does the number of cores requested by a task affect the prioritization of subsequent tasks?",
    "answer": "The number of cores requested by a task impacts the prioritization of subsequent tasks because it blocks the unused cores during its execution."
  },
  {
    "question": "How can unused cores arise due to memory demands?",
    "answer": "If a task requires more memory than requested per core (e.g., a task asks for one core and 8GB of memory on a cluster where each core has 4GB), it blocks 2 cores, making the second core unavailable to other research groups."
  },
  {
    "question": "What constitutes a 'core equivalent' or 'bundle' as defined by the scheduler?",
    "answer": "A 'core equivalent' or 'bundle' consists of a single core and a certain amount of memory considered to be associated with that core."
  },
  {
    "question": "What is the typical memory-to-core ratio on the clusters?",
    "answer": "Our clusters predominantly offer cores with 4GB of memory, which is the most common memory-to-core ratio for node types."
  },
  {
    "question": "How is resource usage by a task accounted for in terms of memory per core?",
    "answer": "Resource usage by a task is accounted for at a rate of 4GB per core."
  },
  {
    "question": "When are cores specifically accounted for in core equivalent calculation, assuming a 1 core/4GB memory bundle?",
    "answer": "Cores are accounted for if a group uses more cores than memory, meaning more than the 1 core/4GB ratio."
  },
  {
    "question": "Explain an example where cores are counted for priority when a task requests 2 cores and 2GB per core.",
    "answer": "If 2 cores and 2GB per core are requested (total 4GB memory), the task requires 2 core equivalents for the cores but only one bundle for the memory. The scheduler evaluates this demand as 2 core equivalents for priority calculation."
  },
  {
    "question": "When is memory specifically accounted for in core equivalent calculation, assuming a 1 core/4GB memory bundle?",
    "answer": "Memory is accounted for if a group uses more memory than the 1 core/4GB ratio."
  },
  {
    "question": "Explain an example where memory is counted for priority when a task requests 2 cores and 5GB per core.",
    "answer": "If 2 cores and 5GB per core are requested (total 10GB memory), the task requires 2.5 bundles for the cores (based on memory). The scheduler evaluates this demand as 2.5 core equivalents for priority calculation."
  }
]