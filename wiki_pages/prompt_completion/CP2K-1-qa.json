[
  {
    "question": "What is CP2K?",
    "answer": "CP2K is a quantum chemistry and solid state physics software package that can perform atomistic simulations."
  },
  {
    "question": "What types of systems can CP2K simulate?",
    "answer": "CP2K can perform atomistic simulations of solid state, liquid, molecular, periodic, material, crystal, and biological systems."
  },
  {
    "question": "What is the latest installed version of CP2K?",
    "answer": "The latest version installed is CP2K 8.2."
  },
  {
    "question": "How do you load the GCC-compiled version of CP2K 8.2?",
    "answer": "You can load it using the command `module load StdEnv/2020 gcc/9.3.0 openmpi/4.0.3 cp2k/8.2`."
  },
  {
    "question": "Is an Intel-compiled version of CP2K available?",
    "answer": "Yes, an Intel-compiled version is available, but it is considered less stable and sometimes crashes."
  },
  {
    "question": "How do you load the Intel-compiled version of CP2K 8.2?",
    "answer": "You can load it using the command `module load StdEnv/2020 intel/2020.1.217 openmpi/4.0.3 cp2k/8.2`."
  },
  {
    "question": "Where can I find the static calculation example for CP2K?",
    "answer": "The static calculation example is from the CP2K website, specifically the `howto:static_calculation` page."
  },
  {
    "question": "What commands are used to download and extract the example files for a CP2K static calculation?",
    "answer": "First, use `wget https://www.cp2k.org/_media/static_calculation.tgz`, then `tar xvfz static_calculation.tgz`, and finally `cd static_calculation/sample_output_no_smearing`."
  },
  {
    "question": "After extracting the example files, which directory should I enter?",
    "answer": "You should enter the `static_calculation/sample_output_no_smearing` directory."
  },
  {
    "question": "What are the SBATCH parameters specified in the example `mpi_job.sh` script?",
    "answer": "The script specifies `--account=def-someuser`, `--ntasks=4`, `--mem-per-cpu=4G`, and `--time=0-00:15`."
  },
  {
    "question": "Which modules are loaded in the example `mpi_job.sh` script?",
    "answer": "The script loads `StdEnv/2020`, `gcc/9.3.0`, `openmpi/4.0.3`, and `cp2k/8.2`."
  },
  {
    "question": "How is CP2K executed within the example `mpi_job.sh` script?",
    "answer": "CP2K is executed using the command `srun cp2k.popt -o Si_bulk8.out Si_bulk8.inp`."
  },
  {
    "question": "How do you submit the `mpi_job.sh` script?",
    "answer": "You submit the job by executing `sbatch mpi_job.sh`."
  },
  {
    "question": "How can you check if a CP2K job has completed?",
    "answer": "You can run the command `sq`. If your job is no longer listed, it means it has completed."
  },
  {
    "question": "Where is the primary output of CP2K located for the example static calculation?",
    "answer": "The primary output of CP2K will be located in the file `Si_bulk8.out`."
  },
  {
    "question": "What is the expected state of the `slurm-*.out` file if a CP2K calculation completes without error?",
    "answer": "The `slurm-*.out` file should be empty if the calculation completed without error."
  },
  {
    "question": "What CP2K executables are included in version 8.2 and later installations?",
    "answer": "CP2K version 8.2 and later includes both the MPI executable `cp2k.popt` and the OpenMP/MPI executable `cp2k.psmp`."
  },
  {
    "question": "What is the potential benefit of using `cp2k.psmp` over `cp2k.popt`?",
    "answer": "`cp2k.psmp` is an OpenMP/MPI executable that may give better performance for some calculations compared to the MPI-only `cp2k.popt` by utilizing threads."
  },
  {
    "question": "What performance increase was observed with `cp2k.psmp` in a benchmark test?",
    "answer": "A 10% performance increase was observed for the QS/H2O-512.inp benchmark when using 2 threads per MPI process with `cp2k.psmp`."
  },
  {
    "question": "What should users consider before choosing to use `cp2k.psmp`?",
    "answer": "Performance changes when threads are used are highly problem dependent, and `cp2k.psmp` may even be slower for some cases. Users must benchmark their code to choose the right option."
  },
  {
    "question": "What are the SBATCH parameters for the example `openmp_mpi_job.sh` script?",
    "answer": "The script specifies `--account=def-someuser`, `--nodes=2`, `--ntasks=40`, `--cpus-per-task=2`, `--mem-per-cpu=3G`, and `--time=0-00:59`."
  },
  {
    "question": "How is the `OMP_NUM_THREADS` environment variable set in the `openmp_mpi_job.sh` script?",
    "answer": "`OMP_NUM_THREADS` is set to the value of `$SLURM_CPUS_PER_TASK` by using `export OMP_NUM_THREADS=$SLURM_CPUS_PER_TASK`."
  },
  {
    "question": "How is the `cp2k.psmp` executable run in the example `openmp_mpi_job.sh` script?",
    "answer": "It is run using `srun --cpus-per-task=$OMP_NUM_THREADS cp2k.psmp -o H2O-512.out H2O-512.inp`."
  }
]