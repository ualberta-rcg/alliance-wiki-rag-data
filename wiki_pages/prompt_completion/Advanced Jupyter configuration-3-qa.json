[
  {
    "question": "What is an important step before using a newly configured Julia kernel?",
    "answer": "You must start or restart a new JupyterLab session before using the Julia kernel."
  },
  {
    "question": "Where can I find more information about IJulia?",
    "answer": "More information is available in the IJulia documentation at https://github.com/JuliaLang/IJulia.jl."
  },
  {
    "question": "Where are Julia packages required to be installed from?",
    "answer": "Julia packages are required to be installed from a login node."
  },
  {
    "question": "What is the first step to install additional Julia packages?",
    "answer": "First, ensure the same Julia module is loaded using `module load julia`."
  },
  {
    "question": "How do you install a Julia package like `Glob`?",
    "answer": "You can install it by running `echo -e 'using Pkg\\nPkg.add(\"Glob\")' | julia` in the terminal."
  },
  {
    "question": "Are newly installed Julia packages immediately usable with the Julia kernel?",
    "answer": "Yes, newly installed Julia packages should already be usable in a notebook executed by the Julia kernel."
  },
  {
    "question": "Where should a Python virtual environment and a custom Python kernel for JupyterLab be configured?",
    "answer": "They should be configured in a terminal with an active session on the remote server."
  },
  {
    "question": "When is it necessary to start from a clean Bash environment for Python kernel configuration?",
    "answer": "This is only required if you are using the Jupyter Terminal via JupyterHub for the creation and configuration of the Python kernel, using the command `env -i HOME=$HOME bash -l`."
  },
  {
    "question": "How do you load a Python module to set up a Python virtual environment?",
    "answer": "Use the command `module load python`."
  },
  {
    "question": "How do you create a new Python virtual environment for Jupyter?",
    "answer": "Use the command `virtualenv --no-download $HOME/jupyter_py3`."
  },
  {
    "question": "How do you activate a newly created Python virtual environment?",
    "answer": "Use the command `source $HOME/jupyter_py3/bin/activate`."
  },
  {
    "question": "What folder needs to be created for installing Jupyter kernels, and how?",
    "answer": "The common `kernels` folder, used by all kernels, needs to be created using `mkdir -p ~/.local/share/jupyter/kernels`."
  },
  {
    "question": "How do you install the `ipykernel` library for a Python kernel?",
    "answer": "Run `pip install --no-index ipykernel`."
  },
  {
    "question": "How do you generate the kernel spec file for a Python kernel?",
    "answer": "Use the command `python -m ipykernel install --user --name <unique_name> --display-name \"Python 3.x Kernel\"`, replacing `<unique_name>` with a unique identifier."
  },
  {
    "question": "What is an important step after configuring a Python kernel?",
    "answer": "Start or restart a new JupyterLab session before using the Python kernel."
  },
  {
    "question": "Where can I find more information about `ipykernel`?",
    "answer": "More information is available in the `ipykernel` documentation at http://ipython.readthedocs.io/en/stable/install/kernel_install.html."
  },
  {
    "question": "How do you install a Python library like `numpy` in the virtual environment?",
    "answer": "Use `pip install --no-index numpy`."
  },
  {
    "question": "Are newly installed Python libraries immediately usable with the Python 3.x Kernel?",
    "answer": "Yes, they can be imported in any notebook using the `Python 3.x Kernel`."
  },
  {
    "question": "What are the prerequisites for configuring an R kernel?",
    "answer": "The prerequisites include a Python virtual environment and a `kernels` folder, following the initial instructions for Python kernel setup (though no Python kernel is required)."
  },
  {
    "question": "Why must R kernel configuration be done on a login node?",
    "answer": "Because installing R packages requires access to CRAN (Comprehensive R Archive Network), which necessitates a remote shell session on a login node."
  },
  {
    "question": "How do you load an R module for R kernel configuration?",
    "answer": "Use the command `module load r/4.1`."
  },
  {
    "question": "How do you install R kernel dependencies like `crayon`, `pbdZMQ`, and `devtools`?",
    "answer": "Start the R shell with `R --no-save` then run `install.packages(c('crayon', 'pbdZMQ', 'devtools'), repos='http://cran.us.r-project.org')`."
  },
  {
    "question": "What command installs the R kernel itself?",
    "answer": "From the R shell, run `devtools::install_github(paste0('IRkernel/', c('repr', 'IRdisplay', 'IRkernel')))`."
  },
  {
    "question": "What command installs the R kernel spec file?",
    "answer": "The command `IRkernel::installspec()` installs the R kernel spec file."
  },
  {
    "question": "What must be done before using a newly installed R kernel?",
    "answer": "You must start or restart a new JupyterLab session."
  },
  {
    "question": "Where can I find more information about the IRkernel?",
    "answer": "More information is available in the IRkernel documentation at https://irkernel.github.io/docs/."
  },
  {
    "question": "Can R packages be installed directly from Jupyter notebooks?",
    "answer": "No, R packages cannot be installed from notebooks because there is no access to CRAN."
  },
  {
    "question": "What module should be loaded before installing more R packages?",
    "answer": "The same R module, e.g., `r/4.1`, should be loaded."
  },
  {
    "question": "How do you install an R package like `doParallel` from the R shell?",
    "answer": "Start the R shell with `R --no-save` then run `install.packages('doParallel', repos='http://cran.us.r-project.org')`."
  },
  {
    "question": "When should notebooks be run as Python scripts?",
    "answer": "Notebooks should be run as Python scripts for longer runs or analysis, requiring submission as a non-interactive job."
  },
  {
    "question": "What needs to be done on the login node before converting notebooks to Python scripts?",
    "answer": "A virtual environment must be created and activated, then `nbconvert` installed if not already available, using `pip install --no-index nbconvert`."
  },
  {
    "question": "How do you convert a Jupyter notebook to a Python script?",
    "answer": "Use the command `jupyter nbconvert --to python mynotebook.ipynb`."
  },
  {
    "question": "How do you execute a converted Python script notebook in a submission script?",
    "answer": "Run `python mynotebook.py` in your submission script."
  },
  {
    "question": "How do you submit a non-interactive job?",
    "answer": "Submit the job using `sbatch my-submit.sh`."
  }
]