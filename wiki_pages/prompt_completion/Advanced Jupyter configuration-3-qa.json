[
  {
    "question": "What are the prerequisites for configuring an R kernel?",
    "answer": "The configuration of an R kernel depends on a Python virtual environment and a `kernels` folder."
  },
  {
    "question": "Where should an R kernel be configured, and why?",
    "answer": "The R kernel must be configured in a remote shell session on a login node because the installation of R packages requires access to CRAN."
  },
  {
    "question": "How do you load an R module to configure the R kernel?",
    "answer": "You load an R module by running `module load r/4.1` after activating your Python virtual environment."
  },
  {
    "question": "What are the R kernel dependencies that need to be installed?",
    "answer": "The R kernel dependencies are `crayon`, `pbdZMQ`, and `devtools`."
  },
  {
    "question": "How do you install the R kernel dependencies?",
    "answer": "Start the R shell with `R --no-save`, then execute `install.packages(c('crayon', 'pbdZMQ', 'devtools'), repos='http://cran.us.r-project.org')`."
  },
  {
    "question": "Where are R kernel packages typically installed locally?",
    "answer": "Packages should be installed in a local directory like `~/R/x86_64-pc-linux-gnu-library/4.1`."
  },
  {
    "question": "How long does it take to install the R kernel dependencies?",
    "answer": "It will take up to 10 minutes."
  },
  {
    "question": "How do you install the R kernel itself after installing dependencies?",
    "answer": "From within the R shell, run `devtools::install_github(paste0('IRkernel/', c('repr', 'IRdisplay', 'IRkernel')))`."
  },
  {
    "question": "How do you install the R kernel spec file?",
    "answer": "From within the R shell, run `IRkernel::installspec()`."
  },
  {
    "question": "What is an important step after configuring the R kernel?",
    "answer": "Start or restart a new JupyterLab session before using the R kernel."
  },
  {
    "question": "Where can I find more documentation about the IRkernel?",
    "answer": "More information can be found in the IRkernel documentation at https://irkernel.github.io/docs/."
  },
  {
    "question": "Can additional R packages be installed from Jupyter notebooks?",
    "answer": "No, the installation of R packages cannot be done from notebooks because there is no access to CRAN."
  },
  {
    "question": "How do you install additional R packages like `doParallel`?",
    "answer": "First, make sure the same R module is loaded (e.g., `module load r/4.1`). Then, start the R shell with `R --no-save` and run `install.packages('doParallel', repos='http://cran.us.r-project.org')`."
  },
  {
    "question": "When should Jupyter notebooks be run as Python scripts?",
    "answer": "Notebooks should be run as Python scripts for longer runs or analysis, which require submitting a non-interactive job."
  },
  {
    "question": "How do you install `nbconvert` for running notebooks as Python scripts?",
    "answer": "From the login node, create and activate a virtual environment, then run `pip install --no-index nbconvert`."
  },
  {
    "question": "What command is used to convert a Jupyter notebook to a Python script?",
    "answer": "Use the command `jupyter nbconvert --to python mynotebook.ipynb`."
  },
  {
    "question": "How do you execute a converted Python script (from a notebook) within a job submission script?",
    "answer": "In your submission script, run the converted notebook with `python mynotebook.py`."
  },
  {
    "question": "How do you submit a non-interactive job with a Python script converted from a notebook?",
    "answer": "After creating your submission script (e.g., `my-submit.sh`), submit your non-interactive job using `sbatch my-submit.sh`."
  }
]