[
  {
    "question": "What is Python?",
    "answer": "Python is an interpreted programming language with a design philosophy stressing the readability of code. It has simple and expressive syntax, and an extensive, easy-to-use standard library."
  },
  {
    "question": "How can Python's capabilities be extended?",
    "answer": "The capabilities of Python can be extended with packages developed by third parties."
  },
  {
    "question": "Who is responsible for installing third-party Python packages?",
    "answer": "In general, it is left up to individual users and groups to install third-party packages in their own directories to simplify operations."
  },
  {
    "question": "Should I use the default Python version available on the clusters?",
    "answer": "No, the default Python version available when you log into the clusters is generally not the one you should use, especially if you need to install any Python packages."
  },
  {
    "question": "How can I find out which Python versions are available on the system?",
    "answer": "To discover the versions of Python available, you can use the command `module avail python`."
  },
  {
    "question": "How do I load a specific Python version, for example, Python 3.10?",
    "answer": "You can load the version of your choice using `module load`. For example, to load Python 3.10, you can use the command `module load python/3.10`."
  },
  {
    "question": "For which Python versions are prebuilt packages (wheels) provided?",
    "answer": "Prebuilt Python packages (wheels) are provided only for the 3 most recent Python versions available on the systems."
  },
  {
    "question": "What are the consequences of trying to install packages with older versions of Python?",
    "answer": "Trying to install packages with older versions of Python can result in dependency issues, as many packages only support the latest few Python 3.x versions."
  },
  {
    "question": "When did the system stop building wheels for Python 3.7?",
    "answer": "The system stopped building wheels for Python 3.7 in February 2022."
  },
  {
    "question": "When did the system stop building wheels for Python 2.7?",
    "answer": "The system stopped building wheels for Python 2.7 in January 2020."
  },
  {
    "question": "What Python packages are included in the `scipy-stack` module?",
    "answer": "The `scipy-stack` module includes NumPy, SciPy, Matplotlib (with dateutil and pytz), IPython (with pyzmq and tornado), pandas, Sympy, and nose."
  },
  {
    "question": "How do I use packages from the `scipy-stack` module?",
    "answer": "To use any `scipy-stack` packages, first load a Python version of your choice, and then run `module load scipy-stack`."
  },
  {
    "question": "How can I list the complete set of packages and their version numbers within a specific `scipy-stack` module version?",
    "answer": "You can get a complete list of the packages contained in `scipy-stack`, along with their version numbers, by running `module spider scipy-stack/2020a` (replacing `2020a` with the desired version)."
  },
  {
    "question": "What tool is provided to create Python virtual environments?",
    "answer": "The `virtualenv` tool is provided with each version of Python to create virtual environments."
  },
  {
    "question": "What are the benefits of using virtual environments?",
    "answer": "Virtual environments allow users to easily install Python packages, install many versions of the same package, or compartmentalize a Python installation according to the needs of a specific project."
  },
  {
    "question": "Where should Python virtual environments generally be created?",
    "answer": "Usually, you should create your Python virtual environment(s) in your `/home` directory or in one of your `/project` directories."
  },
  {
    "question": "Is it recommended to create virtual environments under `$SCRATCH`?",
    "answer": "No, it is not recommended to create virtual environments under `$SCRATCH` as they may get partially deleted. It is advised to create them inside your job."
  },
  {
    "question": "What is the command to create a virtual environment named `ENV`?",
    "answer": "After loading a Python version, and optionally `scipy-stack`, you can create a virtual environment named `ENV` using the command `virtualenv --no-download ENV`."
  },
  {
    "question": "How do you activate a newly created virtual environment?",
    "answer": "Once a virtual environment has been created, it must be activated using `source ENV/bin/activate`."
  },
  {
    "question": "How do you exit an activated virtual environment?",
    "answer": "To exit an activated virtual environment, simply enter the command `deactivate`."
  },
  {
    "question": "What are the steps to reuse an existing virtual environment?",
    "answer": "To reuse an existing virtual environment, first load the same environment modules that were loaded during its creation (e.g., `module load python scipy-stack`), and then activate the environment using `source ENV/bin/activate`."
  }
]