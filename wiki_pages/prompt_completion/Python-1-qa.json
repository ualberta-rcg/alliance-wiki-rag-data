[
  {
    "question": "What is Python?",
    "answer": "Python is an interpreted programming language with a design philosophy stressing the readability of code, known for its simple and expressive syntax and an extensive, easy-to-use standard library."
  },
  {
    "question": "How can Python's capabilities be extended?",
    "answer": "Python's capabilities can be extended with packages developed by third parties."
  },
  {
    "question": "Where should individual users typically install third-party Python packages?",
    "answer": "Individual users and groups are generally left to install third-party packages in their own directories to simplify operations."
  },
  {
    "question": "Is the default Python version on clusters recommended for installing packages?",
    "answer": "No, the default Python version available when you log into clusters is generally not the one you should use, especially if you need to install any Python packages."
  },
  {
    "question": "How should I choose which Python version to use on the clusters?",
    "answer": "You should try to find out which version of Python is required to run your programs and load the appropriate module. If you are not sure, it is reasonable to use the latest version available."
  },
  {
    "question": "What command is used to discover available Python versions?",
    "answer": "To discover the versions of Python available, use the command `module avail python`."
  },
  {
    "question": "How do you load a specific Python version module?",
    "answer": "You can load a specific Python version using `module load python/X.Y`, where `X.Y` represents the version, for example `3.13`."
  },
  {
    "question": "Which Python versions are supported by prebuilt packages in the wheelhouse?",
    "answer": "Prebuilt Python packages are provided in the wheelhouse only for the 3 most recent Python versions available on the systems."
  },
  {
    "question": "What can happen when trying to install packages with older Python versions?",
    "answer": "Trying to install packages with older versions of Python can result in dependencies issues."
  },
  {
    "question": "What is included in the `scipy-stack` module?",
    "answer": "The `scipy-stack` module includes NumPy, SciPy, Matplotlib (with dateutil, pytz), IPython (with pyzmq, tornado), pandas, Sympy, and nose."
  },
  {
    "question": "How do I load the `scipy-stack` module?",
    "answer": "If you want to use any packages from the SciPy stack, load a Python version of your choice and then run `module load scipy-stack`."
  },
  {
    "question": "How can I get a complete list of packages and their versions within a specific `scipy-stack` module version?",
    "answer": "To get a complete list of the packages contained in `scipy-stack`, along with their version numbers, run `module spider scipy-stack/2020a` (replacing `2020a` with whichever version you want to find out about)."
  },
  {
    "question": "What is `virtualenv` and what is its purpose?",
    "answer": "`virtualenv` is a tool provided with each Python version that allows users to create virtual environments for easy installation of Python packages, enabling multiple versions of the same package or compartmentalizing installations for specific projects."
  },
  {
    "question": "Where should Python virtual environments generally be created?",
    "answer": "Usually, you should create your Python virtual environment(s) in your `/home` directory or in one of your `/project` directories."
  },
  {
    "question": "Is it safe to create a virtual environment under `$SCRATCH`?",
    "answer": "No, you should not create your virtual environment under `$SCRATCH` as it may get partially deleted; instead, you should create it inside your job."
  },
  {
    "question": "What are the initial steps to create a Python virtual environment?",
    "answer": "To create a virtual environment, first load a Python version using `module load python/X.Y.Z`, optionally load `scipy-stack/X.Y.Z`, and then enter the command `virtualenv --no-download ENV`, where `ENV` is the directory name for your new environment."
  },
  {
    "question": "How do you activate a virtual environment after it's been created?",
    "answer": "Once the virtual environment has been created, it must be activated using the command `source ENV/bin/activate`."
  },
  {
    "question": "What should be done to pip after activating a new virtual environment?",
    "answer": "You should upgrade `pip` in the environment by running `pip install --no-index --upgrade pip`."
  },
  {
    "question": "How do you exit a virtual environment?",
    "answer": "To exit a virtual environment, simply enter the command `deactivate`."
  },
  {
    "question": "What steps are needed to use an existing virtual environment repeatedly?",
    "answer": "Each time you want to use an existing virtual environment, you need to load the same environment modules that were loaded when it was created (e.g., `module load python scipy-stack`) and then activate the environment with `source ENV/bin/activate`."
  }
]