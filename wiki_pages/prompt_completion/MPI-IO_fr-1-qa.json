[
  {
    "question": "Qu'est-ce que MPI-IO?",
    "answer": "MPI-IO est une famille de routines MPI, faisant partie du standard MPI-2, qui permet l'enregistrement d'op\u00e9rations parall\u00e8les de lecture et d'\u00e9criture."
  },
  {
    "question": "Quel est le principal avantage de MPI-IO?",
    "answer": "Le principal avantage de MPI-IO est de pouvoir, de mani\u00e8re simple et efficace, lire et \u00e9crire des donn\u00e9es r\u00e9parties sur plusieurs processus en un seul fichier commun."
  },
  {
    "question": "Quand MPI-IO est-il particuli\u00e8rement utile?",
    "answer": "MPI-IO est particuli\u00e8rement utile lorsque les donn\u00e9es manipul\u00e9es sont des vecteurs ou des matrices d\u00e9coup\u00e9s de mani\u00e8re structur\u00e9e entre les diff\u00e9rents processus."
  },
  {
    "question": "Quelle est la mani\u00e8re la plus simple de faire des op\u00e9rations de lecture et \u00e9criture en parall\u00e8le?",
    "answer": "La mani\u00e8re la plus simple est d'utiliser des d\u00e9placements ('offsets')."
  },
  {
    "question": "Comment peuvent \u00eatre r\u00e9alis\u00e9es les op\u00e9rations de lecture et \u00e9criture avec des d\u00e9placements?",
    "answer": "Elles peuvent \u00eatre r\u00e9alis\u00e9es en deux op\u00e9rations (MPI_File_seek suivie de MPI_File_read ou MPI_File_write) ou en une seule op\u00e9ration (MPI_File_read_at ou MPI_File_write_at)."
  },
  {
    "question": "Quelles fonctions MPI sont utilis\u00e9es pour des op\u00e9rations de lecture/\u00e9criture avec d\u00e9placement en une seule op\u00e9ration?",
    "answer": "Les fonctions MPI_File_read_at et MPI_File_write_at sont utilis\u00e9es."
  },
  {
    "question": "Comment le d\u00e9placement est-il habituellement calcul\u00e9 dans les op\u00e9rations parall\u00e8les avec offsets?",
    "answer": "Le d\u00e9placement est habituellement calcul\u00e9 en fonction du rang du processus."
  },
  {
    "question": "Dans l'exemple 'mpi_rw_at.c', comment un processus se positionne-t-il pour son \u00e9criture initiale?",
    "answer": "Il utilise MPI_File_seek(f, rank*BLOCKSIZE, MPI_SEEK_SET) pour aller \u00e0 la position correspondant \u00e0 son rang multipli\u00e9 par la taille d'un bloc."
  },
  {
    "question": "Comment l'exemple 'mpi_rw_at.c' assure-t-il que les processus \u00e9crivent des donn\u00e9es en alternance ('aabbccdd...')?",
    "answer": "Apr\u00e8s chaque \u00e9criture, un processus avance son pointeur de fichier de (size-1)*BLOCKSIZE octets en utilisant MPI_File_seek avec MPI_SEEK_CUR, laissant la place aux autres processus pour \u00e9crire."
  },
  {
    "question": "Quel est le concept des 'vues' dans MPI-IO?",
    "answer": "Avec les vues, chaque processus peut 'voir' une section du fichier comme si c'\u00e9tait le fichier entier, \u00e9liminant le besoin de calculer les d\u00e9placements manuellement."
  },
  {
    "question": "Quel est l'avantage des vues par rapport aux d\u00e9placements pour les op\u00e9rations de fichiers parall\u00e8les?",
    "answer": "L'avantage est qu'il n'est plus n\u00e9cessaire de calculer les d\u00e9placements dans le fichier en fonction du rang du processus, ce qui simplifie les op\u00e9rations et r\u00e9duit les conflits."
  },
  {
    "question": "Quelle fonction MPI est utilis\u00e9e pour d\u00e9finir une vue?",
    "answer": "La fonction MPI_File_set_view est utilis\u00e9e pour d\u00e9finir une vue."
  },
  {
    "question": "Pourquoi certains syst\u00e8mes de fichiers peuvent-ils ne pas supporter l'utilisation des vues sur des sections disjointes d'un fichier?",
    "answer": "Certains syst\u00e8mes de fichiers ne supportent pas les verrous sur les fichiers ('file locks'), ce qui peut rendre certaines op\u00e9rations avec les vues impossibles."
  },
  {
    "question": "Comment l'exemple 'mpi_view.c' g\u00e8re-t-il l'\u00e9criture de donn\u00e9es altern\u00e9es sans calcul explicite de d\u00e9placement pour chaque \u00e9criture?",
    "answer": "Il utilise MPI_File_set_view \u00e0 chaque it\u00e9ration de la boucle d'\u00e9criture pour red\u00e9finir la 'fen\u00eatre' de chaque processus \u00e0 l'emplacement correct (rank*BLOCKSIZE+i*size*BLOCKSIZE), puis effectue simplement MPI_File_write."
  },
  {
    "question": "Comment l'exemple 'mpi_view.c' pr\u00e9pare la lecture des donn\u00e9es pour chaque processus de mani\u00e8re s\u00e9rielle en utilisant une vue?",
    "answer": "Il cr\u00e9e un type de donn\u00e9es contigu (MPI_Type_contiguous) de taille NBRBLOCKS*BLOCKSIZE, puis utilise MPI_File_set_view pour d\u00e9finir une vue unique pour chaque processus \u00e0 son bloc de lecture de d\u00e9part (rank*NBRBLOCKS*BLOCKSIZE) avant d'appeler MPI_File_read en boucle."
  }
]