[
  {
    "question": "How do you enable the `setGID` permission on a parent directory?",
    "answer": "You can enable the `setGID` permission on a parent directory using the command `chmod g+s <directory_name>`."
  },
  {
    "question": "What is the effect of enabling the `setGID` permission on a directory for new files and directories?",
    "answer": "When the `setGID` bit is enabled for a directory, new files and directories created within that directory will inherit the same group ownership as the parent directory, and newly created subdirectories will also have `setGID` enabled."
  },
  {
    "question": "How can you identify if a directory has the `setGID` permission enabled from `ls -l` output?",
    "answer": "In the `ls -l` output, if `setGID` is enabled, the `x` permission on the group permissions will change to an `s` (e.g., `drwxrws---`)."
  },
  {
    "question": "What is the distinction between an 'S' and an 's' in the `ls -l` output for a directory with `setGID` permissions?",
    "answer": "A lowercase 's' indicates that `setGID` is enabled and the group has execute permission, while an uppercase 'S' indicates that `setGID` is enabled but the group's execute permission has been removed."
  },
  {
    "question": "Why is it important to differentiate between 'S' and 's' when checking `setGID` permissions?",
    "answer": "An uppercase 'S' means that execute permissions have been removed from the directory, which can lead to unexpected problems, such as other members in the group not being able to access files within that directory."
  },
  {
    "question": "Is the `setUID` bit functional on these clusters?",
    "answer": "No, the `setUID` bit is completely disabled on these clusters for security reasons."
  },
  {
    "question": "What mechanism defines default filesystem permissions on a Linux system?",
    "answer": "Default filesystem permissions are defined by the `umask`."
  },
  {
    "question": "How do you display the current `umask` value in your session?",
    "answer": "You can display the current `umask` value by running the command `umask -S`."
  },
  {
    "question": "What do the default `umask -S` results, like `u=rwx,g=rx,o=`, signify on these clusters?",
    "answer": "This `umask` means that, by default, new files you create can be read, written, and executed by yourself, read and executed by members of the file's group, and cannot be accessed by other people."
  },
  {
    "question": "Does changing the `umask` value affect the permissions of existing files?",
    "answer": "No, the `umask` only applies to new files; changing it does not alter the access permissions of existing files."
  },
  {
    "question": "How can a user set their own `umask` value?",
    "answer": "A user can set their own `umask` value by calling the command `umask <value>` either in a session or in their `.bashrc` file."
  },
  {
    "question": "What does a `umask` value of `077` imply for file permissions?",
    "answer": "A `umask` value of `077` means that files are readable, writable, and executable by the owner only."
  },
  {
    "question": "Which `umask` value results in files being readable and executable by the owner and the group, but writable only by the owner?",
    "answer": "A `umask` value of `027` achieves this, making files readable and executable by the owner and the group, but writable only by the owner."
  }
]