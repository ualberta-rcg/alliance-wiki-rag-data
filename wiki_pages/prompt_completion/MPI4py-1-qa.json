[
  {
    "question": "What is MPI for Python (mpi4py)?",
    "answer": "MPI for Python (mpi4py) provides Python bindings for the Message Passing Interface (MPI) standard."
  },
  {
    "question": "What is the primary function of mpi4py?",
    "answer": "It allows Python applications to exploit multiple processors on workstations, clusters, and supercomputers."
  },
  {
    "question": "How is mpi4py typically made available, compared to other Python packages?",
    "answer": "mpi4py is available as a module, and not from the wheelhouse as typical Python packages are."
  },
  {
    "question": "How can I find available versions of the mpi4py module?",
    "answer": "You can find available versions using the command `module spider mpi4py`."
  },
  {
    "question": "How do I get more information about a specific mpi4py version?",
    "answer": "You can find more information on a specific version by using the command `module spider mpi4py/X.Y.Z`, replacing `X.Y.Z` with the exact desired version, for instance `4.0.0`."
  },
  {
    "question": "What is the first step to run an mpi4py \"Hello World\" test?",
    "answer": "The first step is to run a short interactive job using the command `salloc --account=<your account> --ntasks=5`."
  },
  {
    "question": "Which modules should be loaded for the mpi4py \"Hello World\" example?",
    "answer": "You should load `mpi4py/4.0.0` and `python/3.12` using the command `module load mpi4py/4.0.0 python/3.12`."
  },
  {
    "question": "How do you execute the mpi4py \"Hello World\" test?",
    "answer": "You can run the test using the command `srun python -m mpi4py.bench helloworld`."
  },
  {
    "question": "How were the jobs distributed in the mpi4py \"Hello World\" example output?",
    "answer": "Two nodes (node1 and node3) were allocated, and the jobs were distributed across these available resources."
  },
  {
    "question": "What is the initial step to fulfill an mpi4py dependency if a Python virtual environment is active?",
    "answer": "Deactivate any Python virtual environment using the command `test $VIRTUAL_ENV && deactivate`."
  },
  {
    "question": "What is the recommended sequence of actions when mpi4py is a package dependency and you are using a virtual environment?",
    "answer": "If you had a virtual environment activated, it is important to deactivate it first, then load the mpi4py module, before reactivating your virtual environment."
  },
  {
    "question": "How can you check if mpi4py is visible by `pip` after loading its module?",
    "answer": "You can check by running the command `pip list | grep mpi4py`."
  },
  {
    "question": "How do you verify if the loaded mpi4py module is accessible by your current Python environment?",
    "answer": "You can check this by running `python -c 'import mpi4py'`. If no errors are raised, it is accessible."
  },
  {
    "question": "What is the final step after loading the mpi4py module when it's a dependency for another package?",
    "answer": "The final step is to create a virtual environment and install your packages."
  },
  {
    "question": "How can MPI jobs be run on a system?",
    "answer": "MPI jobs can be run distributed across multiple nodes or cores."
  },
  {
    "question": "What is the first step when running mpi4py jobs on CPUs?",
    "answer": "Write your Python code, for instance, a script for broadcasting a NumPy array."
  },
  {
    "question": "Where can one find the example code for broadcasting a NumPy array using mpi4py?",
    "answer": "The example code is based on the mpi4py tutorial available at `https://mpi4py.readthedocs.io/en/stable/tutorial.html#running-python-scripts-with-mpi`."
  },
  {
    "question": "What is the second step for running mpi4py jobs on CPUs, after writing the Python code?",
    "answer": "Write your submission script."
  },
  {
    "question": "Which SBATCH parameter specifies the number of tasks/processes for a distributed mpi4py job?",
    "answer": "The `#SBATCH --ntasks=4` parameter (adjusted as needed) specifies the number of tasks/processes to run."
  },
  {
    "question": "Which SBATCH parameter sets the memory needed per process for an mpi4py job?",
    "answer": "The `#SBATCH --mem-per-cpu=4G` parameter (adjusted as needed) sets the memory per process."
  },
  {
    "question": "Where can further information be found for running mpi4py jobs on cores across the system?",
    "answer": "Further information can be found at `https://docs.alliancecan.ca/wiki/Advanced_MPI_scheduling#Few_cores,_any_number_of_nodes`."
  }
]