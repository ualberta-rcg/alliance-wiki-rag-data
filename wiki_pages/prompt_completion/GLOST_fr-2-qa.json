[
  {
    "question": "How do you activate GLOST if OpenMPI is already loaded in your environment?",
    "answer": "If an OpenMPI module is already in your environment, adding `module load glost` to your list of required modules is sufficient to activate GLOST."
  },
  {
    "question": "What command can you use to ensure GLOST and other necessary modules are present?",
    "answer": "To ensure GLOST and other necessary modules are present, you can launch the command `module list`."
  },
  {
    "question": "What are the possible syntaxes for launching GLOST tasks?",
    "answer": "The possible syntaxes are `srun glost_launch list_glost_tasks.txt`, `mpiexec glost_launch list_glost_tasks.txt`, and `mpirun glost_launch list_glost_tasks.txt`."
  },
  {
    "question": "How are sequential tasks assigned to available cores by GLOST?",
    "answer": "Sequential tasks are assigned to available cores by GLOST using a cyclic distribution."
  },
  {
    "question": "How does the GLOST wrapper (glost_launch) process tasks from the list?",
    "answer": "The GLOST wrapper starts with the first task (or line in the list) and assigns it a processor, repeating this until the end of the list or until the task's duration is reached."
  },
  {
    "question": "What is important for optimizing resources when using GLOST with multiple tasks?",
    "answer": "To optimize resources, ensure that tasks have a similar execution duration and can be distributed equally across the requested number of cores."
  },
  {
    "question": "How should GLOST be used for a large number of very short sequential tasks?",
    "answer": "For a large number of very short sequential tasks (e.g., hundreds or thousands of tasks, each a few minutes long), you should submit one or more GLOST tasks to execute them using a limited number of cores."
  },
  {
    "question": "How can you take advantage of backfilling and the scheduler when submitting GLOST tasks?",
    "answer": "You can submit GLOST tasks with a short duration and per node to take advantage of backfilling and the scheduler."
  },
  {
    "question": "Can GLOST group dozens to hundreds of relatively short tasks?",
    "answer": "Yes, for dozens to hundreds of relatively short tasks (around one hour), you can group them into one or more GLOST tasks."
  },
  {
    "question": "Can GLOST be used to group multiple long-duration tasks with similar execution times?",
    "answer": "Yes, multiple long-duration tasks with similar execution times can also be grouped into a GLOST task."
  },
  {
    "question": "Why is it important to estimate a task's execution time before launching a GLOST task?",
    "answer": "Estimating a task's execution time before launching it can help estimate the overall execution time of the GLOST task."
  },
  {
    "question": "How is the total duration calculated for Njobs similar tasks each taking time t0 on one processor?",
    "answer": "The total duration for Njobs similar tasks, each taking time t0 on one processor, would be `t0 * Njobs`."
  },
  {
    "question": "How do you estimate the duration (wt) of a GLOST task if you use Ncores for Njobs similar tasks, each taking t0 on one processor?",
    "answer": "The duration (wt) would be estimated as `t0 * Njobs / Ncores`."
  },
  {
    "question": "Does GLOST incur significant communication overhead when using MPI for sequential tasks?",
    "answer": "No, GLOST uses MPI to launch sequential tasks only, so communication overhead is relatively rare."
  },
  {
    "question": "What is an advantage of GLOST compared to directly using MPI for sequential tasks?",
    "answer": "GLOST is almost as efficient as using MPI directly but saves you from writing MPI code."
  },
  {
    "question": "Which Slurm parameter should be used for memory allocation in a GLOST script?",
    "answer": "In a Slurm script for GLOST tasks, you should use `--mem-per-cpu` rather than `--mem` for memory allocation."
  },
  {
    "question": "What is the first step to create a GLOST task?",
    "answer": "You must first create a text file named `list_glost_tasks.txt` with one task per line, containing the commands for each task."
  },
  {
    "question": "How can you prevent tasks in the same directory from overwriting temporary or output files when using GLOST?",
    "answer": "To prevent tasks in the same directory from overwriting files, results can be redirected to a file using a variable that indicates the option or argument used in the task execution, or you might need to create a separate directory for each task."
  }
]