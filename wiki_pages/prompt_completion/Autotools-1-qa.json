[
  {
    "question": "What is autoconf?",
    "answer": "Autoconf is a tool that belongs to the autotools suite, also known as the GNU build system, which automates the process of generating custom Makefiles necessary to build a program on different systems with various compilers."
  },
  {
    "question": "What is the first step when building a program with the help of autoconf?",
    "answer": "The first step is to call the `configure` script by running `./configure`."
  },
  {
    "question": "What does the `configure` script do during the build process?",
    "answer": "The `configure` script verifies that compilers and other relevant software are installed, that appropriate versions are available, and generates a Makefile customized for your system."
  },
  {
    "question": "What command follows the execution of the `configure` script in a standard autoconf build process?",
    "answer": "After running `./configure`, you typically call `make`."
  },
  {
    "question": "How do you install the files after compiling a program using autoconf?",
    "answer": "You install the files by running `make install`."
  },
  {
    "question": "How can you install software for a single user rather than all users on a server?",
    "answer": "If you don't want to install the software for all users, but only for yourself, you normally need to specify where to install your software, typically using the `--prefix` option."
  },
  {
    "question": "What are two common ways to specify a custom installation directory for software built with autoconf?",
    "answer": "One way is to create the directory (`mkdir $HOME/SOFTWARE`) and then use `make install --prefix=$HOME/SOFTWARE`. Another way is to supply the `--prefix` option to `./configure` instead, such as `./configure --prefix=$HOME/programs/`."
  },
  {
    "question": "What is a simplified command sequence for a basic compilation and installation of a program using autoconf to a user's specified directory?",
    "answer": "A basic compilation can be as simple as `./configure && make && make install --prefix=$HOME/SOFTWARE`."
  },
  {
    "question": "How can you get a detailed list of all supported options for a `configure` script?",
    "answer": "You can get a detailed list of all supported options by running `./configure --help`."
  },
  {
    "question": "What is the function of the `--prefix` option when used with a `configure` script?",
    "answer": "The `--prefix` option allows you to define the directory where the `make install` command installs the application or the library."
  },
  {
    "question": "How would you use the `--prefix` option to install an application into a 'programs' subdirectory within your home directory?",
    "answer": "You would use the command `./configure --prefix=$HOME/programs/`."
  },
  {
    "question": "How do configuration scripts allow users to enable or disable specific features of a program or library?",
    "answer": "Most configuration scripts allow enabling or disabling features using options generally of the type `--enable-feature` or `--disable-feature`."
  },
  {
    "question": "Provide an example command to enable MPI parallelization when configuring a program.",
    "answer": "You could use the command `./configure --enable-mpi`."
  },
  {
    "question": "What is the general recommendation regarding the use of `--with-...` options in autoconf?",
    "answer": "It is generally recommended to not use such options and let autoconf find the parameters automatically."
  },
  {
    "question": "When might it be necessary to use a `--with-...` option, and provide an example command.",
    "answer": "It is sometimes necessary to specify some parameters using `--with-...` options, for example, `./configure --enable-mpi --with-mpi-dir=$MPIDIR`."
  },
  {
    "question": "How can you specify the compiler and its options when running the `./configure` command?",
    "answer": "You can specify the compiler and the options that should be passed to it by declaring variables after the `./configure` command."
  },
  {
    "question": "How would you configure a program using 'icc' as the C compiler and passing \"-O3 -xHost\" as CFLAGS?",
    "answer": "You could run `./configure CC=icc CFLAGS=\"-O3 -xHost\"`."
  },
  {
    "question": "What is the purpose of the `CFLAGS` variable when used with `./configure`?",
    "answer": "`CFLAGS` passes options to the C compiler."
  },
  {
    "question": "Which variable is used to pass options to the preprocessor and to C, C++, Objective C, and Objective C++ compilers?",
    "answer": "The `CPPFLAGS` variable is used for this purpose."
  },
  {
    "question": "What does the `LDFLAGS` variable control when passed to a configure script?",
    "answer": "`LDFLAGS` passes options to the linker."
  },
  {
    "question": "Which variable allows for the definition of a preprocessor macro?",
    "answer": "The `DEFS` variable allows the definition of a preprocessor macro."
  }
]