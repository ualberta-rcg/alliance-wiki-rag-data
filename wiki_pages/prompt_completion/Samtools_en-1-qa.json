[
  {
    "question": "What is Samtools?",
    "answer": "Samtools is a suite of programs designed for interacting with high-throughput sequencing data."
  },
  {
    "question": "What data formats can Samtools read, write, edit, index, and view?",
    "answer": "Samtools can work with files in SAM, BAM, or CRAM format."
  },
  {
    "question": "What is BCFtools used for?",
    "answer": "BCFtools is used for reading and writing files in BCF2, VCF, and gVCF format, as well as for calling, filtering, and summarizing SNP and short indel sequence variants."
  },
  {
    "question": "What is HTSlib?",
    "answer": "HTSlib is a C-language library for reading and writing high-throughput sequencing data, and it is utilized by both Samtools and BCFtools."
  },
  {
    "question": "Where can the primary documentation for Samtools, BCFtools, and HTSlib be found?",
    "answer": "Primary documentation for all three packages can be found at https://www.htslib.org/."
  },
  {
    "question": "How do you load the default version of Samtools?",
    "answer": "To load the default version of Samtools, use the command `module load samtools`."
  },
  {
    "question": "What is a common task performed with Samtools related to file formats?",
    "answer": "A common task is to convert SAM files (\"Sequence Alignment/Map\") to BAM files."
  },
  {
    "question": "What are BAM files?",
    "answer": "BAM files are compressed, binary versions of SAM files that are much smaller in size, easy to manipulate, and ideal for storing large nucleotide sequence alignments."
  },
  {
    "question": "What does the 'B' in BAM stand for?",
    "answer": "The 'B' in BAM stands for 'binary'."
  },
  {
    "question": "What is CRAM format?",
    "answer": "CRAM is a more recent format for high-throughput sequencing data that offers even greater compression than BAM."
  },
  {
    "question": "Before converting a SAM file to BAM, what should you verify?",
    "answer": "Prior to converting, you should verify if your SAM file carries a header section with the character \u201c@\u201d."
  },
  {
    "question": "How can you inspect the header section of a SAM file?",
    "answer": "You can inspect the header section of a SAM file using the command `samtools view -H my_sample.sam`."
  },
  {
    "question": "How do you convert a SAM file with a header to BAM format?",
    "answer": "If the SAM file contains a header, you can convert it to BAM format using either `samtools view -bo my_sample.bam my_sample.sam` or `samtools view -b my_sample.sam -o my_sample.bam`."
  },
  {
    "question": "How do you convert a SAM file to BAM format if it lacks a header?",
    "answer": "If headers are absent, you can use a reference FASTA file to map the reads with the command `samtools view -bt ref_seq.fa -o my_sample.bam my_sample.sam`."
  },
  {
    "question": "Why would you need to sort and index BAM files?",
    "answer": "You may need to sort and index BAM files for many downstream applications."
  },
  {
    "question": "How do you sort a BAM file?",
    "answer": "You can sort a BAM file using the command `samtools sort my_sample.bam -o my_sample_sorted.bam`."
  },
  {
    "question": "How do you index a sorted BAM file?",
    "answer": "You can index a sorted BAM file using the command `samtools index my_sample_sorted.bam`."
  },
  {
    "question": "How can a SAM file be converted directly to a sorted BAM file using a shell pipe?",
    "answer": "A SAM file can be converted directly to a sorted BAM file using the shell pipe command: `samtools view -b my_sample.sam | samtools sort -o my_sample_sorted.bam`."
  },
  {
    "question": "What files are a common prerequisite for processes like variant calling or feature counting?",
    "answer": "A sorted BAM file, along with its index file with the extension `.bai`, is a common prerequisite."
  },
  {
    "question": "How does Samtools typically run by default regarding core usage?",
    "answer": "Samtools typically runs on a single core by default."
  },
  {
    "question": "How can the efficiency of Samtools be improved when processing data on multiple cores?",
    "answer": "Efficiency can be improved by using multithreading with the `-@` flag or by using GNU parallel to process multiple files concurrently."
  },
  {
    "question": "What flag in Samtools enables multithreading?",
    "answer": "The `-@` flag allows Samtools to take advantage of multiple cores for multithreading."
  },
  {
    "question": "What tool can be used to process multiple Samtools files concurrently across multiple cores?",
    "answer": "GNU parallel can be used to process multiple files concurrently, taking advantage of multiple cores."
  }
]