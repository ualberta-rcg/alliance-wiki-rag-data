

<languages />
[https://code.visualstudio.com/ Visual Studio Code] est un environnement de développement intégré (IDE pour <i>integrated development environment</i>) de [https://www.microsoft.com Microsoft] qui peut être utilisé pour faire du développement à distance via [[SSH/fr|SSH]] sur nos grappes. Vous pouvez installer Visual Studio Code sur votre ordinateur et vous connecter à une grappe où vous effectuerez du débogage et des tests. Visual Studio Code s'adapte à plusieurs langages de programmation, mais nous utiliserons ici [[Python/fr|Python]].

Avec un environnement polyvalent et modulaire comme Visual Studio Code, il faut faire attention au type d’action que vous faites. La modification d’un script Python ou de tout autre fichier texte de taille raisonnable (quelques milliers de lignes) est un processus léger qui utilise peu de puissance de traitement ou de mémoire. Par contre, cet environnement offre plusieurs autres fonctionnalités avancées telles que la possibilité de déboguer votre script à distance. Dans ce cas, l’environnement démarre l’exécution  du script Python sur la grappe, ce qui crée une charge de calcul significative sur potentiellement plusieurs CPU si le script ou les bibliothèques qu’il utilise sont multifil.

<b>Remarque :</b> Quand vous utilisez Visual Studio Code avec Python, évitez d'installer [[Anaconda|Conda et ses variantes]] en raison de leur mauvaise adaptation à l'environnement de nos grappes. Plutôt que d'utiliser Conda,  [[Python/fr#Créer_et utiliser_un_environnement_virtuel|utilisez un environnement virtuel Python]] ou utilisez un conteneur  [[Apptainer/fr|Apptainer]].

<span id="Configuring_remote_access"></span>
=Configurer l'accès à distance=

<span id="Configuration_of_your_SSH_keys"></span>
==Configuration de vos clés SSH==

# Si ce n’est pas déjà fait, <b>[[SSH_Keys/fr#Générer_une_clé_SSH|générez votre clé SSH]]</b>; ici nous l’appelons  ~/.ssh/ccdb.
# Si ce n’est pas déjà fait, <b>[[SSH_Keys/fr#Installer_une_clé|ajoutez votre clé <i>publique</i> SSH dans CCDB]]</b>.
# <b>Copiez la clé publique</b> dans <code>~/.ssh/authorized_keys</code> sur le serveur distant; créez ce fichier s’il n’existe pas déjà. Ceci est nécessaire parce que les nœuds de connexion n'ont pas accès aux clés publiques entrées dans CCDB.

<span id="SSH_configuration_file"></span>
==Fichier de configuration SSH==

VS Code fonctionne bien avec votre [[SSH configuration file/fr|fichier de configuration SSH local]] (<code>~/.ssh/config</code>). Les options recommandées sont&nbsp;:
{{File
  |name=~/.ssh/config
  |contents=
Host *
  ServerAliveInterval 300

Host beluga cedar graham narval
  HostName %h.alliancecan.ca
  IdentityFile ~/.ssh/ccdb
  User your_username

Host bc????? bg????? bl?????
  ProxyJump beluga
  IdentityFile ~/.ssh/ccdb
  User your_username

Host cdr*
  ProxyJump cedar
  IdentityFile ~/.ssh/ccdb
  User your_username

Host gra1* gra2* gra3* gra4* gra5* gra6* gra7* gra8* gra9*
  ProxyJump graham
  IdentityFile ~/.ssh/ccdb
  User your_username

Host nc????? ng????? nl?????
  ProxyJump narval
  IdentityFile ~/.ssh/ccdb
  User your_username
}}
==Connexion initiale==
=== Accès à distance et modification du code ===
https://carleton.ca/scs/2023/vscode-remote-access-and-code-editing/

Puisque certaines grappes ne permettent pas l’accès à internet via les nœuds de calcul, il faut d’abord installer Visual Studio Code Server avant de se connecter à distance à un nœud de calcul. Il faut donc se connecter une première fois à un nœud de connexion. Sélectionnez la grappe sur laquelle vous voulez travailler&nbsp;:

* beluga
* cedar
* graham
* narval

[[File:VSCode SSH Passphrase Prompt.png|thumb|Invite pour la phrase de passe SSH]]
<b>Remarque : L’invite à entrer votre phrase de passe sera affichée à plusieurs reprises.</b>
Si ce n'est pas le cas, copiez votre clé publique comme indiqué au point 3 de <i>Configuration de vos clés SSH</i> ci-dessus.

À votre connexion initiale, VS Code Server sera installé dans <code>~/.vscode-server/</code>, ce qui peut prendre jusqu’à 5 minutes. Lorsque c’est terminé, fermez la connexion.

===Se connecter avec l’authentification multifacteur===
[[File:VSCode Detail Link.png|thumb|À la connexion, cliquez sur <i>details</i> pour faire afficher dans le terminal l’invite pour l’entrée du deuxième facteur]]

Si [[Multifactor authentication/fr|l’authentification multifacteur]] est demandée, cliquez sur <i>details</i> pour faire afficher le terminal VS Code Terminal où vous pourrez entrer le second facteur.

<span id="Closing_your_connection"></span>
=Fermer la connexion=

Lors de la fermeture de la fenêtre de VS Code locale, le processus distant de VS Code Server peut continuer à s'exécuter en arrière-plan, ce qui a tendance à accumuler des processus orphelins sur le nœud de connexion. De plus, votre prochaine connexion pourrait se faire à un nœud de connexion différent, ce qui causerait des problèmes et de la confusion. <b>Pour fermer proprement la connexion, cliquez sur le coin inférieur gauche de VS Code et sélectionnez <i>Close Remote Connection</i> dans le haut de la fenêtre.</b>

<span id="Connection_to_a_compute_node"></span>
=Se connecter à un nœud de calcul=

Étapes à suivre :
# Vérifiez que VS Code Server est installé comme décrit ci-dessus.
# Dans un <b>[[SSH/fr|client SSH]]</b> externe connecté à la grappe, lancez une <b>[[Running_jobs/fr#Tâches_interactives|tâche interactive]]</b> avec <code>salloc</code>.
## <b>Important :</b> demandez au moins 2000M de mémoire.
## Notez le nom du nœud de calcul alloué.
## Si vous avez besoin de travailler avec des variables d'environnement <code>SLURM_*</code> dans VS Code, sauvegardez-les toutes  dans un fichier <i>à sourcer</i>. {{Command|env {{!}} grep SLURM_ {{!}} sed -e 's/^\(.*\){{=}}\(.*\)$/export \1{{=}}"\2"/g' > slurm_var.sh}}
# Dans VS Code, lancez une nouvelle session à distance portant le nom du nœud de calcul alloué&nbsp;:
## Appuyez sur <code>F1</code> ou <code>Ctrl+Shift+P</code> pour faire afficher l’invite de commande <code>&gt;</code> dans la palette des commandes.
## Commencez à écrire <i>Remote</i> et sélectionnez <i>Remote-SSH: Connect to Host... <b>&gt; Remote-SSH: Connect to Host...</i></b>
## Entrez le nom du nœud de calcul alloué.
### Si on vous demande quel est le système d’exploitation, sélectionnez <b>Linux</b>.
# Si vous avez besoin de travailler avec des variables d'environnement <code>SLURM_*</code>, allez au répertoire de travail dans un terminal VS Code et <i>sourcez</i> le fichier  <code>slurm_var.sh</code>. {{Command|source slurm_var.sh}}

<span id="Troubleshooting"></span>
=Dépannage=

<span id="Cannot_connect_to_Béluga"></span>
==Échec de connexion à Béluga==

La version 1.101 de VS Code Server ne fonctionne pas sur [[Béluga]]. Une fois que VS Code Server est téléchargé et installé, le processus de connexion redemande vos identifiants et répète le téléchargement et l'installation sans arrêt.

La solution est d'installer la version précédente de VS Code.

# [https://code.visualstudio.com/docs/supporting/faq#_how-do-i-opt-out-of-vs-code-autoupdates Désactivez les mises à jour automatiques] en sélectionnant <i>none</i> pour <i>update mode</i>.
# Installez ensuite  [https://code.visualstudio.com/updates/v1_100 VS Code version 1.100.3].

Une prochaine version de VS Code pourrait résoudre le problème; cependant, aucune garantie n'est donnée.

<div lang="en" dir="ltr" class="mw-content-ltr">
==Cannot connect to Cedar==
One of our users reported that he found a workaround that does not require reverting to a previous version of VS code. Setting the environment variable NODE_OPTIONS="--disable-wasm-trap-handler" in the .bashrc file fixed the issue. All this does is remove an optimization in Node.js, trading efficiency for vastly reduced virtual memory usage. The source for this fix can be found [https://github.com/microsoft/vscode/issues/251777#issuecomment-3056373130 here].
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
This may work for the other clusters. Please give it a try.
</div>

<span id="The_remote_session_does_not_work_anymore"></span>
==Session à distance qui ne fonctionne plus==

Les plus récentes versions de [https://code.visualstudio.com/docs/remote/linux#_remote-host-container-wsl-linux-prerequisites VS Code Server ne supportent plus CentOS 7], ce qui affecte les connexions à <b>Graham</b> et <b>Niagara</b>.

Si vous avez besoin de VS Code pour du débogage, notre recommandation est d'utiliser la version disponible via [[JupyterHub/fr#VS_Code|JupyterHub]]. Autrement,

* utilisez une autre grappe, ou
* développez et testez vos programmes localement, sur votre ordinateur; quand un programme semble stable, importez-le sur la grappe de votre choix à l'aide d'un outil de [[Transferring_data/fr|transfert de données]] ou de [[Version_control/fr|contrôle de version]].

<div lang="en" dir="ltr" class="mw-content-ltr">
=See also=
* SHARCNET General Interest Webinar, "Remote Development on Clusters with VSCode", presented by Armin Sobhani:
** [https://youtu.be/u9k6HikDyqk Part I]
** [https://youtu.be/CsgBGpampvc Part II]
* Tutorial video created by two users (best viewed in 720p):
** [https://youtu.be/1B0hiWaVcHY Connect VS Code to High-Performance Computing (HPC) Clusters]
</div>