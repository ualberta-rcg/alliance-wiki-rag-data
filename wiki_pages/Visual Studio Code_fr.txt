<languages />

<div lang="en" dir="ltr" class="mw-content-ltr">
[https://code.visualstudio.com/ Visual Studio Code] is an integrated development environment (IDE) from [https://www.microsoft.com Microsoft] which can be used for local development with numerous extensions and is highly customizable.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Warning
|title=Resources eager
|content=Vs Code is notable for misbehaving on the login nodes. Whenever possible '''strictly''' use it locally or see to configure it below.
}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Warning
|title=Running or debugging your code
|content=If Visual Studio Code is connected to remote systems, avoid running or debugging your code, as this will execute code on the login nodes, which can lead to performance issues or system disruptions. Instead, use the <tt>code-server</tt> environment, which provides a safer and more appropriate context for debugging tasks.
}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* Use VS Code locally and avoid connecting it to the systems. Save your changes to your project files with Git, and pull the changes onto the systems when ready to test.
* Use nano or vim to edit files directly on the systems.
* For debugging and quick testing, you can load the <tt>code-server</tt> module.
* When all the above are not possible, one can configure VS Code for remote connections.
</div>

__FORCETOC__

<div lang="en" dir="ltr" class="mw-content-ltr">
= Local usage =
== Why Local Usage ==
* Speed & Stability: Running VS Code locally means fewer network interruptions and faster performance—ideal for iterative development.
* Direct Access: You can interact with files, extensions, and terminals directly on your machine with zero latency.
* Offline Capability: You’re not tied to an internet connection or remote server, so you can code anytime, anywhere.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
It is recommended to develop locally with VS Code. You are then able to customize and extend VS Code with your preferred extensions and language.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Once you are ready to test your project onto the systems, you can save your changes into a Git repository, push them to a remote host like Github or Gitlab, then connect to the system and pull your changes to test.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
To learn more on how to work with source control, please see: [https://code.visualstudio.com/docs/sourcecontrol/overview VS Code Source Control].
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Once you have saved and pushed your changes to your remote repository, connect to the system via the terminal:
{{Command|ssh <username>@<hostname>.alliancecan.ca}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Then clone your repository (if it does not exists):
{{Command|git clone git@github.com:username/reponame.git}}
or change directory to your repository and pull the changes:
{{Commands
|cd myrepo
|git pull
}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
You can then test your changes in a short (with minimal resources) [https://docs.alliancecan.ca/wiki/Running_jobs#Interactive_jobs interactive job].
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
= File Edition on the Systems =
While Visual Studio Code is great for local development, sometimes you need direct access to files on a remote system. In such cases, terminal-based editors like <tt>nano</tt> or <tt>vim</tt> offer a lightweight and efficient way to edit files directly from the command line.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
If you prefer a graphical interface, the [https://docs.alliancecan.ca/wiki/JupyterLab JupyterLab] text editor provides a versatile alternative. It supports Markdown, Python scripts, and other formats.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
= Debugging and Testing =
If you need to debug or test your code on the systems, you can start a [[JupyterLab#VS_Code|<tt>code-server</tt> instance from Jupyter Lab]].
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* Access one of the [[JupyterLab#Launching_JupyterLab|options to launch JupyterLab]].
* Select minimal resources and start an interactive JupyterLab job.
* On the Launcher tab, click on the VS Code launcher button.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Note|The <tt>code-server</tt> instance you are accessing is running in a compute job that '''do not''' have internet access.}}
The <tt>code-server</tt> module has several common extensions already available but we can add more upon request.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== Custom extension installation ==
TBD...
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
= Configuration of VS Code for remote connection =
If none the above works for your case, one can configure VS Code to connect to a remote host with the Remote SSH extension.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== SSH configuration ==
If not done already, [[SSH_Keys#Generating_an_SSH_Key|generate your SSH key]] and [[SSH_Keys#Installing_your_key|add your <i>public</i> SSH key on the CCDB]].
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Then create (or add) an SSH configuration file to your local computer:
</div>

{{File
  |name=~/.ssh/config
  |contents=
Host *
  ServerAliveInterval 30
  User your_username

Host rorqual narval nibi fir
  HostName %h.alliancecan.ca
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
== Local configuration ==
1. In VS Code, open the Command Palette: Press <tt>Ctrl+Shift+P</tt> (Windows/Linux) or <tt>Cmd+Shift+P</tt> (macOS).
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
2. Open the user settings (<tt>Preferences: Open User Settings (JSON)</tt>) and paste (or merge) the following configuration:
</div>
{{File
  |name=local-settings.json
  |contents=
{
  // file-watch + search
  "files.watcherExclude": {
    "**/.git/**": true,
    "**/node_modules/**": true,
    "**/dist/**": true,
    "**/build/**": true,
  },
  "search.exclude": {
    "**/.git/objects/**": true,
    "**/.git/subtree-cache/**": true,
    "**/node_modules/**": true,
  },
  "search.maxThreads": 2,
  "search.ripgrep.maxThreads": 2,
  "search.useIgnoreFiles": true,

  // extensions & updates
  "remote.extensionKind": {
    "*": [
      "ui"
    ],
    "ms-python.python": [
      "ui"
    ]
  },
  "remote.defaultExtensionsIfInstalledLocally": [
    "GitHub.vscode-pull-request-github"
  ],

  // remote-ssh
  "remote.SSH.showLoginTerminal": false,
  "remote.SSH.enableDynamicForwarding": false,
  "remote.SSH.enableServerAutoShutdown": 30,

  "workbench.startupEditor": "none",
}
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
3. Save it and restart VS Code.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== Remote System Configuration ==
1. Log in to the system via an external terminal:
{{Command|ssh <username>@<host>.alliancecan.ca}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
2. Create the directory:
{{Command|mkdir -p ~/.vscode-server/data/Machine/}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
3. Create the <tt>settings.json</tt> machine configuration:
{{Command|nano ~/.vscode-server/data/Machine/settings.json }}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
4. Copy the configuration below. You may need to merge manually settings with your own if any already.
</div>
{{File
  |name=system-settings.json
  |contents=
{
  // file-watch + search
  "files.watcherExclude": {
    "**/.git/**": true,
    "**/node_modules/**": true,
    "**/dist/**": true,
    "**/build/**": true,
    "/**": true,
  },
  "search.exclude": {
    "**/.git/objects/**": true,
    "**/.git/subtree-cache/**": true,
    "**/node_modules/**": true,
    "/**": true,
  },
  "search.followSymlinks": false,
  "search.maxThreads": 2,
  "search.ripgrep.maxThreads": 2,
  "search.useIgnoreFiles": true,
  "search.searchOnType": false,

  // extensions & updates
  "extensions.autoCheckUpdates": false,
  "extensions.autoUpdate": false,
  "update.mode": "none",
  "remote.extensionKind": {
    "*": [
      "ui"
    ],
    "ms-python.python": [
      "ui"
    ]
  },

  // Copilot
  "chat.agent.enabled": false,
  "github.copilot.enable": {
    "*": false,
  },
  "remote.defaultExtensionsIfInstalledLocally": [
    "GitHub.vscode-pull-request-github"
  ],

  // telemetry & git
  "telemetry.enableTelemetry": false,
  "telemetry.enableCrashReporter": false,
  "telemetry.telemetryLevel": "off",
  "telemetry.feedback.enabled": false,
  "git.autofetch": false,
  "git.enableStatusBarSync": false,

  // remote-ssh
  "remote.SSH.showLoginTerminal": false,
  "remote.SSH.enableDynamicForwarding": false,
  "remote.SSH.enableServerAutoShutdown": 30,

  "workbench.startupEditor": "none",
}
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
== Connecting ==
# Open the Command Palette in VS Code: Press <tt>Ctrl+Shift+P</tt> (Windows/Linux) or <tt>Cmd+Shift+P</tt> (macOS).
# Type <tt>remote</tt> and then select <tt>Connect to Host...</tt>
# Choose the host (remote system) and confirm.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
You'll now be connected to a '''login node'''.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Warning|title=Login Node|content=Do ''not'' test, debug or run your code as it runs on the login node!}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== Closing your connection ==
# Open the Command Palette in VS Code: Press <tt>Ctrl+Shift+P</tt> (Windows/Linux) or <tt>Cmd+Shift+P</tt> (macOS).
# Type <tt>remote</tt> and then select <tt>Remote-SSH: Kill VS Code Server on Host...</tt>
# Choose the host (remote system) and confirm.
# Open the File menu, and select <tt>Close Remote Connection</tt>.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== Advanced - Connecting to a interactive compute node ==
The following is only needed for advanced usage.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Update your ssh configuration to add the following lines:
<tabs>
<tab name="Narval">
{{File
  |name=~/.ssh/config
  |contents=
Host nc* ng* nl*
  ProxyJump narval
  User your_username
}}
</tab>
<tab name="Rorqual">
{{File|name=~/.ssh/config
  |contents=
Host rc* rg* rl*
  ProxyJump rorqual
  User your_username
}}
</tab>
</tabs>
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
# In an external terminal, connected to the system via an ssh connection, start a new <b>[[Running_jobs#Interactive_jobs|interactive job]]</b> (with <code>salloc</code>) with at least 2000M of memory.
## Note the allocated compute node name.
## If you will need to work with <code>SLURM_*</code> environment variables in VS Code, save them all in a ''source'' file: {{Command|env {{!}} grep SLURM_ {{!}} sed -e 's/^\(.*\){{=}}\(.*\)$/export \1{{=}}"\2"/g' > slurm_var.sh}}
# In VS Code, start a new remote session with the name of the allocated compute node:
## Press <code>F1</code> or <code>Ctrl+Shift+P</code> to start the command prompt <code>&gt;</code> in the Command Palette.
## Start typing <i>Remote</i> and select <i>Remote-SSH: Connect to Host... <b>&gt; Remote-SSH: Connect to Host...</i></b>
## Enter the noted compute node name.
### If you get prompted for the type of operating system, select <b>Linux</b>
# If you need to work with <code>SLURM_*</code> environment variables, navigate to the working directory in a VS Code terminal and ''source'' the <code>slurm_var.sh</code> file: {{Command|source slurm_var.sh}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
= Special Notes = 
* VScode is banned on tamIA login nodes.
</div>