<languages />
{{Outdated}}

[[File:Matlab-vnc.png|400px|thumb|MATLAB running via VNC.]]

It is often necessary to remotely start the graphical user interface for complex software packages such as [[MATLAB]]. The most common way to do this is with [[SSH]] and X11 forwarding. However the performance of SSH+X11 is often too slow similar to [https://docs.computecanada.ca/wiki/Connecting_with_MobaXTerm MobaXTerm] or [https://docs.computecanada.ca/wiki/Connecting_with_PuTTY Putty]. A much better alternative is to use [https://en.wikipedia.org/wiki/Virtual_Network_Computing VNC] to connect to a remote desktop.

= Setup =

First you will need to install a VNC client on your machine to connect to the VNC server.  We recommend using [http://tigervnc.org/ TigerVNC].  A TigerVNC package is available for Windows, MacOS and most Linux distributions.  The following shows how to download, install and configure TigerVNC securely for each operating system.  The certificate configuration steps are only required for connecting to VDI nodes so the signing authority of the certificate presented by the vncserver is known. If a popup about a certificate issue occurs, either you have not configured it properly or you are not connected to our server and should not enter your password.

== Windows ==

Download and run the latest stable vncviewer64-x.y.z.exe version package installer from [https://sourceforge.net/projects/tigervnc/files/stable/ the official download page] for example <code>vncviewer64-1.15.0.exe</code> (as of April 2025).  Make sure you download the viewer and not the server.  To create secure tunnels from your desktop to the vncserver as described in the sections below, you will need to open a terminal window and run the SSH command.  This may be done using PowerShell standard on Windows 10 since the 1809 update.

== MacOS ==

Install the latest stable DMG package by going to [https://sourceforge.net/projects/tigervnc/files/stable/ the official download page] and click the green <b>Download Latest Version</b> button for <code>TigerVNC-1.15.0.dmg</code> (as of April 2025). Once the download is complete double click the DMG file to open it.  A TigerVNC Viewer icon should appear in a popup window along with a LICENSE.TXT and README.rst file.  To complete the installation, drag the tigervnc icon that appears into the Applications folder and/or the lower [https://support.apple.com/en-ca/guide/mac-help/mh35859/mac app dock].   To remove the popup you will need to unmount the DMG file.  To do this open a New Finder Window, verify <code>View->ShowSidebar</code> is selected, click the small up arrow beside <code>TigerVNC-1.15.0</code> in the left side menu and lastly close the finder window.  If you are running macOS Monterey 12.2 and [https://github.com/TigerVNC/tigervnc/issues/1423 TigerVNC crashes] then you must upgrade to this latest version.

== Linux ==

First install TigerVNC viewer with the package manager for your Linux version:

{| class="wikitable"
! Linux Version
! Install Command
|-
| Debian, Ubuntu
| <code>sudo apt-get install tigervnc-viewer</code>
|-
| Fedora, CentOS, or RHEL
| <code>sudo yum install tigervnc</code>
|-
| Gentoo
| <code>emerge -av net-misc/tigervnc</code>
|}

Next, start TigerVNC by either finding it in the applications menu or running <code>vncviewer</code> on the command line.  In the "VNC Viewer: Connection Details" window that appears click "Options -> Security" then tick all boxes except "Encryption None" and enter one of the following paths in the "Path to X509 CA Certificate" field.  

{| class="wikitable"
! Linux Version
! Path to X509 CA Certificate
|-
| Debian, Ubuntu
| /etc/ssl/certs/ca-certificates.crt
|-
| Fedora, CentOS, or RHEL
| /etc/pki/tls/certs/ca-bundle.crt
|-
| Gentoo
| /etc/ssl/certs/ca-certificates.crt
|}
To save the settings click OK and then click Connect.  If Connect is not clicked, the settings will not be saved.

= Connect =

Now you need a VNC server to connect to, such as a temporary vncserver started on a cluster login or compute node as shown below.

== Login nodes ==

You may run lightweight applications (that do not require a gpu) within a remote VNC desktop on a cluster login node (memory and cputime limits apply).  To do this, you must first connect to a cluster login node.  Using nibi cluster for example :

 [<b>laptop</b>:~] ssh nibi.alliancecan.ca

Next run <code>vncserver -list</code> to check if you have an old unused vncserver(s) still running on whichever nibi login node you get connected to.  If you do then kill them off by running the following pkill command on

 [<b>l4</b>(login node):~] <code>pkill Xvnc -u $USER</code>

1) Now you may start your vncserver on the login node as shown here:

 [<b>l4</b>(login node):~] vncserver -idletimeout 86400<br>
 Desktop 'TurboVNC: l4.nibi.sharcnet:1 (yourusername)' started on display <b>l4</b>.nibi.sharcnet:1<br>
 Starting applications specified in /cvmfs/soft.computecanada.ca/gentoo/2023/x86-64-v3/usr/bin/xstartup.turbovnc
 Log file is /home/yourusername/.vnc/<b>l4</b>.nibi.sharcnet:1.log

Note that the vncserver command provided by StdEnv/2023 is based on [https://turbovnc.org turbovnc].  When starting a new vncserver on a login node <code>-idletimeout seconds</code> should be added as shown above.  Doing so will ensure your <code>vncserver</code> eventually terminates (once S seconds has elapsed with no VNC viewer connections) should you forget to terminate your vncviewer session by clicking <code>System -> Log out</code> in the vnc desktop.  The first time you start vncserver you will be required to set a password which can be [https://docs.alliancecan.ca/wiki/VNC#Vncserver_password changed] later.  The password will be required to remotely connect to your desktop with a vncclient (such as vncviewer). The same password will be required when making [https://docs.alliancecan.ca/wiki/VNC#Multiple_connections multiple connections] assuming you started your vncserver by appending the additional <code>-alwaysshared</code> option.

2) Now determine which port your vncserver is listening on (5901 for this example) by running grep on the log file:

 [<b>l4</b>(login node):~] grep -iE "\sport|kill"  /home/yourusername/.vnc/<b>l4</b>.nibi.sharcnet:1.log
 25/08/2025 15:16:20 Listening for VNC connections on TCP port <span style="Color:blue">5901</span>

Now you may exit the login node and your vncserver will continue running until the time limit you assigned (by specifying the -idletimeout option) is reached

 [<b>l4</b>(login node):~]  exit
 [<b>laptop</b>:~]

3) On your desktop start a SSH tunnel to forward an arbitrary port (5905 in this example) to the port your VNC server is listening (5901 according to the above) as follows :

 [<b>laptop</b>:~] ssh nibi.computecanada.ca -L <span style="Color:red">5905</span>:<b>l4</b>:<span style="Color:blue">5901</span>

4) On your desktop command line, enter the following to connect with vncviewer via your forwarded port:

 [<b>laptop</b>:~] vncviewer localhost:<span style="Color:red">5905</span>

Mac or Windows users may optionally click the <i>TigerVNC Viewer</i> application icon on their desktop and enter '''localhost:<span style="Color:red">5905</span>''' in the "Connection Details" dialogue box that appears.  Keep in mind that strict memory and cputime limits apply on cluster login nodes.  If you require more resources, then start your VNC server on a cluster compute node instead as described in the next section.

== Compute nodes ==

Where VDI login nodes are unavailable you can start a VNC server on a compute node, and with suitable port forwarding, connect to it from your desktop.  This gives you dedicated access to the server, but does not provide a full graphical desktop or hardware-accelerated OpenGL.

<b>1) Start a VNC server</b>

Before starting your VNC server, log into a cluster (such as nibi) and create a compute node allocation using the <code>salloc</code> command (24hr time limit applies). For example, to request an [[Running_jobs#Interactive_jobs|interactive job]] using 4 CPUs and 16GB of memory you could use the command:

 [<b>l4</b>(login node):~] salloc --time=1:00:00 --cpus-per-task=4 --mem=16000 --account=def-piusername
 salloc: Pending job allocation 1149016
 salloc: job 1149016 queued and waiting for resources
 salloc: job 1149016 has been allocated resources
 salloc: Granted job allocation 1149016
 salloc: Waiting for resource configuration
 salloc: Nodes <b>c48</b> are ready for job
 [<b>c48</b>(compute node):~]

Once your interactive job has started, set this environment variable to avoid any repetitive desktop errors:

 [<b>c48</b>(compute node):~] export XDG_RUNTIME_DIR=${SLURM_TMPDIR}

Then, start a VNC server with <code>vncserver</code> noting which compute node your job is running on (<b>c48</b> in this example).  If unsure use the <code>hostname</code> command to check. The first time you do this you will be prompted to set a password for your VNC server '''DO NOT LEAVE THIS BLANK''' otherwise anyone could connect to it and gain access to the files in your account.  You may change the password later using the <code>vncpasswd</code> command.  Continuing with the example:

 [<b>c48</b>(compute node):~] vncserver<br>
 Desktop 'TurboVNC: c48.nibi.sharcnet:1 (yourusername)' started on display <b>c48</b>.nibi.sharcnet:1<br>
 Starting applications specified in /cvmfs/soft.computecanada.ca/gentoo/2023/x86-64-v3/usr/bin/xstartup.turbovnc
 Log file is /home/yourusername/.vnc/<b>c48</b>.nibi.sharcnet:1.log

Run the grep command on the log file to determine which port your VNC server is listening on:

 [<b>c48</b>(compute node):~] grep -iE "\sport|kill" /home/yourusername/.vnc/<b>c48</b>.nibi.sharcnet:1.log
 26/08/2025 10:43:36 Listening for VNC connections on TCP port <span style="Color:blue">5901</span>

<b>2) Set up a SSH tunnel to the VNC server</b>

Once your VNC server has been started, you must create a secure "bridge" or "tunnel" from your laptop to the compute node where your vncserver is running (as determined in the previous step above).  There are two types of tunnel commands that maybe used depending on which cluster you are using.

For all clusters (<b>except</b> nibi) the previously recommended form of the tunnel command <code>ssh username@clustername -L localforwardedport:computnode:remotelisteningport</code> may continue to be used.  As an  example, if a vncserver is started on <code>rorqual</code> compute node <b>rc12509</b> the the local port on your laptop to be forwarded is once again <span style="Color:green">5905</span> then the appropriate tunnel command would be:

 [<b>laptop</b>:~] ssh username@rorqual.alliancecan.ca -L <span style="Color:green">5905</span>:<b>rc12509</b>:<span style="Color:blue">5901</span>
 Duo two-factor login for username
 Enter a passcode or select one of the following options:
 [rc12509(compute node):~] 

For nibi, a new form of the tunnel command <code>ssh -J username@clustername -L localforwardedport:localhost:remotelisteningport computenode</code> must be used.  In addition a SSH key pair must created on your laptop with the contents of the pub key entered into your <code>~/.ssh/authorized_keys</code> file on <code>nibi</code>.  This approach will also work on any other cluster and so may eventually be preferred.  Continuing with the above example, where <b>c48</b> is the compute node that you started your vncserver on, and <span style="Color:green">5905</span> is the local port on your laptop being forwarded, then the tunnel command to nibi would be:

 [<b>laptop</b>:~] ssh -J username@nibi.alliancecan.ca -L <span style="Color:green">5905</span>:localhost:<span style="Color:blue">5901</span> <b>c48</b>
 Duo two-factor login for username
 Enter a passcode or select one of the following options:
 [c48(compute node):~]

If you exit the node that your tunnel is connected to, you will no longer be able to connect to the VNC server with vncviewer.  However since your vncserver will continue running, so you may regain access to it by simply starting a new tunnel. For more information about tunnels see [[SSH tunnelling|SSH tunnel]].

<b>3) Connect to the VNC server</b>

If you have a Linux desktop, open a new local terminal window and tell your VNC client to connect to '''localhost:port'''. The following example uses the TigerVNC <code>vncviewer</code> command to connect to the running VNC server on cdr768. You will be prompted for the VNC password that you set up earlier in order to connect.

 [<b>laptop</b>:~]$ vncviewer localhost:<span style="Color:green">5905</span><br>
 TigerVNC viewer v1.15.0
 Built on: 2025-02-16 03:59
 Copyright (C) 1999-2025 TigerVNC team and many others (see README.rst)
 See https://www.tigervnc.org for information on TigerVNC.<br>
 Tue Aug 26 10:59:59 2025
 DecodeManager: Detected 12 CPU core(s)
 DecodeManager: Creating 4 decoder thread(s)
 CConn:       Connected to host localhost port 5905
 CConnection: Server supports RFB protocol version 3.8
 CConnection: Using RFB protocol version 3.8
 CConnection: Choosing security type VeNCrypt(19)
 CVeNCrypt:   Choosing security type TLSVnc (258)<br>
 Tue Aug 26 11:00:03 2025
 CConn:       Using pixel format depth 24 (32bpp) little-endian rgb888
 CConnection: Enabling continuous updates

If you are on a Mac or Windows desktop (not a linux distro) then instead of running the <code>vncviewer</code> from the command line, you may click the <i>TigerVNC Viewer</i> application icon and enter your '''localhost:port''' information as shown here: [[File:VNCviewerConnect3.png|400px|thumb'''Mac Tiger VNC Viewer Connection Details Dialogue Box''']].   As a side note, the default VNC port assumed by <i>TigerVNC Viewer</I> is 5900, therefore if you specified 5900 as the local port to be forwarded when you started your SSH tunnel, then you could simply specify '''localhost'''.  Windows users however may find they cannot set up an SSH tunnel on local port 5900 in the first place.

Once <code>vncviewer</code> connects you will be presented with a [https://mate-desktop.org/ Linux MATE desktop]. To launch a terminal, click on the top menu on "Applications -> System Tools -> MATE Terminal". You may also add a shortcut to the top menu by right-clicking on "MATE Terminal" and by clicking on "Add this launcher to panel". Finally, to launch a program, invoke the command as you would normally within a <code>bash</code> session, for example <code>xclock</code>. To start a more complicated program like MATLAB, load the module and then run the <code>matlab</code> command.

If you experience graphics issues when using VNC as described above, try using [https://ondemand.sharcnet.ca/ OpenOnDemand] on <b>nibi</b> cluster or [https://jupyterhub.rorqual.alliancecan.ca JupyterHub] on <b>rorqual</b> cluster.  Both systems offer a fully automated VDI web interface gui experience designed for ease of use and offer improved hardware performance and software support.

= More information =

== Vncserver password ==

To reset your VNC server password, use the <code>vncpasswd</code> command:

<source lang="bash">
[gra-login1:~] vncpasswd
Password:
Verify:
Would you like to enter a view-only password (y/n)? n
</source>

Optionally you can completely remove your VNC configuration (including your password) by deleting your <code>~/.vnc</code> directory. The next time you run <code>vncserver</code> you will be prompted to set a new password.

== Killing vncserver ==

If a running vncserver is no longer needed, terminate it with <code>vncserver -kill :DISPLAY#</code> for example:

 [gra-login1:~] vncserver -list | grep -v ^$
 TurboVNC sessions:
 X DISPLAY #	PROCESS ID	NOVNC PROCESS ID
 :<span style="color:red">44</span>	        27644<br>
 [gra-login1:~] vncserver -kill :<span style="color:red">44</span>
 Killing Xvnc process ID 27644

If you have multiple vncservers running on a node, you may kill them ALL instantly by running:
 [gra-login1:~] pkill Xvnc -u $USER

== Multiple connections ==

All vncserver(s) running under your username (on a login or compute node) can be displayed with <code>vncserver -list</code>.  If a vncserver was started with the additional <code>-AlwaysShared</code> option then multiple connections to it can be made by establishing a new tunnel and vncviewer from any remote location.  For example:

 [<b>l4</b>(login node):~] vncserver -idletimeout 86400 -alwaysshared | grep -v ^$
 Desktop 'TurboVNC: l4.nibi.sharcnet:1 (yourusername)' started on display <b>l4</b>.nibi.sharcnet:1
 Starting applications specified in /cvmfs/soft.computecanada.ca/gentoo/2023/x86-64-v3/usr/bin/xstartup.turbovnc
 Log file is /home/yourusername/.vnc/<b>l4</b>.nibi.sharcnet:1.log

Thus one could start a vncserver running while at the office and then go home, establish new tunnels to the login or compute node where the vncserver is still running, and re-connect again with vncviewer to access the same desktop and seamlessly continue working.  If however your vncserver was not started with <code>vncserver -AlwaysShared</code> then only one vncviewer connection will be possible and you would need to close down all applications running in the desktop then shut down your vncserver, all before going home.  Then later once home you would need to restart a whole new desktop from scratch and all applications just to finally continue working.

== Failures to connect ==

Repeated failing attempts to establish a new vncserver/vncviewer connection may be due to an old SSH tunnel still running on your desktop tying up ports.  To identify and kill any such tunnels, open a terminal window on your desktop and run <code>ps ux | grep ssh</code> followed by <code>kill PID</code>.

== Unlock screensaver ==

If your VNC screensaver times out and requests a password, enter your cluster account password to unlock it (not your vncserver password).  If you are running the MATE desktop and the screensaver will not unlock, try running <code>killall -9 .mate-screensaver</code>.  This should no longer be a problem on our clusters as the VNC screensaver has been disabled.

== Cannot Login == 

The procedure to login to gra-vdi.alliancecan.ca is a two step process:

1)
 username
 Enter your (ccdb) password
2)
 username
 Enter your Duo two-factor MFA passcode

If you enter the wrong username/password for 1) you will still be prompted by 2).  If you then send your username/passcode then you will receive a message that says <b>Success, Logging you in...</b> and be returned to the login screen of 1).  The solution is to try again being sure to enter your correct username/password combination.  If you cannot recall your alliance ccdb password then visit [https://ccdb.alliancecan.ca/security/forgot here] to reset it assuming your account it not pending renewal by your PI.

= Software =

The VDI nodes support direct vncviewer connections and GPU-accelerated OpenGL graphics for appropriately-configured software applications. The VDI nodes also provide an extra set of software modules in the SnEnv environment, analogous to the StdEnv environments available on all our clusters.<br><br>
On regular login nodes, a standard software environment and some default modules are automatically loaded when you log in.  This is not so on a VDI node, thus you will see:

{{Command|prompt=[name@gra-vdi4]$
|module list
|result=
No modules loaded
}}

Therefore, before running any graphical software on gra-vdi you must first manually load one of the following   

== StdEnv ==

Most users will find it sufficient to load the StdEnv module on gra-vdi.  Doing so will provide access to the same software modules that are loaded by default on the clusters:

{{Commands|prompt=[name@gra-vdi4]$ 
|module load CcEnv StdEnv/2023
|module avail
}}

== SnEnv ==

In some rare cases users will need to load a locally installed module(s) on gra-vdi.  To do this the <code>SnEnv</code> must first be loaded:

{{Commands|prompt=[name@gra-vdi4]$ 
|module load SnEnv
|module avail
}}

== NIX ==

=== Notice === 

The <code>nix</code> module is no longer available on gra-vdi (or graham).  Further there is no guarantee it will return.  Until a final decision is made the documentation in this section is being retained.

=== Purpose ===

Instead of loading SnEnv or StdEnv users may want to load the <code>nix</code> module which provides open-source software that is optimized to use accelerated OpenGL whenever possible. This module is only available on graham and gra-vdi and can be loaded as follows:

{{Commands|prompt=[name@gra-vdi4]$ 
|module load nix
}}

The nix and nix-env commands will now be in your path to manage software packages via NIX within your personal nix environment.

=== Installing software ===

To install a nix package into your environment, click the black terminal icon on the top menu bar or select <i>Applications -> System Tools -> Terminal</i>.  Once a terminal window appears, run <code>module load nix</code>.  You can now search for programs using the <code>nix search <regexp></code> command and install them in your environment using the <code>nix-env --install --attr <attribute></code> command.  As an example, to install [https://qgis.org QGIS] do the following:

{{Commands|prompt=[name@gra-vdi4]$ 
|nix search qgis
|result=
Attribute name: nixpkgs.qgis
Package name: qgis
Version: 2.18.20
Description: User friendly Open Source Geographic Information System
}}
{{Commands|prompt=[name@gra-vdi4]$ 
|nix-env --install --attr nixpkgs.qgis
}}

Your nix environment persists from one login to the next, so you only need to run an install command once. For example:

{{Commands|prompt=[name@gra-vdi4]$ 
|module load nix
|qgis}}

works!  In summary whatever software you install today will be available next time you load the nix module.

=== OpenGL applications ===

For accelerated OpenGL to work, it is necessary to adjust compiled binaries to pre-load "vglfaker.so" from VirtualGL.  This level of customization is automatically done for you on gra-vdi when you install any OpenGL based software package with nix.  It is however something that must be done manually after you download and install any software from outside of nix.  To do this we suggest using the <code>patchelf</code> utility to adjust the final binary.  It can be installed into nix with <code>nix-env --install --attr nixpkgs.patchelf</code> if it's not already on the system.  Then once you have built your OpenGL application against the system libraries and for example installed it as ''~/.local/bin/myglapp'' you can add the VirtualGL system library ''/usr/lib64/VirtualGL/libvglfaker.so'' by running:

{{Commands|prompt=[name@gra-vdi4]$ 
|module load nix
|patchelf --add-needed /usr/lib64/VirtualGL/libvglfaker.so ~/.local/bin/myglapp
}}

Note that it is also possible to preload ''vglfaker.so'' via the <code>LD_PRELOAD</code> environment variable.  This is generally a bad idea as it applies indiscriminately to all binaries, and those that require a different ''vglfaker.so'' than that set in <code>LD_PRELOAD</code> will then fail.  It can be used safely in some cases in wrapper scripts.