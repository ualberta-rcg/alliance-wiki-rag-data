<languages />

[[Category:Software]]

Le progiciel [https://www.mikepoweredbydhi.com/ MIKE du groupe DHI] sert à la modélisation hydraulique et hydrologique.

== Licence ==
MIKE est un produit commercial et vous devez avoir votre propre licence.

Pour pouvoir l'utiliser sur nos grappes de calcul, vous devez contacter le service à la clientèle de MIKE à [mailto:mike@dhigroup.com mike@dhigroup.com] et confirmer que vous avez 
* une ''licence internet'' et
* un lien téléchargé pour la ''version Linux'' de MIKE.

== Installation ==

Vous devez télécharger les archives d'installation pour Linux.

<div class="mw-translate-fuzzy">
Les directives suivantes supposent que les archives d'installation sont ces trois fichier, selon la version de MIKEs&nbsp;:
</div>
<tabs>
<tab name="MIKE 2025">
* <code>MIKE_Zero_2025_rhel9.zip</code>
</tab>
<tab name="MIKE 2024">
* <code>MIKE_Zero_2024_rhel9_Update_1.tgz</code>
* <code>MIKE_Zero_2024_Tools_rhel9_Update_1.tgz</code>
* <code>MIKE_Zero_2024_Examples_Update_1.tgz</code>
</tab>
<tab name="MIKE 2023">
* <code>MIKE_Zero_2023_rhel7_22.11.05.tgz</code>
* <code>MIKE_Zero_2023_Tools_rhel7_22.11.05.tgz</code>
* <code>MIKE_Zero_2023_Examples.tgz</code>
</tab>
<tab name="MIKE 2022">
* <code>MIKE_Zero_2022_rhel7_Update_1.tgz</code>
* <code>MIKE_Zero_2022_Tools_rhel7_Update_1.tgz</code>
* <code>MIKE_Zero_2022_Examples_Update_1.tgz</code>
</tab>
</tabs>


<div class="mw-translate-fuzzy">
1. Créez le répertoire <code>~/scratch/MIKE_TGZ</code> pour y téléverser les trois archives.
</div>

2. MIKE a été compilé avec la bibliothèque Intel MPI, donc chargez le module apparié <<code>intelmpi</code>.

<tabs>
<tab name="MIKE 2024 & 2025">
 module load StdEnv/2023 intel/2023.2.1 intelmpi/2021.9.0
</tab>
<tab name="MIKE 2023">
 module load StdEnv/2020  intel/2021.2.0  intelmpi/2021.2.0
</tab>
<tab name="MIKE 2022">
 module load StdEnv/2020  intel/2020.1.217  intelmpi/2019.7.217
</tab>
</tabs>

3. Lancez les commandes suivantes, selon la version de MIKE. 
Ceci fera l'extraction des archives. Exécutez les scripts d'installation <i> install.sh</i> pour chaque composant,
ensuite [[Installing_software_in_your_home_directory/fr#Installer_des_paquets_binaires|modifiez les binaires]] pour qu'ils trouvent les bibliothèques dynamiques d'Intel MPI.

<tabs>
<tab name="MIKE 2025">
 export MIKE_TGZ="$HOME/scratch/MIKE_TGZ"
 export MIKE_HOME="$HOME/MIKE/2025"
 
 cd $MIKE_TGZ
 unzip -j  MIKE_Zero_2025_rhel9.zip
 tar -xzf MIKE_Common_2025_rhel9.tgz
 tar -xzf MIKE_Zero_2025_rhel9.tgz
 tar -xzf MIKE_Zero_2025_Tools_rhel9.tgz
 tar -xzf MIKE_Zero_2025_Examples.tgz
 
 cd $MIKE_TGZ/MIKE_Common_2025_rhel9
 sed -i 's/ cp -rp / cp -r /' install.sh
 sh install.sh --eula --install-path "$MIKE_HOME" --license-server 127.0.0.1
 cd $MIKE_TGZ/MIKE_Zero_2025_rhel9
 sed -i 's/ cp -rp / cp -r /' install.sh
 sh install.sh --eula --install-path "$MIKE_HOME"
 cd $MIKE_TGZ/MIKE_Zero_2025_Tools_rhel9
 sed -i 's/ cp -rp / cp -r /' install.sh
 sh install.sh --eula --install-path "$MIKE_HOME"
 cd $MIKE_TGZ/MIKE_Zero_2025_Examples
 sed -i 's/ cp -rp / cp -r /' install.sh
 sh install.sh --eula --install-path "$MIKE_HOME"
 
 module load StdEnv/2023 intel/2023.2.1 intelmpi/2021.9.0
 setrpaths.sh --path "$MIKE_HOME/bin"  --add_origin  \
     --add_path="$EBROOTIMPI/mpi/latest/lib/release:$EBROOTIMPI/mpi/latest/lib"
</tab>
<tab name="MIKE 2024">
 export MIKE_TGZ="$HOME/scratch/MIKE_TGZ"
 export MIKE_HOME="$HOME/MIKE/2024"
 
 cd $MIKE_TGZ
 tar -xzf MIKE_Zero_2024_rhel9_Update_1.tgz
 tar -xzf MIKE_Zero_2024_Tools_rhel9_Update_1.tgz
 tar -xzf MIKE_Zero_2024_Examples_Update_1.tgz
 
 cd $MIKE_TGZ/MIKE_Zero_2024_rhel9_Update_1
 sed -i 's/ cp -rp / cp -r /' install.sh
 sh install.sh --eula --install-path "$MIKE_HOME" --license-server 127.0.0.1
 cd $MIKE_TGZ/MIKE_Zero_2024_Tools_rhel9_Update_1
 sed -i 's/ cp -rp / cp -r /' install.sh
 sh install.sh --eula --install-path "$MIKE_HOME"
 cd $MIKE_TGZ/MIKE_Zero_2024_Examples_Update_1
 sed -i 's/ cp -rp / cp -r /' install.sh
 sh install.sh --eula --install-path "$MIKE_HOME"
 
 module load StdEnv/2023 intel/2023.2.1 intelmpi/2021.9.0
 setrpaths.sh --path "$MIKE_HOME/bin"  --add_origin  \
     --add_path="$EBROOTIMPI/mpi/latest/lib/release:$EBROOTIMPI/mpi/latest/lib"
</tab>
<tab name="MIKE 2023">
 export MIKE_TGZ="$HOME/scratch/MIKE_TGZ"
 export MIKE_HOME="$HOME/MIKE/2023"
 
 cd $MIKE_TGZ
 tar -xzf MIKE_Zero_2023_rhel7_22.11.05.tgz
 tar -xzf MIKE_Zero_2023_Tools_rhel7_22.11.05.tgz
 tar -xzf MIKE_Zero_2023_Examples.tgz
 
 cd $MIKE_TGZ/MIKE_Zero_2023_rhel7_22.11.05
 sh install.sh --eula --install-path "$MIKE_HOME" --license-server 127.0.0.1
 cd $MIKE_TGZ/MIKE_Zero_2023_Tools_rhel7_22.11.05
 sh install.sh --eula --install-path "$MIKE_HOME"
 cd $MIKE_TGZ/MIKE_Zero_2023_Examples
 sh install.sh --eula --install-path "$MIKE_HOME"
 
 module load StdEnv/2020  intel/2021.2.0  intelmpi/2021.2.0
 setrpaths.sh --path "$MIKE_HOME/bin"  --add_origin  \
     --add_path="$EBROOTIMPI/mpi/latest/lib/release:$EBROOTIMPI/mpi/latest/lib"
</tab>
<tab name="MIKE 2022">
 MIKE_TGZ_DIR="$HOME/MIKE_TGZ"
 MIKE_INST_DIR="$HOME/MIKE/2022"
 
 cd $MIKE_TGZ_DIR
 tar -xzf MIKE_Zero_2022_rhel7_Update_1.tgz 
 tar -xzf MIKE_Zero_2022_Tools_rhel7_Update_1.tgz
 tar -xzf MIKE_Zero_2022_Examples_Update_1.tgz
 
 cd $MIKE_TGZ_DIR/MIKE_Zero_2022_rhel7_Update_1
 sh install.sh --eula --install-path "$MIKE_INST_DIR" --license-server 127.0.0.1
 cd $MIKE_TGZ_DIR/MIKE_Zero_2022_Tools_rhel7_Update_1
 sh install.sh --eula --install-path "$MIKE_INST_DIR"
 cd $MIKE_TGZ_DIR/MIKE_Zero_2022_Examples_Update_1
 sh install.sh --eula --install-path "$MIKE_INST_DIR"
 
 module load StdEnv/2020 intel/2020.1.217 intelmpi/2019.7.217
 setrpaths.sh --path "$MIKE_INST_DIR/bin"  --add_origin  \
     --add_path="$EBROOTIMPI/intel64/lib/release:$EBROOTIMPI/intel64/lib"
</tab>
</tabs>

<span id="Other_versions"></span>
=== Autres versions ===

Les instructions ci-dessus supposent que les archives d'installation ont des noms de fichiers spécifiques. À l'installation de versions mineures publiées la même année, les noms des fichiers pour les archives (par exemple dans <code>tar -xzf MIKE_Zero_2023_rhel7_22.11.05.tgz</code>), 
et les noms des répertoires (par exemple dans <code>cd $MIKE_TGZ/MIKE_Zero_2023_rhel7_22.11.05</code>) ont besoin d'être ajustés en conséquence.
Les prochaines versions majeures de MIKE pourraient utiliser des versions différentes de MPI et il faudrait alors modifier les directives en conséquence. Essayez un module de bibliothèque Intel MPI avec une version majeure correspondante (année).

Essentially the above instructions follow the official installation procedure with the exception that the installation of <code>MIKE_Zero_*_Prerequisites.tgz</code> (Intel MPI library) is skipped and a matching module is loaded instead. Furthermore the <code>setrpaths.sh</code> script is used to [[Installing_software_in_your_home_directory#Installing_binary_packages|patch the installed binaries]] to make them compatible with our software stack.

If you run into problems adapting the recipe for newer versions of MIKE, contact our [[Technical support]].

<span id="Create_a_module"></span>
=== Créer un module ===

<div class="mw-translate-fuzzy">
Collez ces commandes dans votre terminal pour créer un module d'environnement pour MIKE.
Assurez-vous de modifier la version (2022) pour correspondre à la version que vous avez installée.
Modifiez aussi la version des modules <code>intelmpi</code> et <code>intel</code> pour correspondre à ce que vous avez chargé pendant l'installation.
</div>


<tabs>
<tab name="MIKE 2025">
 export MIKE_VERSION=2025
 mkdir -p $HOME/modulefiles/mike
 cat > $HOME/modulefiles/mike/${MIKE_VERSION}.lua <<EOF
 help([[
 Module for MIKE ${MIKE_VERSION} (by DHI group)
 ]])
 local version = "${MIKE_VERSION}"
 whatis("Version:".. version)
 whatis("Keywords: FEM, Finite Elements, Simulation")
 whatis("URL: https://www.mikepoweredbydhi.com/mike-" .. version)
 whatis("Description: MIKE is a hydraulic and hydrological modeling software package.")
 
 local home = os.getenv("HOME") or "~"
 local root = pathJoin( home, "MIKE", version)
 
 depends_on("StdEnv/2023", "intel/2023.2.1", "intelmpi/2021.9.0")
 setenv("I_MPI_PMI_LIBRARY", "/opt/software/slurm/lib/libpmi2.so")
 setenv("SLURM_MPI_TYPE", "pmi2")
 setenv("MIKE_HOME", root)
 setenv("MIKE_PROGRESS", "STDOUT")
 prepend_path( "PATH", pathJoin(root, "bin"))
 EOF
</tab>
<tab name="MIKE 2024">
 export MIKE_VERSION=2024
 mkdir -p $HOME/modulefiles/mike
 cat > $HOME/modulefiles/mike/${MIKE_VERSION}.lua <<EOF
 help([[
 Module for MIKE ${MIKE_VERSION} (by DHI group)
 ]])
 local version = "${MIKE_VERSION}"
 whatis("Version:".. version)
 whatis("Keywords: FEM, Finite Elements, Simulation")
 whatis("URL: https://www.mikepoweredbydhi.com/mike-" .. version)
 whatis("Description: MIKE is a hydraulic and hydrological modeling software package.")
 
 local home = os.getenv("HOME") or "~"
 local root = pathJoin( home, "MIKE", version)
 
 depends_on("StdEnv/2023", "intel/2023.2.1", "intelmpi/2021.9.0")
 setenv("I_MPI_PMI_LIBRARY", "/opt/software/slurm/lib/libpmi2.so")
 setenv("SLURM_MPI_TYPE", "pmi2")
 setenv("MIKE_HOME", root)
 setenv("MIKE_PROGRESS", "STDOUT")
 prepend_path( "PATH", pathJoin(root, "bin"))
 EOF
</tab>
<tab name="MIKE 2023">
 export MIKE_VERSION=2023
 mkdir -p $HOME/modulefiles/mike
 cat > $HOME/modulefiles/mike/${MIKE_VERSION}.lua <<EOF
 help([[
 Module for MIKE ${MIKE_VERSION} (by DHI group)
 ]])
 local version = "${MIKE_VERSION}"
 whatis("Version:".. version)
 whatis("Keywords: FEM, Finite Elements, Simulation")
 whatis("URL: https://www.mikepoweredbydhi.com/mike-" .. version)
 whatis("Description: MIKE is a hydraulic and hydrological modeling software package.")
 
 local home = os.getenv("HOME") or "~"
 local root = pathJoin( home, "MIKE", version)
 
 depends_on("StdEnv/2020", "intel/2021.2.0", "intelmpi/2021.2.0")
 
 setenv("I_MPI_PMI_LIBRARY", "/opt/software/slurm/lib/libpmi2.so")
 setenv("SLURM_MPI_TYPE", "pmi2")
 setenv("MIKE_HOME", root)
 setenv("MIKE_PROGRESS", "STDOUT")
 prepend_path( "PATH", pathJoin(root, "bin"))
 EOF
</tab>
<tab name="MIKE 2022">
 export MIKE_VERSION=2022
 mkdir -p $HOME/modulefiles/mike
 cat > $HOME/modulefiles/mike/${MIKE_VERSION}.lua <<EOF
 help([[
   Module for MIKE ${MIKE_VERSION} (by DHI group)
 ]])
 local version = "${MIKE_VERSION}"
 whatis("Version:".. version)
 whatis("Keywords: FEM, Finite Elements, Simulation")
 whatis("URL: https://www.mikepoweredbydhi.com/mike-" .. version)
 whatis("Description: MIKE is a hydraulic and hydrological modeling software package.")
 
 local home = os.getenv("HOME") or "~"
 local root = pathJoin( home, "MIKE", version)
 
 depends_on("StdEnv/2020", "intel/2020.1.217", "intelmpi/2019.7.217") 
 
 setenv("I_MPI_PMI_LIBRARY", "/opt/software/slurm/lib/libpmi2.so")
 setenv("SLURM_MPI_TYPE", "pmi2")
 setenv("MIKE_HOME", root)
 setenv("MIKE_PROGRESS", "STDOUT")
 prepend_path( "PATH", pathJoin(root, "bin"))
 EOF
</tab>
</tabs>

Activez ce module dans chaque tâche ou dans chaque session de connexion avec

<tabs>
<tab name="MIKE 2025">
{{Command|module load StdEnv/2023 mike/2025}}
</tab>
<tab name="MIKE 2024">
{{Command|module load StdEnv/2023 mike/2024}}
</tab>
<tab name="MIKE 2023">
{{Command|module load StdEnv/2020 mike/2023}}
</tab>
<tab name="MIKE 2022">
{{Command|module load StdEnv/2020 mike/2022}}
</tab>
</tabs>

<span id="Configure_the_license"></span>
=== Configurer la licence ===

Le service à la clientèle de MIKE vous enverra des directives comme ceci pour configurer votre licence.
{{Command|licconfig set --type{{=}}internet --iuser{{=}}user@example.com --ipassword{{=}}my-password}}
Ceci se fait habituellement une seule fois quand vous recevez une nouvelle licence ou un nouveau code de licence.
Les renseignements sur la licence sont enregistrés dans le fichier <code>~/.config/DHI/license/NetLmLcwConfig.xml</code>.

<span id="Example_job_script"></span>
== Exemple de script pour une tâche ==

<tabs>
<tab name="MIKE 2025">
{{File
|name=job_mike_2025_CPU.sh
|lang="bash"
|contents=
#!/bin/bash
#SBATCH --nodes=1
#SBATCH --ntasks=8
#SBATCH --cpus-per-task=1
#SBATCH --mem-per-cpu=4000M
#SBATCH --time=00:20:00

module load  StdEnv/2023  intel/2023.2.1  intelmpi/2021.9.0  mike/2025
export OMP_NUM_THREADS=${SLURM_CPUS_PER_TASK:-1}

engine="FemEngineHD"
model="my_model.m3fm"

srun $engine $model
}}
</tab>
<tab name="MIKE 2024">
{{File
|name=job_mike_2024_CPU.sh
|lang="bash"
|contents=
#!/bin/bash
#SBATCH --nodes=1
#SBATCH --ntasks=8
#SBATCH --cpus-per-task=1
#SBATCH --mem-per-cpu=4000M
#SBATCH --time=00:20:00

module load  StdEnv/2023  intel/2023.2.1  intelmpi/2021.9.0  mike/2024
export OMP_NUM_THREADS=${SLURM_CPUS_PER_TASK:-1}

engine="FemEngineHD"
model="my_model.m3fm"

srun $engine $model
}}
</tab>
<tab name="MIKE 2023">
{{File
|name=job_mike_2023_CPU.sh
|lang="bash"
|contents=
#!/bin/bash
#SBATCH --nodes=1
#SBATCH --ntasks=8
#SBATCH --cpus-per-task=1
#SBATCH --mem-per-cpu=4000M
#SBATCH --time=00:20:00

module load StdEnv/2020  intel/2021.2.0  intelmpi/2021.2.0  mike/2023
export OMP_NUM_THREADS=${SLURM_CPUS_PER_TASK:-1}

engine="FemEngineHD"
model="my_model.m3fm"

srun $engine $model
}}
</tab>
<tab name="MIKE 2022">
{{File
|name=job_mike_2022_CPU.sh
|lang="bash"
|contents=
#!/bin/bash
#SBATCH --nodes=1
#SBATCH --ntasks=8
#SBATCH --cpus-per-task=1
#SBATCH --mem-per-cpu=4000M
#SBATCH --time=00:20:00

module load StdEnv/2020  intel/2020.1.217  intelmpi/2019.7.217  mike/2022
export OMP_NUM_THREADS=${SLURM_CPUS_PER_TASK:-1}
slurm_hl2hl.py --format MPIHOSTLIST > machinefile.$SLURM_JOBID

engine="FemEngineHD"
model="my_model.m3fm"

mpirun -machinefile machinefile.$SLURM_JOBID $engine $model
}}
</tab>
</tabs>