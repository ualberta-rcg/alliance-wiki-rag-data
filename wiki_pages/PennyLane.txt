<languages />

<translate>

<!--T:1-->
[https://pennylane.ai/ PennyLane] est une plateforme logicielle à code source ouvert pour le calcul quantique différentiable dont [https://github.com/calculquebec/pennylane-snowflurry la première version a été publiée sur Github] en 2018. Développée à Toronto par Xanadu, PennyLane permet de concevoir des circuits quantiques et de les exécuter sur divers simulateurs et matériels quantiques. La plateforme est conçue pour faciliter la simulation, l'optimisation et l’apprentissage d’algorithmes quantiques hybrides qui combinent des traitements classiques et quantiques.

<!--T:2-->
[[File:Pennylane_Snowflurry-Diagram1.png|thumb|right|300px]]

<!--T:3-->
== Fonctionnalités ==
PennyLane offre plusieurs fonctionnalités pour faciliter la recherche et le développement dans le domaine de l'informatique quantique différentiable.

<!--T:4-->
=== Interface quantique unifiée ===
PennyLane fournit une interface unifiée qui permet de concevoir des circuits quantiques et de les exécuter sur différents simulateurs et matériels quantiques. La plateforme prend en charge plusieurs simulateurs quantiques populaires, tels que [[Qiskit]], [[CirQ]], Strawberry Field ou encore QuTip. PennyLane prend également en charge plusieurs matériels quantiques, notamment les dispositifs quantiques de Xanadu, IBM, Rigetti et IonQ.

<!--T:5-->
Calcul Québec a développé le plugiciel [https://github.com/calculquebec/pennylane-snowflurry\ PennyLane-CalculQuebec] qui utilise l’interface PennyLane pour concevoir et exécuter des circuits quantiques sur [[MonarQ]].

<!--T:6-->
=== Intégration avec des bibliothèques d'apprentissage automatique ===
PennyLane s'intègre de manière transparente avec des librairies d'apprentissage automatique populaires telles que [[TensorFlow/fr|TensorFlow]] et [[PyTorch/fr|PyTorch]], et vous permet d'utiliser les outils d'apprentissage automatique pour construire des modèles d'apprentissage automatique quantiques hybrides et optimiser les circuits quantiques.

<!--T:7-->
=== Optimisation de circuits quantiques ===
En utilisant des techniques d'optimisation différentiables et en combinant les méthodes de différenciation classiques et quantiques, PennyLane optimise les paramètres des circuits quantiques afin de résoudre des problèmes variés.

<!--T:8-->
=== Outils de visualisation ===
PennyLane fournit des outils de visualisation pour faciliter la compréhension du fonctionnement des circuits quantiques.

<!--T:9-->
=== Communauté et développement ===
PennyLane est un projet à code source ouvert avec une communauté active de développeurs et d'utilisateurs. Le projet est constamment mis à jour avec de nouvelles fonctionnalités et améliorations, et tous peuvent contribuer au développement de la plateforme.

<!--T:10-->
== Utiliser PennyLane avec MonarQ ==
[[MonarQ]] est conçu pour être programmé avec [[Snowflurry]], une bibliothèque logicielle programmée en Julia et développée par Anyon Systems. Par contre, grâce au plugiciel PennyLane-CalculQuebec, les circuits PennyLane peuvent être créés en utilisant Snowflurry en arrière-plan. Cela permet d’exécuter des circuits sur [[MonarQ]] tout en bénéficiant des fonctionnalités et de l'environnement de développement offerts par PennyLane. Voir la documentation [https://github.com/calculquebec/pennylane-snowflurry\ PennyLane-CalculQuebec] pour les guides d’installation et d’usage.

<!--T:25-->
Un [[Transpileur quantique|transpileur quantique]] est également disponible à partir de PennyLane afin d'optimiser ses circuits pour MonarQ. 

<!--T:11-->
== Création de l'environnement virtuel  ==
[[Python/fr#Créer_et_utiliser_un_environnement_virtuel|Créons un environnement virtuel Python]] pour utiliser PennyLane.
{{Commands
|module load python/3.11
|virtualenv --no-download --clear ~/ENV && source ~/ENV/bin/activate
|pip install --no-index --upgrade pip
|pip install --no-index pennylane{{=}}{{=}}X.Y.Z
|python -c "import pennylane"
}}
où <tt>X.Y.Z</tt> est la version désirée.

<!--T:12-->
Vous pouvez également inscrire les trois dernières commandes ci-dessus dans un fichier pennylane-reqs.txt et appeler le fichier à l'intérieur d'une session avec  les commandes:
{{Commands
|module load python/3.11
|pip install --no-index -r pennylane-reqs.txt
}}

<!--T:13-->
==Exécuter PennyLane sur une grappe==
{{File
  |name=script.sh
  |lang="sh"
  |contents=
#!/bin/bash
#SBATCH --account=def-someuser # Indiquez le nom de votre compte
#SBATCH --time=00:15:00        # Modifiez s'il y a lieu
#SBATCH --cpus-per-task=1      # Modifiez s'il y a lieu
#SBATCH --mem-per-cpu=1G       # Modifiez s'il y a lieu

<!--T:14-->
# Chargez les dépendances des modules.
module load StdEnv/2023 gcc python/3.11 

<!--T:15-->
# Générez l'environnement virtuel dans $SLURM_TMPDIR.                                                                                                        
virtualenv --no-download ${SLURM_TMPDIR}/env                                                                                                                   
source ${SLURM_TMPDIR}/env/bin/activate  

<!--T:16-->
# Installez Pennylane et ses dépendances.                                                                                                                                                                                                                                                                                    
pip install --no-index --upgrade pip                                                                                                                            
pip install --no-index --requirement ~/pennylane_requirements.txt

<!--T:24-->
# Modifiez votre programme PennyLane.                                                                                                                                                                       
python pennylane_example.py
}}
Vous pouvez ensuite soumettre votre tâche à [[Running jobs/fr|l'ordonnanceur]].

<!--T:17-->
== Exemple d’utilisation : États de Bell ==
Commençons par créer l'environnement virtuel, tel que décrit ci-dessus.

<!--T:18-->
Nous allons ensuite générer le premier état de Bell en utilisant PennyLane.
    import pennylane as qml

   <!--T:19-->
# Définir le circuit quantique pour générer le premier état de Bell
    def bell_circuit():
     qml.Hadamard(wires=0)
     qml.CNOT(wires=[0, 1])

   <!--T:20-->
# Définir le simulateur de circuit quantique
    dev = qml.device('default.qubit', wires=2)

   <!--T:21-->
# Définir le circuit quantique comme fonction QNode
    @qml.qnode(dev)
    def generate_bell_state():
     bell_circuit()
     return qml.state()

   <!--T:22-->
# Générer et afficher le premier état de Bell
    bell_state_0 = generate_bell_state()
    print("Premier état de Bell :", bell_state_0)
    Premier état de Bell :[0.70710678+0.j 0.        +0.j 0.        +0.j 0.70710678+0.j]

<!--T:23-->
== Références ==
* [https://pennylane.ai\ Site officiel de PennyLane]
* [https://github.com/PennyLaneAI/pennylane\ Documentation de PennyLane sur GitHub]
* [https://github.com/calculquebec/pennylane-snowflurry\ PennyLane-CalculQuebec]

</translate>