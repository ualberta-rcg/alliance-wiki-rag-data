<languages />

<translate>
<!--T:62-->
= JupyterLab = 
JupyterLab is the recommended general-purpose user interface to use on a JupyterHub.
From a JupyterLab server, you can manage your remote files and folders,
and you can launch Jupyter applications like a terminal, (Python 3) notebooks, RStudio and a Linux desktop.

<!--T:63-->
You can add your own "kernels", which appear as application tiles described below.  To configure such kernels, please see [[JupyterNotebook#Adding_kernels|Adding kernels]].

<!--T:64-->
== Launching JupyterLab ==
There are a few ways to launch JupyterLab. 

<!--T:65-->
The traditional way would be to use [[JupyterHub#JupyterHub on clusters|JupyterHub]], but more recently, sites have deployed Open On Demand which sometimes can launch the interface below. In the table below, the column "Fully-featured" indicates whether the JupyterLab interface available has all of the features described below. If there is a link, it is to that cluster's JupyterHub or Open On Demand server.

<!--T:146-->
{| class="wikitable" style="text-align: center;"
|+
!Site
! colspan="2" |JupyterHub
! colspan="3" |Open On Demand
|-
|
|Available
|Fully-featured
|Available
|JupyterLab
|Fully-featured
|-
|Cedar
|[https://jupyterhub.cedar.alliancecan.ca/ Yes]
|No
| colspan="3" |No
|-
|Fir
| colspan="2" |No
| colspan="3" |No
|-
|Killarney
| colspan="2" |No
| colspan="3" |No
|-
|Narval
|[https://jupyterhub.narval.alliancecan.ca/ Yes]
|No
| colspan="3" |No
|-
|Nibi
| colspan="2" |No
|[https://ondemand.sharcnet.ca/ Yes]
|No
|No
|-
|Rorqual
| colspan="2" |[https://jupyterhub.rorqual.alliancecan.ca/ Yes] 
| colspan="3" |No
|-
|tamIA
| colspan="2" |No
| colspan="3" |No
|-
|Trillium
| colspan="2" |No
|[http://ondemand.scinet.utoronto.ca/ Yes]
|Yes
|No
|-
|Vulcan
| colspan="2" |No
| colspan="3" |[https://vulcan.alliancecan.ca/ Yes]
|}

<!--T:67-->
It is also possible to launch JupyterLab by [[Advanced Jupyter configuration|installing it yourself in a virtual environment]], but this is not recommended. You will also not benefit from any of the pre-configured applications described below.

== The JupyterLab interface == <!--T:68-->

<!--T:69-->
When you open JupyterLab in one of our most recent clusters, you will be presented with a dashboard pre-populated with a few launchers. Default launchers include Python 3.11, LibreQDA, Mate Desktop (VNC), OpenRefine, RStudio, VS Code and XFCE4 Desktop (VNC). In addition, you may find links to the cluster's [[Globus]] collection, to the cluster's job portal, as well as links to relevant documentation pages. By loading modules, you will see new launchers appear in the dashboard (see below). 

<!--T:70-->
In the menu bar on the top, please note that in order to close your session, you may do so through the ''File'' menu: 
* <i>Hub Control Panel</i>: if you want to manually stop the JupyterLab server and the corresponding job on the cluster. This is useful when you want to start a new JupyterLab server with more or less resources.
* <i>Log Out</i>: the session will end, which will also stop the JupyterLab server and the corresponding job on the cluster.
Most other menu items are related to notebooks and Jupyter applications.
[[File:JupyterLab Launcher with modules.png|none|thumb|750x750px|Default home tab when JupyterLab is loaded]]

<!--T:71-->
=== Tool selector on left ===
On the left side of the interface, you will find the tool selector. This changes the content of the frame on the left side. The most relevant ones are:

<!--T:72-->
==== <i>File Browser</i> (folder icon): ====
This is where you can browse in your home, project and scratch spaces. It is also possible to use it to upload files.
[[File:File browser.png|alt=File browser|none|frame|File browser]]

<!--T:73-->
==== <i>Running Terminals and Kernels</i> (stop icon): ====
This is to stop kernel sessions and terminal sessions

<!--T:74-->
==== <i>GPU Dashboards</i> (GPU card icon): ====
If your job uses GPUs, this will give you access to some resource monitoring options.

<!--T:75-->
==== <b><i>Software</i></b> (diamond sign): ====
[[File:Software module selector.png|alt=Software module selector|none|thumb|Software module selector]]
This is where you can load or unload [[Available software|software modules]] available in our environment. Depending on the modules loaded, icons directing to the corresponding [[#Prebuilt_applications|Jupyter applications]] will appear in the <i>Launcher</i> tab. By default, we load a number of modules to provide you access to basic tools. 

<!--T:76-->
The search box can search for any [[Available software|available module]] and show the result in the <i>Available Modules</i> subpanel. Note: Some modules are hidden until their dependency is loaded: we recommend that you first look for a specific module with <code>module spider module_name</code> from a terminal.

<!--T:77-->
The next subpanel is the list of <i>Loaded Modules</i> in the whole JupyterLab session. 

<!--T:78-->
The last subpanel is the list of <i>Available modules</i>, similar to the output of <code>module avail</code>. By clicking on a module's name, detailed information about the module is displayed. By clicking on the <i>Load</i> link, the module will be loaded and added to the <i>Loaded Modules</i> list.

=== Status bar at the bottom === <!--T:79-->

<!--T:80-->
* By clicking on the icons, this brings you to the <i>Running Terminals and Kernels</i> tool.

== Prebuilt applications == <!--T:81-->

<!--T:82-->
JupyterLab offers access to a terminal, an IDE (Desktop), a Python console and different options to create text and markdown files. This section presents only the main supported Jupyter applications that work with our software stack.

<!--T:83-->
=== Applications that are available by default ===
A number of software modules are loaded by default, to give you access to those applications without any further actions. 

<!--T:84-->
==== Python ====
[[File:Python launcher icon.png|alt=Python launcher icon|left|thumb|Python launcher icon]]
A Python kernel, with the default version, is automatically loaded. This allows you to start python notebooks automatically using the icon. 

<!--T:85-->
We load a default version of the Python software, but you may use a different one by loading another version of the <code>ipython-kernel</code> modules.

<!--T:86-->
This python environment does not come with most pre-installed packages. However, you can load some modules, such as <code>scipy-stack</code> in order to get additional features. 

<!--T:87-->
You can also install python packages directly in the notebook's environment, by running 

<!--T:88-->
<code>pip install --no-index package-name</code> 

<!--T:89-->
in a cell of your notebook and then restarting your kernel.

<!--T:90-->
==== VS Code ====
[[File:VS Code launcher icon.png|alt=VS Code launcher icon|left|thumb|VS Code launcher icon]]
VS Code (Visual Studio Code) is a code editor originally developed by Microsoft, but which is an open standard on which [https://github.com/coder/code-server code-server] is based to make the application available through any browser. 

<!--T:91-->
The version which we have installed comes with a large number of [https://github.com/ComputeCanada/easybuild-easyconfigs-installed-avx2/blob/main/2023/code-server/code-server-4.101.2.eb#L27 extensions] pre-installed. For more details, see our page on [[Visual Studio Code]].

<!--T:92-->
For a new session, the <i>VS Code</i> session can take up to 3 minutes to complete its startup.

<!--T:93-->
It is possible to reopen an active VS Code session after the web browser tab was closed.

<!--T:94-->
The VS Code session will end when the JupyterLab session ends.


<!--T:95-->
==== LibreQDA ====
[[File:LibreQDA launcher icon.png|alt=LibreQDA launcher icon|left|thumb|LibreQDA launcher icon]]
<i>[https://aide.libreqda.org/ LibreQDA]</i> is an application for qualitative analysis, forked from [https://www.taguette.org/ Taguette]. 
 
This icon will launch a single-user version of the software, which can be used for text analysis. 

<!--T:96-->
For a new session, the <i>LibreQDA</i> session can take up to 3 minutes to complete its startup.

<!--T:97-->
It is possible to reopen an active LibreQDA session after the web browser tab was closed.

<!--T:98-->
The LibreQDA session will end when the JupyterLab session ends.

<!--T:99-->
==== RStudio ====
[[File:RStudio launcher icon.png|alt=RStudio launcher icon|left|thumb|RStudio launcher icon]]
[https://posit.co/download/rstudio-desktop/ RStudio] is an integrated development environment primarily use for the [[R]] language. 

<!--T:100-->
We load a default version of the R software, but you may use a different one by loading another version of the <code>rstudio-server</code> modules. Please do so '''before''' launching RStudio, otherwise you may have to restart your JupyterLab session.

<!--T:101-->
This <i>RStudio</i> launcher will open or reopen an RStudio interface in a new web browser tab.

<!--T:102-->
It is possible to reopen an active RStudio session after the web browser tab was closed.

<!--T:103-->
The RStudio session will end when the JupyterLab session ends.

<!--T:104-->
Note that simply quitting RStudio or closing the RStudio and JupyterHub tabs in your browser will not release the resources (CPU, memory, GPU) nor end the underlying Slurm job.  <b>Please end your session with the menu item <code>File > Log Out</code> on the JupyterLab browser tab</b>.
==== OpenRefine ====
[[File:OpenRefine launcher icon.png|alt=OpenRefine launcher icon|left|thumb|OpenRefine launcher icon]]
[https://openrefine.org/ OpenRefine] is a powerful, free and open-source tool to clean up messy data, to transform it, and to extend it in order to add value to it. 

<!--T:105-->
It is commonly used to correct typos in manually collected survey data.

<!--T:106-->
For a new session, the <i>OpenRefine</i> session can take up to 3 minutes to complete its startup.

<!--T:107-->
It is possible to reopen an active OpenRefine session after the web browser tab was closed.

<!--T:108-->
The OpenRefine session will end when the JupyterLab session ends.


<!--T:109-->
==== Desktop ====
[[File:Desktop launchers.png|alt=Desktop launchers|left|thumb|Desktop launchers]]
Two different Desktop environments are available by default. [https://mate-desktop.org/ Mate Desktop], and [https://www.xfce.org/ XFCE Desktop]. You may choose whichever you prefer. XFCE yields a more modern UI, while Mate is lighter to use.
These launchers will open or reopen a remote Linux desktop interface in a new web browser tab. 

<!--T:110-->
This is equivalent to running a [[VNC#Compute_Nodes|VNC server on a compute node]], then creating an [[SSH_tunnelling|SSH tunnel]] and finally using a [[VNC#Setup|VNC client]], but you need nothing of all this with JupyterLab!

<!--T:111-->
For a new session, the <i>Desktop</i> session can take up to 3 minutes to complete its startup.

<!--T:112-->
It is possible to reopen an active desktop session after the web browser tab was closed.

<!--T:113-->
The desktop session will end when the JupyterLab session ends.

<!--T:114-->
==== Terminal ====
[[File:Terminal launcher.png|alt=Terminal launcher|left|thumb|Terminal launcher]]
JupyterLab also natively allows you to open a terminal session. This may be useful to run bash commands, submit jobs, or edit files. 

<!--T:115-->
The terminal runs a (Bash) shell on the remote compute node without the need of an SSH connection.

<!--T:116-->
Gives access to the remote filesystems (<code>/home</code>, <code>/project</code>, <code>/scratch</code>).

<!--T:117-->
Allows running compute tasks.

<!--T:118-->
The terminal allows copy-and-paste operations of text:

<!--T:119-->
Copy operation: select the text, then press Ctrl+C.

<!--T:120-->
Note: Usually, Ctrl+C is used to send a SIGINT signal to a running process, or to cancel the current command. To get this behaviour in JupyterLab's terminal, click on the terminal to deselect any text before pressing Ctrl+C.

<!--T:121-->
Paste operation: press Ctrl+V.

<!--T:122-->
==== Globus ====
[[File:Globus launcher.png|alt=Globus launcher|none|thumb|Globus launcher]]
If [[Globus]] is availalbe on the cluster you are using, you may see this icon. This will open your browser to the corresponding Globus collection.

<!--T:123-->
==== Metrix ====
[[File:Metrix launcher.png|alt=Metrix launcher|none|thumb|Metrix launcher]]
If the [[Portail|Metrix job portal]] is available on the cluster you are using, this icon will open a page with the statistics of your job. 

<!--T:124-->
=== Applications available after loading a module ===
Multiple of the modules we provide will also make a launcher available when they are loaded, even though they are not loaded by default. 

<!--T:125-->
==== Julia ====
[[File:Julia launcher.png|alt=Julia launcher|none|thumb|Julia launcher]]
Loading a module <code>ijulia-kernel</code> will allow you to open a notebook with the Julia language. 

<!--T:126-->
==== Ansys suite ====
The [[Ansys]] suite has multiple tools which provide a graphical user interface. If you load one of the <code>ansys</code> modules, you will get a series of launcher, most of which work through a VNC connection in the browser. 
{| class="wikitable"
|+
![[File:Ansys CFX launcher.png|alt=Ansys CFX launcher|none|thumb|Ansys CFX launcher]]
![[File:Ansys Fluent launcher.png|alt=Ansys Fluent launcher|none|thumb|Ansys Fluent launcher]]
![[File:Ansys Mapdl launcher.png|alt=Ansys Mapdl launcher|none|thumb|Ansys Mapdl launcher]]
![[File:Ansys Workbench launcher.png|alt=Ansys Workbench launcher|none|thumb|Ansys Workbench launcher]]
|}
In addition, Ansys Fluent has a web-based interface, which can be launched with the icon below. 
[[File:Ansys Fluent web launcher.png|alt=Ansys Fluent web launcher|none|thumb|Ansys Fluent web launcher]]
Note that for Ansys Fluent, a password is required to connect to it. That password is generated when you launch it, and written in your personal folder, in the file <code>$HOME/fluent_webserver_token</code>.

<!--T:127-->
Note that for Ansys, you will need to provide your own license, as explained in our [[Ansys]] page.

<!--T:128-->
==== Ansys EDT ====
[https://www.ansys.com/products/electronics Ansys EDT] is in its own separate module. Loading the module <code>ansysedt</code> will make the corresponding launcher appear.

<!--T:129-->
Note that for Ansys EDT, you will need to provide your own license, as explained in our [[AnsysEDT|Ansys EDT]] page.
[[File:Ansys EDT launcher.png|alt=Ansys EDT launcher|none|thumb|Ansys EDT launcher]]

<!--T:147-->
==== COMSOL ====
[[File:COMSOL launcher.png|alt=COMSOL launcher|none|thumb|COMSOL launcher]]
[http://www.comsol.com COMSOL] is a general-purpose software for modelling engineering applications.

<!--T:148-->
Note that you will need to provide your own license file to use this software. 

<!--T:149-->
Loading a <code>comsol</code> module will add a launcher to start the graphical user interface for COMSOL through a VNC session. See our page on [[COMSOL]] for more details on using this software package. 

<!--T:130-->
==== Matlab ====
[https://www.mathworks.com/?s_tid=gn_logo MATLAB]  is available by loading a <code>matlab</code> module, which will add a launcher to start the software in a VNC session. Note that you will need to provide your own license file, as explained in our [[MATLAB]] page.
[[File:MATLAB launcher.png|alt=MATLAB launcher|none|thumb|MATLAB launcher]]

<!--T:150-->
==== NVidia Nsight Systems ====
[https://developer.nvidia.com/nsight-systems NVidia Nsight Systems] is a performance analysis tool developed primarily for profiling GPUs, but which can profile CPU code as well. 
[[File:NVidia Nsight Systems launcher.png|alt=NVidia Nsight Systems launcher|none|thumb|NVidia Nsight Systems launcher]]
Loading a <code>cuda</code> or a <code>nvhpc</code> module will madd a launcher to start the graphical user interface in a VNC session. 

<!--T:131-->
==== Octave ====
[https://octave.org/ GNU Octave] is an open-source scientific programming language largely compatible with MATLAB. Loading an <code>octave</code> module will add a launcher to start the graphical user interface for Octave through a VNC session. See our page on  [[Octave]] for more details on using this software package.
[[File:Octave launcher.png|alt=Octave launcher|none|thumb|Octave launcher]]

<!--T:132-->
==== ParaView ====
[https://www.paraview.org/ ParaView] is a powerful open-source visualisation software. Loading a <code>paraview</code> module will add a launcher to start the Paraview graphical user interface through a VNC session. See our page on [[ParaView]] for more details on using this software package.
[[File:ParaView launcher.png|alt=ParaView launcher|none|thumb|ParaView launcher]]

<!--T:133-->
==== QGIS ====
[https://qgis.org/ QGIS] is a powerful open-source software for visualizing and processing geographic information systems (GIS) data.  Loading a <code>qgis</code> module will add a launcher to start the QGIS graphical user interface through a VNC session. See our page on [[QGIS]] for more details on this software package.
[[File:QGIS launcher.png|alt=QGIS launcher|none|thumb|QGIS launcher]]

<!--T:134-->
==== StarCCM+ ====
Siemens's [https://plm.sw.siemens.com/en-US/simcenter/fluids-thermal-simulation/star-ccm/ Star-CCM+] is a commercial computational fluid dynamic simulation software. It is available by loading one of the <code>starccm</code> or the <code>starccm-mixed</code> modules, which will add a launcher to start the StarCCM+ graphical user interface through a VNC session. As for all commercial packages, you will need to provide your own license. See our page on [[Star-CCM+]] for more details on using this software.
[[File:StarCCM+ launcher.png|alt=StarCCM+ launcher|none|thumb|StarCCM+ launcher]]

== Additional information on running Python notebooks == <!--T:135-->

==== Python notebook ==== <!--T:136--> 

<!--T:137-->
[[File:JupyterLab_Softwares_ScipyStack.png|thumb|Searching for scipy-stack modules]]
If any of the following scientific Python packages is required by your notebook, before you open this notebook, you must load the <code>scipy-stack</code> module from the JupyterLab <i>Softwares</i> tool:
* <code>ipython</code>, <code>ipython_genutils</code>, <code>ipykernel</code>, <code>ipyparallel</code>
* <code>matplotlib</code>
* <code>numpy</code>
* <code>pandas</code>
* <code>scipy</code>
* Other notable packages are <code>Cycler</code>, <code>futures</code>, <code>jupyter_client</code>, <code>jupyter_core</code>, <code>mpmath</code>, <code>pathlib2</code>, <code>pexpect</code>, <code>pickleshare</code>, <code>ptyprocess</code>, <code>pyzmq</code>, <code>simplegeneric</code>, <code>sympy</code>, <code>tornado</code>, <code>traitlets</code>.
* And many more (click on the <code>scipy-stack</code> module to see all <i>Included extensions</i>).

<!--T:138-->
Note: You may also install needed packages by running for example the following command inside a cell: <code>pip install --no-index numpy</code>.
* For some packages (like <code>plotly</code>, for example), you may need to restart the notebook's kernel before importing the package.
* The installation of packages in the default Python kernel environment is temporary to the lifetime of the JupyterLab session; you will have to reinstall these packages the next time you start a new JupyterLab session. For a persistent Python environment, you must configure a <b>[[Advanced_Jupyter_configuration#Python_kernel|custom Python kernel]]</b>.

<!--T:139-->
To open an existing Python notebook:
* Go back to the <i>File Browser</i>.
* Browse to the location of the <code>*.ipynb</code> file.
* Double-click on the <code>*.ipynb</code> file.
** This will open the Python notebook in a new JupyterLab tab.
** An IPython kernel will start running in the background for this notebook.

<!--T:140-->
To open a new Python notebook in the current <i>File Browser</i> directory:
* Click on the <i>Python 3.x</i> launcher under the <i>Notebook</i> section.
** This will open a new Python 3 notebook in a new JupyterLab tab.
** A new IPython kernel will start running in the background for this notebook.

<!--T:141-->
=== Running notebooks as Python scripts ===
1. From the console, or in a new notebook cell, install <tt>nbconvert</tt> :
<syntaxhighlight lang="bash">!pip install --no-index nbconvert</syntaxhighlight>

<!--T:142-->
2. Convert your notebooks to Python scripts
<syntaxhighlight lang="bash">!jupyter nbconvert --to python my-current-notebook.ipynb</syntaxhighlight>

<!--T:143-->
3. Create your [[Running_jobs#Use_sbatch_to_submit_jobs|non-interactive submission script]], and submit it.

<!--T:144-->
In your submission script, run your converted notebook with:
<syntaxhighlight lang="bash">python my-current-notebook.py</syntaxhighlight>

<!--T:145-->
And submit your non-interactive job:
{{Command
|sbatch my-submit.sh
}}
</translate>