<languages />


Quand [[Running jobs/fr|l'ordonnanceur Slurm démarre une tâche]], un répertoire temporaire est créé sur chacun des nœuds qui sont assignés à cette tâche. 
Par la variable d'environnement <code>SLURM_TMPDIR</code>, Slurm configure ensuite le chemin complet pour ce répertoire.

Parce que ce répertoire se trouve sur un disque local, les opérations en entrée et en sortie (I/O) sont presque toujours plus rapides qu'avec le [[Storage and file management/fr|stockage sur le réseau]]  (/project, /scratch et /home). En particulier, le stockage sur disque local est à privilégier pour les transactions fréquentes de petites quantités de données. Toutes les tâches qui font beaucoup de lecture et d'écriture (ce qui est le cas pour la plupart des tâches) seront probablement exécutées plus rapidement en utilisant <code>$SLURM_TMPDIR</code> plutôt que le stockage sur le réseau.

De par sa nature temporaire, <code>$SLURM_TMPDIR</code> est plus compliqué à utiliser que le stockage sur le réseau. 
Les données en entrée doivent être copiées du réseau à <code>$SLURM_TMPDIR</code> avant qu'elles puissent être lues
et les données en sortie doivent être copiées de <code>$SLURM_TMPDIR</code> au réseau avant que la tâche soit terminée pour que ces données soient conservées.  

<span id="Input"></span>
= Données en entrée =

Pour pouvoir <i>lire</i> les données contenues dans <code>$SLURM_TMPDIR</code>, vous devez d'abord y copier les données.  
Dans les cas les plus simples, vous pouvez faire ceci avec  <code>cp</code> ou <code>rsync</code>.
<pre>
cp /project/def-someone/you/input.files.* $SLURM_TMPDIR/
</pre>

Cependant, ceci pourrait ne pas fonctionner avec une grande quantité de données ou dans le cas où les données doivent être lues par des processus exécutés sur des nœuds différents.
Pour plus d'information, voir [[Using node-local storage/fr#Tâches_utilisant_plusieurs_nœuds|Tâches utilisant plusieurs nœuds]] et [[Using node-local storage/fr#Espace_disponible|Espace disponible</i>]] ci-dessous.

<span id="Executable_files_and_libraries"></span>
== Bibliothèques et fichiers exécutables ==

Un cas particulier se présente avec du code comme donnée en entrée. Pour exécuter une application, l'interpréteur (<i>shell</i>) démarré par Slurm doit ouvrir au moins un des fichiers de cette application dont la lecture s'effectue généralement sur l'espace de stockage du réseau. Il est rare qu'une application ne soit lancée qu'avec un seul fichier; en effet, la plupart des applications font aussi appel à plusieurs fichiers, par exemple des bibliothèques.

Nous remarquons en particulier que les applications exécutées dans un environnement virtuel [[Python/fr|Python]] génèrent un très grand nombre de transactions I/O, plus qu'il n'en faut d'ailleurs pour créer l'environnement virtuel lui-même. C'est pourquoi notre recommandation est de [[Python/fr#Créer_un_environnement_virtuel_dans vos_tâches|créer un environnement virtuel dans vos tâches]] avec <code>$SLURM_TMPDIR</code>.

<span id="Output"></span>
= Données en sortie =

Les données en sortie doivent être copiées de  <code>$SLURM_TMPDIR</code> vers un espace de stockage permanent avant que la tâche ne se termine. Si une tâche s'arrête par manque de temps, les dernières lignes du script ne seront peut-être pas exécutées. 
Les solutions suivantes sont possibles&nbsp;:
* demander plus de temps pour que l'application puisse être exécutée au complet, quoique ce n'est pas toujours possible;
* placer des [[points de contrôle]] dans l'espace de stockage sur le réseau et pas dans <code>$SLURM_TMPDIR</code>;
* écrire une fonction pour intercepter un signal.

<span id="Signal_trapping"></span>
== Intercepter un signal ==

Vous pouvez demander à Slurm d'envoyer un signal à la tâche peu avant qu'elle n'atteigne sa limite de temps pour que celle-ci copie le résultat de <code>$SLURM_TMPDIR</code> vers l'espace de stockage sur le réseau. Ceci est utile si votre estimé du temps d'exécution est incertain ou que vous enchaînez plusieurs tâches Slurm pour effectuer un long calcul.

Pour ce faire, écrivez une fonction pour l'interpréteur (<i>shell</i>) afin que la copie soit faite et utilisez la commande <code>trap</code> pour associer la fonction avec le signal. Pour plus d'information, voir [https://services.criann.fr/en/services/hpc/cluster-myria/guide/signals-sent-by-slurm/ cette page du CRIANN].

Avec cette méthode, le contenu de <code>$SLURM_TMPDIR</code> ne sera pas conservé si un noeud tombe en panne ou si le système de fichiers réseau connaît un problème.

<span id="Multinode_jobs"></span>
= Tâches utilisant plusieurs nœuds =

Si une tâche est répartie sur plusieurs nœuds et que chacun d'eux doit utiliser les données, <code>cp</code> ou <code>tar -x</code> ne sont pas suffisants.

<span id="Copy_files"></span>
== Copier des fichiers ==

Pour copier un ou plusieurs fichiers sur <code>SLURM_TMPDIR</code> de chacun des nœuds alloués, utilisez
{{Command|srun --ntasks{{=}}$SLURM_NNODES --ntasks-per-node{{=}}1 cp file [files...] $SLURM_TMPDIR}}

<span id="Compressed_archives"></span>
== Archives compressées ==

=== ZIP ===

Pour extraire vers <code>SLURM_TMPDIR</code> :
{{Command|srun --ntasks{{=}}$SLURM_NNODES --ntasks-per-node{{=}}1 unzip archive.zip -d $SLURM_TMPDIR}}

=== Tarball ===
Pour extraire vers <code>SLURM_TMPDIR</code> :
{{Command|srun --ntasks{{=}}$SLURM_NNODES --ntasks-per-node{{=}}1 tar -xvf archive.tar.gz -C $SLURM_TMPDIR}}

<span id="Amount_of_space"></span>
= Espace disponible=

Dans le cas de [[Trillium/fr|Trillium]], <tt>$SLURM_TMPDIR</tt> est implémenté comme <i>RAMdisk</i>; l'espace disponible est donc limité par la mémoire du  nœud, moins la capacité de RAM utilisée par votre application.

Pour les grappes d'usage général, la quantité d'espace disponible dépend de la grappe et du nœud auquel votre tâche est assignée.

{| class="wikitable sortable"
! grappe !! capacité $SLURM_TMPDIR !! capacité des disques
|-
| [[Fir/fr|Fir]]   || 7T || 7.84T
|-
| [[Narval]]  || 800G || 960G, 3.84T
|-
| [[Nibi/fr|Nibi]]  || 3T || 3T, 11T
|-
| [[Rorqual]]  || 375G || 480G, 3.84T
|}

Si votre tâche réserve des [[Advanced_MPI_scheduling/fr#N.C5.93uds_entiers|nœuds entiers]], il est raisonnable de penser qu'autant d'espace $SLURM_TMPDIR sera disponible sur chaque nœud.
Par contre, si votre tâche demande moins qu'un nœud entier, les autres tâches pourront aussi écrire dans le même système de fichiers (mais non dans le même répertoire) et ainsi limiter l'espace disponible pour votre tâche.

À chacun des sites, certains nœuds ont plus d'espace disque local qu'indiqué dans le tableau; voyez la section <i>Caractéristiques des nœuds</i> pour chacune des grappes ([[Fir/fr|Fir]], [[Narval]], [[Nibi/fr|Nibi]], [[Rorqual]]).