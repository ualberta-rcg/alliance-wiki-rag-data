<languages />

= Introduction =

{{Warning
|title=Running notebooks
|content=Jupyter Lab and notebooks are meant for '''short''' interactive tasks such as testing, debugging or quickly visualize data (few minutes). Running longer analysis must be done in an [[Running_jobs#Use_sbatch_to_submit_jobs|non-interactive job (sbatch)]].
See also [[Advanced_Jupyter_configuration#Running_notebooks_as_Python_scripts|how to run notebooks as python scripts below]].
}}

* <b>Project Jupyter</b>: "a non-profit, open-source project, born out of the IPython Project in 2014 as it evolved to support interactive data science and scientific computing across all programming languages."<ref>https://jupyter.org/about.html</ref>
* <b>JupyterLab</b>: "a web-based interactive development environment for notebooks, code, and data. Its flexible interface allows users to configure and arrange workflows in data science, scientific computing, computational journalism, and machine learning. A modular design allows for extensions that expand and enrich functionality."<ref>https://jupyter.org/</ref>

A JupyterLab server should only run on a compute node or on a cloud instance; cluster login nodes are not a good choice because they impose various limits which can stop applications if they consume too much CPU time or memory. In the case of using a compute node, users can reserve compute resources by [[Running_jobs|submitting a job]] that requests a specific number of CPUs (and optionally GPUs), an amount of memory and the run time. <b>In this page, we give detailed instructions on how to configure and submit a JupyterLab job on any national cluster.</b>

If you are instead looking for a preconfigured Jupyter environment, please check the [[Jupyter]] page.

= Installing JupyterLab =

These instructions install JupyterLab with the <code>pip</code> command in a
[[Python#Creating_and_using_a_virtual_environment|Python virtual environment]]:

<ol>
<li>If you do not have an existing Python virtual environment, create one. Then, activate it:
<ol>
<li>Load a Python module, either the default one (as shown below) or
a specific version (see available versions with <code>module avail python</code>):{{Command2
|module load python
}}
<b>If you intend to use RStudio Server</b>, make sure to load <code>rstudio-server</code> first:{{Command2
|module load rstudio-server python
}}
</li><li>Create a new Python virtual environment:{{Command2
|virtualenv --no-download $HOME/jupyter_py3
}}
</li><li>Activate your newly created Python virtual environment:{{Command2
|source $HOME/jupyter_py3/bin/activate
}}
</li>
</ol>
</li><li>Install JupyterLab in your new virtual environment (note: it takes a few minutes):{{Commands2
|prompt=(jupyter_py3) [name@server ~]$
|pip install --no-index --upgrade pip
|pip install --no-index jupyterlab
}}
</li><li>In the virtual environment, create a wrapper script that launches JupyterLab:{{Command2
|prompt=(jupyter_py3) [name@server ~]$
|echo -e '#!/bin/bash\nunset XDG_RUNTIME_DIR\njupyter lab --ip $(hostname -f) --no-browser' > $VIRTUAL_ENV/bin/jupyterlab.sh
}}
</li><li>Finally, make the script executable:{{Command2
|prompt=(jupyter_py3) [name@server ~]$
|chmod u+x $VIRTUAL_ENV/bin/jupyterlab.sh
}}
</li>
</ol>
= Installing extensions =

Extensions allow you to add functionalities and modify the JupyterLab’s user interface. 

=== Jupyter Lmod ===

[https://github.com/cmd-ntrf/jupyter-lmod Jupyter Lmod] is an extension that allows you to interact with environment modules before launching kernels. The extension uses the Lmod's Python interface to accomplish module-related tasks like loading, unloading, saving a collection, etc.

The following commands will install and enable the Jupyter Lmod extension in your environment (note: the third command takes a few minutes to complete):
{{Commands2
|prompt=(jupyter_py3) [name@server ~]$
|module load nodejs
|pip install jupyterlmod
|jupyter labextension install jupyterlab-lmod
}}
Instructions on how to manage loaded <i>software</i> modules in the JupyterLab interface are provided in the [[JupyterHub#JupyterLab|JupyterHub page]].

=== RStudio Server ===

The RStudio Server allows you to develop R codes in an RStudio environment that appears in your web browser in a separate tab. Based on the above [[#Installing_JupyterLab|Installing JupyterLab]] procedure, there are a few differences:

<ol>
<li>Load the <code>rstudio-server</code> module <b>before</b> the <code>python</code> module <b>and before creating a new virtual environment</b>:{{Command2
|module load rstudio-server python
}}
</li><li>Once [[#Installing_JupyterLab|Jupyter Lab is installed in the new virtual environment]], install the Jupyter RSession proxy:{{Commands2
|prompt=(jupyter_py3) [name@server ~]$
|pip install --no-index jupyter-rsession-proxy
}}
</li>
</ol>
All other configuration and usage steps are the same. In JupyterLab, you should see an RStudio application in the <i>Launcher</i> tab.

= Using your installation =

== Activating the environment ==

Make sure the Python virtual environment in which you have installed JupyterLab is activated.
For example, when you log onto the cluster, you have to activate it again with:{{Command2
|source $HOME/jupyter_py3/bin/activate
}}
To verify that your environment is ready, you can get a list of installed <code>jupyter*</code> packages with the following command:{{Command2
|prompt=(jupyter_py3) [name@server ~]$
|pip freeze {{!}} grep jupyter
|result=
jupyter-client==7.1.0+computecanada
jupyter-core==4.9.1+computecanada
jupyter-server==1.9.0+computecanada
jupyterlab==3.1.7+computecanada
jupyterlab-pygments==0.1.2+computecanada
jupyterlab-server==2.3.0+computecanada
}}
== Starting JupyterLab ==

To start a JupyterLab server, submit an interactive job with <code>salloc</code>. Adjust the parameters based on your needs. See [[Running jobs]] for more information.
{{Command2
|prompt=(jupyter_py3) [name@server ~]$
|salloc --time{{=}}1:0:0 --ntasks{{=}}1 --cpus-per-task{{=}}2 --mem-per-cpu{{=}}1024M --account{{=}}def-yourpi srun $VIRTUAL_ENV/bin/jupyterlab.sh
|result=
...
[I 2021-12-06 10:37:14.262 ServerApp] jupyterlab {{!}} extension was successfully linked.
...
[I 2021-12-06 10:37:39.259 ServerApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
[C 2021-12-06 10:37:39.356 ServerApp]

    To access the server, open this file in a browser:
        file:///home/name/.local/share/jupyter/runtime/jpserver-198146-open.html
    Or copy and paste one of these URLs:
        http://node_name.int.cluster.computecanada.ca:8888/lab?token=101c3688298e78ab554ef86d93a196deaf5bcd2728fad4eb
     or http://127.0.0.1:8888/lab?token=101c3688298e78ab554ef86d93a196deaf5bcd2728fad4eb
}}
== Connecting to JupyterLab ==

To access JupyterLab running on a compute node from your web browser, you will need to create an [[SSH tunnelling|SSH tunnel]] from your computer through the cluster since the compute nodes are not directly accessible from the internet.

=== From Linux or macOS ===

On a Linux or macOS system, we recommend using the [https://sshuttle.readthedocs.io sshuttle] Python package.

On your computer, open a new terminal window and create the SSH tunnel with the following <code>sshuttle</code> command where <code><username></code> must be replaced with your Alliance account username, and <code><cluster></code> by the cluster on which you have launched JupyterLab:
{{Command2
|prompt=[name@local ~]$
|sshuttle --dns -Nr <username>@<cluster>.alliancecan.ca
}}
Then, copy and paste the first provided HTTP address into your web browser. In the above <code>salloc</code> example, this would be:
<pre>
http://node_name.int.cluster.alliancecan.ca:8888/lab?token=101c3688298e78ab554ef86d93a196deaf5bcd2728fad4eb
</pre>
=== From Windows ===

An [[SSH tunnelling|SSH tunnel]] can be created from Windows using [[Connecting_with_MobaXTerm | MobaXTerm]] as follows. Note: this procedure also works from any terminal that supports the <code>ssh</code> command.

<ol>
<li>Once JupyterLab is launched on a compute node (see [[#Starting_JupyterLab|Starting JupyterLab]]), you can extract the <code>hostname:port</code> and the <code>token</code> from the first provided HTTP address. For example:<pre>
http://node_name.int.cluster.alliancecan.ca:8888/lab?token=101c368829...2728fad4eb
       └────────────────────┬────────────────────┘           └──────────┬──────────┘
                      hostname:port                                   token
</pre>
</li><li>Open a new Terminal tab in MobaXTerm. In the following command, replace <code><hostname:port></code> with its corresponding value (refer to the above figure), replace <code><username></code> with your Alliance account username, and replace <code><cluster></code> with the cluster on which you have launched JupyterLab:{{Command2
|prompt=[name@local ~]$
|ssh -L 8888:<hostname:port> <username>@<cluster>.alliancecan.ca
}}
</li><li>Open your web browser and go to the following address where <code><token></code> must be replaced with the alphanumerical value extracted from the above figure:<pre>
http://localhost:8888/?token=<token>
</pre>
</li>
</ol>
== Shutting down JupyterLab ==

You can shut down the JupyterLab server before the walltime limit by pressing <b>Ctrl-C twice</b> in the terminal that launched the interactive job.

If you have used MobaXterm to create an SSH tunnel, press <b>Ctrl-D</b> to shut down the tunnel.

= Adding kernels =

It is possible to add kernels for other programming languages, for a different Python version or for a persistent virtual environment that has all required packages and libraries for your project. Refer to [http://jupyter-client.readthedocs.io/en/latest/kernels.html Making kernels for Jupyter] to learn more.

The installation of a new kernel is done in two steps:
# Installation of the packages that will allow the language interpreter to communicate with the Jupyter interface. 
# Creation of a file that will indicate to JupyterLab how to initiate a communication channel with the language interpreter. This file is called a <i>kernel spec file</i>, and it will be saved in a subfolder of <code>~/.local/share/jupyter/kernels</code>.

In the following sections, we provide a few examples of the kernel installation procedure.

== Julia Kernel ==

Prerequisites:
# The configuration of a Julia kernel depends on a Python virtual environment and a <code>kernels</code> folder. If you do not have these dependencies, make sure to follow the first few instructions listed in <b>[[#Python_kernel|Python kernel]]</b> (note: no Python kernel required).
# Since the installation of Julia packages requires an access to the internet, the configuration of a Julia kernel must be done in a <b>[[SSH|remote shell session on a login node]]</b>.

Once you have a Python virtual environment available and activated, you may configure the Julia kernel:

<ol>
<li>Load the <b>[[Julia]]</b> module:{{Command2
|prompt=(jupyter_py3) [name@server ~]$
|module load julia
}}
</li><li>Install IJulia:{{Command2
|prompt=(jupyter_py3) [name@server ~]$
|echo -e 'using Pkg\nPkg.add("IJulia")' {{!}} julia
}}
</li><li><b>Important</b>: start or restart a new JupyterLab session before using the Julia kernel.</li>
</ol>

For more information, see the [https://github.com/JuliaLang/IJulia.jl IJulia documentation].

=== Installing more Julia packages ===

As in the above installation procedure, it is required to install Julia packages from a login node, but the Python virtual environment could be deactivated:

<ol>
<li>Make sure the same Julia module is loaded:{{Command2
|module load julia
}}
</li><li>Install any required package. For example with <code>Glob</code>:{{Command2
|echo -e 'using Pkg\nPkg.add("Glob")' {{!}} julia
}}
</li><li>The newly installed Julia packages should already be usable in a notebook executed by the Julia kernel.</li>
</ol>

== Python kernel ==

In a terminal with an active session on the remote server,
you may configure a [[Python#Creating_and_using_a_virtual_environment|Python virtual environment]] with all the required [[Available_Python_wheels|Python modules]]
and a custom Python kernel for JupyterLab.
Here are the initial steps for the simplest Jupyter configuration
in a new Python virtual environment:

<ol>
<li>If you do not have a Python virtual environment, create one. Then, activate it:</li>
<ol>
<li>Start from a clean Bash environment (this is only required if you are using the Jupyter <i>Terminal</i> via [[JupyterHub]] for the creation and configuration of the Python kernel):{{Command2
|env -i HOME{{=}}$HOME bash -l
}}
</li><li>Load a Python module:{{Command2
|module load python
}}
</li><li>Create a new Python virtual environment:{{Command2
|virtualenv --no-download $HOME/jupyter_py3
}}
</li><li>Activate your newly created Python virtual environment:{{Command2
|source $HOME/jupyter_py3/bin/activate
}}
</ol>
</li><li>Create the common <code>kernels</code> folder, which is used by all kernels you want to install:{{Command2
|prompt=(jupyter_py3) [name@server ~]$
|mkdir -p ~/.local/share/jupyter/kernels
}}
</li><li>Finally, install the Python kernel:
<ol>
<li>Install the <code>ipykernel</code> library:{{Command2
|prompt=(jupyter_py3) [name@server ~]$
|pip install --no-index ipykernel
}}
</li><li>Generate the kernel spec file. Replace <code><unique_name></code> with a name that will uniquely identify your kernel:{{Command2
|prompt=(jupyter_py3) [name@server ~]$
|python -m ipykernel install --user --name <unique_name> --display-name "Python 3.x Kernel"
}}
</li>
</ol>
</li><li><b>Important</b>: start or restart a new JupyterLab session before using the Python kernel.</li>
</ol>

For more information, see the [http://ipython.readthedocs.io/en/stable/install/kernel_install.html ipykernel documentation].

=== Installing more Python libraries ===

Based on the Python virtual environment configured in the previous section:

<ol>
<li>If you are using the Jupyter <i>Terminal</i> via [[JupyterHub]], make sure the activated Python virtual environment is running in a clean Bash environment. See the above section for details.</li>
<li>Install any required library. For example, <code>numpy</code>:{{Command2
|prompt=(jupyter_py3) [name@server ~]$
|pip install --no-index numpy
}}
</li><li>The newly installed Python libraries can now be imported in any notebook using the <code>Python 3.x Kernel</code>.</li>
</ol>

== R Kernel ==

Prerequisites:
# The configuration of an R kernel depends on a Python virtual environment and a <code>kernels</code> folder. If you do not have these dependencies, make sure to follow the first few instructions listed in <b>[[#Python_kernel|Python kernel]]</b> (note: no Python kernel required).
# Since the installation of R packages requires an access to <b>[https://cran.r-project.org/ CRAN]</b>, the configuration of an R kernel must be done in a <b>[[SSH|remote shell session on a login node]]</b>.

Once you have a Python virtual environment available and activated, you may configure the R kernel:

<ol>
<li>Load an R module:{{Command2
|prompt=(jupyter_py3) [name@server ~]$
|module load r/4.1
}}
</li><li>Install the R kernel dependencies (<code>crayon</code>, <code>pbdZMQ</code>, <code>devtools</code>) - this will take up to 10 minutes, and packages should be installed in a local directory like <code>~/R/x86_64-pc-linux-gnu-library/4.1</code>:{{Command2
|prompt=(jupyter_py3) [name@server ~]$
|R --no-save
|result=> install.packages(c('crayon', 'pbdZMQ', 'devtools'), repos{{=}}'http://cran.us.r-project.org')
}}
</li><li>Install the R kernel.{{Command2
|prompt=> 
|devtools::install_github(paste0('IRkernel/', c('repr', 'IRdisplay', 'IRkernel')))
}}
</li><li>Install the R kernel spec file.{{Command2
|prompt=> 
|IRkernel::installspec()
}}
</li><li><b>Important</b>: Start or restart a new JupyterLab session before using the R kernel.</li>
</ol>

For more information, see the [https://irkernel.github.io/docs/ IRkernel documentation].

=== Installing more R packages ===

The installation of R packages cannot be done from notebooks because there is no access to CRAN.
As in the above installation procedure, it is required to install R packages from a login node, but the Python virtual environment could be deactivated:

<ol>
<li>Make sure the same R module is loaded:{{Command2
|module load r/4.1
}}
</li><li>Start the R shell and install any required package. For example with <code>doParallel</code>:{{Command2
|R --no-save
|result=> install.packages('doParallel', repos{{=}}'http://cran.us.r-project.org')
}}
</li><li>The newly installed R packages should already be usable in a notebook executed by the R kernel.</li>
</ol>

= Running notebooks as Python scripts =
For longer run or analysis, we need to submit a [[Running_jobs#Use_sbatch_to_submit_jobs|non-interactive job]]. We then need to convert our notebook to a Python script, create a submission script and submit it.

1. From the login node, create and activate a [[Python#Creating_and_using_a_virtual_environment|virtual environment]], then install <tt>nbconvert</tt> if not already available.
{{Command
|prompt=(venv) [name@server ~]$
|pip install --no-index nbconvert
}}

2. Convert the notebook (or all notebooks) to Python scripts.
{{Command
|prompt=(venv) [name@server ~]$
|jupyter nbconvert --to python mynotebook.ipynb
}}

3. Create your submission script, and submit your job.

In your submission script, run your converted notebook with:
<syntaxhighlight lang="bash">python mynotebook.py</syntaxhighlight>

and submit your non-interactive job:
{{Command
|sbatch my-submit.sh
}}
= References =