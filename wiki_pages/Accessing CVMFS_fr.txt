[[Category:CVMFS]]
<languages />

= Introduction =
Les répertoires de logiciels et de données que nous offrons sont accessibles via le [[CVMFS/fr|CVMFS (''CERN Virtual Machine File System'')]]. Puisque CVMFS est préconfiguré pour vous, vous pouvez utiliser ses répertoires directement.  Pour plus d’information sur notre environnement logiciel, consultez les pages wiki [[Available software/fr|Logiciels disponibles]], [[Utiliser des modules]], [[Python/fr|Python]], [[R/fr|R]] et [[Installing software in your home directory/fr|Installation de logiciels dans votre répertoire /home]].

Nous décrivons ici comment installer et configurer CVMFS sur <i>votre propre ordinateur ou grappe</i>; vous aurez ainsi accès aux mêmes répertoires et environnements logiciels que ceux de nos systèmes.

Nous utilisons comme exemple [https://ssl.linklings.net/conferences/pearc/pearc19_program/views/includes/files/pap139s3-file1.pdf l'environnement logiciel présenté à la conférence PEARC 2019], <i>Practices and Experience in Advanced Research Computing</i>.

= Avant de commencer =

{{Note|Si vous êtes membre de nos équipes techniques, lisez  [https://wiki.alliancecan.ca/wiki/CVMFS_client_setup internal documentation].|reminder}}

{{Panel
  |title=Important
  |panelstyle=callout
  |content=
<b>Veuillez vous abonner au [[Accessing_CVMFS/fr#S'abonner_au_service_d'annonces|service d'annonces]] et remplir ce [https://docs.google.com/forms/d/1eDJEeaMgooVoc4lTkxcZ9y65iR8hl4qeXMOEU9slEck/viewform formulaire d'enregistrement] (en anglais). Si vous utilisez notre environnement logiciel dans votre recherche, veuillez reconnaître notre contribution selon [https://alliancecan.ca/fr/services/calcul-informatique-de-pointe/reconnaissance-de-lalliance ces directives].</b>

Nous vous remercions de mentionner aussi [https://ssl.linklings.net/conferences/pearc/pearc19_program/views/includes/files/pap139s3-file1.pdf notre présentation]. 
}}
== S'abonner au service d'annonces ==
Des modifications peuvent être apportées au CVMFS ou aux logiciels et autre contenu des répertoires que nous fournissions; ces modifications <i>touchent les utilisateurs ou nécessitent l’intervention de l’administrateur</i> pour assurer la continuité du service.

Abonnez-vous à la liste de diffusion cvmfs-announce@gw.alliancecan.ca afin de recevoir les annonces importantes occasionnelles. Vous pouvez vous abonner en écrivant à [mailto:cvmfs-announce+subscribe@gw.alliancecan.ca cvmfs-announce+subscribe@gw.alliancecan.ca] et en répondant au courriel de confirmation qui vous sera envoyé.
Les membres de nos équipes techniques peuvent aussi  [https://groups.google.com/u/0/a/gw.alliancecan.ca/g/cvmfs-announce/s'abonner ici].

== Conditions d’utilisation et soutien technique ==
Le logiciel client CVMFS est fourni par le CERN. Nos répertoires CVMFS sont offerts <b>sans aucune forme de garantie</b>. Votre accès aux répertoires et à l’environnement logiciel peut être limité ou bloqué si vous contrevenez aux [https://ccdb.alliancecan.ca/agreements/user_aup_2021/user_display conditions d’utilisation], ou à notre discrétion.

== Exigences techniques ==
=== Pour un seul système ===
Pour installer CVMFS sur un ordinateur personnel, les exigences sont :
* un système d’exploitation compatible (voir  [[Accessing_CVMFS/fr#Exigences_de_base|Exigences de base]] ci-dessous);
* le [https://en.wikipedia.org/wiki/Filesystem_in_Userspace logiciel libre FUSE];
* environ 50Go d’espace de stockage local pour la cache; une cache plus ou moins grande peut convenir, selon les circonstances. Pour une utilisation restreinte sur un ordinateur personnel, de 5 à 10Go peuvent suffire. Pour plus d'information, voyez le [https://cvmfs.readthedocs.io/en/stable/cpt-configure.html#sct-cache paragraphe <i>Cache Settings</i>].
* l’accès HTTP vers l’internet,
** ou l’accès HTTP vers un ou plusieurs serveurs proxies locaux.

Si ces conditions ne sont pas respectées ou que vous avez d’autres restrictions, considérez cette  [https://cvmfs.readthedocs.io/en/stable/cpt-hpc.html autre option].

=== Pour plusieurs systèmes ===
Pour déployer plusieurs clients CVMFS, par exemple sur une grappe, dans un laboratoire, sur un campus ou autre, chacun des systèmes doit satisfaire les exigences particulières énoncées ci-dessus. Tenez compte en plus des points suivants&nbsp;:
* Pour améliorer la performance, nous vous recommandons de déployer sur votre site des serveurs proxies HTTP avec cache externe (<i>forward caching</i>), particulièrement si vous avez plusieurs clients (voir [https://cvmfs.readthedocs.io/en/stable/cpt-squid.html <i>Setting up a Local Squid Proxy</i>]).
** Le fait de ne disposer que d’un seul serveur proxy est un point individuel de défaillance. Règle générale, vous devriez disposer d’au moins deux serveurs proxies locaux et préférablement un ou plusieurs autres serveurs proxies supplémentaires à proximité pour prendre la relève en cas de problème.
* Nous vous recommandons de synchroniser l’identité du compte de service <code>cvmfs</code> de tous les nœuds clients avec LDAP ou autrement.
** Ceci facilitera l’utilisation d’une [https://cvmfs.readthedocs.io/en/stable/cpt-configure.html#alien-cache cache externe] et devrait être fait <b>avant que CVMFS ne soit installé</b>. Même si l’utilisation d’une cache externe n’est pas prévue, il est plus facile de synchroniser les comptes dès le départ que d’essayer de les changer plus tard.

== Exigences de l’environnement logiciel ==
=== Exigences de base ===
*Système d’exploitation :
** Linux : avec noyau (<i>kernel</i>) 2.6.32 ou plus pour les environnements 2016 et 2018; noyau 3.2 ou plus pour l'environnement 2020,
** Windows : avec la version 2 du sous-système Windows pour Linux (WSL) et une distribution Linux avec noyau 2.6.32 ou plus,
** Mac OS : par instance virtuelle seulement;
* CPU : x86, pour jeux d’instructions SSE3, AVX, AVX2 ou AVX512.

=== Pour une utilisation optimale ===
* Ordonnanceur : Slurm ou Torque, pour une intégration étroite avec les applications OpenMPI;
* Interconnexion réseau : Ethernet, InfiniBand ou OmniPath, pour les applications parallèles;
* GPU : NVidia avec pilotes CUDA 7.5 ou plus, pour les applications CUDA (voir la mise en garde ci-dessous);
* Un minimum de paquets Linux, pour éviter les risques de conflits.

=Installer CVMFS=
Si vous voulez utiliser [https://docs.ansible.com/ansible/latest/index.html Ansible], il existe un [https://github.com/cvmfs-contrib/ansible-cvmfs-client rôle client CVMFS] 
pour la configuration de base d’un client CVMFS avec un système RPM. 
Des [https://github.com/ComputeCanada/CVMFS/tree/main/cvmfs-cloud-scripts scripts] sont disponibles pour installer facilement CVMFS sur une instance infonuagique.
Autrement, suivez les directives ci-dessous.

==Préinstallation==
Nous recommandons que la cache locale CVMFS (située par défaut dans <code>/var/lib/cvmfs</code> et configurable avec le paramètre <code>CVMFS_CACHE_BASE</code>) soit localisée dans un système de fichiers dédié afin que le stockage ne soit pas partagé avec celui d’autres applications. Vous devriez donc avoir ce système de fichiers <b>avant</b> d’installer CVMFS.

== Installation et configuration ==

Voir les directives pour l'installation dans [https://cvmfs.readthedocs.io/en/stable/cpt-quickstart.html#getting-the-software <i>Getting the Software</i>].

Pour configurer un client, voir [https://cvmfs.readthedocs.io/en/stable/cpt-quickstart.html#setting-up-the-software <i>Setting up the Software</i>] et [http://cvmfs.readthedocs.io/en/stable/apx-parameters.html#client-parameters <i>Client parameters</i>].

Le répertoire <code>soft.computecanada.ca</code> est fourni  avec la configuration et vous pouvez ainsi y accéder; vous pouvez l'inclure dans votre configuration client <code>CVMFS_REPOSITORIES</code>.

<span id="Testing"></span>
== Test ==

* Assurez-vous d'abord que les répertoires à tester se trouvent dans <code>CVMFS_REPOSITORIES</code>.
* Validez la configuration.
{{Command|sudo cvmfs_config chksetup}}
* Assurez-vous de régler les avertissements ou erreurs qui pourraient survenir.
* Vérifiez les répertoires.
{{Command|cvmfs_config probe}}

En cas de problème, ce [https://cvmfs.readthedocs.io/en/stable/cpt-quickstart.html#troubleshooting guide de débogage] pourrait vous être utile.

= Activer notre environnement dans votre session =
Une fois que le répertoire CVMFS est monté, notre environnement est activé dans votre session en utilisant le script <code>/cvmfs/soft.computecanada.ca/config/profile/bash.sh</code>. Celui-ci chargera des modules par défaut. Si vous désirez avoir les modules par défaut d'une grappe de calcul en particulier, définissez la variable <code>CC_CLUSTER</code> en choisissant l'une des valeurs suivantes <code>fir</code>, <code>nibi</code> ou <code>rorqual</code>, avant d'utiliser le script. Par exemple: 
{{Command|export CC_CLUSTER{{=}}rorqual}}
{{Command|source /cvmfs/soft.computecanada.ca/config/profile/bash.sh}}

Cette commande <b>n’exécutera rien si votre identifiant d’utilisateur est sous 1000</b>. Il s’agit d’une mesure de sécurité parce que vous ne devriez pas vous attendre à ce que notre environnement logiciel vous procure des privilèges de fonctionnement. Si vous voulez quand même activer notre environnement, vous pouvez d’abord définir la variable <code>FORCE_CC_CVMFS=1</code> avec la commande 
{{Command|export FORCE_CC_CVMFS{{=}}1}}
ou, si vous voulez que notre environnement soit actif en permanence, vous pouvez créer le fichier <code>$HOME/.force_cc_cvmfs</code> dans votre répertoire <code>/home</code> avec
{{Command|touch $HOME/.force_cc_cvmfs}}

Si vous voulez au contraire ne pas activer notre environnement, vous pouvez définir <code>SKIP_CC_CVMFS=1</code> ou créer le fichier <code>$HOME/.skip_cc_cvmfs</code> pour faire en sorte que notre environnement ne soit jamais activé dans cet environnement particulier.

==Personnaliser votre environnement==
Par défaut, certaines fonctionnalités de votre système seront automatiquement détectées par l’activation de notre environnement et les modules requis seront chargés. Ce comportement par défaut peut être modifié par la définition préalable des variables d’environnement particulières décrites ci-dessous. 

=== Variables d’environnement ===
==== <code>CC_CLUSTER</code> ====
Cette variable identifie la grappe. Elle achemine des renseignements au journal du système et définit le comportement à adopter selon la licence du logiciel. Sa valeur par défaut est <code>computecanada</code>. Vous pourriez définir sa valeur pour que les journaux soient identifiés par le nom de votre système.

==== <code>RSNT_ARCH</code> ====
Cette variable identifie le jeu d’instructions CPU pour le système. Par défaut, elle est détectée automatiquement selon <code>/proc/cpuinfo</code>. Vous pouvez cependant utiliser un autre jeu d’instructions en définissant la variable avant d’activer l’environnement. Les jeux possibles sont :
* sse3
* avx
* avx2
* avx512

==== <code>RSNT_INTERCONNECT</code> ====
Cette variable identifie le type d’interconnexion réseau du système. Elle est détectée automatiquement selon la présence de  <code>/sys/module/opa_vnic</code> pour OmniPath ou de <code>/sys/module/ib_core</code> pour InfiniBand. La valeur de remplacement est <code>ethernet</code>. Les valeurs possibles sont :
* omnipath
* infiniband
* ethernet

La valeur de la variable déclenche des options différentes du protocole de transport pour OpenMPI.

==== <code>RSNT_CUDA_DRIVER_VERSION</code> ====

Cette variable est utilisée pour cacher ou montrer des versions de nos modules CUDA selon la version requise pour les pilotes NVidia, [https://docs.nvidia.com/deploy/cuda-compatibility/index.html comme documenté ici]. Si la variable n’est pas définie, les fichiers dans <code>/usr/lib64/nvidia</code> déterminent les versions à cacher ou à montrer. 

Si aucune bibliothèque ne se trouve dans <code>/usr/lib64/nvidia</code>, nous supposons que les versions du pilote sont suffisantes pour CUDA 10.2. Ceci est pour assurer la compatibilité avec les versions antérieures puisque cette fonctionnalité a été rendue disponible à la sortie de CUDA 11.0.

Définir la variable d’environnement <code>RSNT_CUDA_DRIVER_VERSION=0.0</code> cache toutes les versions de CUDA.

==== <code>RSNT_LOCAL_MODULEPATHS</code> ====
{{Warning|title=ATTENTION|content=Cette variable d'environnement doit être utilisée uniquement avec des arbres de modules hiérarchiques qui sont installés via EasyBuild, pour que leur structure soit comme celle de nos modules.

Pour ajouter un chemin local à un arbre plat, placez la commande *après* l'appel du script. 
{{Command|module use --priority 1 /path/to/your/flat/module/tree}}
Ici, <code>--priority 1</code> fera en sorte que votre arbre de modules aura la priorité sur notre arborescence.<br>
Pour que notre arborescence soit prioritaire, utilisez <code>--priority -1</code>
{{Command|module use --priority -1 /path/to/your/flat/module/tree}}
}}
Cette variable identifie les endroits où se trouvent les arbres de modules locaux et les intègre à notre arborescence centrale. Définissez d'abord
{{Command|export RSNT_LOCAL_MODULEPATHS{{=}}/opt/software/easybuild/modules}}
et installez ensuite votre recette [[EasyBuild/fr|EasyBuild]] avec 
{{Command|eb --installpath /opt/software/easybuild <your recipe>.eb}}

Notre nomenclature de modules sera employée pour installer localement votre recette qui sera utilisée dans la hiérarchie des modules. Par exemple, si la recette utilise la chaîne de compilation <code>iompi,2018.3</code>, le module sera disponible après que les modules <code>intel/2018.3</code> et <code>openmpi/3.1.2</code> auront été chargés.

==== <code>LMOD_SYSTEM_DEFAULT_MODULES</code> ====
Cette variable identifie les modules à charger par défaut. Si elle n’est pas définie, notre environnement charge par défaut le module <code>StdEnv</code> qui à son tour charge par défaut une version du compilateur Intel ainsi qu’une version OpenMPI.

==== <code>MODULERCFILE</code> ====
Cette variable est utilisée par Lmod pour définir la version par défaut des modules et alias. Vous pouvez définir votre propre fichier <code>modulerc</code> et l'ajouter à <code>MODULERCFILE</code>. Ceci aura préséance sur ce qui est défini dans notre environnement.

===Chemin des fichiers===
Notre environnement logiciel est conçu pour dépendre le moins possible du système d’exploitation hôte; cependant, il doit reconnaître certains chemins afin de faciliter les interactions avec les outils qui y sont installés. 

==== <code>/opt/software/modulefiles</code> ====
S’il existe, ce chemin est automatiquement ajouté au <code>MODULEPATH</code> par défaut. Ceci permet l’utilisation de notre environnement en conservant les modules installés localement. 

==== <code>$HOME/modulefiles</code> ====
S’il existe, ce chemin est automatiquement ajouté au MODULEPATH par défaut. Ceci permet l’utilisation de notre environnement en permettant l’installation de modules dans les répertoires <code>/home</code>.

==== <code>/opt/software/slurm/bin</code>, <code>/opt/software/bin</code>, <code>/opt/slurm/bin</code> ====
Ces chemins sont automatiquement ajoutés au <code>PATH</code> par défaut. Il permet l'ajout de votre exécutable dans le chemin de recherche.

== Installation locale de logiciels ==
Depuis juin 2020, il est possible d'installer des modules additionnels sur votre grappe de calcul; ces modules seront par la suite reconnus par notre hiérarchie centrale.  Pour plus d'information, voyez la [https://github.com/ComputeCanada/software-stack/issues/11 discussion et l'implémentation à ce sujet]. 

Pour installer des modules additionnels, identifiez d'abord un chemin où installer les logiciels, par exemple <code>/opt/software/easybuild</code>. Assurez-vous que ce dossier existe. Exportez ensuite la variable d'environnement <code>RSNT_LOCAL_MODULEPATHS</code> : 
{{Command|export RSNT_LOCAL_MODULEPATHS{{=}}/opt/software/easybuild/modules}}

Si vous voulez que vos utilisateurs puissent  trouver cette branche, nous vous recommandons de définir cette variable d'environnement dans le profil commun de la grappe. Installez ensuite les paquets logiciels que vous voulez avec [[EasyBuild/fr|EasyBuild]]&nbsp;: 
{{Command|eb --installpath /opt/software/easybuild <some easyconfig recipe>}}

Les logiciels seront installés localement selon notre hiérarchie de nomenclature de modules. Ils seront automatiquement présentés aux utilisateurs quand ils chargent notre compilateur, MPI et CUDA.

=Mises en garde=
==Utilisation de l’environnement logiciel par un administrateur==
Si vous effectuez des opérations de système avec des privilèges ou des opérations en rapport avec CVMFS, [[Accessing_CVMFS/fr#Activer_notre_environnement_dans_votre_session|assurez-vous que votre session <i>ne dépend pas de l’environnement logiciel</i>]]. Par exemple, si vous faites la mise à jour de CVMFS avec YUM pendant que votre session utilise un module Python chargé à partir de CVMFS, YUM pourrait être exécuté en utilisant ce même module et en perdre l’accès par la mise à jour qui serait alors bloquée. De même, si votre environnement dépend de CVMFS et que vous reconfigurez CVMFS de façon à ce que l'accès à CVMFS soit temporairement interrompu, votre session pourrait nuire aux opérations de CVMFS ou être suspendue. Tenant compte de ceci, la mise à jour ou la reconfiguration de CVMFS peut se faire sans interruption de service dans la plupart des cas, car l'opération réussirait en raison de l'absence d'une dépendance circulaire.

== Paquets logiciels non disponibles ==
Nous mettons plusieurs logiciels du commerce à la disposition des utilisateurs, sous condition de la licence de ces produits. Ces logiciels ne sont pas disponibles ailleurs qu’avec nos ressources et vous n’y aurez pas droit d’accès même si vous suivez les directives pour installer et configurer CVMFS. Prenons l’exemple des compilateurs d’Intel et du Portland Group&nbsp;: si les modules pour ces compilateurs sont disponibles, vous n’avez accès qu’aux parties redistribuables, habituellement les objets partagés. Vous pourrez exécuter des applications compilées, mais il ne vous sera pas possible de compiler de nouvelles applications.

== Localisation de CUDA  ==
Dans le cas des paquets CUDA, notre environnement logiciel utilise des bibliothèques de pilotes installées dans  <code>/usr/lib64/nvidia</code>. Cependant, avec certaines plateformes, les récents pilotes NVidia installent les bibliothèques  <code>/usr/lib64</code> dans <code>LD_LIBRARY_PATH</code> sans emprunter de toutes les bibliothèques du système, ce qui pourrait créer des incompatibilités avec notre environnement logiciel; nous vous recommandons donc de créer des liens symboliques dans <code>/usr/lib64/nvidia</code> pour rediriger vers les bibliothèques NVidia qui sont installées. Le script suivant sert à installer les pilotes et créer les liens symboliques (remplacez le numéro de version par celui que vous désirez). 

{{File|name=script_for_redhat.sh|contents=
NVIDIA_DRV_VER="410.48"
nv_pkg=( "nvidia-driver" "nvidia-driver-libs" "nvidia-driver-cuda" "nvidia-driver-cuda-libs" "nvidia-driver-NVML" "nvidia-driver-NvFBCOpenGL" "nvidia-modprobe" )
yum -y install ${nv_pkg[@]/%/-${NVIDIA_DRV_VER{{)}}{{)}}
for file in $(rpm -ql ${nv_pkg[@]}); do
  [ "${file%/*}" = '/usr/lib64' ] && [ ! -d "${file}" ] && \ 
  ln -snf "$file" "${file%/*}/nvidia/${file##*/}"
done
}}

{{File|name=script_for_ubuntu.sh|contents=
#! /usr/bin/bash
# Use the 'major series' number for the package name
VER="570"
nv_pkg=( "libnvidia-cfg1-${VER}-server:amd64"
    		"libnvidia-compute-${VER}-server:amd64"
		"libnvidia-decode-${VER}-server:amd64"
		"libnvidia-encode-${VER}-server:amd64"
		"libnvidia-extra-${VER}-server:amd64"
		"libnvidia-fbc1-${VER}-server:amd64"
		"libnvidia-gl-${VER}-server:amd64"
		"xserver-xorg-video-nvidia-${VER}-server" )
# apt --no-install-recommends install ${nv_pkg[*]}
[ -d "/usr/lib64/nvidia/" ] {{!}}{{!}} mkdir "/usr/lib64/nvidia/"
for file in $(dpkg --listfiles "${nv_pkg[@]}"); do
	[ "${file%/*}" = '/usr/lib/x86_64-linux-gnu' ] && \
	[ ! -d "${file}" ] && \
	ln -snf "$file" "/usr/lib64/nvidia/${file##*/}"
done
}}

== <code>LD_LIBRARY_PATH</code> ==
 is [https://gms.tf/ld_library_path-considered-harmful.html Il n'est pas recommandé d'utiliser <code>LD_LIBRARY_PATH</code>] ce qui pourrait nuire au fonctionnement de l'environnement. 

== Bibliothèques introuvables ==
Puisque nous ne définissons pas <code>LD_LIBRARY_PATH</code> et que nos bibliothèques ne sont pas installées dans des localisations Linux par défaut, les paquets binaires comme Anaconda ont souvent de la difficulté à trouver les bibliothèques dont ils ont besoin. Consultez notre [[Installing_software_in_your_home_directory/fr#Installer_des_paquets_binaires|documentation sur l’installation de paquets binaires]].

== dbus ==
Pour certaines applications, <code>dbus</code> doit être installé localement, sur le système d’exploitation hôte.